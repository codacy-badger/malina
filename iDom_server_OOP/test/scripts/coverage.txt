/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/ftplibpp/ftplib.h:
    1|       |/***************************************************************************
    2|       |                          ftplib.h  -  description
    3|       |                             -------------------
    4|       |    begin                : Son Jul 27 2003
    5|       |    copyright            : (C) 2013 by magnus kulke
    6|       |    email                : mkulke@gmail.com
    7|       | ***************************************************************************/
    8|       |
    9|       |/***************************************************************************
   10|       | *                                                                         *
   11|       | *   This program is free software; you can redistribute it and/or modify  *
   12|       | *   it under the terms of the GNU Lesser General Public License as        * 
   13|       | *   published by the Free Software Foundation; either version 2.1 of the  *
   14|       | *   License, or (at your option) any later version.                       *
   15|       | *                                                                         *
   16|       | ***************************************************************************/
   17|       | 
   18|       |/***************************************************************************
   19|       | * Note: ftplib, on which ftplibpp was originally based upon used to be    *
   20|       | * licensed as GPL 2.0 software, as of Jan. 26th 2013 its author Thomas    *
   21|       | * Pfau allowed the distribution of ftplib via LGPL. Thus the license of   *
   22|       | * ftplibpp changed aswell.                                                *
   23|       | ***************************************************************************/
   24|       | 
   25|       |#ifndef FTPLIB_H
   26|       |#define FTPLIB_H
   27|       |
   28|       |#if defined(_WIN32)
   29|       |
   30|       |#if BUILDING_DLL
   31|       |# define DLLIMPORT __declspec (dllexport)
   32|       |#else /* Not BUILDING_DLL */
   33|       |# define DLLIMPORT __declspec (dllimport)
   34|       |#endif /* Not BUILDING_DLL */
   35|       |
   36|       |#include <time.h>
   37|       |#endif
   38|       |
   39|       |#ifndef _WIN32
   40|       |#include <unistd.h>
   41|       |#include <sys/time.h>
   42|       |#endif
   43|       |
   44|       |#ifdef NOLFS
   45|       |#define off64_t long
   46|       |#endif
   47|       |
   48|       |#if defined(__APPLE__)
   49|       |#define off64_t __darwin_off_t
   50|       |#define fseeko64 fseeko
   51|       |#define fopen64 fopen
   52|       |#endif
   53|       |
   54|       |#ifndef NOSSL
   55|       |#include <openssl/ssl.h>
   56|       |#endif
   57|       |
   58|       |#ifndef _FTPLIB_SSL_CLIENT_METHOD_
   59|       |#define _FTPLIB_SSL_CLIENT_METHOD_ TLSv1_2_client_method
   60|       |#endif//_FTPLIB_SSL_CLIENT_METHOD_
   61|       |
   62|       |using namespace std;
   63|       |
   64|       |/**
   65|       |  *@author mkulke
   66|       |  */
   67|       |
   68|       |typedef int (*FtpCallbackXfer)(off64_t xfered, void *arg);
   69|       |typedef int (*FtpCallbackIdle)(void *arg);
   70|       |typedef void (*FtpCallbackLog)(char *str, void* arg, bool out);
   71|       |
   72|       |#ifndef NOSSL
   73|       |typedef bool (*FtpCallbackCert)(void *arg, X509 *cert);
   74|       |#endif
   75|       |
   76|       |struct ftphandle {
   77|       |	char *cput,*cget;
   78|       |	int handle;
   79|       |	int cavail,cleft;
   80|       |	char *buf;
   81|       |	int dir;
   82|       |	ftphandle *ctrl;
   83|       |	int cmode;
   84|       |	struct timeval idletime;
   85|       |	FtpCallbackXfer xfercb;
   86|       |	FtpCallbackIdle idlecb;
   87|       |	FtpCallbackLog logcb;
   88|       |	void *cbarg;
   89|       |	off64_t xfered;
   90|       |	off64_t cbbytes;
   91|       |	off64_t xfered1;
   92|       |	char response[256];
   93|       |#ifndef NOSSL
   94|       |	SSL* ssl;
   95|       |	SSL_CTX* ctx;
   96|       |	BIO* sbio;
   97|       |	int tlsctrl;
   98|       |	int tlsdata;
   99|       |	FtpCallbackCert certcb;
  100|       |#endif
  101|       |	off64_t offset;
  102|       |	bool correctpasv;
  103|       |};
  104|       |
  105|       |#if defined(_WIN32)  
  106|       |class DLLIMPORT ftplib {
  107|       |#else
  108|       |class ftplib {
  109|       |#endif
  110|       |public:
  111|       |
  112|       |	enum accesstype
  113|       |	{
  114|       |		dir = 1,
  115|       |		dirverbose,
  116|       |		fileread,
  117|       |		filewrite,
  118|       |		filereadappend,
  119|       |		filewriteappend
  120|       |	}; 
  121|       |
  122|       |	enum transfermode
  123|       |	{
  124|       |		ascii = 'A',
  125|       |		image = 'I'
  126|       |	};
  127|       |
  128|       |	enum connmode
  129|       |	{
  130|       |		pasv = 1,
  131|       |		port
  132|       |	};
  133|       |
  134|       |	enum fxpmethod
  135|       |	{
  136|       |		defaultfxp = 0,
  137|       |        alternativefxp
  138|       |	};
  139|       |
  140|       |    enum dataencryption
  141|       |    {
  142|       |        unencrypted = 0,
  143|       |        secure
  144|       |    };
  145|       |
  146|       |	ftplib();
  147|       |	~ftplib();
  148|       |    char* LastResponse();
  149|       |    int Connect(const char *host);
  150|       |    int Login(const char *user, const char *pass);
  151|       |    int Site(const char *cmd);
  152|       |    int Raw(const char *cmd);
  153|       |    int SysType(char *buf, int max);
  154|       |    int Mkdir(const char *path);
  155|       |    int Chdir(const char *path);
  156|       |    int Cdup();
  157|       |    int Rmdir(const char *path);
  158|       |    int Pwd(char *path, int max);
  159|       |    int Nlst(const char *outputfile, const char *path);
  160|       |    int Dir(const char *outputfile, const char *path);
  161|       |    int Size(const char *path, int *size, transfermode mode);
  162|       |    int ModDate(const char *path, char *dt, int max);
  163|       |    int Get(const char *outputfile, const char *path, transfermode mode, off64_t offset = 0);
  164|       |    int Put(const char *inputfile, const char *path, transfermode mode, off64_t offset = 0);
  165|       |    int Rename(const char *src, const char *dst);
  166|       |    int Delete(const char *path);
  167|       |#ifndef NOSSL    
  168|       |	int SetDataEncryption(dataencryption enc);
  169|       |    int NegotiateEncryption();
  170|       |	void SetCallbackCertFunction(FtpCallbackCert pointer);
  171|       |#endif
  172|       |    int Quit();
  173|       |    void SetCallbackIdleFunction(FtpCallbackIdle pointer);
  174|       |    void SetCallbackLogFunction(FtpCallbackLog pointer);
  175|       |	void SetCallbackXferFunction(FtpCallbackXfer pointer);
  176|       |	void SetCallbackArg(void *arg);
  177|       |    void SetCallbackBytes(off64_t bytes);
  178|      0|	void SetCorrectPasv(bool b) { mp_ftphandle->correctpasv = b; };
  179|       |    void SetCallbackIdletime(int time);
  180|       |    void SetConnmode(connmode mode);
  181|       |    static int Fxp(ftplib* src, ftplib* dst, const char *pathSrc, const char *pathDst, transfermode mode, fxpmethod method);
  182|       |    
  183|       |	ftphandle* RawOpen(const char *path, accesstype type, transfermode mode);
  184|       |	int RawClose(ftphandle* handle); 
  185|       |	int RawWrite(void* buf, int len, ftphandle* handle);
  186|       |	int RawRead(void* buf, int max, ftphandle* handle); 
  187|       |
  188|       |private:
  189|       |    ftphandle* mp_ftphandle;
  190|       |
  191|       |    int FtpXfer(const char *localfile, const char *path, ftphandle *nControl, accesstype type, transfermode mode);
  192|       |    int FtpOpenPasv(ftphandle *nControl, ftphandle **nData, transfermode mode, int dir, char *cmd);
  193|       |    int FtpSendCmd(const char *cmd, char expresp, ftphandle *nControl);
  194|       |    int FtpAcceptConnection(ftphandle *nData, ftphandle *nControl);
  195|       |    int FtpOpenPort(ftphandle *nControl, ftphandle **nData, transfermode mode, int dir, char *cmd);
  196|       |    int FtpRead(void *buf, int max, ftphandle *nData);
  197|       |    int FtpWrite(void *buf, int len, ftphandle *nData);
  198|       |    int FtpAccess(const char *path, accesstype type, transfermode mode, ftphandle *nControl, ftphandle **nData);
  199|       |    int FtpClose(ftphandle *nData);
  200|       |	
  201|       |	int socket_wait(ftphandle *ctl);
  202|       |    int readline(char *buf,int max,ftphandle *ctl);
  203|       |    int writeline(char *buf, int len, ftphandle *nData);
  204|       |    int readresp(char c, ftphandle *nControl);
  205|       |	
  206|       |	void ClearHandle();
  207|       |	int CorrectPasvResponse(unsigned char *v);
  208|       |};
  209|       |
  210|       |#endif

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/json2/json.hpp:
    1|       |/*
    2|       |    __ _____ _____ _____
    3|       | __|  |   __|     |   | |  JSON for Modern C++
    4|       ||  |  |__   |  |  | | | |  version 3.4.0
    5|       ||_____|_____|_____|_|___|  https://github.com/nlohmann/json
    6|       |
    7|       |Licensed under the MIT License <http://opensource.org/licenses/MIT>.
    8|       |SPDX-License-Identifier: MIT
    9|       |Copyright (c) 2013-2018 Niels Lohmann <http://nlohmann.me>.
   10|       |
   11|       |Permission is hereby  granted, free of charge, to any  person obtaining a copy
   12|       |of this software and associated  documentation files (the "Software"), to deal
   13|       |in the Software  without restriction, including without  limitation the rights
   14|       |to  use, copy,  modify, merge,  publish, distribute,  sublicense, and/or  sell
   15|       |copies  of  the Software,  and  to  permit persons  to  whom  the Software  is
   16|       |furnished to do so, subject to the following conditions:
   17|       |
   18|       |The above copyright notice and this permission notice shall be included in all
   19|       |copies or substantial portions of the Software.
   20|       |
   21|       |THE SOFTWARE  IS PROVIDED "AS  IS", WITHOUT WARRANTY  OF ANY KIND,  EXPRESS OR
   22|       |IMPLIED,  INCLUDING BUT  NOT  LIMITED TO  THE  WARRANTIES OF  MERCHANTABILITY,
   23|       |FITNESS FOR  A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT  SHALL THE
   24|       |AUTHORS  OR COPYRIGHT  HOLDERS  BE  LIABLE FOR  ANY  CLAIM,  DAMAGES OR  OTHER
   25|       |LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   26|       |OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE
   27|       |SOFTWARE.
   28|       |*/
   29|       |
   30|       |#ifndef NLOHMANN_JSON_HPP
   31|       |#define NLOHMANN_JSON_HPP
   32|       |
   33|       |#define NLOHMANN_JSON_VERSION_MAJOR 3
   34|       |#define NLOHMANN_JSON_VERSION_MINOR 4
   35|       |#define NLOHMANN_JSON_VERSION_PATCH 0
   36|       |
   37|       |#include <algorithm> // all_of, find, for_each
   38|       |#include <cassert> // assert
   39|       |#include <ciso646> // and, not, or
   40|       |#include <cstddef> // nullptr_t, ptrdiff_t, size_t
   41|       |#include <functional> // hash, less
   42|       |#include <initializer_list> // initializer_list
   43|       |#include <iosfwd> // istream, ostream
   44|       |#include <iterator> // iterator_traits, random_access_iterator_tag
   45|       |#include <numeric> // accumulate
   46|       |#include <string> // string, stoi, to_string
   47|       |#include <utility> // declval, forward, move, pair, swap
   48|       |
   49|       |// #include <nlohmann/json_fwd.hpp>
   50|       |#ifndef NLOHMANN_JSON_FWD_HPP
   51|       |#define NLOHMANN_JSON_FWD_HPP
   52|       |
   53|       |#include <cstdint> // int64_t, uint64_t
   54|       |#include <map> // map
   55|       |#include <memory> // allocator
   56|       |#include <string> // string
   57|       |#include <vector> // vector
   58|       |
   59|       |/*!
   60|       |@brief namespace for Niels Lohmann
   61|       |@see https://github.com/nlohmann
   62|       |@since version 1.0.0
   63|       |*/
   64|       |namespace nlohmann
   65|       |{
   66|       |/*!
   67|       |@brief default JSONSerializer template argument
   68|       |
   69|       |This serializer ignores the template arguments and uses ADL
   70|       |([argument-dependent lookup](https://en.cppreference.com/w/cpp/language/adl))
   71|       |for serialization.
   72|       |*/
   73|       |template<typename T = void, typename SFINAE = void>
   74|       |struct adl_serializer;
   75|       |
   76|       |template<template<typename U, typename V, typename... Args> class ObjectType =
   77|       |         std::map,
   78|       |         template<typename U, typename... Args> class ArrayType = std::vector,
   79|       |         class StringType = std::string, class BooleanType = bool,
   80|       |         class NumberIntegerType = std::int64_t,
   81|       |         class NumberUnsignedType = std::uint64_t,
   82|       |         class NumberFloatType = double,
   83|       |         template<typename U> class AllocatorType = std::allocator,
   84|       |         template<typename T, typename SFINAE = void> class JSONSerializer =
   85|       |         adl_serializer>
   86|       |class basic_json;
   87|       |
   88|       |/*!
   89|       |@brief JSON Pointer
   90|       |
   91|       |A JSON pointer defines a string syntax for identifying a specific value
   92|       |within a JSON document. It can be used with functions `at` and
   93|       |`operator[]`. Furthermore, JSON pointers are the base for JSON patches.
   94|       |
   95|       |@sa [RFC 6901](https://tools.ietf.org/html/rfc6901)
   96|       |
   97|       |@since version 2.0.0
   98|       |*/
   99|       |template<typename BasicJsonType>
  100|       |class json_pointer;
  101|       |
  102|       |/*!
  103|       |@brief default JSON class
  104|       |
  105|       |This type is the default specialization of the @ref basic_json class which
  106|       |uses the standard template types.
  107|       |
  108|       |@since version 1.0.0
  109|       |*/
  110|       |using json = basic_json<>;
  111|       |}  // namespace nlohmann
  112|       |
  113|       |#endif
  114|       |
  115|       |// #include <nlohmann/detail/macro_scope.hpp>
  116|       |
  117|       |
  118|       |// This file contains all internal macro definitions
  119|       |// You MUST include macro_unscope.hpp at the end of json.hpp to undef all of them
  120|       |
  121|       |// exclude unsupported compilers
  122|       |#if !defined(JSON_SKIP_UNSUPPORTED_COMPILER_CHECK)
  123|       |    #if defined(__clang__)
  124|       |        #if (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__) < 30400
  125|       |            #error "unsupported Clang version - see https://github.com/nlohmann/json#supported-compilers"
  126|       |        #endif
  127|       |    #elif defined(__GNUC__) && !(defined(__ICC) || defined(__INTEL_COMPILER))
  128|       |        #if (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) < 40800
  129|       |            #error "unsupported GCC version - see https://github.com/nlohmann/json#supported-compilers"
  130|       |        #endif
  131|       |    #endif
  132|       |#endif
  133|       |
  134|       |// disable float-equal warnings on GCC/clang
  135|       |#if defined(__clang__) || defined(__GNUC__) || defined(__GNUG__)
  136|       |    #pragma GCC diagnostic push
  137|       |    #pragma GCC diagnostic ignored "-Wfloat-equal"
  138|       |#endif
  139|       |
  140|       |// disable documentation warnings on clang
  141|       |#if defined(__clang__)
  142|       |    #pragma GCC diagnostic push
  143|       |    #pragma GCC diagnostic ignored "-Wdocumentation"
  144|       |#endif
  145|       |
  146|       |// allow for portable deprecation warnings
  147|       |#if defined(__clang__) || defined(__GNUC__) || defined(__GNUG__)
  148|       |    #define JSON_DEPRECATED __attribute__((deprecated))
  149|       |#elif defined(_MSC_VER)
  150|       |    #define JSON_DEPRECATED __declspec(deprecated)
  151|       |#else
  152|       |    #define JSON_DEPRECATED
  153|       |#endif
  154|       |
  155|       |// allow to disable exceptions
  156|       |#if (defined(__cpp_exceptions) || defined(__EXCEPTIONS) || defined(_CPPUNWIND)) && !defined(JSON_NOEXCEPTION)
  157|      1|    #define JSON_THROW(exception) throw exception
  158|  13.9k|    #define JSON_TRY try
  159|       |    #define JSON_CATCH(exception) catch(exception)
  160|       |    #define JSON_INTERNAL_CATCH(exception) catch(exception)
  161|       |#else
  162|       |    #define JSON_THROW(exception) std::abort()
  163|       |    #define JSON_TRY if(true)
  164|       |    #define JSON_CATCH(exception) if(false)
  165|       |    #define JSON_INTERNAL_CATCH(exception) if(false)
  166|       |#endif
  167|       |
  168|       |// override exception macros
  169|       |#if defined(JSON_THROW_USER)
  170|       |    #undef JSON_THROW
  171|       |    #define JSON_THROW JSON_THROW_USER
  172|       |#endif
  173|       |#if defined(JSON_TRY_USER)
  174|       |    #undef JSON_TRY
  175|       |    #define JSON_TRY JSON_TRY_USER
  176|       |#endif
  177|       |#if defined(JSON_CATCH_USER)
  178|       |    #undef JSON_CATCH
  179|       |    #define JSON_CATCH JSON_CATCH_USER
  180|       |    #undef JSON_INTERNAL_CATCH
  181|       |    #define JSON_INTERNAL_CATCH JSON_CATCH_USER
  182|       |#endif
  183|       |#if defined(JSON_INTERNAL_CATCH_USER)
  184|       |    #undef JSON_INTERNAL_CATCH
  185|       |    #define JSON_INTERNAL_CATCH JSON_INTERNAL_CATCH_USER
  186|       |#endif
  187|       |
  188|       |// manual branch prediction
  189|       |#if defined(__clang__) || defined(__GNUC__) || defined(__GNUG__)
  190|  9.39M|    #define JSON_LIKELY(x)      __builtin_expect(!!(x), 1)
  191|  1.22M|    #define JSON_UNLIKELY(x)    __builtin_expect(!!(x), 0)
  192|       |#else
  193|       |    #define JSON_LIKELY(x)      x
  194|       |    #define JSON_UNLIKELY(x)    x
  195|       |#endif
  196|       |
  197|       |// C++ language standard detection
  198|       |#if (defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_HAS_CXX17) && _HAS_CXX17 == 1) // fix for issue #464
  199|       |    #define JSON_HAS_CPP_17
  200|       |    #define JSON_HAS_CPP_14
  201|       |#elif (defined(__cplusplus) && __cplusplus >= 201402L) || (defined(_HAS_CXX14) && _HAS_CXX14 == 1)
  202|       |    #define JSON_HAS_CPP_14
  203|       |#endif
  204|       |
  205|       |/*!
  206|       |@brief macro to briefly define a mapping between an enum and JSON
  207|       |@def NLOHMANN_JSON_SERIALIZE_ENUM
  208|       |@since version 3.4.0
  209|       |*/
  210|       |#define NLOHMANN_JSON_SERIALIZE_ENUM(ENUM_TYPE, ...)                                           \
  211|       |    template<typename BasicJsonType>                                                           \
  212|       |    inline void to_json(BasicJsonType& j, const ENUM_TYPE& e)                                  \
  213|       |    {                                                                                          \
  214|       |        static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE " must be an enum!");         \
  215|       |        static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__;                    \
  216|       |        auto it = std::find_if(std::begin(m), std::end(m),                                     \
  217|       |                               [e](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool \
  218|       |        {                                                                                      \
  219|       |            return ej_pair.first == e;                                                         \
  220|       |        });                                                                                    \
  221|       |        j = ((it != std::end(m)) ? it : std::begin(m))->second;                                \
  222|       |    }                                                                                          \
  223|       |    template<typename BasicJsonType>                                                           \
  224|       |    inline void from_json(const BasicJsonType& j, ENUM_TYPE& e)                                \
  225|       |    {                                                                                          \
  226|       |        static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE " must be an enum!");         \
  227|       |        static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__;                    \
  228|       |        auto it = std::find_if(std::begin(m), std::end(m),                                     \
  229|       |                               [j](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool \
  230|       |        {                                                                                      \
  231|       |            return ej_pair.second == j;                                                        \
  232|       |        });                                                                                    \
  233|       |        e = ((it != std::end(m)) ? it : std::begin(m))->first;                                 \
  234|       |    }
  235|       |
  236|       |// Ugly macros to avoid uglier copy-paste when specializing basic_json. They
  237|       |// may be removed in the future once the class is split.
  238|       |
  239|       |#define NLOHMANN_BASIC_JSON_TPL_DECLARATION                                \
  240|       |    template<template<typename, typename, typename...> class ObjectType,   \
  241|       |             template<typename, typename...> class ArrayType,              \
  242|       |             class StringType, class BooleanType, class NumberIntegerType, \
  243|       |             class NumberUnsignedType, class NumberFloatType,              \
  244|       |             template<typename> class AllocatorType,                       \
  245|       |             template<typename, typename = void> class JSONSerializer>
  246|       |
  247|       |#define NLOHMANN_BASIC_JSON_TPL                                            \
  248|       |    basic_json<ObjectType, ArrayType, StringType, BooleanType,             \
  249|       |    NumberIntegerType, NumberUnsignedType, NumberFloatType,                \
  250|       |    AllocatorType, JSONSerializer>
  251|       |
  252|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
  253|       |
  254|       |
  255|       |#include <ciso646> // not
  256|       |#include <cstddef> // size_t
  257|       |#include <type_traits> // conditional, enable_if, false_type, integral_constant, is_constructible, is_integral, is_same, remove_cv, remove_reference, true_type
  258|       |
  259|       |namespace nlohmann
  260|       |{
  261|       |namespace detail
  262|       |{
  263|       |// alias templates to reduce boilerplate
  264|       |template<bool B, typename T = void>
  265|       |using enable_if_t = typename std::enable_if<B, T>::type;
  266|       |
  267|       |template<typename T>
  268|       |using uncvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;
  269|       |
  270|       |// implementation of C++14 index_sequence and affiliates
  271|       |// source: https://stackoverflow.com/a/32223343
  272|       |template<std::size_t... Ints>
  273|       |struct index_sequence
  274|       |{
  275|       |    using type = index_sequence;
  276|       |    using value_type = std::size_t;
  277|       |    static constexpr std::size_t size() noexcept
  278|       |    {
  279|       |        return sizeof...(Ints);
  280|       |    }
  281|       |};
  282|       |
  283|       |template<class Sequence1, class Sequence2>
  284|       |struct merge_and_renumber;
  285|       |
  286|       |template<std::size_t... I1, std::size_t... I2>
  287|       |struct merge_and_renumber<index_sequence<I1...>, index_sequence<I2...>>
  288|       |        : index_sequence < I1..., (sizeof...(I1) + I2)... > {};
  289|       |
  290|       |template<std::size_t N>
  291|       |struct make_index_sequence
  292|       |    : merge_and_renumber < typename make_index_sequence < N / 2 >::type,
  293|       |      typename make_index_sequence < N - N / 2 >::type > {};
  294|       |
  295|       |template<> struct make_index_sequence<0> : index_sequence<> {};
  296|       |template<> struct make_index_sequence<1> : index_sequence<0> {};
  297|       |
  298|       |template<typename... Ts>
  299|       |using index_sequence_for = make_index_sequence<sizeof...(Ts)>;
  300|       |
  301|       |// dispatch utility (taken from ranges-v3)
  302|       |template<unsigned N> struct priority_tag : priority_tag < N - 1 > {};
  303|       |template<> struct priority_tag<0> {};
  304|       |
  305|       |// taken from ranges-v3
  306|       |template<typename T>
  307|       |struct static_const
  308|       |{
  309|       |    static constexpr T value{};
  310|       |};
  311|       |
  312|       |template<typename T>
  313|       |constexpr T static_const<T>::value;
  314|       |}  // namespace detail
  315|       |}  // namespace nlohmann
  316|       |
  317|       |// #include <nlohmann/detail/meta/type_traits.hpp>
  318|       |
  319|       |
  320|       |#include <ciso646> // not
  321|       |#include <limits> // numeric_limits
  322|       |#include <type_traits> // false_type, is_constructible, is_integral, is_same, true_type
  323|       |#include <utility> // declval
  324|       |
  325|       |// #include <nlohmann/json_fwd.hpp>
  326|       |
  327|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
  328|       |
  329|       |// #include <nlohmann/detail/meta/detected.hpp>
  330|       |
  331|       |
  332|       |#include <type_traits>
  333|       |
  334|       |// #include <nlohmann/detail/meta/void_t.hpp>
  335|       |
  336|       |
  337|       |namespace nlohmann
  338|       |{
  339|       |namespace detail
  340|       |{
  341|       |template <typename ...Ts> struct make_void
  342|       |{
  343|       |    using type = void;
  344|       |};
  345|       |template <typename ...Ts> using void_t = typename make_void<Ts...>::type;
  346|       |} // namespace detail
  347|       |}  // namespace nlohmann
  348|       |
  349|       |
  350|       |// http://en.cppreference.com/w/cpp/experimental/is_detected
  351|       |namespace nlohmann
  352|       |{
  353|       |namespace detail
  354|       |{
  355|       |struct nonesuch
  356|       |{
  357|       |    nonesuch() = delete;
  358|       |    ~nonesuch() = delete;
  359|       |    nonesuch(nonesuch const&) = delete;
  360|       |    void operator=(nonesuch const&) = delete;
  361|       |};
  362|       |
  363|       |template <class Default,
  364|       |          class AlwaysVoid,
  365|       |          template <class...> class Op,
  366|       |          class... Args>
  367|       |struct detector
  368|       |{
  369|       |    using value_t = std::false_type;
  370|       |    using type = Default;
  371|       |};
  372|       |
  373|       |template <class Default, template <class...> class Op, class... Args>
  374|       |struct detector<Default, void_t<Op<Args...>>, Op, Args...>
  375|       |{
  376|       |    using value_t = std::true_type;
  377|       |    using type = Op<Args...>;
  378|       |};
  379|       |
  380|       |template <template <class...> class Op, class... Args>
  381|       |using is_detected = typename detector<nonesuch, void, Op, Args...>::value_t;
  382|       |
  383|       |template <template <class...> class Op, class... Args>
  384|       |using detected_t = typename detector<nonesuch, void, Op, Args...>::type;
  385|       |
  386|       |template <class Default, template <class...> class Op, class... Args>
  387|       |using detected_or = detector<Default, void, Op, Args...>;
  388|       |
  389|       |template <class Default, template <class...> class Op, class... Args>
  390|       |using detected_or_t = typename detected_or<Default, Op, Args...>::type;
  391|       |
  392|       |template <class Expected, template <class...> class Op, class... Args>
  393|       |using is_detected_exact = std::is_same<Expected, detected_t<Op, Args...>>;
  394|       |
  395|       |template <class To, template <class...> class Op, class... Args>
  396|       |using is_detected_convertible =
  397|       |    std::is_convertible<detected_t<Op, Args...>, To>;
  398|       |}  // namespace detail
  399|       |}  // namespace nlohmann
  400|       |
  401|       |// #include <nlohmann/detail/macro_scope.hpp>
  402|       |
  403|       |
  404|       |namespace nlohmann
  405|       |{
  406|       |/*!
  407|       |@brief detail namespace with internal helper functions
  408|       |
  409|       |This namespace collects functions that should not be exposed,
  410|       |implementations of some @ref basic_json methods, and meta-programming helpers.
  411|       |
  412|       |@since version 2.1.0
  413|       |*/
  414|       |namespace detail
  415|       |{
  416|       |/////////////
  417|       |// helpers //
  418|       |/////////////
  419|       |
  420|       |// Note to maintainers:
  421|       |//
  422|       |// Every trait in this file expects a non CV-qualified type.
  423|       |// The only exceptions are in the 'aliases for detected' section
  424|       |// (i.e. those of the form: decltype(T::member_function(std::declval<T>())))
  425|       |//
  426|       |// In this case, T has to be properly CV-qualified to constraint the function arguments
  427|       |// (e.g. to_json(BasicJsonType&, const T&))
  428|       |
  429|       |template<typename> struct is_basic_json : std::false_type {};
  430|       |
  431|       |NLOHMANN_BASIC_JSON_TPL_DECLARATION
  432|       |struct is_basic_json<NLOHMANN_BASIC_JSON_TPL> : std::true_type {};
  433|       |
  434|       |//////////////////////////
  435|       |// aliases for detected //
  436|       |//////////////////////////
  437|       |
  438|       |template <typename T>
  439|       |using mapped_type_t = typename T::mapped_type;
  440|       |
  441|       |template <typename T>
  442|       |using key_type_t = typename T::key_type;
  443|       |
  444|       |template <typename T>
  445|       |using value_type_t = typename T::value_type;
  446|       |
  447|       |template <typename T>
  448|       |using difference_type_t = typename T::difference_type;
  449|       |
  450|       |template <typename T>
  451|       |using pointer_t = typename T::pointer;
  452|       |
  453|       |template <typename T>
  454|       |using reference_t = typename T::reference;
  455|       |
  456|       |template <typename T>
  457|       |using iterator_category_t = typename T::iterator_category;
  458|       |
  459|       |template <typename T>
  460|       |using iterator_t = typename T::iterator;
  461|       |
  462|       |template <typename T, typename... Args>
  463|       |using to_json_function = decltype(T::to_json(std::declval<Args>()...));
  464|       |
  465|       |template <typename T, typename... Args>
  466|       |using from_json_function = decltype(T::from_json(std::declval<Args>()...));
  467|       |
  468|       |template <typename T, typename U>
  469|       |using get_template_function = decltype(std::declval<T>().template get<U>());
  470|       |
  471|       |// trait checking if JSONSerializer<T>::from_json(json const&, udt&) exists
  472|       |template <typename BasicJsonType, typename T, typename = void>
  473|       |struct has_from_json : std::false_type {};
  474|       |
  475|       |template <typename BasicJsonType, typename T>
  476|       |struct has_from_json<BasicJsonType, T,
  477|       |           enable_if_t<not is_basic_json<T>::value>>
  478|       |{
  479|       |    using serializer = typename BasicJsonType::template json_serializer<T, void>;
  480|       |
  481|       |    static constexpr bool value =
  482|       |        is_detected_exact<void, from_json_function, serializer,
  483|       |        const BasicJsonType&, T&>::value;
  484|       |};
  485|       |
  486|       |// This trait checks if JSONSerializer<T>::from_json(json const&) exists
  487|       |// this overload is used for non-default-constructible user-defined-types
  488|       |template <typename BasicJsonType, typename T, typename = void>
  489|       |struct has_non_default_from_json : std::false_type {};
  490|       |
  491|       |template<typename BasicJsonType, typename T>
  492|       |struct has_non_default_from_json<BasicJsonType, T, enable_if_t<not is_basic_json<T>::value>>
  493|       |{
  494|       |    using serializer = typename BasicJsonType::template json_serializer<T, void>;
  495|       |
  496|       |    static constexpr bool value =
  497|       |        is_detected_exact<T, from_json_function, serializer,
  498|       |        const BasicJsonType&>::value;
  499|       |};
  500|       |
  501|       |// This trait checks if BasicJsonType::json_serializer<T>::to_json exists
  502|       |// Do not evaluate the trait when T is a basic_json type, to avoid template instantiation infinite recursion.
  503|       |template <typename BasicJsonType, typename T, typename = void>
  504|       |struct has_to_json : std::false_type {};
  505|       |
  506|       |template <typename BasicJsonType, typename T>
  507|       |struct has_to_json<BasicJsonType, T, enable_if_t<not is_basic_json<T>::value>>
  508|       |{
  509|       |    using serializer = typename BasicJsonType::template json_serializer<T, void>;
  510|       |
  511|       |    static constexpr bool value =
  512|       |        is_detected_exact<void, to_json_function, serializer, BasicJsonType&,
  513|       |        T>::value;
  514|       |};
  515|       |
  516|       |
  517|       |///////////////////
  518|       |// is_ functions //
  519|       |///////////////////
  520|       |
  521|       |template <typename T, typename = void>
  522|       |struct is_iterator_traits : std::false_type {};
  523|       |
  524|       |template <typename T>
  525|       |struct is_iterator_traits<std::iterator_traits<T>>
  526|       |{
  527|       |  private:
  528|       |    using traits = std::iterator_traits<T>;
  529|       |
  530|       |  public:
  531|       |    static constexpr auto value =
  532|       |        is_detected<value_type_t, traits>::value &&
  533|       |        is_detected<difference_type_t, traits>::value &&
  534|       |        is_detected<pointer_t, traits>::value &&
  535|       |        is_detected<iterator_category_t, traits>::value &&
  536|       |        is_detected<reference_t, traits>::value;
  537|       |};
  538|       |
  539|       |// source: https://stackoverflow.com/a/37193089/4116453
  540|       |
  541|       |template <typename T, typename = void>
  542|       |struct is_complete_type : std::false_type {};
  543|       |
  544|       |template <typename T>
  545|       |struct is_complete_type<T, decltype(void(sizeof(T)))> : std::true_type {};
  546|       |
  547|       |template <typename BasicJsonType, typename CompatibleObjectType,
  548|       |          typename = void>
  549|       |struct is_compatible_object_type_impl : std::false_type {};
  550|       |
  551|       |template <typename BasicJsonType, typename CompatibleObjectType>
  552|       |struct is_compatible_object_type_impl <
  553|       |    BasicJsonType, CompatibleObjectType,
  554|       |    enable_if_t<is_detected<mapped_type_t, CompatibleObjectType>::value and
  555|       |    is_detected<key_type_t, CompatibleObjectType>::value >>
  556|       |{
  557|       |
  558|       |    using object_t = typename BasicJsonType::object_t;
  559|       |
  560|       |    // macOS's is_constructible does not play well with nonesuch...
  561|       |    static constexpr bool value =
  562|       |        std::is_constructible<typename object_t::key_type,
  563|       |        typename CompatibleObjectType::key_type>::value and
  564|       |        std::is_constructible<typename object_t::mapped_type,
  565|       |        typename CompatibleObjectType::mapped_type>::value;
  566|       |};
  567|       |
  568|       |template <typename BasicJsonType, typename CompatibleObjectType>
  569|       |struct is_compatible_object_type
  570|       |    : is_compatible_object_type_impl<BasicJsonType, CompatibleObjectType> {};
  571|       |
  572|       |template <typename BasicJsonType, typename ConstructibleObjectType,
  573|       |          typename = void>
  574|       |struct is_constructible_object_type_impl : std::false_type {};
  575|       |
  576|       |template <typename BasicJsonType, typename ConstructibleObjectType>
  577|       |struct is_constructible_object_type_impl <
  578|       |    BasicJsonType, ConstructibleObjectType,
  579|       |    enable_if_t<is_detected<mapped_type_t, ConstructibleObjectType>::value and
  580|       |    is_detected<key_type_t, ConstructibleObjectType>::value >>
  581|       |{
  582|       |    using object_t = typename BasicJsonType::object_t;
  583|       |
  584|       |    static constexpr bool value =
  585|       |        (std::is_constructible<typename ConstructibleObjectType::key_type, typename object_t::key_type>::value and
  586|       |         std::is_same<typename object_t::mapped_type, typename ConstructibleObjectType::mapped_type>::value) or
  587|       |        (has_from_json<BasicJsonType, typename ConstructibleObjectType::mapped_type>::value or
  588|       |         has_non_default_from_json<BasicJsonType, typename ConstructibleObjectType::mapped_type >::value);
  589|       |};
  590|       |
  591|       |template <typename BasicJsonType, typename ConstructibleObjectType>
  592|       |struct is_constructible_object_type
  593|       |    : is_constructible_object_type_impl<BasicJsonType,
  594|       |      ConstructibleObjectType> {};
  595|       |
  596|       |template <typename BasicJsonType, typename CompatibleStringType,
  597|       |          typename = void>
  598|       |struct is_compatible_string_type_impl : std::false_type {};
  599|       |
  600|       |template <typename BasicJsonType, typename CompatibleStringType>
  601|       |struct is_compatible_string_type_impl <
  602|       |    BasicJsonType, CompatibleStringType,
  603|       |    enable_if_t<is_detected_exact<typename BasicJsonType::string_t::value_type,
  604|       |    value_type_t, CompatibleStringType>::value >>
  605|       |{
  606|       |    static constexpr auto value =
  607|       |        std::is_constructible<typename BasicJsonType::string_t, CompatibleStringType>::value;
  608|       |};
  609|       |
  610|       |template <typename BasicJsonType, typename ConstructibleStringType>
  611|       |struct is_compatible_string_type
  612|       |    : is_compatible_string_type_impl<BasicJsonType, ConstructibleStringType> {};
  613|       |
  614|       |template <typename BasicJsonType, typename ConstructibleStringType,
  615|       |          typename = void>
  616|       |struct is_constructible_string_type_impl : std::false_type {};
  617|       |
  618|       |template <typename BasicJsonType, typename ConstructibleStringType>
  619|       |struct is_constructible_string_type_impl <
  620|       |    BasicJsonType, ConstructibleStringType,
  621|       |    enable_if_t<is_detected_exact<typename BasicJsonType::string_t::value_type,
  622|       |    value_type_t, ConstructibleStringType>::value >>
  623|       |{
  624|       |    static constexpr auto value =
  625|       |        std::is_constructible<ConstructibleStringType,
  626|       |        typename BasicJsonType::string_t>::value;
  627|       |};
  628|       |
  629|       |template <typename BasicJsonType, typename ConstructibleStringType>
  630|       |struct is_constructible_string_type
  631|       |    : is_constructible_string_type_impl<BasicJsonType, ConstructibleStringType> {};
  632|       |
  633|       |template <typename BasicJsonType, typename CompatibleArrayType, typename = void>
  634|       |struct is_compatible_array_type_impl : std::false_type {};
  635|       |
  636|       |template <typename BasicJsonType, typename CompatibleArrayType>
  637|       |struct is_compatible_array_type_impl <
  638|       |    BasicJsonType, CompatibleArrayType,
  639|       |    enable_if_t<is_detected<value_type_t, CompatibleArrayType>::value and
  640|       |    is_detected<iterator_t, CompatibleArrayType>::value and
  641|       |// This is needed because json_reverse_iterator has a ::iterator type...
  642|       |// Therefore it is detected as a CompatibleArrayType.
  643|       |// The real fix would be to have an Iterable concept.
  644|       |    not is_iterator_traits<
  645|       |    std::iterator_traits<CompatibleArrayType>>::value >>
  646|       |{
  647|       |    static constexpr bool value =
  648|       |        std::is_constructible<BasicJsonType,
  649|       |        typename CompatibleArrayType::value_type>::value;
  650|       |};
  651|       |
  652|       |template <typename BasicJsonType, typename CompatibleArrayType>
  653|       |struct is_compatible_array_type
  654|       |    : is_compatible_array_type_impl<BasicJsonType, CompatibleArrayType> {};
  655|       |
  656|       |template <typename BasicJsonType, typename ConstructibleArrayType, typename = void>
  657|       |struct is_constructible_array_type_impl : std::false_type {};
  658|       |
  659|       |template <typename BasicJsonType, typename ConstructibleArrayType>
  660|       |struct is_constructible_array_type_impl <
  661|       |    BasicJsonType, ConstructibleArrayType,
  662|       |    enable_if_t<std::is_same<ConstructibleArrayType,
  663|       |    typename BasicJsonType::value_type>::value >>
  664|       |            : std::true_type {};
  665|       |
  666|       |template <typename BasicJsonType, typename ConstructibleArrayType>
  667|       |struct is_constructible_array_type_impl <
  668|       |    BasicJsonType, ConstructibleArrayType,
  669|       |    enable_if_t<not std::is_same<ConstructibleArrayType,
  670|       |    typename BasicJsonType::value_type>::value and
  671|       |    is_detected<value_type_t, ConstructibleArrayType>::value and
  672|       |    is_detected<iterator_t, ConstructibleArrayType>::value and
  673|       |    is_complete_type<
  674|       |    detected_t<value_type_t, ConstructibleArrayType>>::value >>
  675|       |{
  676|       |    static constexpr bool value =
  677|       |        // This is needed because json_reverse_iterator has a ::iterator type,
  678|       |        // furthermore, std::back_insert_iterator (and other iterators) have a base class `iterator`...
  679|       |        // Therefore it is detected as a ConstructibleArrayType.
  680|       |        // The real fix would be to have an Iterable concept.
  681|       |        not is_iterator_traits <
  682|       |        std::iterator_traits<ConstructibleArrayType >>::value and
  683|       |
  684|       |        (std::is_same<typename ConstructibleArrayType::value_type, typename BasicJsonType::array_t::value_type>::value or
  685|       |         has_from_json<BasicJsonType,
  686|       |         typename ConstructibleArrayType::value_type>::value or
  687|       |         has_non_default_from_json <
  688|       |         BasicJsonType, typename ConstructibleArrayType::value_type >::value);
  689|       |};
  690|       |
  691|       |template <typename BasicJsonType, typename ConstructibleArrayType>
  692|       |struct is_constructible_array_type
  693|       |    : is_constructible_array_type_impl<BasicJsonType, ConstructibleArrayType> {};
  694|       |
  695|       |template <typename RealIntegerType, typename CompatibleNumberIntegerType,
  696|       |          typename = void>
  697|       |struct is_compatible_integer_type_impl : std::false_type {};
  698|       |
  699|       |template <typename RealIntegerType, typename CompatibleNumberIntegerType>
  700|       |struct is_compatible_integer_type_impl <
  701|       |    RealIntegerType, CompatibleNumberIntegerType,
  702|       |    enable_if_t<std::is_integral<RealIntegerType>::value and
  703|       |    std::is_integral<CompatibleNumberIntegerType>::value and
  704|       |    not std::is_same<bool, CompatibleNumberIntegerType>::value >>
  705|       |{
  706|       |    // is there an assert somewhere on overflows?
  707|       |    using RealLimits = std::numeric_limits<RealIntegerType>;
  708|       |    using CompatibleLimits = std::numeric_limits<CompatibleNumberIntegerType>;
  709|       |
  710|       |    static constexpr auto value =
  711|       |        std::is_constructible<RealIntegerType,
  712|       |        CompatibleNumberIntegerType>::value and
  713|       |        CompatibleLimits::is_integer and
  714|       |        RealLimits::is_signed == CompatibleLimits::is_signed;
  715|       |};
  716|       |
  717|       |template <typename RealIntegerType, typename CompatibleNumberIntegerType>
  718|       |struct is_compatible_integer_type
  719|       |    : is_compatible_integer_type_impl<RealIntegerType,
  720|       |      CompatibleNumberIntegerType> {};
  721|       |
  722|       |template <typename BasicJsonType, typename CompatibleType, typename = void>
  723|       |struct is_compatible_type_impl: std::false_type {};
  724|       |
  725|       |template <typename BasicJsonType, typename CompatibleType>
  726|       |struct is_compatible_type_impl <
  727|       |    BasicJsonType, CompatibleType,
  728|       |    enable_if_t<is_complete_type<CompatibleType>::value >>
  729|       |{
  730|       |    static constexpr bool value =
  731|       |        has_to_json<BasicJsonType, CompatibleType>::value;
  732|       |};
  733|       |
  734|       |template <typename BasicJsonType, typename CompatibleType>
  735|       |struct is_compatible_type
  736|       |    : is_compatible_type_impl<BasicJsonType, CompatibleType> {};
  737|       |}  // namespace detail
  738|       |}  // namespace nlohmann
  739|       |
  740|       |// #include <nlohmann/detail/exceptions.hpp>
  741|       |
  742|       |
  743|       |#include <exception> // exception
  744|       |#include <stdexcept> // runtime_error
  745|       |#include <string> // to_string
  746|       |
  747|       |// #include <nlohmann/detail/input/position_t.hpp>
  748|       |
  749|       |
  750|       |#include <cstddef> // size_t
  751|       |
  752|       |namespace nlohmann
  753|       |{
  754|       |namespace detail
  755|       |{
  756|       |/// struct to capture the start position of the current token
  757|       |struct position_t
  758|       |{
  759|       |    /// the total number of characters read
  760|       |    std::size_t chars_read_total = 0;
  761|       |    /// the number of characters read in the current line
  762|       |    std::size_t chars_read_current_line = 0;
  763|       |    /// the number of lines read
  764|       |    std::size_t lines_read = 0;
  765|       |
  766|       |    /// conversion to size_t to preserve SAX interface
  767|       |    constexpr operator size_t() const
  768|      0|    {
  769|      0|        return chars_read_total;
  770|      0|    }
  771|       |};
  772|       |
  773|       |}
  774|       |}
  775|       |
  776|       |
  777|       |namespace nlohmann
  778|       |{
  779|       |namespace detail
  780|       |{
  781|       |////////////////
  782|       |// exceptions //
  783|       |////////////////
  784|       |
  785|       |/*!
  786|       |@brief general exception of the @ref basic_json class
  787|       |
  788|       |This class is an extension of `std::exception` objects with a member @a id for
  789|       |exception ids. It is used as the base class for all exceptions thrown by the
  790|       |@ref basic_json class. This class can hence be used as "wildcard" to catch
  791|       |exceptions.
  792|       |
  793|       |Subclasses:
  794|       |- @ref parse_error for exceptions indicating a parse error
  795|       |- @ref invalid_iterator for exceptions indicating errors with iterators
  796|       |- @ref type_error for exceptions indicating executing a member function with
  797|       |                  a wrong type
  798|       |- @ref out_of_range for exceptions indicating access out of the defined range
  799|       |- @ref other_error for exceptions indicating other library errors
  800|       |
  801|       |@internal
  802|       |@note To have nothrow-copy-constructible exceptions, we internally use
  803|       |      `std::runtime_error` which can cope with arbitrary-length error messages.
  804|       |      Intermediate strings are built with static functions and then passed to
  805|       |      the actual constructor.
  806|       |@endinternal
  807|       |
  808|       |@liveexample{The following code shows how arbitrary library exceptions can be
  809|       |caught.,exception}
  810|       |
  811|       |@since version 3.0.0
  812|       |*/
  813|       |class exception : public std::exception
  814|       |{
  815|       |  public:
  816|       |    /// returns the explanatory string
  817|       |    const char* what() const noexcept override
  818|      0|    {
  819|      0|        return m.what();
  820|      0|    }
  821|       |
  822|       |    /// the id of the exception
  823|       |    const int id;
  824|       |
  825|       |  protected:
  826|      1|    exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}
  827|       |
  828|       |    static std::string name(const std::string& ename, int id_)
  829|      1|    {
  830|      1|        return "[json.exception." + ename + "." + std::to_string(id_) + "] ";
  831|      1|    }
  832|       |
  833|       |  private:
  834|       |    /// an exception object as storage for error messages
  835|       |    std::runtime_error m;
  836|       |};
  837|       |
  838|       |/*!
  839|       |@brief exception indicating a parse error
  840|       |
  841|       |This exception is thrown by the library when a parse error occurs. Parse errors
  842|       |can occur during the deserialization of JSON text, CBOR, MessagePack, as well
  843|       |as when using JSON Patch.
  844|       |
  845|       |Member @a byte holds the byte index of the last read character in the input
  846|       |file.
  847|       |
  848|       |Exceptions have ids 1xx.
  849|       |
  850|       |name / id                      | example message | description
  851|       |------------------------------ | --------------- | -------------------------
  852|       |json.exception.parse_error.101 | parse error at 2: unexpected end of input; expected string literal | This error indicates a syntax error while deserializing a JSON text. The error message describes that an unexpected token (character) was encountered, and the member @a byte indicates the error position.
  853|       |json.exception.parse_error.102 | parse error at 14: missing or wrong low surrogate | JSON uses the `\uxxxx` format to describe Unicode characters. Code points above above 0xFFFF are split into two `\uxxxx` entries ("surrogate pairs"). This error indicates that the surrogate pair is incomplete or contains an invalid code point.
  854|       |json.exception.parse_error.103 | parse error: code points above 0x10FFFF are invalid | Unicode supports code points up to 0x10FFFF. Code points above 0x10FFFF are invalid.
  855|       |json.exception.parse_error.104 | parse error: JSON patch must be an array of objects | [RFC 6902](https://tools.ietf.org/html/rfc6902) requires a JSON Patch document to be a JSON document that represents an array of objects.
  856|       |json.exception.parse_error.105 | parse error: operation must have string member 'op' | An operation of a JSON Patch document must contain exactly one "op" member, whose value indicates the operation to perform. Its value must be one of "add", "remove", "replace", "move", "copy", or "test"; other values are errors.
  857|       |json.exception.parse_error.106 | parse error: array index '01' must not begin with '0' | An array index in a JSON Pointer ([RFC 6901](https://tools.ietf.org/html/rfc6901)) may be `0` or any number without a leading `0`.
  858|       |json.exception.parse_error.107 | parse error: JSON pointer must be empty or begin with '/' - was: 'foo' | A JSON Pointer must be a Unicode string containing a sequence of zero or more reference tokens, each prefixed by a `/` character.
  859|       |json.exception.parse_error.108 | parse error: escape character '~' must be followed with '0' or '1' | In a JSON Pointer, only `~0` and `~1` are valid escape sequences.
  860|       |json.exception.parse_error.109 | parse error: array index 'one' is not a number | A JSON Pointer array index must be a number.
  861|       |json.exception.parse_error.110 | parse error at 1: cannot read 2 bytes from vector | When parsing CBOR or MessagePack, the byte vector ends before the complete value has been read.
  862|       |json.exception.parse_error.112 | parse error at 1: error reading CBOR; last byte: 0xF8 | Not all types of CBOR or MessagePack are supported. This exception occurs if an unsupported byte was read.
  863|       |json.exception.parse_error.113 | parse error at 2: expected a CBOR string; last byte: 0x98 | While parsing a map key, a value that is not a string has been read.
  864|       |json.exception.parse_error.114 | parse error: Unsupported BSON record type 0x0F | The parsing of the corresponding BSON record type is not implemented (yet).
  865|       |
  866|       |@note For an input with n bytes, 1 is the index of the first character and n+1
  867|       |      is the index of the terminating null byte or the end of file. This also
  868|       |      holds true when reading a byte vector (CBOR or MessagePack).
  869|       |
  870|       |@liveexample{The following code shows how a `parse_error` exception can be
  871|       |caught.,parse_error}
  872|       |
  873|       |@sa @ref exception for the base class of the library exceptions
  874|       |@sa @ref invalid_iterator for exceptions indicating errors with iterators
  875|       |@sa @ref type_error for exceptions indicating executing a member function with
  876|       |                    a wrong type
  877|       |@sa @ref out_of_range for exceptions indicating access out of the defined range
  878|       |@sa @ref other_error for exceptions indicating other library errors
  879|       |
  880|       |@since version 3.0.0
  881|       |*/
  882|       |class parse_error : public exception
  883|       |{
  884|       |  public:
  885|       |    /*!
  886|       |    @brief create a parse error exception
  887|       |    @param[in] id_       the id of the exception
  888|       |    @param[in] position  the position where the error occurred (or with
  889|       |                         chars_read_total=0 if the position cannot be
  890|       |                         determined)
  891|       |    @param[in] what_arg  the explanatory string
  892|       |    @return parse_error object
  893|       |    */
  894|       |    static parse_error create(int id_, const position_t& pos, const std::string& what_arg)
  895|      0|    {
  896|      0|        std::string w = exception::name("parse_error", id_) + "parse error" +
  897|      0|                        position_string(pos) + ": " + what_arg;
  898|      0|        return parse_error(id_, pos.chars_read_total, w.c_str());
  899|      0|    }
  900|       |
  901|       |    static parse_error create(int id_, std::size_t byte_, const std::string& what_arg)
  902|      0|    {
  903|      0|        std::string w = exception::name("parse_error", id_) + "parse error" +
  904|      0|                        (byte_ != 0 ? (" at byte " + std::to_string(byte_)) : "") +
  905|      0|                        ": " + what_arg;
  906|      0|        return parse_error(id_, byte_, w.c_str());
  907|      0|    }
  908|       |
  909|       |    /*!
  910|       |    @brief byte index of the parse error
  911|       |
  912|       |    The byte index of the last read character in the input file.
  913|       |
  914|       |    @note For an input with n bytes, 1 is the index of the first character and
  915|       |          n+1 is the index of the terminating null byte or the end of file.
  916|       |          This also holds true when reading a byte vector (CBOR or MessagePack).
  917|       |    */
  918|       |    const std::size_t byte;
  919|       |
  920|       |  private:
  921|       |    parse_error(int id_, std::size_t byte_, const char* what_arg)
  922|      0|        : exception(id_, what_arg), byte(byte_) {}
  923|       |
  924|       |    static std::string position_string(const position_t& pos)
  925|      0|    {
  926|      0|        return " at line " + std::to_string(pos.lines_read + 1) +
  927|      0|               ", column " + std::to_string(pos.chars_read_current_line);
  928|      0|    }
  929|       |};
  930|       |
  931|       |/*!
  932|       |@brief exception indicating errors with iterators
  933|       |
  934|       |This exception is thrown if iterators passed to a library function do not match
  935|       |the expected semantics.
  936|       |
  937|       |Exceptions have ids 2xx.
  938|       |
  939|       |name / id                           | example message | description
  940|       |----------------------------------- | --------------- | -------------------------
  941|       |json.exception.invalid_iterator.201 | iterators are not compatible | The iterators passed to constructor @ref basic_json(InputIT first, InputIT last) are not compatible, meaning they do not belong to the same container. Therefore, the range (@a first, @a last) is invalid.
  942|       |json.exception.invalid_iterator.202 | iterator does not fit current value | In an erase or insert function, the passed iterator @a pos does not belong to the JSON value for which the function was called. It hence does not define a valid position for the deletion/insertion.
  943|       |json.exception.invalid_iterator.203 | iterators do not fit current value | Either iterator passed to function @ref erase(IteratorType first, IteratorType last) does not belong to the JSON value from which values shall be erased. It hence does not define a valid range to delete values from.
  944|       |json.exception.invalid_iterator.204 | iterators out of range | When an iterator range for a primitive type (number, boolean, or string) is passed to a constructor or an erase function, this range has to be exactly (@ref begin(), @ref end()), because this is the only way the single stored value is expressed. All other ranges are invalid.
  945|       |json.exception.invalid_iterator.205 | iterator out of range | When an iterator for a primitive type (number, boolean, or string) is passed to an erase function, the iterator has to be the @ref begin() iterator, because it is the only way to address the stored value. All other iterators are invalid.
  946|       |json.exception.invalid_iterator.206 | cannot construct with iterators from null | The iterators passed to constructor @ref basic_json(InputIT first, InputIT last) belong to a JSON null value and hence to not define a valid range.
  947|       |json.exception.invalid_iterator.207 | cannot use key() for non-object iterators | The key() member function can only be used on iterators belonging to a JSON object, because other types do not have a concept of a key.
  948|       |json.exception.invalid_iterator.208 | cannot use operator[] for object iterators | The operator[] to specify a concrete offset cannot be used on iterators belonging to a JSON object, because JSON objects are unordered.
  949|       |json.exception.invalid_iterator.209 | cannot use offsets with object iterators | The offset operators (+, -, +=, -=) cannot be used on iterators belonging to a JSON object, because JSON objects are unordered.
  950|       |json.exception.invalid_iterator.210 | iterators do not fit | The iterator range passed to the insert function are not compatible, meaning they do not belong to the same container. Therefore, the range (@a first, @a last) is invalid.
  951|       |json.exception.invalid_iterator.211 | passed iterators may not belong to container | The iterator range passed to the insert function must not be a subrange of the container to insert to.
  952|       |json.exception.invalid_iterator.212 | cannot compare iterators of different containers | When two iterators are compared, they must belong to the same container.
  953|       |json.exception.invalid_iterator.213 | cannot compare order of object iterators | The order of object iterators cannot be compared, because JSON objects are unordered.
  954|       |json.exception.invalid_iterator.214 | cannot get value | Cannot get value for iterator: Either the iterator belongs to a null value or it is an iterator to a primitive type (number, boolean, or string), but the iterator is different to @ref begin().
  955|       |
  956|       |@liveexample{The following code shows how an `invalid_iterator` exception can be
  957|       |caught.,invalid_iterator}
  958|       |
  959|       |@sa @ref exception for the base class of the library exceptions
  960|       |@sa @ref parse_error for exceptions indicating a parse error
  961|       |@sa @ref type_error for exceptions indicating executing a member function with
  962|       |                    a wrong type
  963|       |@sa @ref out_of_range for exceptions indicating access out of the defined range
  964|       |@sa @ref other_error for exceptions indicating other library errors
  965|       |
  966|       |@since version 3.0.0
  967|       |*/
  968|       |class invalid_iterator : public exception
  969|       |{
  970|       |  public:
  971|       |    static invalid_iterator create(int id_, const std::string& what_arg)
  972|      0|    {
  973|      0|        std::string w = exception::name("invalid_iterator", id_) + what_arg;
  974|      0|        return invalid_iterator(id_, w.c_str());
  975|      0|    }
  976|       |
  977|       |  private:
  978|       |    invalid_iterator(int id_, const char* what_arg)
  979|      0|        : exception(id_, what_arg) {}
  980|       |};
  981|       |
  982|       |/*!
  983|       |@brief exception indicating executing a member function with a wrong type
  984|       |
  985|       |This exception is thrown in case of a type error; that is, a library function is
  986|       |executed on a JSON value whose type does not match the expected semantics.
  987|       |
  988|       |Exceptions have ids 3xx.
  989|       |
  990|       |name / id                     | example message | description
  991|       |----------------------------- | --------------- | -------------------------
  992|       |json.exception.type_error.301 | cannot create object from initializer list | To create an object from an initializer list, the initializer list must consist only of a list of pairs whose first element is a string. When this constraint is violated, an array is created instead.
  993|       |json.exception.type_error.302 | type must be object, but is array | During implicit or explicit value conversion, the JSON type must be compatible to the target type. For instance, a JSON string can only be converted into string types, but not into numbers or boolean types.
  994|       |json.exception.type_error.303 | incompatible ReferenceType for get_ref, actual type is object | To retrieve a reference to a value stored in a @ref basic_json object with @ref get_ref, the type of the reference must match the value type. For instance, for a JSON array, the @a ReferenceType must be @ref array_t&.
  995|       |json.exception.type_error.304 | cannot use at() with string | The @ref at() member functions can only be executed for certain JSON types.
  996|       |json.exception.type_error.305 | cannot use operator[] with string | The @ref operator[] member functions can only be executed for certain JSON types.
  997|       |json.exception.type_error.306 | cannot use value() with string | The @ref value() member functions can only be executed for certain JSON types.
  998|       |json.exception.type_error.307 | cannot use erase() with string | The @ref erase() member functions can only be executed for certain JSON types.
  999|       |json.exception.type_error.308 | cannot use push_back() with string | The @ref push_back() and @ref operator+= member functions can only be executed for certain JSON types.
 1000|       |json.exception.type_error.309 | cannot use insert() with | The @ref insert() member functions can only be executed for certain JSON types.
 1001|       |json.exception.type_error.310 | cannot use swap() with number | The @ref swap() member functions can only be executed for certain JSON types.
 1002|       |json.exception.type_error.311 | cannot use emplace_back() with string | The @ref emplace_back() member function can only be executed for certain JSON types.
 1003|       |json.exception.type_error.312 | cannot use update() with string | The @ref update() member functions can only be executed for certain JSON types.
 1004|       |json.exception.type_error.313 | invalid value to unflatten | The @ref unflatten function converts an object whose keys are JSON Pointers back into an arbitrary nested JSON value. The JSON Pointers must not overlap, because then the resulting value would not be well defined.
 1005|       |json.exception.type_error.314 | only objects can be unflattened | The @ref unflatten function only works for an object whose keys are JSON Pointers.
 1006|       |json.exception.type_error.315 | values in object must be primitive | The @ref unflatten function only works for an object whose keys are JSON Pointers and whose values are primitive.
 1007|       |json.exception.type_error.316 | invalid UTF-8 byte at index 10: 0x7E | The @ref dump function only works with UTF-8 encoded strings; that is, if you assign a `std::string` to a JSON value, make sure it is UTF-8 encoded. |
 1008|       |json.exception.type_error.317 | JSON value cannot be serialized to requested format | The dynamic type of the object cannot be represented in the requested serialization format (e.g. a raw `true` or `null` JSON object cannot be serialized to BSON) |
 1009|       |
 1010|       |@liveexample{The following code shows how a `type_error` exception can be
 1011|       |caught.,type_error}
 1012|       |
 1013|       |@sa @ref exception for the base class of the library exceptions
 1014|       |@sa @ref parse_error for exceptions indicating a parse error
 1015|       |@sa @ref invalid_iterator for exceptions indicating errors with iterators
 1016|       |@sa @ref out_of_range for exceptions indicating access out of the defined range
 1017|       |@sa @ref other_error for exceptions indicating other library errors
 1018|       |
 1019|       |@since version 3.0.0
 1020|       |*/
 1021|       |class type_error : public exception
 1022|       |{
 1023|       |  public:
 1024|       |    static type_error create(int id_, const std::string& what_arg)
 1025|      0|    {
 1026|      0|        std::string w = exception::name("type_error", id_) + what_arg;
 1027|      0|        return type_error(id_, w.c_str());
 1028|      0|    }
 1029|       |
 1030|       |  private:
 1031|      0|    type_error(int id_, const char* what_arg) : exception(id_, what_arg) {}
 1032|       |};
 1033|       |
 1034|       |/*!
 1035|       |@brief exception indicating access out of the defined range
 1036|       |
 1037|       |This exception is thrown in case a library function is called on an input
 1038|       |parameter that exceeds the expected range, for instance in case of array
 1039|       |indices or nonexisting object keys.
 1040|       |
 1041|       |Exceptions have ids 4xx.
 1042|       |
 1043|       |name / id                       | example message | description
 1044|       |------------------------------- | --------------- | -------------------------
 1045|       |json.exception.out_of_range.401 | array index 3 is out of range | The provided array index @a i is larger than @a size-1.
 1046|       |json.exception.out_of_range.402 | array index '-' (3) is out of range | The special array index `-` in a JSON Pointer never describes a valid element of the array, but the index past the end. That is, it can only be used to add elements at this position, but not to read it.
 1047|       |json.exception.out_of_range.403 | key 'foo' not found | The provided key was not found in the JSON object.
 1048|       |json.exception.out_of_range.404 | unresolved reference token 'foo' | A reference token in a JSON Pointer could not be resolved.
 1049|       |json.exception.out_of_range.405 | JSON pointer has no parent | The JSON Patch operations 'remove' and 'add' can not be applied to the root element of the JSON value.
 1050|       |json.exception.out_of_range.406 | number overflow parsing '10E1000' | A parsed number could not be stored as without changing it to NaN or INF.
 1051|       |json.exception.out_of_range.407 | number overflow serializing '9223372036854775808' | UBJSON and BSON only support integer numbers up to 9223372036854775807. |
 1052|       |json.exception.out_of_range.408 | excessive array size: 8658170730974374167 | The size (following `#`) of an UBJSON array or object exceeds the maximal capacity. |
 1053|       |json.exception.out_of_range.409 | BSON key cannot contain code point U+0000 (at byte 2) | Key identifiers to be serialized to BSON cannot contain code point U+0000, since the key is stored as zero-terminated c-string |
 1054|       |
 1055|       |@liveexample{The following code shows how an `out_of_range` exception can be
 1056|       |caught.,out_of_range}
 1057|       |
 1058|       |@sa @ref exception for the base class of the library exceptions
 1059|       |@sa @ref parse_error for exceptions indicating a parse error
 1060|       |@sa @ref invalid_iterator for exceptions indicating errors with iterators
 1061|       |@sa @ref type_error for exceptions indicating executing a member function with
 1062|       |                    a wrong type
 1063|       |@sa @ref other_error for exceptions indicating other library errors
 1064|       |
 1065|       |@since version 3.0.0
 1066|       |*/
 1067|       |class out_of_range : public exception
 1068|       |{
 1069|       |  public:
 1070|       |    static out_of_range create(int id_, const std::string& what_arg)
 1071|      1|    {
 1072|      1|        std::string w = exception::name("out_of_range", id_) + what_arg;
 1073|      1|        return out_of_range(id_, w.c_str());
 1074|      1|    }
 1075|       |
 1076|       |  private:
 1077|      1|    out_of_range(int id_, const char* what_arg) : exception(id_, what_arg) {}
 1078|       |};
 1079|       |
 1080|       |/*!
 1081|       |@brief exception indicating other library errors
 1082|       |
 1083|       |This exception is thrown in case of errors that cannot be classified with the
 1084|       |other exception types.
 1085|       |
 1086|       |Exceptions have ids 5xx.
 1087|       |
 1088|       |name / id                      | example message | description
 1089|       |------------------------------ | --------------- | -------------------------
 1090|       |json.exception.other_error.501 | unsuccessful: {"op":"test","path":"/baz", "value":"bar"} | A JSON Patch operation 'test' failed. The unsuccessful operation is also printed.
 1091|       |
 1092|       |@sa @ref exception for the base class of the library exceptions
 1093|       |@sa @ref parse_error for exceptions indicating a parse error
 1094|       |@sa @ref invalid_iterator for exceptions indicating errors with iterators
 1095|       |@sa @ref type_error for exceptions indicating executing a member function with
 1096|       |                    a wrong type
 1097|       |@sa @ref out_of_range for exceptions indicating access out of the defined range
 1098|       |
 1099|       |@liveexample{The following code shows how an `other_error` exception can be
 1100|       |caught.,other_error}
 1101|       |
 1102|       |@since version 3.0.0
 1103|       |*/
 1104|       |class other_error : public exception
 1105|       |{
 1106|       |  public:
 1107|       |    static other_error create(int id_, const std::string& what_arg)
 1108|      0|    {
 1109|      0|        std::string w = exception::name("other_error", id_) + what_arg;
 1110|      0|        return other_error(id_, w.c_str());
 1111|      0|    }
 1112|       |
 1113|       |  private:
 1114|      0|    other_error(int id_, const char* what_arg) : exception(id_, what_arg) {}
 1115|       |};
 1116|       |}  // namespace detail
 1117|       |}  // namespace nlohmann
 1118|       |
 1119|       |// #include <nlohmann/detail/value_t.hpp>
 1120|       |
 1121|       |
 1122|       |#include <array> // array
 1123|       |#include <ciso646> // and
 1124|       |#include <cstddef> // size_t
 1125|       |#include <cstdint> // uint8_t
 1126|       |
 1127|       |namespace nlohmann
 1128|       |{
 1129|       |namespace detail
 1130|       |{
 1131|       |///////////////////////////
 1132|       |// JSON type enumeration //
 1133|       |///////////////////////////
 1134|       |
 1135|       |/*!
 1136|       |@brief the JSON type enumeration
 1137|       |
 1138|       |This enumeration collects the different JSON types. It is internally used to
 1139|       |distinguish the stored values, and the functions @ref basic_json::is_null(),
 1140|       |@ref basic_json::is_object(), @ref basic_json::is_array(),
 1141|       |@ref basic_json::is_string(), @ref basic_json::is_boolean(),
 1142|       |@ref basic_json::is_number() (with @ref basic_json::is_number_integer(),
 1143|       |@ref basic_json::is_number_unsigned(), and @ref basic_json::is_number_float()),
 1144|       |@ref basic_json::is_discarded(), @ref basic_json::is_primitive(), and
 1145|       |@ref basic_json::is_structured() rely on it.
 1146|       |
 1147|       |@note There are three enumeration entries (number_integer, number_unsigned, and
 1148|       |number_float), because the library distinguishes these three types for numbers:
 1149|       |@ref basic_json::number_unsigned_t is used for unsigned integers,
 1150|       |@ref basic_json::number_integer_t is used for signed integers, and
 1151|       |@ref basic_json::number_float_t is used for floating-point numbers or to
 1152|       |approximate integers which do not fit in the limits of their respective type.
 1153|       |
 1154|       |@sa @ref basic_json::basic_json(const value_t value_type) -- create a JSON
 1155|       |value with the default value for a given type
 1156|       |
 1157|       |@since version 1.0.0
 1158|       |*/
 1159|       |enum class value_t : std::uint8_t
 1160|       |{
 1161|       |    null,             ///< null value
 1162|       |    object,           ///< object (unordered set of name/value pairs)
 1163|       |    array,            ///< array (ordered collection of values)
 1164|       |    string,           ///< string value
 1165|       |    boolean,          ///< boolean value
 1166|       |    number_integer,   ///< number value (signed integer)
 1167|       |    number_unsigned,  ///< number value (unsigned integer)
 1168|       |    number_float,     ///< number value (floating-point)
 1169|       |    discarded         ///< discarded by the the parser callback function
 1170|       |};
 1171|       |
 1172|       |/*!
 1173|       |@brief comparison operator for JSON types
 1174|       |
 1175|       |Returns an ordering that is similar to Python:
 1176|       |- order: null < boolean < number < object < array < string
 1177|       |- furthermore, each type is not smaller than itself
 1178|       |- discarded values are not comparable
 1179|       |
 1180|       |@since version 1.0.0
 1181|       |*/
 1182|       |inline bool operator<(const value_t lhs, const value_t rhs) noexcept
 1183|      0|{
 1184|      0|    static constexpr std::array<std::uint8_t, 8> order = {{
 1185|      0|            0 /* null */, 3 /* object */, 4 /* array */, 5 /* string */,
 1186|      0|            1 /* boolean */, 2 /* integer */, 2 /* unsigned */, 2 /* float */
 1187|      0|        }
 1188|      0|    };
 1189|      0|
 1190|      0|    const auto l_index = static_cast<std::size_t>(lhs);
 1191|      0|    const auto r_index = static_cast<std::size_t>(rhs);
 1192|      0|    return l_index < order.size() and r_index < order.size() and order[l_index] < order[r_index];
 1193|      0|}
 1194|       |}  // namespace detail
 1195|       |}  // namespace nlohmann
 1196|       |
 1197|       |// #include <nlohmann/detail/conversions/from_json.hpp>
 1198|       |
 1199|       |
 1200|       |#include <algorithm> // transform
 1201|       |#include <array> // array
 1202|       |#include <ciso646> // and, not
 1203|       |#include <forward_list> // forward_list
 1204|       |#include <iterator> // inserter, front_inserter, end
 1205|       |#include <map> // map
 1206|       |#include <string> // string
 1207|       |#include <tuple> // tuple, make_tuple
 1208|       |#include <type_traits> // is_arithmetic, is_same, is_enum, underlying_type, is_convertible
 1209|       |#include <unordered_map> // unordered_map
 1210|       |#include <utility> // pair, declval
 1211|       |#include <valarray> // valarray
 1212|       |
 1213|       |// #include <nlohmann/detail/exceptions.hpp>
 1214|       |
 1215|       |// #include <nlohmann/detail/macro_scope.hpp>
 1216|       |
 1217|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
 1218|       |
 1219|       |// #include <nlohmann/detail/meta/type_traits.hpp>
 1220|       |
 1221|       |// #include <nlohmann/detail/value_t.hpp>
 1222|       |
 1223|       |
 1224|       |namespace nlohmann
 1225|       |{
 1226|       |namespace detail
 1227|       |{
 1228|       |template<typename BasicJsonType>
 1229|       |void from_json(const BasicJsonType& j, typename std::nullptr_t& n)
 1230|       |{
 1231|       |    if (JSON_UNLIKELY(not j.is_null()))
 1232|       |    {
 1233|       |        JSON_THROW(type_error::create(302, "type must be null, but is " + std::string(j.type_name())));
 1234|       |    }
 1235|       |    n = nullptr;
 1236|       |}
 1237|       |
 1238|       |// overloads for basic_json template parameters
 1239|       |template<typename BasicJsonType, typename ArithmeticType,
 1240|       |         enable_if_t<std::is_arithmetic<ArithmeticType>::value and
 1241|       |                     not std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,
 1242|       |                     int> = 0>
 1243|       |void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)
 1244|    148|{
 1245|    148|    switch (static_cast<value_t>(j))
 1246|    148|    {
 1247|    148|        case value_t::number_unsigned:
 1248|      0|        {
 1249|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
 1250|      0|            break;
 1251|    148|        }
 1252|    148|        case value_t::number_integer:
 1253|      0|        {
 1254|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
 1255|      0|            break;
 1256|    148|        }
 1257|    148|        case value_t::number_float:
 1258|    148|        {
 1259|    148|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
 1260|    148|            break;
 1261|    148|        }
 1262|    148|
 1263|    148|        default:
 1264|      0|            JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
 1265|    148|    }
 1266|    148|}
 1267|       |
 1268|       |template<typename BasicJsonType>
 1269|       |void from_json(const BasicJsonType& j, typename BasicJsonType::boolean_t& b)
 1270|      2|{
 1271|      2|    if (JSON_UNLIKELY(not j.is_boolean()))
 1272|      2|    {
 1273|      0|        JSON_THROW(type_error::create(302, "type must be boolean, but is " + std::string(j.type_name())));
 1274|      0|    }
 1275|      2|    b = *j.template get_ptr<const typename BasicJsonType::boolean_t*>();
 1276|      2|}
 1277|       |
 1278|       |template<typename BasicJsonType>
 1279|       |void from_json(const BasicJsonType& j, typename BasicJsonType::string_t& s)
 1280|  12.7k|{
 1281|  12.7k|    if (JSON_UNLIKELY(not j.is_string()))
 1282|  12.7k|    {
 1283|      0|        JSON_THROW(type_error::create(302, "type must be string, but is " + std::string(j.type_name())));
 1284|      0|    }
 1285|  12.7k|    s = *j.template get_ptr<const typename BasicJsonType::string_t*>();
 1286|  12.7k|}
 1287|       |
 1288|       |template <
 1289|       |    typename BasicJsonType, typename ConstructibleStringType,
 1290|       |    enable_if_t <
 1291|       |        is_constructible_string_type<BasicJsonType, ConstructibleStringType>::value and
 1292|       |        not std::is_same<typename BasicJsonType::string_t,
 1293|       |                         ConstructibleStringType>::value,
 1294|       |        int > = 0 >
 1295|       |void from_json(const BasicJsonType& j, ConstructibleStringType& s)
 1296|       |{
 1297|       |    if (JSON_UNLIKELY(not j.is_string()))
 1298|       |    {
 1299|       |        JSON_THROW(type_error::create(302, "type must be string, but is " + std::string(j.type_name())));
 1300|       |    }
 1301|       |
 1302|       |    s = *j.template get_ptr<const typename BasicJsonType::string_t*>();
 1303|       |}
 1304|       |
 1305|       |template<typename BasicJsonType>
 1306|       |void from_json(const BasicJsonType& j, typename BasicJsonType::number_float_t& val)
 1307|    148|{
 1308|    148|    get_arithmetic_value(j, val);
 1309|    148|}
 1310|       |
 1311|       |template<typename BasicJsonType>
 1312|       |void from_json(const BasicJsonType& j, typename BasicJsonType::number_unsigned_t& val)
 1313|       |{
 1314|       |    get_arithmetic_value(j, val);
 1315|       |}
 1316|       |
 1317|       |template<typename BasicJsonType>
 1318|       |void from_json(const BasicJsonType& j, typename BasicJsonType::number_integer_t& val)
 1319|       |{
 1320|       |    get_arithmetic_value(j, val);
 1321|       |}
 1322|       |
 1323|       |template<typename BasicJsonType, typename EnumType,
 1324|       |         enable_if_t<std::is_enum<EnumType>::value, int> = 0>
 1325|       |void from_json(const BasicJsonType& j, EnumType& e)
 1326|       |{
 1327|       |    typename std::underlying_type<EnumType>::type val;
 1328|       |    get_arithmetic_value(j, val);
 1329|       |    e = static_cast<EnumType>(val);
 1330|       |}
 1331|       |
 1332|       |// forward_list doesn't have an insert method
 1333|       |template<typename BasicJsonType, typename T, typename Allocator,
 1334|       |         enable_if_t<std::is_convertible<BasicJsonType, T>::value, int> = 0>
 1335|       |void from_json(const BasicJsonType& j, std::forward_list<T, Allocator>& l)
 1336|       |{
 1337|       |    if (JSON_UNLIKELY(not j.is_array()))
 1338|       |    {
 1339|       |        JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(j.type_name())));
 1340|       |    }
 1341|       |    std::transform(j.rbegin(), j.rend(),
 1342|       |                   std::front_inserter(l), [](const BasicJsonType & i)
 1343|       |    {
 1344|       |        return i.template get<T>();
 1345|       |    });
 1346|       |}
 1347|       |
 1348|       |// valarray doesn't have an insert method
 1349|       |template<typename BasicJsonType, typename T,
 1350|       |         enable_if_t<std::is_convertible<BasicJsonType, T>::value, int> = 0>
 1351|       |void from_json(const BasicJsonType& j, std::valarray<T>& l)
 1352|       |{
 1353|       |    if (JSON_UNLIKELY(not j.is_array()))
 1354|       |    {
 1355|       |        JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(j.type_name())));
 1356|       |    }
 1357|       |    l.resize(j.size());
 1358|       |    std::copy(j.m_value.array->begin(), j.m_value.array->end(), std::begin(l));
 1359|       |}
 1360|       |
 1361|       |template<typename BasicJsonType>
 1362|       |void from_json_array_impl(const BasicJsonType& j, typename BasicJsonType::array_t& arr, priority_tag<3> /*unused*/)
 1363|       |{
 1364|       |    arr = *j.template get_ptr<const typename BasicJsonType::array_t*>();
 1365|       |}
 1366|       |
 1367|       |template <typename BasicJsonType, typename T, std::size_t N>
 1368|       |auto from_json_array_impl(const BasicJsonType& j, std::array<T, N>& arr,
 1369|       |                          priority_tag<2> /*unused*/)
 1370|       |-> decltype(j.template get<T>(), void())
 1371|       |{
 1372|       |    for (std::size_t i = 0; i < N; ++i)
 1373|       |    {
 1374|       |        arr[i] = j.at(i).template get<T>();
 1375|       |    }
 1376|       |}
 1377|       |
 1378|       |template<typename BasicJsonType, typename ConstructibleArrayType>
 1379|       |auto from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr, priority_tag<1> /*unused*/)
 1380|       |-> decltype(
 1381|       |    arr.reserve(std::declval<typename ConstructibleArrayType::size_type>()),
 1382|       |    j.template get<typename ConstructibleArrayType::value_type>(),
 1383|       |    void())
 1384|       |{
 1385|       |    using std::end;
 1386|       |
 1387|       |    arr.reserve(j.size());
 1388|       |    std::transform(j.begin(), j.end(),
 1389|       |                   std::inserter(arr, end(arr)), [](const BasicJsonType & i)
 1390|       |    {
 1391|       |        // get<BasicJsonType>() returns *this, this won't call a from_json
 1392|       |        // method when value_type is BasicJsonType
 1393|       |        return i.template get<typename ConstructibleArrayType::value_type>();
 1394|       |    });
 1395|       |}
 1396|       |
 1397|       |template <typename BasicJsonType, typename ConstructibleArrayType>
 1398|       |void from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr,
 1399|       |                          priority_tag<0> /*unused*/)
 1400|       |{
 1401|       |    using std::end;
 1402|       |
 1403|       |    std::transform(
 1404|       |        j.begin(), j.end(), std::inserter(arr, end(arr)),
 1405|       |        [](const BasicJsonType & i)
 1406|       |    {
 1407|       |        // get<BasicJsonType>() returns *this, this won't call a from_json
 1408|       |        // method when value_type is BasicJsonType
 1409|       |        return i.template get<typename ConstructibleArrayType::value_type>();
 1410|       |    });
 1411|       |}
 1412|       |
 1413|       |template <typename BasicJsonType, typename ConstructibleArrayType,
 1414|       |          enable_if_t <
 1415|       |              is_constructible_array_type<BasicJsonType, ConstructibleArrayType>::value and
 1416|       |              not is_constructible_object_type<BasicJsonType, ConstructibleArrayType>::value and
 1417|       |              not is_constructible_string_type<BasicJsonType, ConstructibleArrayType>::value and
 1418|       |              not is_basic_json<ConstructibleArrayType>::value,
 1419|       |              int > = 0 >
 1420|       |
 1421|       |auto from_json(const BasicJsonType& j, ConstructibleArrayType& arr)
 1422|       |-> decltype(from_json_array_impl(j, arr, priority_tag<3> {}),
 1423|       |j.template get<typename ConstructibleArrayType::value_type>(),
 1424|       |void())
 1425|       |{
 1426|       |    if (JSON_UNLIKELY(not j.is_array()))
 1427|       |    {
 1428|       |        JSON_THROW(type_error::create(302, "type must be array, but is " +
 1429|       |                                      std::string(j.type_name())));
 1430|       |    }
 1431|       |
 1432|       |    from_json_array_impl(j, arr, priority_tag<3> {});
 1433|       |}
 1434|       |
 1435|       |template<typename BasicJsonType, typename ConstructibleObjectType,
 1436|       |         enable_if_t<is_constructible_object_type<BasicJsonType, ConstructibleObjectType>::value, int> = 0>
 1437|       |void from_json(const BasicJsonType& j, ConstructibleObjectType& obj)
 1438|       |{
 1439|       |    if (JSON_UNLIKELY(not j.is_object()))
 1440|       |    {
 1441|       |        JSON_THROW(type_error::create(302, "type must be object, but is " + std::string(j.type_name())));
 1442|       |    }
 1443|       |
 1444|       |    auto inner_object = j.template get_ptr<const typename BasicJsonType::object_t*>();
 1445|       |    using value_type = typename ConstructibleObjectType::value_type;
 1446|       |    std::transform(
 1447|       |        inner_object->begin(), inner_object->end(),
 1448|       |        std::inserter(obj, obj.begin()),
 1449|       |        [](typename BasicJsonType::object_t::value_type const & p)
 1450|       |    {
 1451|       |        return value_type(p.first, p.second.template get<typename ConstructibleObjectType::mapped_type>());
 1452|       |    });
 1453|       |}
 1454|       |
 1455|       |// overload for arithmetic types, not chosen for basic_json template arguments
 1456|       |// (BooleanType, etc..); note: Is it really necessary to provide explicit
 1457|       |// overloads for boolean_t etc. in case of a custom BooleanType which is not
 1458|       |// an arithmetic type?
 1459|       |template<typename BasicJsonType, typename ArithmeticType,
 1460|       |         enable_if_t <
 1461|       |             std::is_arithmetic<ArithmeticType>::value and
 1462|       |             not std::is_same<ArithmeticType, typename BasicJsonType::number_unsigned_t>::value and
 1463|       |             not std::is_same<ArithmeticType, typename BasicJsonType::number_integer_t>::value and
 1464|       |             not std::is_same<ArithmeticType, typename BasicJsonType::number_float_t>::value and
 1465|       |             not std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,
 1466|       |             int> = 0>
 1467|       |void from_json(const BasicJsonType& j, ArithmeticType& val)
 1468|    155|{
 1469|    155|    switch (static_cast<value_t>(j))
 1470|    155|    {
 1471|    155|        case value_t::number_unsigned:
 1472|    155|        {
 1473|    155|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
 1474|    155|            break;
 1475|    155|        }
 1476|    155|        case value_t::number_integer:
 1477|      0|        {
 1478|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
 1479|      0|            break;
 1480|    155|        }
 1481|    155|        case value_t::number_float:
 1482|      0|        {
 1483|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
 1484|      0|            break;
 1485|    155|        }
 1486|    155|        case value_t::boolean:
 1487|      0|        {
 1488|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::boolean_t*>());
 1489|      0|            break;
 1490|    155|        }
 1491|    155|
 1492|    155|        default:
 1493|      0|            JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
 1494|    155|    }
 1495|    155|}
 1496|       |
 1497|       |template<typename BasicJsonType, typename A1, typename A2>
 1498|       |void from_json(const BasicJsonType& j, std::pair<A1, A2>& p)
 1499|       |{
 1500|       |    p = {j.at(0).template get<A1>(), j.at(1).template get<A2>()};
 1501|       |}
 1502|       |
 1503|       |template<typename BasicJsonType, typename Tuple, std::size_t... Idx>
 1504|       |void from_json_tuple_impl(const BasicJsonType& j, Tuple& t, index_sequence<Idx...> /*unused*/)
 1505|       |{
 1506|       |    t = std::make_tuple(j.at(Idx).template get<typename std::tuple_element<Idx, Tuple>::type>()...);
 1507|       |}
 1508|       |
 1509|       |template<typename BasicJsonType, typename... Args>
 1510|       |void from_json(const BasicJsonType& j, std::tuple<Args...>& t)
 1511|       |{
 1512|       |    from_json_tuple_impl(j, t, index_sequence_for<Args...> {});
 1513|       |}
 1514|       |
 1515|       |template <typename BasicJsonType, typename Key, typename Value, typename Compare, typename Allocator,
 1516|       |          typename = enable_if_t<not std::is_constructible<
 1517|       |                                     typename BasicJsonType::string_t, Key>::value>>
 1518|       |void from_json(const BasicJsonType& j, std::map<Key, Value, Compare, Allocator>& m)
 1519|       |{
 1520|       |    if (JSON_UNLIKELY(not j.is_array()))
 1521|       |    {
 1522|       |        JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(j.type_name())));
 1523|       |    }
 1524|       |    for (const auto& p : j)
 1525|       |    {
 1526|       |        if (JSON_UNLIKELY(not p.is_array()))
 1527|       |        {
 1528|       |            JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(p.type_name())));
 1529|       |        }
 1530|       |        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());
 1531|       |    }
 1532|       |}
 1533|       |
 1534|       |template <typename BasicJsonType, typename Key, typename Value, typename Hash, typename KeyEqual, typename Allocator,
 1535|       |          typename = enable_if_t<not std::is_constructible<
 1536|       |                                     typename BasicJsonType::string_t, Key>::value>>
 1537|       |void from_json(const BasicJsonType& j, std::unordered_map<Key, Value, Hash, KeyEqual, Allocator>& m)
 1538|       |{
 1539|       |    if (JSON_UNLIKELY(not j.is_array()))
 1540|       |    {
 1541|       |        JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(j.type_name())));
 1542|       |    }
 1543|       |    for (const auto& p : j)
 1544|       |    {
 1545|       |        if (JSON_UNLIKELY(not p.is_array()))
 1546|       |        {
 1547|       |            JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(p.type_name())));
 1548|       |        }
 1549|       |        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());
 1550|       |    }
 1551|       |}
 1552|       |
 1553|       |struct from_json_fn
 1554|       |{
 1555|       |    template<typename BasicJsonType, typename T>
 1556|       |    auto operator()(const BasicJsonType& j, T& val) const
 1557|       |    noexcept(noexcept(from_json(j, val)))
 1558|       |    -> decltype(from_json(j, val), void())
 1559|  13.0k|    {
 1560|  13.0k|        return from_json(j, val);
 1561|  13.0k|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEbEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 1559|      2|    {
  | 1560|      2|        return from_json(j, val);
  | 1561|      2|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEESB_EEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 1559|  12.7k|    {
  | 1560|  12.7k|        return from_json(j, val);
  | 1561|  12.7k|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEiEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 1559|    155|    {
  | 1560|    155|        return from_json(j, val);
  | 1561|    155|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEdEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 1559|    148|    {
  | 1560|    148|        return from_json(j, val);
  | 1561|    148|    }
  ------------------
 1562|       |};
 1563|       |}  // namespace detail
 1564|       |
 1565|       |/// namespace to hold default `from_json` function
 1566|       |/// to see why this is required:
 1567|       |/// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html
 1568|       |namespace
 1569|       |{
 1570|       |constexpr const auto& from_json = detail::static_const<detail::from_json_fn>::value;
 1571|       |} // namespace
 1572|       |}  // namespace nlohmann
 1573|       |
 1574|       |// #include <nlohmann/detail/conversions/to_json.hpp>
 1575|       |
 1576|       |
 1577|       |#include <ciso646> // or, and, not
 1578|       |#include <iterator> // begin, end
 1579|       |#include <tuple> // tuple, get
 1580|       |#include <type_traits> // is_same, is_constructible, is_floating_point, is_enum, underlying_type
 1581|       |#include <utility> // move, forward, declval, pair
 1582|       |#include <valarray> // valarray
 1583|       |#include <vector> // vector
 1584|       |
 1585|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
 1586|       |
 1587|       |// #include <nlohmann/detail/meta/type_traits.hpp>
 1588|       |
 1589|       |// #include <nlohmann/detail/value_t.hpp>
 1590|       |
 1591|       |// #include <nlohmann/detail/iterators/iteration_proxy.hpp>
 1592|       |
 1593|       |
 1594|       |#include <cstddef> // size_t
 1595|       |#include <string> // string, to_string
 1596|       |#include <iterator> // input_iterator_tag
 1597|       |
 1598|       |// #include <nlohmann/detail/value_t.hpp>
 1599|       |
 1600|       |
 1601|       |namespace nlohmann
 1602|       |{
 1603|       |namespace detail
 1604|       |{
 1605|       |/// proxy class for the items() function
 1606|       |template<typename IteratorType> class iteration_proxy
 1607|       |{
 1608|       |  private:
 1609|       |    /// helper class for iteration
 1610|       |    class iteration_proxy_internal
 1611|       |    {
 1612|       |      public:
 1613|       |        using difference_type = std::ptrdiff_t;
 1614|       |        using value_type = iteration_proxy_internal;
 1615|       |        using pointer = iteration_proxy_internal*;
 1616|       |        using reference = iteration_proxy_internal&;
 1617|       |        using iterator_category = std::input_iterator_tag;
 1618|       |
 1619|       |      private:
 1620|       |        /// the iterator
 1621|       |        IteratorType anchor;
 1622|       |        /// an index for arrays (used to create key names)
 1623|       |        std::size_t array_index = 0;
 1624|       |        /// last stringified array index
 1625|       |        mutable std::size_t array_index_last = 0;
 1626|       |        /// a string representation of the array index
 1627|       |        mutable std::string array_index_str = "0";
 1628|       |        /// an empty string (to return a reference for primitive values)
 1629|       |        const std::string empty_str = "";
 1630|       |
 1631|       |      public:
 1632|       |        explicit iteration_proxy_internal(IteratorType it) noexcept : anchor(it) {}
 1633|       |
 1634|       |        /// dereference operator (needed for range-based for)
 1635|       |        iteration_proxy_internal& operator*()
 1636|       |        {
 1637|       |            return *this;
 1638|       |        }
 1639|       |
 1640|       |        /// increment operator (needed for range-based for)
 1641|       |        iteration_proxy_internal& operator++()
 1642|       |        {
 1643|       |            ++anchor;
 1644|       |            ++array_index;
 1645|       |
 1646|       |            return *this;
 1647|       |        }
 1648|       |
 1649|       |        /// equality operator (needed for InputIterator)
 1650|       |        bool operator==(const iteration_proxy_internal& o) const noexcept
 1651|       |        {
 1652|       |            return anchor == o.anchor;
 1653|       |        }
 1654|       |
 1655|       |        /// inequality operator (needed for range-based for)
 1656|       |        bool operator!=(const iteration_proxy_internal& o) const noexcept
 1657|       |        {
 1658|       |            return anchor != o.anchor;
 1659|       |        }
 1660|       |
 1661|       |        /// return key of the iterator
 1662|       |        const std::string& key() const
 1663|       |        {
 1664|       |            assert(anchor.m_object != nullptr);
 1665|       |
 1666|       |            switch (anchor.m_object->type())
 1667|       |            {
 1668|       |                // use integer array index as key
 1669|       |                case value_t::array:
 1670|       |                {
 1671|       |                    if (array_index != array_index_last)
 1672|       |                    {
 1673|       |                        array_index_str = std::to_string(array_index);
 1674|       |                        array_index_last = array_index;
 1675|       |                    }
 1676|       |                    return array_index_str;
 1677|       |                }
 1678|       |
 1679|       |                // use key from the object
 1680|       |                case value_t::object:
 1681|       |                    return anchor.key();
 1682|       |
 1683|       |                // use an empty key for all primitive types
 1684|       |                default:
 1685|       |                    return empty_str;
 1686|       |            }
 1687|       |        }
 1688|       |
 1689|       |        /// return value of the iterator
 1690|       |        typename IteratorType::reference value() const
 1691|       |        {
 1692|       |            return anchor.value();
 1693|       |        }
 1694|       |    };
 1695|       |
 1696|       |    /// the container to iterate
 1697|       |    typename IteratorType::reference container;
 1698|       |
 1699|       |  public:
 1700|       |    /// construct iteration proxy from a container
 1701|       |    explicit iteration_proxy(typename IteratorType::reference cont) noexcept
 1702|       |        : container(cont) {}
 1703|       |
 1704|       |    /// return iterator begin (needed for range-based for)
 1705|       |    iteration_proxy_internal begin() noexcept
 1706|       |    {
 1707|       |        return iteration_proxy_internal(container.begin());
 1708|       |    }
 1709|       |
 1710|       |    /// return iterator end (needed for range-based for)
 1711|       |    iteration_proxy_internal end() noexcept
 1712|       |    {
 1713|       |        return iteration_proxy_internal(container.end());
 1714|       |    }
 1715|       |};
 1716|       |}  // namespace detail
 1717|       |}  // namespace nlohmann
 1718|       |
 1719|       |
 1720|       |namespace nlohmann
 1721|       |{
 1722|       |namespace detail
 1723|       |{
 1724|       |//////////////////
 1725|       |// constructors //
 1726|       |//////////////////
 1727|       |
 1728|       |template<value_t> struct external_constructor;
 1729|       |
 1730|       |template<>
 1731|       |struct external_constructor<value_t::boolean>
 1732|       |{
 1733|       |    template<typename BasicJsonType>
 1734|       |    static void construct(BasicJsonType& j, typename BasicJsonType::boolean_t b) noexcept
 1735|    621|    {
 1736|    621|        j.m_type = value_t::boolean;
 1737|    621|        j.m_value = b;
 1738|    621|        j.assert_invariant();
 1739|    621|    }
 1740|       |};
 1741|       |
 1742|       |template<>
 1743|       |struct external_constructor<value_t::string>
 1744|       |{
 1745|       |    template<typename BasicJsonType>
 1746|       |    static void construct(BasicJsonType& j, const typename BasicJsonType::string_t& s)
 1747|  66.5k|    {
 1748|  66.5k|        j.m_type = value_t::string;
 1749|  66.5k|        j.m_value = s;
 1750|  66.5k|        j.assert_invariant();
 1751|  66.5k|    }
 1752|       |
 1753|       |    template<typename BasicJsonType>
 1754|       |    static void construct(BasicJsonType& j, typename BasicJsonType::string_t&& s)
 1755|    513|    {
 1756|    513|        j.m_type = value_t::string;
 1757|    513|        j.m_value = std::move(s);
 1758|    513|        j.assert_invariant();
 1759|    513|    }
 1760|       |
 1761|       |    template<typename BasicJsonType, typename CompatibleStringType,
 1762|       |             enable_if_t<not std::is_same<CompatibleStringType, typename BasicJsonType::string_t>::value,
 1763|       |                         int> = 0>
 1764|       |    static void construct(BasicJsonType& j, const CompatibleStringType& str)
 1765|    226|    {
 1766|    226|        j.m_type = value_t::string;
 1767|    226|        j.m_value.string = j.template create<typename BasicJsonType::string_t>(str);
 1768|    226|        j.assert_invariant();
 1769|    226|    }
  ------------------
  | _ZN8nlohmann6detail20external_constructorILNS0_7value_tE3EE9constructINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEA474_cLi0EEEvRT_RKT0_:
  | 1765|    205|    {
  | 1766|    205|        j.m_type = value_t::string;
  | 1767|    205|        j.m_value.string = j.template create<typename BasicJsonType::string_t>(str);
  | 1768|    205|        j.assert_invariant();
  | 1769|    205|    }
  ------------------
  | _ZN8nlohmann6detail20external_constructorILNS0_7value_tE3EE9constructINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEPKcLi0EEEvRT_RKT0_:
  | 1765|     20|    {
  | 1766|     20|        j.m_type = value_t::string;
  | 1767|     20|        j.m_value.string = j.template create<typename BasicJsonType::string_t>(str);
  | 1768|     20|        j.assert_invariant();
  | 1769|     20|    }
  ------------------
  | _ZN8nlohmann6detail20external_constructorILNS0_7value_tE3EE9constructINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEA6_cLi0EEEvRT_RKT0_:
  | 1765|      1|    {
  | 1766|      1|        j.m_type = value_t::string;
  | 1767|      1|        j.m_value.string = j.template create<typename BasicJsonType::string_t>(str);
  | 1768|      1|        j.assert_invariant();
  | 1769|      1|    }
  ------------------
 1770|       |};
 1771|       |
 1772|       |template<>
 1773|       |struct external_constructor<value_t::number_float>
 1774|       |{
 1775|       |    template<typename BasicJsonType>
 1776|       |    static void construct(BasicJsonType& j, typename BasicJsonType::number_float_t val) noexcept
 1777|  59.2k|    {
 1778|  59.2k|        j.m_type = value_t::number_float;
 1779|  59.2k|        j.m_value = val;
 1780|  59.2k|        j.assert_invariant();
 1781|  59.2k|    }
 1782|       |};
 1783|       |
 1784|       |template<>
 1785|       |struct external_constructor<value_t::number_unsigned>
 1786|       |{
 1787|       |    template<typename BasicJsonType>
 1788|       |    static void construct(BasicJsonType& j, typename BasicJsonType::number_unsigned_t val) noexcept
 1789|  79.5k|    {
 1790|  79.5k|        j.m_type = value_t::number_unsigned;
 1791|  79.5k|        j.m_value = val;
 1792|  79.5k|        j.assert_invariant();
 1793|  79.5k|    }
 1794|       |};
 1795|       |
 1796|       |template<>
 1797|       |struct external_constructor<value_t::number_integer>
 1798|       |{
 1799|       |    template<typename BasicJsonType>
 1800|       |    static void construct(BasicJsonType& j, typename BasicJsonType::number_integer_t val) noexcept
 1801|  9.45k|    {
 1802|  9.45k|        j.m_type = value_t::number_integer;
 1803|  9.45k|        j.m_value = val;
 1804|  9.45k|        j.assert_invariant();
 1805|  9.45k|    }
 1806|       |};
 1807|       |
 1808|       |template<>
 1809|       |struct external_constructor<value_t::array>
 1810|       |{
 1811|       |    template<typename BasicJsonType>
 1812|       |    static void construct(BasicJsonType& j, const typename BasicJsonType::array_t& arr)
 1813|       |    {
 1814|       |        j.m_type = value_t::array;
 1815|       |        j.m_value = arr;
 1816|       |        j.assert_invariant();
 1817|       |    }
 1818|       |
 1819|       |    template<typename BasicJsonType>
 1820|       |    static void construct(BasicJsonType& j, typename BasicJsonType::array_t&& arr)
 1821|       |    {
 1822|       |        j.m_type = value_t::array;
 1823|       |        j.m_value = std::move(arr);
 1824|       |        j.assert_invariant();
 1825|       |    }
 1826|       |
 1827|       |    template<typename BasicJsonType, typename CompatibleArrayType,
 1828|       |             enable_if_t<not std::is_same<CompatibleArrayType, typename BasicJsonType::array_t>::value,
 1829|       |                         int> = 0>
 1830|       |    static void construct(BasicJsonType& j, const CompatibleArrayType& arr)
 1831|       |    {
 1832|       |        using std::begin;
 1833|       |        using std::end;
 1834|       |        j.m_type = value_t::array;
 1835|       |        j.m_value.array = j.template create<typename BasicJsonType::array_t>(begin(arr), end(arr));
 1836|       |        j.assert_invariant();
 1837|       |    }
 1838|       |
 1839|       |    template<typename BasicJsonType>
 1840|       |    static void construct(BasicJsonType& j, const std::vector<bool>& arr)
 1841|       |    {
 1842|       |        j.m_type = value_t::array;
 1843|       |        j.m_value = value_t::array;
 1844|       |        j.m_value.array->reserve(arr.size());
 1845|       |        for (const bool x : arr)
 1846|       |        {
 1847|       |            j.m_value.array->push_back(x);
 1848|       |        }
 1849|       |        j.assert_invariant();
 1850|       |    }
 1851|       |
 1852|       |    template<typename BasicJsonType, typename T,
 1853|       |             enable_if_t<std::is_convertible<T, BasicJsonType>::value, int> = 0>
 1854|       |    static void construct(BasicJsonType& j, const std::valarray<T>& arr)
 1855|       |    {
 1856|       |        j.m_type = value_t::array;
 1857|       |        j.m_value = value_t::array;
 1858|       |        j.m_value.array->resize(arr.size());
 1859|       |        std::copy(std::begin(arr), std::end(arr), j.m_value.array->begin());
 1860|       |        j.assert_invariant();
 1861|       |    }
 1862|       |};
 1863|       |
 1864|       |template<>
 1865|       |struct external_constructor<value_t::object>
 1866|       |{
 1867|       |    template<typename BasicJsonType>
 1868|       |    static void construct(BasicJsonType& j, const typename BasicJsonType::object_t& obj)
 1869|       |    {
 1870|       |        j.m_type = value_t::object;
 1871|       |        j.m_value = obj;
 1872|       |        j.assert_invariant();
 1873|       |    }
 1874|       |
 1875|       |    template<typename BasicJsonType>
 1876|       |    static void construct(BasicJsonType& j, typename BasicJsonType::object_t&& obj)
 1877|       |    {
 1878|       |        j.m_type = value_t::object;
 1879|       |        j.m_value = std::move(obj);
 1880|       |        j.assert_invariant();
 1881|       |    }
 1882|       |
 1883|       |    template<typename BasicJsonType, typename CompatibleObjectType,
 1884|       |             enable_if_t<not std::is_same<CompatibleObjectType, typename BasicJsonType::object_t>::value, int> = 0>
 1885|       |    static void construct(BasicJsonType& j, const CompatibleObjectType& obj)
 1886|       |    {
 1887|       |        using std::begin;
 1888|       |        using std::end;
 1889|       |
 1890|       |        j.m_type = value_t::object;
 1891|       |        j.m_value.object = j.template create<typename BasicJsonType::object_t>(begin(obj), end(obj));
 1892|       |        j.assert_invariant();
 1893|       |    }
 1894|       |};
 1895|       |
 1896|       |/////////////
 1897|       |// to_json //
 1898|       |/////////////
 1899|       |
 1900|       |template<typename BasicJsonType, typename T,
 1901|       |         enable_if_t<std::is_same<T, typename BasicJsonType::boolean_t>::value, int> = 0>
 1902|       |void to_json(BasicJsonType& j, T b) noexcept
 1903|    621|{
 1904|    621|    external_constructor<value_t::boolean>::construct(j, b);
 1905|    621|}
 1906|       |
 1907|       |template<typename BasicJsonType, typename CompatibleString,
 1908|       |         enable_if_t<std::is_constructible<typename BasicJsonType::string_t, CompatibleString>::value, int> = 0>
 1909|       |void to_json(BasicJsonType& j, const CompatibleString& s)
 1910|  66.8k|{
 1911|  66.8k|    external_constructor<value_t::string>::construct(j, s);
 1912|  66.8k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEESA_Li0EEEvRT_RKT0_:
  | 1910|  66.5k|{
  | 1911|  66.5k|    external_constructor<value_t::string>::construct(j, s);
  | 1912|  66.5k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEA474_cLi0EEEvRT_RKT0_:
  | 1910|    205|{
  | 1911|    205|    external_constructor<value_t::string>::construct(j, s);
  | 1912|    205|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEPKcLi0EEEvRT_RKT0_:
  | 1910|     20|{
  | 1911|     20|    external_constructor<value_t::string>::construct(j, s);
  | 1912|     20|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEA6_cLi0EEEvRT_RKT0_:
  | 1910|      1|{
  | 1911|      1|    external_constructor<value_t::string>::construct(j, s);
  | 1912|      1|}
  ------------------
 1913|       |
 1914|       |template<typename BasicJsonType>
 1915|       |void to_json(BasicJsonType& j, typename BasicJsonType::string_t&& s)
 1916|    513|{
 1917|    513|    external_constructor<value_t::string>::construct(j, std::move(s));
 1918|    513|}
 1919|       |
 1920|       |template<typename BasicJsonType, typename FloatType,
 1921|       |         enable_if_t<std::is_floating_point<FloatType>::value, int> = 0>
 1922|       |void to_json(BasicJsonType& j, FloatType val) noexcept
 1923|  59.2k|{
 1924|  59.2k|    external_constructor<value_t::number_float>::construct(j, static_cast<typename BasicJsonType::number_float_t>(val));
 1925|  59.2k|}
 1926|       |
 1927|       |template<typename BasicJsonType, typename CompatibleNumberUnsignedType,
 1928|       |         enable_if_t<is_compatible_integer_type<typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType>::value, int> = 0>
 1929|       |void to_json(BasicJsonType& j, CompatibleNumberUnsignedType val) noexcept
 1930|  79.5k|{
 1931|  79.5k|    external_constructor<value_t::number_unsigned>::construct(j, static_cast<typename BasicJsonType::number_unsigned_t>(val));
 1932|  79.5k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEmLi0EEEvRT_T0_:
  | 1930|  79.3k|{
  | 1931|  79.3k|    external_constructor<value_t::number_unsigned>::construct(j, static_cast<typename BasicJsonType::number_unsigned_t>(val));
  | 1932|  79.3k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEjLi0EEEvRT_T0_:
  | 1930|    171|{
  | 1931|    171|    external_constructor<value_t::number_unsigned>::construct(j, static_cast<typename BasicJsonType::number_unsigned_t>(val));
  | 1932|    171|}
  ------------------
 1933|       |
 1934|       |template<typename BasicJsonType, typename CompatibleNumberIntegerType,
 1935|       |         enable_if_t<is_compatible_integer_type<typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType>::value, int> = 0>
 1936|       |void to_json(BasicJsonType& j, CompatibleNumberIntegerType val) noexcept
 1937|  9.45k|{
 1938|  9.45k|    external_constructor<value_t::number_integer>::construct(j, static_cast<typename BasicJsonType::number_integer_t>(val));
 1939|  9.45k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEElLi0EEEvRT_T0_:
  | 1937|  9.45k|{
  | 1938|  9.45k|    external_constructor<value_t::number_integer>::construct(j, static_cast<typename BasicJsonType::number_integer_t>(val));
  | 1939|  9.45k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEiLi0EEEvRT_T0_:
  | 1937|      1|{
  | 1938|      1|    external_constructor<value_t::number_integer>::construct(j, static_cast<typename BasicJsonType::number_integer_t>(val));
  | 1939|      1|}
  ------------------
 1940|       |
 1941|       |template<typename BasicJsonType, typename EnumType,
 1942|       |         enable_if_t<std::is_enum<EnumType>::value, int> = 0>
 1943|       |void to_json(BasicJsonType& j, EnumType e) noexcept
 1944|       |{
 1945|       |    using underlying_type = typename std::underlying_type<EnumType>::type;
 1946|       |    external_constructor<value_t::number_integer>::construct(j, static_cast<underlying_type>(e));
 1947|       |}
 1948|       |
 1949|       |template<typename BasicJsonType>
 1950|       |void to_json(BasicJsonType& j, const std::vector<bool>& e)
 1951|       |{
 1952|       |    external_constructor<value_t::array>::construct(j, e);
 1953|       |}
 1954|       |
 1955|       |template <typename BasicJsonType, typename CompatibleArrayType,
 1956|       |          enable_if_t<is_compatible_array_type<BasicJsonType,
 1957|       |                      CompatibleArrayType>::value and
 1958|       |                      not is_compatible_object_type<
 1959|       |                          BasicJsonType, CompatibleArrayType>::value and
 1960|       |                      not is_compatible_string_type<BasicJsonType, CompatibleArrayType>::value and
 1961|       |                      not is_basic_json<CompatibleArrayType>::value,
 1962|       |                      int> = 0>
 1963|       |void to_json(BasicJsonType& j, const CompatibleArrayType& arr)
 1964|       |{
 1965|       |    external_constructor<value_t::array>::construct(j, arr);
 1966|       |}
 1967|       |
 1968|       |template<typename BasicJsonType, typename T,
 1969|       |         enable_if_t<std::is_convertible<T, BasicJsonType>::value, int> = 0>
 1970|       |void to_json(BasicJsonType& j, const std::valarray<T>& arr)
 1971|       |{
 1972|       |    external_constructor<value_t::array>::construct(j, std::move(arr));
 1973|       |}
 1974|       |
 1975|       |template<typename BasicJsonType>
 1976|       |void to_json(BasicJsonType& j, typename BasicJsonType::array_t&& arr)
 1977|       |{
 1978|       |    external_constructor<value_t::array>::construct(j, std::move(arr));
 1979|       |}
 1980|       |
 1981|       |template<typename BasicJsonType, typename CompatibleObjectType,
 1982|       |         enable_if_t<is_compatible_object_type<BasicJsonType, CompatibleObjectType>::value and not is_basic_json<CompatibleObjectType>::value, int> = 0>
 1983|       |void to_json(BasicJsonType& j, const CompatibleObjectType& obj)
 1984|       |{
 1985|       |    external_constructor<value_t::object>::construct(j, obj);
 1986|       |}
 1987|       |
 1988|       |template<typename BasicJsonType>
 1989|       |void to_json(BasicJsonType& j, typename BasicJsonType::object_t&& obj)
 1990|       |{
 1991|       |    external_constructor<value_t::object>::construct(j, std::move(obj));
 1992|       |}
 1993|       |
 1994|       |template <
 1995|       |    typename BasicJsonType, typename T, std::size_t N,
 1996|       |    enable_if_t<not std::is_constructible<typename BasicJsonType::string_t,
 1997|       |                const T (&)[N]>::value,
 1998|       |                int> = 0 >
 1999|       |void to_json(BasicJsonType& j, const T (&arr)[N])
 2000|       |{
 2001|       |    external_constructor<value_t::array>::construct(j, arr);
 2002|       |}
 2003|       |
 2004|       |template<typename BasicJsonType, typename... Args>
 2005|       |void to_json(BasicJsonType& j, const std::pair<Args...>& p)
 2006|       |{
 2007|       |    j = {p.first, p.second};
 2008|       |}
 2009|       |
 2010|       |// for https://github.com/nlohmann/json/pull/1134
 2011|       |template<typename BasicJsonType, typename T,
 2012|       |         enable_if_t<std::is_same<T, typename iteration_proxy<typename BasicJsonType::iterator>::iteration_proxy_internal>::value, int> = 0>
 2013|       |void to_json(BasicJsonType& j, const T& b)
 2014|       |{
 2015|       |    j = {{b.key(), b.value()}};
 2016|       |}
 2017|       |
 2018|       |template<typename BasicJsonType, typename Tuple, std::size_t... Idx>
 2019|       |void to_json_tuple_impl(BasicJsonType& j, const Tuple& t, index_sequence<Idx...> /*unused*/)
 2020|       |{
 2021|       |    j = {std::get<Idx>(t)...};
 2022|       |}
 2023|       |
 2024|       |template<typename BasicJsonType, typename... Args>
 2025|       |void to_json(BasicJsonType& j, const std::tuple<Args...>& t)
 2026|       |{
 2027|       |    to_json_tuple_impl(j, t, index_sequence_for<Args...> {});
 2028|       |}
 2029|       |
 2030|       |struct to_json_fn
 2031|       |{
 2032|       |    template<typename BasicJsonType, typename T>
 2033|       |    auto operator()(BasicJsonType& j, T&& val) const noexcept(noexcept(to_json(j, std::forward<T>(val))))
 2034|       |    -> decltype(to_json(j, std::forward<T>(val)), void())
 2035|   216k|    {
 2036|   216k|        return to_json(j, std::forward<T>(val));
 2037|   216k|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERSB_EEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 2035|  66.5k|    {
  | 2036|  66.5k|        return to_json(j, std::forward<T>(val));
  | 2037|  66.5k|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERdEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 2035|  59.2k|    {
  | 2036|  59.2k|        return to_json(j, std::forward<T>(val));
  | 2037|  59.2k|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERbEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 2035|    620|    {
  | 2036|    620|        return to_json(j, std::forward<T>(val));
  | 2037|    620|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERlEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 2035|  9.45k|    {
  | 2036|  9.45k|        return to_json(j, std::forward<T>(val));
  | 2037|  9.45k|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERmEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 2035|  79.3k|    {
  | 2036|  79.3k|        return to_json(j, std::forward<T>(val));
  | 2037|  79.3k|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERA474_KcEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSH_:
  | 2035|    205|    {
  | 2036|    205|        return to_json(j, std::forward<T>(val));
  | 2037|    205|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEESB_EEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 2035|    513|    {
  | 2036|    513|        return to_json(j, std::forward<T>(val));
  | 2037|    513|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEKSB_EEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 2035|     57|    {
  | 2036|     57|        return to_json(j, std::forward<T>(val));
  | 2037|     57|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERjEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 2035|    171|    {
  | 2036|    171|        return to_json(j, std::forward<T>(val));
  | 2037|    171|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERKPKcEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSI_:
  | 2035|     20|    {
  | 2036|     20|        return to_json(j, std::forward<T>(val));
  | 2037|     20|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEbEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 2035|      1|    {
  | 2036|      1|        return to_json(j, std::forward<T>(val));
  | 2037|      1|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEdEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 2035|      1|    {
  | 2036|      1|        return to_json(j, std::forward<T>(val));
  | 2037|      1|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERA6_KcEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSH_:
  | 2035|      1|    {
  | 2036|      1|        return to_json(j, std::forward<T>(val));
  | 2037|      1|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEiEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 2035|      1|    {
  | 2036|      1|        return to_json(j, std::forward<T>(val));
  | 2037|      1|    }
  ------------------
 2038|       |};
 2039|       |}  // namespace detail
 2040|       |
 2041|       |/// namespace to hold default `to_json` function
 2042|       |namespace
 2043|       |{
 2044|       |constexpr const auto& to_json = detail::static_const<detail::to_json_fn>::value;
 2045|       |} // namespace
 2046|       |}  // namespace nlohmann
 2047|       |
 2048|       |// #include <nlohmann/detail/input/input_adapters.hpp>
 2049|       |
 2050|       |
 2051|       |#include <cassert> // assert
 2052|       |#include <cstddef> // size_t
 2053|       |#include <cstring> // strlen
 2054|       |#include <istream> // istream
 2055|       |#include <iterator> // begin, end, iterator_traits, random_access_iterator_tag, distance, next
 2056|       |#include <memory> // shared_ptr, make_shared, addressof
 2057|       |#include <numeric> // accumulate
 2058|       |#include <string> // string, char_traits
 2059|       |#include <type_traits> // enable_if, is_base_of, is_pointer, is_integral, remove_pointer
 2060|       |#include <utility> // pair, declval
 2061|       |#include <cstdio> //FILE *
 2062|       |
 2063|       |// #include <nlohmann/detail/macro_scope.hpp>
 2064|       |
 2065|       |
 2066|       |namespace nlohmann
 2067|       |{
 2068|       |namespace detail
 2069|       |{
 2070|       |/// the supported input formats
 2071|       |enum class input_format_t { json, cbor, msgpack, ubjson, bson };
 2072|       |
 2073|       |////////////////////
 2074|       |// input adapters //
 2075|       |////////////////////
 2076|       |
 2077|       |/*!
 2078|       |@brief abstract input adapter interface
 2079|       |
 2080|       |Produces a stream of std::char_traits<char>::int_type characters from a
 2081|       |std::istream, a buffer, or some other input type. Accepts the return of
 2082|       |exactly one non-EOF character for future input. The int_type characters
 2083|       |returned consist of all valid char values as positive values (typically
 2084|       |unsigned char), plus an EOF value outside that range, specified by the value
 2085|       |of the function std::char_traits<char>::eof(). This value is typically -1, but
 2086|       |could be any arbitrary value which is not a valid char value.
 2087|       |*/
 2088|       |struct input_adapter_protocol
 2089|       |{
 2090|       |    /// get a character [0,255] or std::char_traits<char>::eof().
 2091|       |    virtual std::char_traits<char>::int_type get_character() = 0;
 2092|    866|    virtual ~input_adapter_protocol() = default;
 2093|       |};
 2094|       |
 2095|       |/// a type to simplify interfaces
 2096|       |using input_adapter_t = std::shared_ptr<input_adapter_protocol>;
 2097|       |
 2098|       |/*!
 2099|       |Input adapter for stdio file access. This adapter read only 1 byte and do not use any
 2100|       | buffer. This adapter is a very low level adapter.
 2101|       |*/
 2102|       |class file_input_adapter : public input_adapter_protocol
 2103|       |{
 2104|       |  public:
 2105|       |    explicit file_input_adapter(std::FILE* f)  noexcept
 2106|       |        : m_file(f)
 2107|      0|    {}
 2108|       |
 2109|       |    std::char_traits<char>::int_type get_character() noexcept override
 2110|      0|    {
 2111|      0|        return std::fgetc(m_file);
 2112|      0|    }
 2113|       |  private:
 2114|       |    /// the file pointer to read from
 2115|       |    std::FILE* m_file;
 2116|       |};
 2117|       |
 2118|       |
 2119|       |/*!
 2120|       |Input adapter for a (caching) istream. Ignores a UFT Byte Order Mark at
 2121|       |beginning of input. Does not support changing the underlying std::streambuf
 2122|       |in mid-input. Maintains underlying std::istream and std::streambuf to support
 2123|       |subsequent use of standard std::istream operations to process any input
 2124|       |characters following those used in parsing the JSON input.  Clears the
 2125|       |std::istream flags; any input errors (e.g., EOF) will be detected by the first
 2126|       |subsequent call for input from the std::istream.
 2127|       |*/
 2128|       |class input_stream_adapter : public input_adapter_protocol
 2129|       |{
 2130|       |  public:
 2131|       |    ~input_stream_adapter() override
 2132|    205|    {
 2133|    205|        // clear stream flags; we use underlying streambuf I/O, do not
 2134|    205|        // maintain ifstream flags, except eof
 2135|    205|        is.clear(is.rdstate() & std::ios::eofbit);
 2136|    205|    }
 2137|       |
 2138|       |    explicit input_stream_adapter(std::istream& i)
 2139|       |        : is(i), sb(*i.rdbuf())
 2140|    205|    {}
 2141|       |
 2142|       |    // delete because of pointer members
 2143|       |    input_stream_adapter(const input_stream_adapter&) = delete;
 2144|       |    input_stream_adapter& operator=(input_stream_adapter&) = delete;
 2145|       |    input_stream_adapter(input_stream_adapter&&) = delete;
 2146|       |    input_stream_adapter& operator=(input_stream_adapter&&) = delete;
 2147|       |
 2148|       |    // std::istream/std::streambuf use std::char_traits<char>::to_int_type, to
 2149|       |    // ensure that std::char_traits<char>::eof() and the character 0xFF do not
 2150|       |    // end up as the same value, eg. 0xFFFFFFFF.
 2151|       |    std::char_traits<char>::int_type get_character() override
 2152|   528k|    {
 2153|   528k|        auto res = sb.sbumpc();
 2154|   528k|        // set eof manually, as we don't use the istream interface.
 2155|   528k|        if (res == EOF)
 2156|   528k|        {
 2157|      0|            is.clear(is.rdstate() | std::ios::eofbit);
 2158|      0|        }
 2159|   528k|        return res;
 2160|   528k|    }
 2161|       |
 2162|       |  private:
 2163|       |    /// the associated input stream
 2164|       |    std::istream& is;
 2165|       |    std::streambuf& sb;
 2166|       |};
 2167|       |
 2168|       |/// input adapter for buffer input
 2169|       |class input_buffer_adapter : public input_adapter_protocol
 2170|       |{
 2171|       |  public:
 2172|       |    input_buffer_adapter(const char* b, const std::size_t l) noexcept
 2173|       |        : cursor(b), limit(b + l)
 2174|    661|    {}
 2175|       |
 2176|       |    // delete because of pointer members
 2177|       |    input_buffer_adapter(const input_buffer_adapter&) = delete;
 2178|       |    input_buffer_adapter& operator=(input_buffer_adapter&) = delete;
 2179|       |    input_buffer_adapter(input_buffer_adapter&&) = delete;
 2180|       |    input_buffer_adapter& operator=(input_buffer_adapter&&) = delete;
 2181|       |    ~input_buffer_adapter() override = default;
 2182|       |
 2183|       |    std::char_traits<char>::int_type get_character() noexcept override
 2184|  4.24M|    {
 2185|  4.24M|        if (JSON_LIKELY(cursor < limit))
 2186|  4.24M|        {
 2187|  4.24M|            return std::char_traits<char>::to_int_type(*(cursor++));
 2188|  4.24M|        }
 2189|     46|
 2190|     46|        return std::char_traits<char>::eof();
 2191|     46|    }
 2192|       |
 2193|       |  private:
 2194|       |    /// pointer to the current character
 2195|       |    const char* cursor;
 2196|       |    /// pointer past the last character
 2197|       |    const char* const limit;
 2198|       |};
 2199|       |
 2200|       |template<typename WideStringType, size_t T>
 2201|       |struct wide_string_input_helper
 2202|       |{
 2203|       |    // UTF-32
 2204|       |    static void fill_buffer(const WideStringType& str, size_t& current_wchar, std::array<std::char_traits<char>::int_type, 4>& utf8_bytes, size_t& utf8_bytes_index, size_t& utf8_bytes_filled)
 2205|      0|    {
 2206|      0|        utf8_bytes_index = 0;
 2207|      0|
 2208|      0|        if (current_wchar == str.size())
 2209|      0|        {
 2210|      0|            utf8_bytes[0] = std::char_traits<char>::eof();
 2211|      0|            utf8_bytes_filled = 1;
 2212|      0|        }
 2213|      0|        else
 2214|      0|        {
 2215|      0|            // get the current character
 2216|      0|            const auto wc = static_cast<int>(str[current_wchar++]);
 2217|      0|
 2218|      0|            // UTF-32 to UTF-8 encoding
 2219|      0|            if (wc < 0x80)
 2220|      0|            {
 2221|      0|                utf8_bytes[0] = wc;
 2222|      0|                utf8_bytes_filled = 1;
 2223|      0|            }
 2224|      0|            else if (wc <= 0x7FF)
 2225|      0|            {
 2226|      0|                utf8_bytes[0] = 0xC0 | ((wc >> 6) & 0x1F);
 2227|      0|                utf8_bytes[1] = 0x80 | (wc & 0x3F);
 2228|      0|                utf8_bytes_filled = 2;
 2229|      0|            }
 2230|      0|            else if (wc <= 0xFFFF)
 2231|      0|            {
 2232|      0|                utf8_bytes[0] = 0xE0 | ((wc >> 12) & 0x0F);
 2233|      0|                utf8_bytes[1] = 0x80 | ((wc >> 6) & 0x3F);
 2234|      0|                utf8_bytes[2] = 0x80 | (wc & 0x3F);
 2235|      0|                utf8_bytes_filled = 3;
 2236|      0|            }
 2237|      0|            else if (wc <= 0x10FFFF)
 2238|      0|            {
 2239|      0|                utf8_bytes[0] = 0xF0 | ((wc >> 18) & 0x07);
 2240|      0|                utf8_bytes[1] = 0x80 | ((wc >> 12) & 0x3F);
 2241|      0|                utf8_bytes[2] = 0x80 | ((wc >> 6) & 0x3F);
 2242|      0|                utf8_bytes[3] = 0x80 | (wc & 0x3F);
 2243|      0|                utf8_bytes_filled = 4;
 2244|      0|            }
 2245|      0|            else
 2246|      0|            {
 2247|      0|                // unknown character
 2248|      0|                utf8_bytes[0] = wc;
 2249|      0|                utf8_bytes_filled = 1;
 2250|      0|            }
 2251|      0|        }
 2252|      0|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail24wide_string_input_helperINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEELm4EE11fill_bufferERKS7_RmRSt5arrayIiLm4EESB_SB_
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail24wide_string_input_helperINSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEELm4EE11fill_bufferERKS7_RmRSt5arrayIiLm4EESB_SB_
  ------------------
 2253|       |};
 2254|       |
 2255|       |template<typename WideStringType>
 2256|       |struct wide_string_input_helper<WideStringType, 2>
 2257|       |{
 2258|       |    // UTF-16
 2259|       |    static void fill_buffer(const WideStringType& str, size_t& current_wchar, std::array<std::char_traits<char>::int_type, 4>& utf8_bytes, size_t& utf8_bytes_index, size_t& utf8_bytes_filled)
 2260|      0|    {
 2261|      0|        utf8_bytes_index = 0;
 2262|      0|
 2263|      0|        if (current_wchar == str.size())
 2264|      0|        {
 2265|      0|            utf8_bytes[0] = std::char_traits<char>::eof();
 2266|      0|            utf8_bytes_filled = 1;
 2267|      0|        }
 2268|      0|        else
 2269|      0|        {
 2270|      0|            // get the current character
 2271|      0|            const auto wc = static_cast<int>(str[current_wchar++]);
 2272|      0|
 2273|      0|            // UTF-16 to UTF-8 encoding
 2274|      0|            if (wc < 0x80)
 2275|      0|            {
 2276|      0|                utf8_bytes[0] = wc;
 2277|      0|                utf8_bytes_filled = 1;
 2278|      0|            }
 2279|      0|            else if (wc <= 0x7FF)
 2280|      0|            {
 2281|      0|                utf8_bytes[0] = 0xC0 | ((wc >> 6));
 2282|      0|                utf8_bytes[1] = 0x80 | (wc & 0x3F);
 2283|      0|                utf8_bytes_filled = 2;
 2284|      0|            }
 2285|      0|            else if (0xD800 > wc or wc >= 0xE000)
 2286|      0|            {
 2287|      0|                utf8_bytes[0] = 0xE0 | ((wc >> 12));
 2288|      0|                utf8_bytes[1] = 0x80 | ((wc >> 6) & 0x3F);
 2289|      0|                utf8_bytes[2] = 0x80 | (wc & 0x3F);
 2290|      0|                utf8_bytes_filled = 3;
 2291|      0|            }
 2292|      0|            else
 2293|      0|            {
 2294|      0|                if (current_wchar < str.size())
 2295|      0|                {
 2296|      0|                    const auto wc2 = static_cast<int>(str[current_wchar++]);
 2297|      0|                    const int charcode = 0x10000 + (((wc & 0x3FF) << 10) | (wc2 & 0x3FF));
 2298|      0|                    utf8_bytes[0] = 0xf0 | (charcode >> 18);
 2299|      0|                    utf8_bytes[1] = 0x80 | ((charcode >> 12) & 0x3F);
 2300|      0|                    utf8_bytes[2] = 0x80 | ((charcode >> 6) & 0x3F);
 2301|      0|                    utf8_bytes[3] = 0x80 | (charcode & 0x3F);
 2302|      0|                    utf8_bytes_filled = 4;
 2303|      0|                }
 2304|      0|                else
 2305|      0|                {
 2306|      0|                    // unknown character
 2307|      0|                    ++current_wchar;
 2308|      0|                    utf8_bytes[0] = wc;
 2309|      0|                    utf8_bytes_filled = 1;
 2310|      0|                }
 2311|      0|            }
 2312|      0|        }
 2313|      0|    }
 2314|       |};
 2315|       |
 2316|       |template<typename WideStringType>
 2317|       |class wide_string_input_adapter : public input_adapter_protocol
 2318|       |{
 2319|       |  public:
 2320|       |    explicit wide_string_input_adapter(const WideStringType& w)  noexcept
 2321|       |        : str(w)
 2322|       |    {}
 2323|       |
 2324|       |    std::char_traits<char>::int_type get_character() noexcept override
 2325|      0|    {
 2326|      0|        // check if buffer needs to be filled
 2327|      0|        if (utf8_bytes_index == utf8_bytes_filled)
 2328|      0|        {
 2329|      0|            fill_buffer<sizeof(typename WideStringType::value_type)>();
 2330|      0|
 2331|      0|            assert(utf8_bytes_filled > 0);
 2332|      0|            assert(utf8_bytes_index == 0);
 2333|      0|        }
 2334|      0|
 2335|      0|        // use buffer
 2336|      0|        assert(utf8_bytes_filled > 0);
 2337|      0|        assert(utf8_bytes_index < utf8_bytes_filled);
 2338|      0|        return utf8_bytes[utf8_bytes_index++];
 2339|      0|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEE13get_characterEv
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEE13get_characterEv
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEE13get_characterEv
  ------------------
 2340|       |
 2341|       |  private:
 2342|       |    template<size_t T>
 2343|       |    void fill_buffer()
 2344|      0|    {
 2345|      0|        wide_string_input_helper<WideStringType, T>::fill_buffer(str, current_wchar, utf8_bytes, utf8_bytes_index, utf8_bytes_filled);
 2346|      0|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEE11fill_bufferILm4EEEvv
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEE11fill_bufferILm2EEEvv
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEE11fill_bufferILm4EEEvv
  ------------------
 2347|       |
 2348|       |    /// the wstring to process
 2349|       |    const WideStringType& str;
 2350|       |
 2351|       |    /// index of the current wchar in str
 2352|       |    std::size_t current_wchar = 0;
 2353|       |
 2354|       |    /// a buffer for UTF-8 bytes
 2355|       |    std::array<std::char_traits<char>::int_type, 4> utf8_bytes = {{0, 0, 0, 0}};
 2356|       |
 2357|       |    /// index to the utf8_codes array for the next valid byte
 2358|       |    std::size_t utf8_bytes_index = 0;
 2359|       |    /// number of valid bytes in the utf8_codes array
 2360|       |    std::size_t utf8_bytes_filled = 0;
 2361|       |};
 2362|       |
 2363|       |class input_adapter
 2364|       |{
 2365|       |  public:
 2366|       |    // native support
 2367|       |    input_adapter(std::FILE* file)
 2368|      0|        : ia(std::make_shared<file_input_adapter>(file)) {}
 2369|       |    /// input adapter for input stream
 2370|       |    input_adapter(std::istream& i)
 2371|    205|        : ia(std::make_shared<input_stream_adapter>(i)) {}
 2372|       |
 2373|       |    /// input adapter for input stream
 2374|       |    input_adapter(std::istream&& i)
 2375|      0|        : ia(std::make_shared<input_stream_adapter>(i)) {}
 2376|       |
 2377|       |    input_adapter(const std::wstring& ws)
 2378|      0|        : ia(std::make_shared<wide_string_input_adapter<std::wstring>>(ws)) {}
 2379|       |
 2380|       |    input_adapter(const std::u16string& ws)
 2381|      0|        : ia(std::make_shared<wide_string_input_adapter<std::u16string>>(ws)) {}
 2382|       |
 2383|       |    input_adapter(const std::u32string& ws)
 2384|      0|        : ia(std::make_shared<wide_string_input_adapter<std::u32string>>(ws)) {}
 2385|       |
 2386|       |    /// input adapter for buffer
 2387|       |    template<typename CharT,
 2388|       |             typename std::enable_if<
 2389|       |                 std::is_pointer<CharT>::value and
 2390|       |                 std::is_integral<typename std::remove_pointer<CharT>::type>::value and
 2391|       |                 sizeof(typename std::remove_pointer<CharT>::type) == 1,
 2392|       |                 int>::type = 0>
 2393|       |    input_adapter(CharT b, std::size_t l)
 2394|       |        : ia(std::make_shared<input_buffer_adapter>(reinterpret_cast<const char*>(b), l)) {}
 2395|       |
 2396|       |    // derived support
 2397|       |
 2398|       |    /// input adapter for string literal
 2399|       |    template<typename CharT,
 2400|       |             typename std::enable_if<
 2401|       |                 std::is_pointer<CharT>::value and
 2402|       |                 std::is_integral<typename std::remove_pointer<CharT>::type>::value and
 2403|       |                 sizeof(typename std::remove_pointer<CharT>::type) == 1,
 2404|       |                 int>::type = 0>
 2405|       |    input_adapter(CharT b)
 2406|       |        : input_adapter(reinterpret_cast<const char*>(b),
 2407|       |                        std::strlen(reinterpret_cast<const char*>(b))) {}
 2408|       |
 2409|       |    /// input adapter for iterator range with contiguous storage
 2410|       |    template<class IteratorType,
 2411|       |             typename std::enable_if<
 2412|       |                 std::is_same<typename std::iterator_traits<IteratorType>::iterator_category, std::random_access_iterator_tag>::value,
 2413|       |                 int>::type = 0>
 2414|       |    input_adapter(IteratorType first, IteratorType last)
 2415|    661|    {
 2416|    661|#ifndef NDEBUG
 2417|    661|        // assertion to check that the iterator range is indeed contiguous,
 2418|    661|        // see http://stackoverflow.com/a/35008842/266378 for more discussion
 2419|    661|        const auto is_contiguous = std::accumulate(
 2420|    661|                                       first, last, std::pair<bool, int>(true, 0),
 2421|    661|                                       [&first](std::pair<bool, int> res, decltype(*first) val)
 2422|  4.24M|        {
 2423|  4.24M|            res.first &= (val == *(std::next(std::addressof(*first), res.second++)));
 2424|  4.24M|            return res;
 2425|  4.24M|        }).first;
  ------------------
  | _ZZN8nlohmann6detail13input_adapterC1IN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEELi0EEET_SE_ENKUlSt4pairIbiERS5_E_clESG_SH_:
  | 2422|  12.6k|        {
  | 2423|  12.6k|            res.first &= (val == *(std::next(std::addressof(*first), res.second++)));
  | 2424|  12.6k|            return res;
  | 2425|  12.6k|        }).first;
  ------------------
  | _ZZN8nlohmann6detail13input_adapterC1IPKcLi0EEET_S5_ENKUlSt4pairIbiERS3_E_clES7_S8_:
  | 2422|  4.23M|        {
  | 2423|  4.23M|            res.first &= (val == *(std::next(std::addressof(*first), res.second++)));
  | 2424|  4.23M|            return res;
  | 2425|  4.23M|        }).first;
  ------------------
 2426|    661|        assert(is_contiguous);
 2427|    661|#endif
 2428|    661|
 2429|    661|        // assertion to check that each element is 1 byte long
 2430|    661|        static_assert(
 2431|    661|            sizeof(typename std::iterator_traits<IteratorType>::value_type) == 1,
 2432|    661|            "each element in the iterator range must have the size of 1 byte");
 2433|    661|
 2434|    661|        const auto len = static_cast<size_t>(std::distance(first, last));
 2435|    661|        if (JSON_LIKELY(len > 0))
 2436|    661|        {
 2437|    661|            // there is at least one element: use the address of first
 2438|    661|            ia = std::make_shared<input_buffer_adapter>(reinterpret_cast<const char*>(&(*first)), len);
 2439|    661|        }
 2440|      0|        else
 2441|      0|        {
 2442|      0|            // the address of first cannot be used: use nullptr
 2443|      0|            ia = std::make_shared<input_buffer_adapter>(nullptr, len);
 2444|      0|        }
 2445|    661|    }
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEELi0EEET_SE_:
  | 2415|     46|    {
  | 2416|     46|#ifndef NDEBUG
  | 2417|     46|        // assertion to check that the iterator range is indeed contiguous,
  | 2418|     46|        // see http://stackoverflow.com/a/35008842/266378 for more discussion
  | 2419|     46|        const auto is_contiguous = std::accumulate(
  | 2420|     46|                                       first, last, std::pair<bool, int>(true, 0),
  | 2421|     46|                                       [&first](std::pair<bool, int> res, decltype(*first) val)
  | 2422|     46|        {
  | 2423|     46|            res.first &= (val == *(std::next(std::addressof(*first), res.second++)));
  | 2424|     46|            return res;
  | 2425|     46|        }).first;
  | 2426|     46|        assert(is_contiguous);
  | 2427|     46|#endif
  | 2428|     46|
  | 2429|     46|        // assertion to check that each element is 1 byte long
  | 2430|     46|        static_assert(
  | 2431|     46|            sizeof(typename std::iterator_traits<IteratorType>::value_type) == 1,
  | 2432|     46|            "each element in the iterator range must have the size of 1 byte");
  | 2433|     46|
  | 2434|     46|        const auto len = static_cast<size_t>(std::distance(first, last));
  | 2435|     46|        if (JSON_LIKELY(len > 0))
  | 2436|     46|        {
  | 2437|     46|            // there is at least one element: use the address of first
  | 2438|     46|            ia = std::make_shared<input_buffer_adapter>(reinterpret_cast<const char*>(&(*first)), len);
  | 2439|     46|        }
  | 2440|      0|        else
  | 2441|      0|        {
  | 2442|      0|            // the address of first cannot be used: use nullptr
  | 2443|      0|            ia = std::make_shared<input_buffer_adapter>(nullptr, len);
  | 2444|      0|        }
  | 2445|     46|    }
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IPKcLi0EEET_S5_:
  | 2415|    615|    {
  | 2416|    615|#ifndef NDEBUG
  | 2417|    615|        // assertion to check that the iterator range is indeed contiguous,
  | 2418|    615|        // see http://stackoverflow.com/a/35008842/266378 for more discussion
  | 2419|    615|        const auto is_contiguous = std::accumulate(
  | 2420|    615|                                       first, last, std::pair<bool, int>(true, 0),
  | 2421|    615|                                       [&first](std::pair<bool, int> res, decltype(*first) val)
  | 2422|    615|        {
  | 2423|    615|            res.first &= (val == *(std::next(std::addressof(*first), res.second++)));
  | 2424|    615|            return res;
  | 2425|    615|        }).first;
  | 2426|    615|        assert(is_contiguous);
  | 2427|    615|#endif
  | 2428|    615|
  | 2429|    615|        // assertion to check that each element is 1 byte long
  | 2430|    615|        static_assert(
  | 2431|    615|            sizeof(typename std::iterator_traits<IteratorType>::value_type) == 1,
  | 2432|    615|            "each element in the iterator range must have the size of 1 byte");
  | 2433|    615|
  | 2434|    615|        const auto len = static_cast<size_t>(std::distance(first, last));
  | 2435|    615|        if (JSON_LIKELY(len > 0))
  | 2436|    615|        {
  | 2437|    615|            // there is at least one element: use the address of first
  | 2438|    615|            ia = std::make_shared<input_buffer_adapter>(reinterpret_cast<const char*>(&(*first)), len);
  | 2439|    615|        }
  | 2440|      0|        else
  | 2441|      0|        {
  | 2442|      0|            // the address of first cannot be used: use nullptr
  | 2443|      0|            ia = std::make_shared<input_buffer_adapter>(nullptr, len);
  | 2444|      0|        }
  | 2445|    615|    }
  ------------------
 2446|       |
 2447|       |    /// input adapter for array
 2448|       |    template<class T, std::size_t N>
 2449|       |    input_adapter(T (&array)[N])
 2450|    615|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IKcLm117EEERAT0__T_:
  | 2450|    205|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IKcLm10282EEERAT0__T_:
  | 2450|    205|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IKcLm10259EEERAT0__T_:
  | 2450|    205|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
 2451|       |
 2452|       |    /// input adapter for contiguous container
 2453|       |    template<class ContiguousContainer, typename
 2454|       |             std::enable_if<not std::is_pointer<ContiguousContainer>::value and
 2455|       |                            std::is_base_of<std::random_access_iterator_tag, typename std::iterator_traits<decltype(std::begin(std::declval<ContiguousContainer const>()))>::iterator_category>::value,
 2456|       |                            int>::type = 0>
 2457|       |    input_adapter(const ContiguousContainer& c)
 2458|     46|        : input_adapter(std::begin(c), std::end(c)) {}
 2459|       |
 2460|       |    operator input_adapter_t()
 2461|    866|    {
 2462|    866|        return ia;
 2463|    866|    }
 2464|       |
 2465|       |  private:
 2466|       |    /// the actual adapter
 2467|       |    input_adapter_t ia = nullptr;
 2468|       |};
 2469|       |}  // namespace detail
 2470|       |}  // namespace nlohmann
 2471|       |
 2472|       |// #include <nlohmann/detail/input/lexer.hpp>
 2473|       |
 2474|       |
 2475|       |#include <clocale> // localeconv
 2476|       |#include <cstddef> // size_t
 2477|       |#include <cstdlib> // strtof, strtod, strtold, strtoll, strtoull
 2478|       |#include <cstdio> // snprintf
 2479|       |#include <initializer_list> // initializer_list
 2480|       |#include <string> // char_traits, string
 2481|       |#include <vector> // vector
 2482|       |
 2483|       |// #include <nlohmann/detail/macro_scope.hpp>
 2484|       |
 2485|       |// #include <nlohmann/detail/input/input_adapters.hpp>
 2486|       |
 2487|       |// #include <nlohmann/detail/input/position_t.hpp>
 2488|       |
 2489|       |
 2490|       |namespace nlohmann
 2491|       |{
 2492|       |namespace detail
 2493|       |{
 2494|       |///////////
 2495|       |// lexer //
 2496|       |///////////
 2497|       |
 2498|       |/*!
 2499|       |@brief lexical analysis
 2500|       |
 2501|       |This class organizes the lexical analysis during JSON deserialization.
 2502|       |*/
 2503|       |template<typename BasicJsonType>
 2504|       |class lexer
 2505|       |{
 2506|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 2507|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 2508|       |    using number_float_t = typename BasicJsonType::number_float_t;
 2509|       |    using string_t = typename BasicJsonType::string_t;
 2510|       |
 2511|       |  public:
 2512|       |    /// token types for the parser
 2513|       |    enum class token_type
 2514|       |    {
 2515|       |        uninitialized,    ///< indicating the scanner is uninitialized
 2516|       |        literal_true,     ///< the `true` literal
 2517|       |        literal_false,    ///< the `false` literal
 2518|       |        literal_null,     ///< the `null` literal
 2519|       |        value_string,     ///< a string -- use get_string() for actual value
 2520|       |        value_unsigned,   ///< an unsigned integer -- use get_number_unsigned() for actual value
 2521|       |        value_integer,    ///< a signed integer -- use get_number_integer() for actual value
 2522|       |        value_float,      ///< an floating point number -- use get_number_float() for actual value
 2523|       |        begin_array,      ///< the character for array begin `[`
 2524|       |        begin_object,     ///< the character for object begin `{`
 2525|       |        end_array,        ///< the character for array end `]`
 2526|       |        end_object,       ///< the character for object end `}`
 2527|       |        name_separator,   ///< the name separator `:`
 2528|       |        value_separator,  ///< the value separator `,`
 2529|       |        parse_error,      ///< indicating a parse error
 2530|       |        end_of_input,     ///< indicating the end of the input buffer
 2531|       |        literal_or_value  ///< a literal or the begin of a value (only for diagnostics)
 2532|       |    };
 2533|       |
 2534|       |    /// return name of values of type token_type (only used for errors)
 2535|       |    static const char* token_type_name(const token_type t) noexcept
 2536|      0|    {
 2537|      0|        switch (t)
 2538|      0|        {
 2539|      0|            case token_type::uninitialized:
 2540|      0|                return "<uninitialized>";
 2541|      0|            case token_type::literal_true:
 2542|      0|                return "true literal";
 2543|      0|            case token_type::literal_false:
 2544|      0|                return "false literal";
 2545|      0|            case token_type::literal_null:
 2546|      0|                return "null literal";
 2547|      0|            case token_type::value_string:
 2548|      0|                return "string literal";
 2549|      0|            case lexer::token_type::value_unsigned:
 2550|      0|            case lexer::token_type::value_integer:
 2551|      0|            case lexer::token_type::value_float:
 2552|      0|                return "number literal";
 2553|      0|            case token_type::begin_array:
 2554|      0|                return "'['";
 2555|      0|            case token_type::begin_object:
 2556|      0|                return "'{'";
 2557|      0|            case token_type::end_array:
 2558|      0|                return "']'";
 2559|      0|            case token_type::end_object:
 2560|      0|                return "'}'";
 2561|      0|            case token_type::name_separator:
 2562|      0|                return "':'";
 2563|      0|            case token_type::value_separator:
 2564|      0|                return "','";
 2565|      0|            case token_type::parse_error:
 2566|      0|                return "<parse error>";
 2567|      0|            case token_type::end_of_input:
 2568|      0|                return "end of input";
 2569|      0|            case token_type::literal_or_value:
 2570|      0|                return "'[', '{', or a literal";
 2571|      0|            // LCOV_EXCL_START
 2572|      0|            default: // catch non-enum values
 2573|      0|                return "unknown token";
 2574|      0|                // LCOV_EXCL_STOP
 2575|      0|        }
 2576|      0|    }
 2577|       |
 2578|       |    explicit lexer(detail::input_adapter_t&& adapter)
 2579|    866|        : ia(std::move(adapter)), decimal_point_char(get_decimal_point()) {}
 2580|       |
 2581|       |    // delete because of pointer members
 2582|       |    lexer(const lexer&) = delete;
 2583|       |    lexer(lexer&&) = delete;
 2584|       |    lexer& operator=(lexer&) = delete;
 2585|       |    lexer& operator=(lexer&&) = delete;
 2586|    866|    ~lexer() = default;
 2587|       |
 2588|       |  private:
 2589|       |    /////////////////////
 2590|       |    // locales
 2591|       |    /////////////////////
 2592|       |
 2593|       |    /// return the locale-dependent decimal point
 2594|       |    static char get_decimal_point() noexcept
 2595|    866|    {
 2596|    866|        const auto loc = localeconv();
 2597|    866|        assert(loc != nullptr);
 2598|    866|        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);
 2599|    866|    }
 2600|       |
 2601|       |    /////////////////////
 2602|       |    // scan functions
 2603|       |    /////////////////////
 2604|       |
 2605|       |    /*!
 2606|       |    @brief get codepoint from 4 hex characters following `\u`
 2607|       |
 2608|       |    For input "\u c1 c2 c3 c4" the codepoint is:
 2609|       |      (c1 * 0x1000) + (c2 * 0x0100) + (c3 * 0x0010) + c4
 2610|       |    = (c1 << 12) + (c2 << 8) + (c3 << 4) + (c4 << 0)
 2611|       |
 2612|       |    Furthermore, the possible characters '0'..'9', 'A'..'F', and 'a'..'f'
 2613|       |    must be converted to the integers 0x0..0x9, 0xA..0xF, 0xA..0xF, resp. The
 2614|       |    conversion is done by subtracting the offset (0x30, 0x37, and 0x57)
 2615|       |    between the ASCII value of the character and the desired integer value.
 2616|       |
 2617|       |    @return codepoint (0x0000..0xFFFF) or -1 in case of an error (e.g. EOF or
 2618|       |            non-hex character)
 2619|       |    */
 2620|       |    int get_codepoint()
 2621|      0|    {
 2622|      0|        // this function only makes sense after reading `\u`
 2623|      0|        assert(current == 'u');
 2624|      0|        int codepoint = 0;
 2625|      0|
 2626|      0|        const auto factors = { 12, 8, 4, 0 };
 2627|      0|        for (const auto factor : factors)
 2628|      0|        {
 2629|      0|            get();
 2630|      0|
 2631|      0|            if (current >= '0' and current <= '9')
 2632|      0|            {
 2633|      0|                codepoint += ((current - 0x30) << factor);
 2634|      0|            }
 2635|      0|            else if (current >= 'A' and current <= 'F')
 2636|      0|            {
 2637|      0|                codepoint += ((current - 0x37) << factor);
 2638|      0|            }
 2639|      0|            else if (current >= 'a' and current <= 'f')
 2640|      0|            {
 2641|      0|                codepoint += ((current - 0x57) << factor);
 2642|      0|            }
 2643|      0|            else
 2644|      0|            {
 2645|      0|                return -1;
 2646|      0|            }
 2647|      0|        }
 2648|      0|
 2649|      0|        assert(0x0000 <= codepoint and codepoint <= 0xFFFF);
 2650|      0|        return codepoint;
 2651|      0|    }
 2652|       |
 2653|       |    /*!
 2654|       |    @brief check if the next byte(s) are inside a given range
 2655|       |
 2656|       |    Adds the current byte and, for each passed range, reads a new byte and
 2657|       |    checks if it is inside the range. If a violation was detected, set up an
 2658|       |    error message and return false. Otherwise, return true.
 2659|       |
 2660|       |    @param[in] ranges  list of integers; interpreted as list of pairs of
 2661|       |                       inclusive lower and upper bound, respectively
 2662|       |
 2663|       |    @pre The passed list @a ranges must have 2, 4, or 6 elements; that is,
 2664|       |         1, 2, or 3 pairs. This precondition is enforced by an assertion.
 2665|       |
 2666|       |    @return true if and only if no range violation was detected
 2667|       |    */
 2668|       |    bool next_byte_in_range(std::initializer_list<int> ranges)
 2669|      0|    {
 2670|      0|        assert(ranges.size() == 2 or ranges.size() == 4 or ranges.size() == 6);
 2671|      0|        add(current);
 2672|      0|
 2673|      0|        for (auto range = ranges.begin(); range != ranges.end(); ++range)
 2674|      0|        {
 2675|      0|            get();
 2676|      0|            if (JSON_LIKELY(*range <= current and current <= *(++range)))
 2677|      0|            {
 2678|      0|                add(current);
 2679|      0|            }
 2680|      0|            else
 2681|      0|            {
 2682|      0|                error_message = "invalid string: ill-formed UTF-8 byte";
 2683|      0|                return false;
 2684|      0|            }
 2685|      0|        }
 2686|      0|
 2687|      0|        return true;
 2688|      0|    }
 2689|       |
 2690|       |    /*!
 2691|       |    @brief scan a string literal
 2692|       |
 2693|       |    This function scans a string according to Sect. 7 of RFC 7159. While
 2694|       |    scanning, bytes are escaped and copied into buffer token_buffer. Then the
 2695|       |    function returns successfully, token_buffer is *not* null-terminated (as it
 2696|       |    may contain \0 bytes), and token_buffer.size() is the number of bytes in the
 2697|       |    string.
 2698|       |
 2699|       |    @return token_type::value_string if string could be successfully scanned,
 2700|       |            token_type::parse_error otherwise
 2701|       |
 2702|       |    @note In case of errors, variable error_message contains a textual
 2703|       |          description.
 2704|       |    */
 2705|       |    token_type scan_string()
 2706|   322k|    {
 2707|   322k|        // reset token_buffer (ignore opening quote)
 2708|   322k|        reset();
 2709|   322k|
 2710|   322k|        // we entered the function by reading an open quote
 2711|   322k|        assert(current == '\"');
 2712|   322k|
 2713|  2.84M|        while (true)
 2714|  2.84M|        {
 2715|  2.84M|            // get next character
 2716|  2.84M|            switch (get())
 2717|  2.84M|            {
 2718|  2.84M|                // end of file while parsing string
 2719|  2.84M|                case std::char_traits<char>::eof():
 2720|      0|                {
 2721|      0|                    error_message = "invalid string: missing closing quote";
 2722|      0|                    return token_type::parse_error;
 2723|  2.84M|                }
 2724|  2.84M|
 2725|  2.84M|                // closing quote
 2726|  2.84M|                case '\"':
 2727|   322k|                {
 2728|   322k|                    return token_type::value_string;
 2729|  2.84M|                }
 2730|  2.84M|
 2731|  2.84M|                // escapes
 2732|  2.84M|                case '\\':
 2733|      0|                {
 2734|      0|                    switch (get())
 2735|      0|                    {
 2736|      0|                        // quotation mark
 2737|      0|                        case '\"':
 2738|      0|                            add('\"');
 2739|      0|                            break;
 2740|      0|                        // reverse solidus
 2741|      0|                        case '\\':
 2742|      0|                            add('\\');
 2743|      0|                            break;
 2744|      0|                        // solidus
 2745|      0|                        case '/':
 2746|      0|                            add('/');
 2747|      0|                            break;
 2748|      0|                        // backspace
 2749|      0|                        case 'b':
 2750|      0|                            add('\b');
 2751|      0|                            break;
 2752|      0|                        // form feed
 2753|      0|                        case 'f':
 2754|      0|                            add('\f');
 2755|      0|                            break;
 2756|      0|                        // line feed
 2757|      0|                        case 'n':
 2758|      0|                            add('\n');
 2759|      0|                            break;
 2760|      0|                        // carriage return
 2761|      0|                        case 'r':
 2762|      0|                            add('\r');
 2763|      0|                            break;
 2764|      0|                        // tab
 2765|      0|                        case 't':
 2766|      0|                            add('\t');
 2767|      0|                            break;
 2768|      0|
 2769|      0|                        // unicode escapes
 2770|      0|                        case 'u':
 2771|      0|                        {
 2772|      0|                            const int codepoint1 = get_codepoint();
 2773|      0|                            int codepoint = codepoint1; // start with codepoint1
 2774|      0|
 2775|      0|                            if (JSON_UNLIKELY(codepoint1 == -1))
 2776|      0|                            {
 2777|      0|                                error_message = "invalid string: '\\u' must be followed by 4 hex digits";
 2778|      0|                                return token_type::parse_error;
 2779|      0|                            }
 2780|      0|
 2781|      0|                            // check if code point is a high surrogate
 2782|      0|                            if (0xD800 <= codepoint1 and codepoint1 <= 0xDBFF)
 2783|      0|                            {
 2784|      0|                                // expect next \uxxxx entry
 2785|      0|                                if (JSON_LIKELY(get() == '\\' and get() == 'u'))
 2786|      0|                                {
 2787|      0|                                    const int codepoint2 = get_codepoint();
 2788|      0|
 2789|      0|                                    if (JSON_UNLIKELY(codepoint2 == -1))
 2790|      0|                                    {
 2791|      0|                                        error_message = "invalid string: '\\u' must be followed by 4 hex digits";
 2792|      0|                                        return token_type::parse_error;
 2793|      0|                                    }
 2794|      0|
 2795|      0|                                    // check if codepoint2 is a low surrogate
 2796|      0|                                    if (JSON_LIKELY(0xDC00 <= codepoint2 and codepoint2 <= 0xDFFF))
 2797|      0|                                    {
 2798|      0|                                        // overwrite codepoint
 2799|      0|                                        codepoint =
 2800|      0|                                            // high surrogate occupies the most significant 22 bits
 2801|      0|                                            (codepoint1 << 10)
 2802|      0|                                            // low surrogate occupies the least significant 15 bits
 2803|      0|                                            + codepoint2
 2804|      0|                                            // there is still the 0xD800, 0xDC00 and 0x10000 noise
 2805|      0|                                            // in the result so we have to subtract with:
 2806|      0|                                            // (0xD800 << 10) + DC00 - 0x10000 = 0x35FDC00
 2807|      0|                                            - 0x35FDC00;
 2808|      0|                                    }
 2809|      0|                                    else
 2810|      0|                                    {
 2811|      0|                                        error_message = "invalid string: surrogate U+DC00..U+DFFF must be followed by U+DC00..U+DFFF";
 2812|      0|                                        return token_type::parse_error;
 2813|      0|                                    }
 2814|      0|                                }
 2815|      0|                                else
 2816|      0|                                {
 2817|      0|                                    error_message = "invalid string: surrogate U+DC00..U+DFFF must be followed by U+DC00..U+DFFF";
 2818|      0|                                    return token_type::parse_error;
 2819|      0|                                }
 2820|      0|                            }
 2821|      0|                            else
 2822|      0|                            {
 2823|      0|                                if (JSON_UNLIKELY(0xDC00 <= codepoint1 and codepoint1 <= 0xDFFF))
 2824|      0|                                {
 2825|      0|                                    error_message = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
 2826|      0|                                    return token_type::parse_error;
 2827|      0|                                }
 2828|      0|                            }
 2829|      0|
 2830|      0|                            // result of the above calculation yields a proper codepoint
 2831|      0|                            assert(0x00 <= codepoint and codepoint <= 0x10FFFF);
 2832|      0|
 2833|      0|                            // translate codepoint into bytes
 2834|      0|                            if (codepoint < 0x80)
 2835|      0|                            {
 2836|      0|                                // 1-byte characters: 0xxxxxxx (ASCII)
 2837|      0|                                add(codepoint);
 2838|      0|                            }
 2839|      0|                            else if (codepoint <= 0x7FF)
 2840|      0|                            {
 2841|      0|                                // 2-byte characters: 110xxxxx 10xxxxxx
 2842|      0|                                add(0xC0 | (codepoint >> 6));
 2843|      0|                                add(0x80 | (codepoint & 0x3F));
 2844|      0|                            }
 2845|      0|                            else if (codepoint <= 0xFFFF)
 2846|      0|                            {
 2847|      0|                                // 3-byte characters: 1110xxxx 10xxxxxx 10xxxxxx
 2848|      0|                                add(0xE0 | (codepoint >> 12));
 2849|      0|                                add(0x80 | ((codepoint >> 6) & 0x3F));
 2850|      0|                                add(0x80 | (codepoint & 0x3F));
 2851|      0|                            }
 2852|      0|                            else
 2853|      0|                            {
 2854|      0|                                // 4-byte characters: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
 2855|      0|                                add(0xF0 | (codepoint >> 18));
 2856|      0|                                add(0x80 | ((codepoint >> 12) & 0x3F));
 2857|      0|                                add(0x80 | ((codepoint >> 6) & 0x3F));
 2858|      0|                                add(0x80 | (codepoint & 0x3F));
 2859|      0|                            }
 2860|      0|
 2861|      0|                            break;
 2862|      0|                        }
 2863|      0|
 2864|      0|                        // other characters after escape
 2865|      0|                        default:
 2866|      0|                            error_message = "invalid string: forbidden character after backslash";
 2867|      0|                            return token_type::parse_error;
 2868|      0|                    }
 2869|      0|
 2870|      0|                    break;
 2871|      0|                }
 2872|      0|
 2873|      0|                // invalid control characters
 2874|      0|                case 0x00:
 2875|      0|                {
 2876|      0|                    error_message = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
 2877|      0|                    return token_type::parse_error;
 2878|      0|                }
 2879|      0|
 2880|      0|                case 0x01:
 2881|      0|                {
 2882|      0|                    error_message = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
 2883|      0|                    return token_type::parse_error;
 2884|      0|                }
 2885|      0|
 2886|      0|                case 0x02:
 2887|      0|                {
 2888|      0|                    error_message = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
 2889|      0|                    return token_type::parse_error;
 2890|      0|                }
 2891|      0|
 2892|      0|                case 0x03:
 2893|      0|                {
 2894|      0|                    error_message = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
 2895|      0|                    return token_type::parse_error;
 2896|      0|                }
 2897|      0|
 2898|      0|                case 0x04:
 2899|      0|                {
 2900|      0|                    error_message = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
 2901|      0|                    return token_type::parse_error;
 2902|      0|                }
 2903|      0|
 2904|      0|                case 0x05:
 2905|      0|                {
 2906|      0|                    error_message = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
 2907|      0|                    return token_type::parse_error;
 2908|      0|                }
 2909|      0|
 2910|      0|                case 0x06:
 2911|      0|                {
 2912|      0|                    error_message = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
 2913|      0|                    return token_type::parse_error;
 2914|      0|                }
 2915|      0|
 2916|      0|                case 0x07:
 2917|      0|                {
 2918|      0|                    error_message = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
 2919|      0|                    return token_type::parse_error;
 2920|      0|                }
 2921|      0|
 2922|      0|                case 0x08:
 2923|      0|                {
 2924|      0|                    error_message = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
 2925|      0|                    return token_type::parse_error;
 2926|      0|                }
 2927|      0|
 2928|      0|                case 0x09:
 2929|      0|                {
 2930|      0|                    error_message = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
 2931|      0|                    return token_type::parse_error;
 2932|      0|                }
 2933|      0|
 2934|      0|                case 0x0A:
 2935|      0|                {
 2936|      0|                    error_message = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
 2937|      0|                    return token_type::parse_error;
 2938|      0|                }
 2939|      0|
 2940|      0|                case 0x0B:
 2941|      0|                {
 2942|      0|                    error_message = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
 2943|      0|                    return token_type::parse_error;
 2944|      0|                }
 2945|      0|
 2946|      0|                case 0x0C:
 2947|      0|                {
 2948|      0|                    error_message = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
 2949|      0|                    return token_type::parse_error;
 2950|      0|                }
 2951|      0|
 2952|      0|                case 0x0D:
 2953|      0|                {
 2954|      0|                    error_message = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
 2955|      0|                    return token_type::parse_error;
 2956|      0|                }
 2957|      0|
 2958|      0|                case 0x0E:
 2959|      0|                {
 2960|      0|                    error_message = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
 2961|      0|                    return token_type::parse_error;
 2962|      0|                }
 2963|      0|
 2964|      0|                case 0x0F:
 2965|      0|                {
 2966|      0|                    error_message = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
 2967|      0|                    return token_type::parse_error;
 2968|      0|                }
 2969|      0|
 2970|      0|                case 0x10:
 2971|      0|                {
 2972|      0|                    error_message = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
 2973|      0|                    return token_type::parse_error;
 2974|      0|                }
 2975|      0|
 2976|      0|                case 0x11:
 2977|      0|                {
 2978|      0|                    error_message = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
 2979|      0|                    return token_type::parse_error;
 2980|      0|                }
 2981|      0|
 2982|      0|                case 0x12:
 2983|      0|                {
 2984|      0|                    error_message = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
 2985|      0|                    return token_type::parse_error;
 2986|      0|                }
 2987|      0|
 2988|      0|                case 0x13:
 2989|      0|                {
 2990|      0|                    error_message = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
 2991|      0|                    return token_type::parse_error;
 2992|      0|                }
 2993|      0|
 2994|      0|                case 0x14:
 2995|      0|                {
 2996|      0|                    error_message = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
 2997|      0|                    return token_type::parse_error;
 2998|      0|                }
 2999|      0|
 3000|      0|                case 0x15:
 3001|      0|                {
 3002|      0|                    error_message = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
 3003|      0|                    return token_type::parse_error;
 3004|      0|                }
 3005|      0|
 3006|      0|                case 0x16:
 3007|      0|                {
 3008|      0|                    error_message = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
 3009|      0|                    return token_type::parse_error;
 3010|      0|                }
 3011|      0|
 3012|      0|                case 0x17:
 3013|      0|                {
 3014|      0|                    error_message = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
 3015|      0|                    return token_type::parse_error;
 3016|      0|                }
 3017|      0|
 3018|      0|                case 0x18:
 3019|      0|                {
 3020|      0|                    error_message = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
 3021|      0|                    return token_type::parse_error;
 3022|      0|                }
 3023|      0|
 3024|      0|                case 0x19:
 3025|      0|                {
 3026|      0|                    error_message = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
 3027|      0|                    return token_type::parse_error;
 3028|      0|                }
 3029|      0|
 3030|      0|                case 0x1A:
 3031|      0|                {
 3032|      0|                    error_message = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
 3033|      0|                    return token_type::parse_error;
 3034|      0|                }
 3035|      0|
 3036|      0|                case 0x1B:
 3037|      0|                {
 3038|      0|                    error_message = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
 3039|      0|                    return token_type::parse_error;
 3040|      0|                }
 3041|      0|
 3042|      0|                case 0x1C:
 3043|      0|                {
 3044|      0|                    error_message = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
 3045|      0|                    return token_type::parse_error;
 3046|      0|                }
 3047|      0|
 3048|      0|                case 0x1D:
 3049|      0|                {
 3050|      0|                    error_message = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
 3051|      0|                    return token_type::parse_error;
 3052|      0|                }
 3053|      0|
 3054|      0|                case 0x1E:
 3055|      0|                {
 3056|      0|                    error_message = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
 3057|      0|                    return token_type::parse_error;
 3058|      0|                }
 3059|      0|
 3060|      0|                case 0x1F:
 3061|      0|                {
 3062|      0|                    error_message = "invalid string: control character U+001F (US) must be escaped to \\u001F";
 3063|      0|                    return token_type::parse_error;
 3064|      0|                }
 3065|      0|
 3066|      0|                // U+0020..U+007F (except U+0022 (quote) and U+005C (backspace))
 3067|  2.52M|                case 0x20:
 3068|  2.52M|                case 0x21:
 3069|  2.52M|                case 0x23:
 3070|  2.52M|                case 0x24:
 3071|  2.52M|                case 0x25:
 3072|  2.52M|                case 0x26:
 3073|  2.52M|                case 0x27:
 3074|  2.52M|                case 0x28:
 3075|  2.52M|                case 0x29:
 3076|  2.52M|                case 0x2A:
 3077|  2.52M|                case 0x2B:
 3078|  2.52M|                case 0x2C:
 3079|  2.52M|                case 0x2D:
 3080|  2.52M|                case 0x2E:
 3081|  2.52M|                case 0x2F:
 3082|  2.52M|                case 0x30:
 3083|  2.52M|                case 0x31:
 3084|  2.52M|                case 0x32:
 3085|  2.52M|                case 0x33:
 3086|  2.52M|                case 0x34:
 3087|  2.52M|                case 0x35:
 3088|  2.52M|                case 0x36:
 3089|  2.52M|                case 0x37:
 3090|  2.52M|                case 0x38:
 3091|  2.52M|                case 0x39:
 3092|  2.52M|                case 0x3A:
 3093|  2.52M|                case 0x3B:
 3094|  2.52M|                case 0x3C:
 3095|  2.52M|                case 0x3D:
 3096|  2.52M|                case 0x3E:
 3097|  2.52M|                case 0x3F:
 3098|  2.52M|                case 0x40:
 3099|  2.52M|                case 0x41:
 3100|  2.52M|                case 0x42:
 3101|  2.52M|                case 0x43:
 3102|  2.52M|                case 0x44:
 3103|  2.52M|                case 0x45:
 3104|  2.52M|                case 0x46:
 3105|  2.52M|                case 0x47:
 3106|  2.52M|                case 0x48:
 3107|  2.52M|                case 0x49:
 3108|  2.52M|                case 0x4A:
 3109|  2.52M|                case 0x4B:
 3110|  2.52M|                case 0x4C:
 3111|  2.52M|                case 0x4D:
 3112|  2.52M|                case 0x4E:
 3113|  2.52M|                case 0x4F:
 3114|  2.52M|                case 0x50:
 3115|  2.52M|                case 0x51:
 3116|  2.52M|                case 0x52:
 3117|  2.52M|                case 0x53:
 3118|  2.52M|                case 0x54:
 3119|  2.52M|                case 0x55:
 3120|  2.52M|                case 0x56:
 3121|  2.52M|                case 0x57:
 3122|  2.52M|                case 0x58:
 3123|  2.52M|                case 0x59:
 3124|  2.52M|                case 0x5A:
 3125|  2.52M|                case 0x5B:
 3126|  2.52M|                case 0x5D:
 3127|  2.52M|                case 0x5E:
 3128|  2.52M|                case 0x5F:
 3129|  2.52M|                case 0x60:
 3130|  2.52M|                case 0x61:
 3131|  2.52M|                case 0x62:
 3132|  2.52M|                case 0x63:
 3133|  2.52M|                case 0x64:
 3134|  2.52M|                case 0x65:
 3135|  2.52M|                case 0x66:
 3136|  2.52M|                case 0x67:
 3137|  2.52M|                case 0x68:
 3138|  2.52M|                case 0x69:
 3139|  2.52M|                case 0x6A:
 3140|  2.52M|                case 0x6B:
 3141|  2.52M|                case 0x6C:
 3142|  2.52M|                case 0x6D:
 3143|  2.52M|                case 0x6E:
 3144|  2.52M|                case 0x6F:
 3145|  2.52M|                case 0x70:
 3146|  2.52M|                case 0x71:
 3147|  2.52M|                case 0x72:
 3148|  2.52M|                case 0x73:
 3149|  2.52M|                case 0x74:
 3150|  2.52M|                case 0x75:
 3151|  2.52M|                case 0x76:
 3152|  2.52M|                case 0x77:
 3153|  2.52M|                case 0x78:
 3154|  2.52M|                case 0x79:
 3155|  2.52M|                case 0x7A:
 3156|  2.52M|                case 0x7B:
 3157|  2.52M|                case 0x7C:
 3158|  2.52M|                case 0x7D:
 3159|  2.52M|                case 0x7E:
 3160|  2.52M|                case 0x7F:
 3161|  2.52M|                {
 3162|  2.52M|                    add(current);
 3163|  2.52M|                    break;
 3164|  2.52M|                }
 3165|  2.52M|
 3166|  2.52M|                // U+0080..U+07FF: bytes C2..DF 80..BF
 3167|  2.52M|                case 0xC2:
 3168|      0|                case 0xC3:
 3169|      0|                case 0xC4:
 3170|      0|                case 0xC5:
 3171|      0|                case 0xC6:
 3172|      0|                case 0xC7:
 3173|      0|                case 0xC8:
 3174|      0|                case 0xC9:
 3175|      0|                case 0xCA:
 3176|      0|                case 0xCB:
 3177|      0|                case 0xCC:
 3178|      0|                case 0xCD:
 3179|      0|                case 0xCE:
 3180|      0|                case 0xCF:
 3181|      0|                case 0xD0:
 3182|      0|                case 0xD1:
 3183|      0|                case 0xD2:
 3184|      0|                case 0xD3:
 3185|      0|                case 0xD4:
 3186|      0|                case 0xD5:
 3187|      0|                case 0xD6:
 3188|      0|                case 0xD7:
 3189|      0|                case 0xD8:
 3190|      0|                case 0xD9:
 3191|      0|                case 0xDA:
 3192|      0|                case 0xDB:
 3193|      0|                case 0xDC:
 3194|      0|                case 0xDD:
 3195|      0|                case 0xDE:
 3196|      0|                case 0xDF:
 3197|      0|                {
 3198|      0|                    if (JSON_UNLIKELY(not next_byte_in_range({0x80, 0xBF})))
 3199|      0|                    {
 3200|      0|                        return token_type::parse_error;
 3201|      0|                    }
 3202|      0|                    break;
 3203|      0|                }
 3204|      0|
 3205|      0|                // U+0800..U+0FFF: bytes E0 A0..BF 80..BF
 3206|      0|                case 0xE0:
 3207|      0|                {
 3208|      0|                    if (JSON_UNLIKELY(not (next_byte_in_range({0xA0, 0xBF, 0x80, 0xBF}))))
 3209|      0|                    {
 3210|      0|                        return token_type::parse_error;
 3211|      0|                    }
 3212|      0|                    break;
 3213|      0|                }
 3214|      0|
 3215|      0|                // U+1000..U+CFFF: bytes E1..EC 80..BF 80..BF
 3216|      0|                // U+E000..U+FFFF: bytes EE..EF 80..BF 80..BF
 3217|      0|                case 0xE1:
 3218|      0|                case 0xE2:
 3219|      0|                case 0xE3:
 3220|      0|                case 0xE4:
 3221|      0|                case 0xE5:
 3222|      0|                case 0xE6:
 3223|      0|                case 0xE7:
 3224|      0|                case 0xE8:
 3225|      0|                case 0xE9:
 3226|      0|                case 0xEA:
 3227|      0|                case 0xEB:
 3228|      0|                case 0xEC:
 3229|      0|                case 0xEE:
 3230|      0|                case 0xEF:
 3231|      0|                {
 3232|      0|                    if (JSON_UNLIKELY(not (next_byte_in_range({0x80, 0xBF, 0x80, 0xBF}))))
 3233|      0|                    {
 3234|      0|                        return token_type::parse_error;
 3235|      0|                    }
 3236|      0|                    break;
 3237|      0|                }
 3238|      0|
 3239|      0|                // U+D000..U+D7FF: bytes ED 80..9F 80..BF
 3240|      0|                case 0xED:
 3241|      0|                {
 3242|      0|                    if (JSON_UNLIKELY(not (next_byte_in_range({0x80, 0x9F, 0x80, 0xBF}))))
 3243|      0|                    {
 3244|      0|                        return token_type::parse_error;
 3245|      0|                    }
 3246|      0|                    break;
 3247|      0|                }
 3248|      0|
 3249|      0|                // U+10000..U+3FFFF F0 90..BF 80..BF 80..BF
 3250|      0|                case 0xF0:
 3251|      0|                {
 3252|      0|                    if (JSON_UNLIKELY(not (next_byte_in_range({0x90, 0xBF, 0x80, 0xBF, 0x80, 0xBF}))))
 3253|      0|                    {
 3254|      0|                        return token_type::parse_error;
 3255|      0|                    }
 3256|      0|                    break;
 3257|      0|                }
 3258|      0|
 3259|      0|                // U+40000..U+FFFFF F1..F3 80..BF 80..BF 80..BF
 3260|      0|                case 0xF1:
 3261|      0|                case 0xF2:
 3262|      0|                case 0xF3:
 3263|      0|                {
 3264|      0|                    if (JSON_UNLIKELY(not (next_byte_in_range({0x80, 0xBF, 0x80, 0xBF, 0x80, 0xBF}))))
 3265|      0|                    {
 3266|      0|                        return token_type::parse_error;
 3267|      0|                    }
 3268|      0|                    break;
 3269|      0|                }
 3270|      0|
 3271|      0|                // U+100000..U+10FFFF F4 80..8F 80..BF 80..BF
 3272|      0|                case 0xF4:
 3273|      0|                {
 3274|      0|                    if (JSON_UNLIKELY(not (next_byte_in_range({0x80, 0x8F, 0x80, 0xBF, 0x80, 0xBF}))))
 3275|      0|                    {
 3276|      0|                        return token_type::parse_error;
 3277|      0|                    }
 3278|      0|                    break;
 3279|      0|                }
 3280|      0|
 3281|      0|                // remaining bytes (80..C1 and F5..FF) are ill-formed
 3282|      0|                default:
 3283|      0|                {
 3284|      0|                    error_message = "invalid string: ill-formed UTF-8 byte";
 3285|      0|                    return token_type::parse_error;
 3286|      0|                }
 3287|  2.84M|            }
 3288|  2.84M|        }
 3289|   322k|    }
 3290|       |
 3291|       |    static void strtof(float& f, const char* str, char** endptr) noexcept
 3292|       |    {
 3293|       |        f = std::strtof(str, endptr);
 3294|       |    }
 3295|       |
 3296|       |    static void strtof(double& f, const char* str, char** endptr) noexcept
 3297|  59.2k|    {
 3298|  59.2k|        f = std::strtod(str, endptr);
 3299|  59.2k|    }
 3300|       |
 3301|       |    static void strtof(long double& f, const char* str, char** endptr) noexcept
 3302|       |    {
 3303|       |        f = std::strtold(str, endptr);
 3304|       |    }
 3305|       |
 3306|       |    /*!
 3307|       |    @brief scan a number literal
 3308|       |
 3309|       |    This function scans a string according to Sect. 6 of RFC 7159.
 3310|       |
 3311|       |    The function is realized with a deterministic finite state machine derived
 3312|       |    from the grammar described in RFC 7159. Starting in state "init", the
 3313|       |    input is read and used to determined the next state. Only state "done"
 3314|       |    accepts the number. State "error" is a trap state to model errors. In the
 3315|       |    table below, "anything" means any character but the ones listed before.
 3316|       |
 3317|       |    state    | 0        | 1-9      | e E      | +       | -       | .        | anything
 3318|       |    ---------|----------|----------|----------|---------|---------|----------|-----------
 3319|       |    init     | zero     | any1     | [error]  | [error] | minus   | [error]  | [error]
 3320|       |    minus    | zero     | any1     | [error]  | [error] | [error] | [error]  | [error]
 3321|       |    zero     | done     | done     | exponent | done    | done    | decimal1 | done
 3322|       |    any1     | any1     | any1     | exponent | done    | done    | decimal1 | done
 3323|       |    decimal1 | decimal2 | [error]  | [error]  | [error] | [error] | [error]  | [error]
 3324|       |    decimal2 | decimal2 | decimal2 | exponent | done    | done    | done     | done
 3325|       |    exponent | any2     | any2     | [error]  | sign    | sign    | [error]  | [error]
 3326|       |    sign     | any2     | any2     | [error]  | [error] | [error] | [error]  | [error]
 3327|       |    any2     | any2     | any2     | done     | done    | done    | done     | done
 3328|       |
 3329|       |    The state machine is realized with one label per state (prefixed with
 3330|       |    "scan_number_") and `goto` statements between them. The state machine
 3331|       |    contains cycles, but any cycle can be left when EOF is read. Therefore,
 3332|       |    the function is guaranteed to terminate.
 3333|       |
 3334|       |    During scanning, the read bytes are stored in token_buffer. This string is
 3335|       |    then converted to a signed integer, an unsigned integer, or a
 3336|       |    floating-point number.
 3337|       |
 3338|       |    @return token_type::value_unsigned, token_type::value_integer, or
 3339|       |            token_type::value_float if number could be successfully scanned,
 3340|       |            token_type::parse_error otherwise
 3341|       |
 3342|       |    @note The scanner is independent of the current locale. Internally, the
 3343|       |          locale's decimal point is used instead of `.` to work with the
 3344|       |          locale-dependent converters.
 3345|       |    */
 3346|       |    token_type scan_number()  // lgtm [cpp/use-of-goto]
 3347|   148k|    {
 3348|   148k|        // reset token_buffer to store the number's bytes
 3349|   148k|        reset();
 3350|   148k|
 3351|   148k|        // the type of the parsed number; initially set to unsigned; will be
 3352|   148k|        // changed if minus sign, decimal point or exponent is read
 3353|   148k|        token_type number_type = token_type::value_unsigned;
 3354|   148k|
 3355|   148k|        // state (init): we just found out we need to scan a number
 3356|   148k|        switch (current)
 3357|   148k|        {
 3358|   148k|            case '-':
 3359|  9.45k|            {
 3360|  9.45k|                add(current);
 3361|  9.45k|                goto scan_number_minus;
 3362|   148k|            }
 3363|   148k|
 3364|   148k|            case '0':
 3365|  19.9k|            {
 3366|  19.9k|                add(current);
 3367|  19.9k|                goto scan_number_zero;
 3368|   148k|            }
 3369|   148k|
 3370|   148k|            case '1':
 3371|   118k|            case '2':
 3372|   118k|            case '3':
 3373|   118k|            case '4':
 3374|   118k|            case '5':
 3375|   118k|            case '6':
 3376|   118k|            case '7':
 3377|   118k|            case '8':
 3378|   118k|            case '9':
 3379|   118k|            {
 3380|   118k|                add(current);
 3381|   118k|                goto scan_number_any1;
 3382|   118k|            }
 3383|   118k|
 3384|   118k|            // LCOV_EXCL_START
 3385|   118k|            default:
 3386|      0|            {
 3387|      0|                // all other characters are rejected outside scan_number()
 3388|      0|                assert(false);
 3389|      0|            }
 3390|   148k|                // LCOV_EXCL_STOP
 3391|   148k|        }
 3392|   148k|
 3393|   148k|scan_number_minus:
 3394|  9.45k|        // state: we just parsed a leading minus sign
 3395|  9.45k|        number_type = token_type::value_integer;
 3396|  9.45k|        switch (get())
 3397|  9.45k|        {
 3398|  9.45k|            case '0':
 3399|      0|            {
 3400|      0|                add(current);
 3401|      0|                goto scan_number_zero;
 3402|  9.45k|            }
 3403|  9.45k|
 3404|  9.45k|            case '1':
 3405|  9.45k|            case '2':
 3406|  9.45k|            case '3':
 3407|  9.45k|            case '4':
 3408|  9.45k|            case '5':
 3409|  9.45k|            case '6':
 3410|  9.45k|            case '7':
 3411|  9.45k|            case '8':
 3412|  9.45k|            case '9':
 3413|  9.45k|            {
 3414|  9.45k|                add(current);
 3415|  9.45k|                goto scan_number_any1;
 3416|  9.45k|            }
 3417|  9.45k|
 3418|  9.45k|            default:
 3419|      0|            {
 3420|      0|                error_message = "invalid number; expected digit after '-'";
 3421|      0|                return token_type::parse_error;
 3422|  19.9k|            }
 3423|  19.9k|        }
 3424|  19.9k|
 3425|  19.9k|scan_number_zero:
 3426|  19.9k|        // state: we just parse a zero (maybe with a leading minus sign)
 3427|  19.9k|        switch (get())
 3428|  19.9k|        {
 3429|  19.9k|            case '.':
 3430|    205|            {
 3431|    205|                add(decimal_point_char);
 3432|    205|                goto scan_number_decimal1;
 3433|  19.9k|            }
 3434|  19.9k|
 3435|  19.9k|            case 'e':
 3436|      0|            case 'E':
 3437|      0|            {
 3438|      0|                add(current);
 3439|      0|                goto scan_number_exponent;
 3440|      0|            }
 3441|      0|
 3442|  19.7k|            default:
 3443|  19.7k|                goto scan_number_done;
 3444|   436k|        }
 3445|   436k|
 3446|   436k|scan_number_any1:
 3447|   436k|        // state: we just parsed a number 0-9 (maybe with a leading minus sign)
 3448|   436k|        switch (get())
 3449|   436k|        {
 3450|   436k|            case '0':
 3451|   308k|            case '1':
 3452|   308k|            case '2':
 3453|   308k|            case '3':
 3454|   308k|            case '4':
 3455|   308k|            case '5':
 3456|   308k|            case '6':
 3457|   308k|            case '7':
 3458|   308k|            case '8':
 3459|   308k|            case '9':
 3460|   308k|            {
 3461|   308k|                add(current);
 3462|   308k|                goto scan_number_any1;
 3463|   308k|            }
 3464|   308k|
 3465|   308k|            case '.':
 3466|  58.9k|            {
 3467|  58.9k|                add(decimal_point_char);
 3468|  58.9k|                goto scan_number_decimal1;
 3469|   308k|            }
 3470|   308k|
 3471|   308k|            case 'e':
 3472|      0|            case 'E':
 3473|      0|            {
 3474|      0|                add(current);
 3475|      0|                goto scan_number_exponent;
 3476|      0|            }
 3477|      0|
 3478|  69.0k|            default:
 3479|  69.0k|                goto scan_number_done;
 3480|  59.2k|        }
 3481|  59.2k|
 3482|  59.2k|scan_number_decimal1:
 3483|  59.2k|        // state: we just parsed a decimal point
 3484|  59.2k|        number_type = token_type::value_float;
 3485|  59.2k|        switch (get())
 3486|  59.2k|        {
 3487|  59.2k|            case '0':
 3488|  59.2k|            case '1':
 3489|  59.2k|            case '2':
 3490|  59.2k|            case '3':
 3491|  59.2k|            case '4':
 3492|  59.2k|            case '5':
 3493|  59.2k|            case '6':
 3494|  59.2k|            case '7':
 3495|  59.2k|            case '8':
 3496|  59.2k|            case '9':
 3497|  59.2k|            {
 3498|  59.2k|                add(current);
 3499|  59.2k|                goto scan_number_decimal2;
 3500|  59.2k|            }
 3501|  59.2k|
 3502|  59.2k|            default:
 3503|      0|            {
 3504|      0|                error_message = "invalid number; expected digit after '.'";
 3505|      0|                return token_type::parse_error;
 3506|   253k|            }
 3507|   253k|        }
 3508|   253k|
 3509|   253k|scan_number_decimal2:
 3510|   253k|        // we just parsed at least one number after a decimal point
 3511|   253k|        switch (get())
 3512|   253k|        {
 3513|   253k|            case '0':
 3514|   194k|            case '1':
 3515|   194k|            case '2':
 3516|   194k|            case '3':
 3517|   194k|            case '4':
 3518|   194k|            case '5':
 3519|   194k|            case '6':
 3520|   194k|            case '7':
 3521|   194k|            case '8':
 3522|   194k|            case '9':
 3523|   194k|            {
 3524|   194k|                add(current);
 3525|   194k|                goto scan_number_decimal2;
 3526|   194k|            }
 3527|   194k|
 3528|   194k|            case 'e':
 3529|      0|            case 'E':
 3530|      0|            {
 3531|      0|                add(current);
 3532|      0|                goto scan_number_exponent;
 3533|      0|            }
 3534|      0|
 3535|  59.2k|            default:
 3536|  59.2k|                goto scan_number_done;
 3537|      0|        }
 3538|      0|
 3539|      0|scan_number_exponent:
 3540|      0|        // we just parsed an exponent
 3541|      0|        number_type = token_type::value_float;
 3542|      0|        switch (get())
 3543|      0|        {
 3544|      0|            case '+':
 3545|      0|            case '-':
 3546|      0|            {
 3547|      0|                add(current);
 3548|      0|                goto scan_number_sign;
 3549|      0|            }
 3550|      0|
 3551|      0|            case '0':
 3552|      0|            case '1':
 3553|      0|            case '2':
 3554|      0|            case '3':
 3555|      0|            case '4':
 3556|      0|            case '5':
 3557|      0|            case '6':
 3558|      0|            case '7':
 3559|      0|            case '8':
 3560|      0|            case '9':
 3561|      0|            {
 3562|      0|                add(current);
 3563|      0|                goto scan_number_any2;
 3564|      0|            }
 3565|      0|
 3566|      0|            default:
 3567|      0|            {
 3568|      0|                error_message =
 3569|      0|                    "invalid number; expected '+', '-', or digit after exponent";
 3570|      0|                return token_type::parse_error;
 3571|      0|            }
 3572|      0|        }
 3573|      0|
 3574|      0|scan_number_sign:
 3575|      0|        // we just parsed an exponent sign
 3576|      0|        switch (get())
 3577|      0|        {
 3578|      0|            case '0':
 3579|      0|            case '1':
 3580|      0|            case '2':
 3581|      0|            case '3':
 3582|      0|            case '4':
 3583|      0|            case '5':
 3584|      0|            case '6':
 3585|      0|            case '7':
 3586|      0|            case '8':
 3587|      0|            case '9':
 3588|      0|            {
 3589|      0|                add(current);
 3590|      0|                goto scan_number_any2;
 3591|      0|            }
 3592|      0|
 3593|      0|            default:
 3594|      0|            {
 3595|      0|                error_message = "invalid number; expected digit after exponent sign";
 3596|      0|                return token_type::parse_error;
 3597|      0|            }
 3598|      0|        }
 3599|      0|
 3600|      0|scan_number_any2:
 3601|      0|        // we just parsed a number after the exponent or exponent sign
 3602|      0|        switch (get())
 3603|      0|        {
 3604|      0|            case '0':
 3605|      0|            case '1':
 3606|      0|            case '2':
 3607|      0|            case '3':
 3608|      0|            case '4':
 3609|      0|            case '5':
 3610|      0|            case '6':
 3611|      0|            case '7':
 3612|      0|            case '8':
 3613|      0|            case '9':
 3614|      0|            {
 3615|      0|                add(current);
 3616|      0|                goto scan_number_any2;
 3617|      0|            }
 3618|      0|
 3619|      0|            default:
 3620|      0|                goto scan_number_done;
 3621|   148k|        }
 3622|   148k|
 3623|   148k|scan_number_done:
 3624|   148k|        // unget the character after the number (we only read it to know that
 3625|   148k|        // we are done scanning a number)
 3626|   148k|        unget();
 3627|   148k|
 3628|   148k|        char* endptr = nullptr;
 3629|   148k|        errno = 0;
 3630|   148k|
 3631|   148k|        // try to parse integers first and fall back to floats
 3632|   148k|        if (number_type == token_type::value_unsigned)
 3633|  79.3k|        {
 3634|  79.3k|            const auto x = std::strtoull(token_buffer.data(), &endptr, 10);
 3635|  79.3k|
 3636|  79.3k|            // we checked the number format before
 3637|  79.3k|            assert(endptr == token_buffer.data() + token_buffer.size());
 3638|  79.3k|
 3639|  79.3k|            if (errno == 0)
 3640|  79.3k|            {
 3641|  79.3k|                value_unsigned = static_cast<number_unsigned_t>(x);
 3642|  79.3k|                if (value_unsigned == x)
 3643|  79.3k|                {
 3644|  79.3k|                    return token_type::value_unsigned;
 3645|  79.3k|                }
 3646|  68.6k|            }
 3647|  68.6k|        }
 3648|  68.6k|        else if (number_type == token_type::value_integer)
 3649|  9.45k|        {
 3650|  9.45k|            const auto x = std::strtoll(token_buffer.data(), &endptr, 10);
 3651|  9.45k|
 3652|  9.45k|            // we checked the number format before
 3653|  9.45k|            assert(endptr == token_buffer.data() + token_buffer.size());
 3654|  9.45k|
 3655|  9.45k|            if (errno == 0)
 3656|  9.45k|            {
 3657|  9.45k|                value_integer = static_cast<number_integer_t>(x);
 3658|  9.45k|                if (value_integer == x)
 3659|  9.45k|                {
 3660|  9.45k|                    return token_type::value_integer;
 3661|  9.45k|                }
 3662|  59.2k|            }
 3663|  9.45k|        }
 3664|  59.2k|
 3665|  59.2k|        // this code is reached if we parse a floating-point number or if an
 3666|  59.2k|        // integer conversion above failed
 3667|  59.2k|        strtof(value_float, token_buffer.data(), &endptr);
 3668|  59.2k|
 3669|  59.2k|        // we checked the number format before
 3670|  59.2k|        assert(endptr == token_buffer.data() + token_buffer.size());
 3671|  59.2k|
 3672|  59.2k|        return token_type::value_float;
 3673|  59.2k|    }
 3674|       |
 3675|       |    /*!
 3676|       |    @param[in] literal_text  the literal text to expect
 3677|       |    @param[in] length        the length of the passed literal text
 3678|       |    @param[in] return_type   the token type to return on success
 3679|       |    */
 3680|       |    token_type scan_literal(const char* literal_text, const std::size_t length,
 3681|       |                            token_type return_type)
 3682|  1.03k|    {
 3683|  1.03k|        assert(current == literal_text[0]);
 3684|  4.13k|        for (std::size_t i = 1; i < length; ++i)
 3685|  3.10k|        {
 3686|  3.10k|            if (JSON_UNLIKELY(get() != literal_text[i]))
 3687|  3.10k|            {
 3688|      0|                error_message = "invalid literal";
 3689|      0|                return token_type::parse_error;
 3690|      0|            }
 3691|  3.10k|        }
 3692|  1.03k|        return return_type;
 3693|  1.03k|    }
 3694|       |
 3695|       |    /////////////////////
 3696|       |    // input management
 3697|       |    /////////////////////
 3698|       |
 3699|       |    /// reset token_buffer; current character is beginning of token
 3700|       |    void reset() noexcept
 3701|   470k|    {
 3702|   470k|        token_buffer.clear();
 3703|   470k|        token_string.clear();
 3704|   470k|        token_string.push_back(std::char_traits<char>::to_char_type(current));
 3705|   470k|    }
 3706|       |
 3707|       |    /*
 3708|       |    @brief get next character from the input
 3709|       |
 3710|       |    This function provides the interface to the used input adapter. It does
 3711|       |    not throw in case the input reached EOF, but returns a
 3712|       |    `std::char_traits<char>::eof()` in that case.  Stores the scanned characters
 3713|       |    for use in error messages.
 3714|       |
 3715|       |    @return character read from the input
 3716|       |    */
 3717|       |    std::char_traits<char>::int_type get()
 3718|  4.92M|    {
 3719|  4.92M|        ++position.chars_read_total;
 3720|  4.92M|        ++position.chars_read_current_line;
 3721|  4.92M|
 3722|  4.92M|        if (next_unget)
 3723|   148k|        {
 3724|   148k|            // just reset the next_unget variable and work with current
 3725|   148k|            next_unget = false;
 3726|   148k|        }
 3727|  4.77M|        else
 3728|  4.77M|        {
 3729|  4.77M|            current = ia->get_character();
 3730|  4.77M|        }
 3731|  4.92M|
 3732|  4.92M|        if (JSON_LIKELY(current != std::char_traits<char>::eof()))
 3733|  4.92M|        {
 3734|  4.92M|            token_string.push_back(std::char_traits<char>::to_char_type(current));
 3735|  4.92M|        }
 3736|  4.92M|
 3737|  4.92M|        if (current == '\n')
 3738|  19.2k|        {
 3739|  19.2k|            ++position.lines_read;
 3740|  19.2k|            ++position.chars_read_current_line = 0;
 3741|  19.2k|        }
 3742|  4.92M|
 3743|  4.92M|        return current;
 3744|  4.92M|    }
 3745|       |
 3746|       |    /*!
 3747|       |    @brief unget current character (read it again on next get)
 3748|       |
 3749|       |    We implement unget by setting variable next_unget to true. The input is not
 3750|       |    changed - we just simulate ungetting by modifying chars_read_total,
 3751|       |    chars_read_current_line, and token_string. The next call to get() will
 3752|       |    behave as if the unget character is read again.
 3753|       |    */
 3754|       |    void unget()
 3755|   148k|    {
 3756|   148k|        next_unget = true;
 3757|   148k|
 3758|   148k|        --position.chars_read_total;
 3759|   148k|
 3760|   148k|        // in case we "unget" a newline, we have to also decrement the lines_read
 3761|   148k|        if (position.chars_read_current_line == 0)
 3762|      4|        {
 3763|      4|            if (position.lines_read > 0)
 3764|      4|            {
 3765|      4|                --position.lines_read;
 3766|      4|            }
 3767|      4|        }
 3768|   148k|        else
 3769|   148k|        {
 3770|   148k|            --position.chars_read_current_line;
 3771|   148k|        }
 3772|   148k|
 3773|   148k|        if (JSON_LIKELY(current != std::char_traits<char>::eof()))
 3774|   148k|        {
 3775|   148k|            assert(token_string.size() != 0);
 3776|   148k|            token_string.pop_back();
 3777|   148k|        }
 3778|   148k|    }
 3779|       |
 3780|       |    /// add a character to token_buffer
 3781|       |    void add(int c)
 3782|  3.30M|    {
 3783|  3.30M|        token_buffer.push_back(std::char_traits<char>::to_char_type(c));
 3784|  3.30M|    }
 3785|       |
 3786|       |  public:
 3787|       |    /////////////////////
 3788|       |    // value getters
 3789|       |    /////////////////////
 3790|       |
 3791|       |    /// return integer value
 3792|       |    constexpr number_integer_t get_number_integer() const noexcept
 3793|  9.45k|    {
 3794|  9.45k|        return value_integer;
 3795|  9.45k|    }
 3796|       |
 3797|       |    /// return unsigned integer value
 3798|       |    constexpr number_unsigned_t get_number_unsigned() const noexcept
 3799|  79.3k|    {
 3800|  79.3k|        return value_unsigned;
 3801|  79.3k|    }
 3802|       |
 3803|       |    /// return floating-point value
 3804|       |    constexpr number_float_t get_number_float() const noexcept
 3805|  59.2k|    {
 3806|  59.2k|        return value_float;
 3807|  59.2k|    }
 3808|       |
 3809|       |    /// return current string value (implicitly resets the token; useful only once)
 3810|       |    string_t& get_string()
 3811|   382k|    {
 3812|   382k|        return token_buffer;
 3813|   382k|    }
 3814|       |
 3815|       |    /////////////////////
 3816|       |    // diagnostics
 3817|       |    /////////////////////
 3818|       |
 3819|       |    /// return position of last read token
 3820|       |    constexpr position_t get_position() const noexcept
 3821|      0|    {
 3822|      0|        return position;
 3823|      0|    }
 3824|       |
 3825|       |    /// return the last read token (for errors only).  Will never contain EOF
 3826|       |    /// (an arbitrary value that is not a valid char value, often -1), because
 3827|       |    /// 255 may legitimately occur.  May contain NUL, which should be escaped.
 3828|       |    std::string get_token_string() const
 3829|      0|    {
 3830|      0|        // escape control characters
 3831|      0|        std::string result;
 3832|      0|        for (const auto c : token_string)
 3833|      0|        {
 3834|      0|            if ('\x00' <= c and c <= '\x1F')
 3835|      0|            {
 3836|      0|                // escape control characters
 3837|      0|                char cs[9];
 3838|      0|                (std::snprintf)(cs, 9, "<U+%.4X>", static_cast<unsigned char>(c));
 3839|      0|                result += cs;
 3840|      0|            }
 3841|      0|            else
 3842|      0|            {
 3843|      0|                // add character as is
 3844|      0|                result.push_back(c);
 3845|      0|            }
 3846|      0|        }
 3847|      0|
 3848|      0|        return result;
 3849|      0|    }
 3850|       |
 3851|       |    /// return syntax error message
 3852|       |    constexpr const char* get_error_message() const noexcept
 3853|      0|    {
 3854|      0|        return error_message;
 3855|      0|    }
 3856|       |
 3857|       |    /////////////////////
 3858|       |    // actual scanner
 3859|       |    /////////////////////
 3860|       |
 3861|       |    /*!
 3862|       |    @brief skip the UTF-8 byte order mark
 3863|       |    @return true iff there is no BOM or the correct BOM has been skipped
 3864|       |    */
 3865|       |    bool skip_bom()
 3866|    866|    {
 3867|    866|        if (get() == 0xEF)
 3868|      0|        {
 3869|      0|            // check if we completely parse the BOM
 3870|      0|            return get() == 0xBB and get() == 0xBF;
 3871|      0|        }
 3872|    866|
 3873|    866|        // the first character is not the beginning of the BOM; unget it to
 3874|    866|        // process is later
 3875|    866|        unget();
 3876|    866|        return true;
 3877|    866|    }
 3878|       |
 3879|       |    token_type scan()
 3880|  1.05M|    {
 3881|  1.05M|        // initially, skip the BOM
 3882|  1.05M|        if (position.chars_read_total == 0 and not skip_bom())
 3883|      0|        {
 3884|      0|            error_message = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
 3885|      0|            return token_type::parse_error;
 3886|      0|        }
 3887|  1.05M|
 3888|  1.05M|        // read next character and ignore whitespace
 3889|  1.05M|        do
 3890|  1.29M|        {
 3891|  1.29M|            get();
 3892|  1.29M|        }
 3893|  1.29M|        while (current == ' ' or current == '\t' or current == '\n' or current == '\r');
 3894|  1.05M|
 3895|  1.05M|        switch (current)
 3896|  1.05M|        {
 3897|  1.05M|            // structural characters
 3898|  1.05M|            case '[':
 3899|    619|                return token_type::begin_array;
 3900|  1.05M|            case ']':
 3901|    619|                return token_type::end_array;
 3902|  1.05M|            case '{':
 3903|  52.6k|                return token_type::begin_object;
 3904|  1.05M|            case '}':
 3905|  52.6k|                return token_type::end_object;
 3906|  1.05M|            case ':':
 3907|   257k|                return token_type::name_separator;
 3908|  1.05M|            case ',':
 3909|   214k|                return token_type::value_separator;
 3910|  1.05M|
 3911|  1.05M|            // literals
 3912|  1.05M|            case 't':
 3913|    620|                return scan_literal("true", 4, token_type::literal_true);
 3914|  1.05M|            case 'f':
 3915|      0|                return scan_literal("false", 5, token_type::literal_false);
 3916|  1.05M|            case 'n':
 3917|    414|                return scan_literal("null", 4, token_type::literal_null);
 3918|  1.05M|
 3919|  1.05M|            // string
 3920|  1.05M|            case '\"':
 3921|   322k|                return scan_string();
 3922|  1.05M|
 3923|  1.05M|            // number
 3924|  1.05M|            case '-':
 3925|   148k|            case '0':
 3926|   148k|            case '1':
 3927|   148k|            case '2':
 3928|   148k|            case '3':
 3929|   148k|            case '4':
 3930|   148k|            case '5':
 3931|   148k|            case '6':
 3932|   148k|            case '7':
 3933|   148k|            case '8':
 3934|   148k|            case '9':
 3935|   148k|                return scan_number();
 3936|   148k|
 3937|   148k|            // end of input (the null byte is needed when parsing from
 3938|   148k|            // string literals)
 3939|   148k|            case '\0':
 3940|    661|            case std::char_traits<char>::eof():
 3941|    661|                return token_type::end_of_input;
 3942|    661|
 3943|    661|            // error
 3944|    661|            default:
 3945|      0|                error_message = "invalid literal";
 3946|      0|                return token_type::parse_error;
 3947|      0|        }
 3948|      0|    }
 3949|       |
 3950|       |  private:
 3951|       |    /// input adapter
 3952|       |    detail::input_adapter_t ia = nullptr;
 3953|       |
 3954|       |    /// the current character
 3955|       |    std::char_traits<char>::int_type current = std::char_traits<char>::eof();
 3956|       |
 3957|       |    /// whether the next get() call should just return current
 3958|       |    bool next_unget = false;
 3959|       |
 3960|       |    /// the start position of the current token
 3961|       |    position_t position;
 3962|       |
 3963|       |    /// raw input token string (for error messages)
 3964|       |    std::vector<char> token_string {};
 3965|       |
 3966|       |    /// buffer for variable-length tokens (numbers, strings)
 3967|       |    string_t token_buffer {};
 3968|       |
 3969|       |    /// a description of occurred lexer errors
 3970|       |    const char* error_message = "";
 3971|       |
 3972|       |    // number values
 3973|       |    number_integer_t value_integer = 0;
 3974|       |    number_unsigned_t value_unsigned = 0;
 3975|       |    number_float_t value_float = 0;
 3976|       |
 3977|       |    /// the decimal point
 3978|       |    const char decimal_point_char = '.';
 3979|       |};
 3980|       |}  // namespace detail
 3981|       |}  // namespace nlohmann
 3982|       |
 3983|       |// #include <nlohmann/detail/input/parser.hpp>
 3984|       |
 3985|       |
 3986|       |#include <cassert> // assert
 3987|       |#include <cmath> // isfinite
 3988|       |#include <cstdint> // uint8_t
 3989|       |#include <functional> // function
 3990|       |#include <string> // string
 3991|       |#include <utility> // move
 3992|       |
 3993|       |// #include <nlohmann/detail/exceptions.hpp>
 3994|       |
 3995|       |// #include <nlohmann/detail/macro_scope.hpp>
 3996|       |
 3997|       |// #include <nlohmann/detail/meta/is_sax.hpp>
 3998|       |
 3999|       |
 4000|       |#include <cstdint> // size_t
 4001|       |#include <utility> // declval
 4002|       |
 4003|       |// #include <nlohmann/detail/meta/detected.hpp>
 4004|       |
 4005|       |// #include <nlohmann/detail/meta/type_traits.hpp>
 4006|       |
 4007|       |
 4008|       |namespace nlohmann
 4009|       |{
 4010|       |namespace detail
 4011|       |{
 4012|       |template <typename T>
 4013|       |using null_function_t = decltype(std::declval<T&>().null());
 4014|       |
 4015|       |template <typename T>
 4016|       |using boolean_function_t =
 4017|       |    decltype(std::declval<T&>().boolean(std::declval<bool>()));
 4018|       |
 4019|       |template <typename T, typename Integer>
 4020|       |using number_integer_function_t =
 4021|       |    decltype(std::declval<T&>().number_integer(std::declval<Integer>()));
 4022|       |
 4023|       |template <typename T, typename Unsigned>
 4024|       |using number_unsigned_function_t =
 4025|       |    decltype(std::declval<T&>().number_unsigned(std::declval<Unsigned>()));
 4026|       |
 4027|       |template <typename T, typename Float, typename String>
 4028|       |using number_float_function_t = decltype(std::declval<T&>().number_float(
 4029|       |                                    std::declval<Float>(), std::declval<const String&>()));
 4030|       |
 4031|       |template <typename T, typename String>
 4032|       |using string_function_t =
 4033|       |    decltype(std::declval<T&>().string(std::declval<String&>()));
 4034|       |
 4035|       |template <typename T>
 4036|       |using start_object_function_t =
 4037|       |    decltype(std::declval<T&>().start_object(std::declval<std::size_t>()));
 4038|       |
 4039|       |template <typename T, typename String>
 4040|       |using key_function_t =
 4041|       |    decltype(std::declval<T&>().key(std::declval<String&>()));
 4042|       |
 4043|       |template <typename T>
 4044|       |using end_object_function_t = decltype(std::declval<T&>().end_object());
 4045|       |
 4046|       |template <typename T>
 4047|       |using start_array_function_t =
 4048|       |    decltype(std::declval<T&>().start_array(std::declval<std::size_t>()));
 4049|       |
 4050|       |template <typename T>
 4051|       |using end_array_function_t = decltype(std::declval<T&>().end_array());
 4052|       |
 4053|       |template <typename T, typename Exception>
 4054|       |using parse_error_function_t = decltype(std::declval<T&>().parse_error(
 4055|       |        std::declval<std::size_t>(), std::declval<const std::string&>(),
 4056|       |        std::declval<const Exception&>()));
 4057|       |
 4058|       |template <typename SAX, typename BasicJsonType>
 4059|       |struct is_sax
 4060|       |{
 4061|       |  private:
 4062|       |    static_assert(is_basic_json<BasicJsonType>::value,
 4063|       |                  "BasicJsonType must be of type basic_json<...>");
 4064|       |
 4065|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4066|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4067|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4068|       |    using string_t = typename BasicJsonType::string_t;
 4069|       |    using exception_t = typename BasicJsonType::exception;
 4070|       |
 4071|       |  public:
 4072|       |    static constexpr bool value =
 4073|       |        is_detected_exact<bool, null_function_t, SAX>::value &&
 4074|       |        is_detected_exact<bool, boolean_function_t, SAX>::value &&
 4075|       |        is_detected_exact<bool, number_integer_function_t, SAX,
 4076|       |        number_integer_t>::value &&
 4077|       |        is_detected_exact<bool, number_unsigned_function_t, SAX,
 4078|       |        number_unsigned_t>::value &&
 4079|       |        is_detected_exact<bool, number_float_function_t, SAX, number_float_t,
 4080|       |        string_t>::value &&
 4081|       |        is_detected_exact<bool, string_function_t, SAX, string_t>::value &&
 4082|       |        is_detected_exact<bool, start_object_function_t, SAX>::value &&
 4083|       |        is_detected_exact<bool, key_function_t, SAX, string_t>::value &&
 4084|       |        is_detected_exact<bool, end_object_function_t, SAX>::value &&
 4085|       |        is_detected_exact<bool, start_array_function_t, SAX>::value &&
 4086|       |        is_detected_exact<bool, end_array_function_t, SAX>::value &&
 4087|       |        is_detected_exact<bool, parse_error_function_t, SAX, exception_t>::value;
 4088|       |};
 4089|       |
 4090|       |template <typename SAX, typename BasicJsonType>
 4091|       |struct is_sax_static_asserts
 4092|       |{
 4093|       |  private:
 4094|       |    static_assert(is_basic_json<BasicJsonType>::value,
 4095|       |                  "BasicJsonType must be of type basic_json<...>");
 4096|       |
 4097|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4098|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4099|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4100|       |    using string_t = typename BasicJsonType::string_t;
 4101|       |    using exception_t = typename BasicJsonType::exception;
 4102|       |
 4103|       |  public:
 4104|       |    static_assert(is_detected_exact<bool, null_function_t, SAX>::value,
 4105|       |                  "Missing/invalid function: bool null()");
 4106|       |    static_assert(is_detected_exact<bool, boolean_function_t, SAX>::value,
 4107|       |                  "Missing/invalid function: bool boolean(bool)");
 4108|       |    static_assert(is_detected_exact<bool, boolean_function_t, SAX>::value,
 4109|       |                  "Missing/invalid function: bool boolean(bool)");
 4110|       |    static_assert(
 4111|       |        is_detected_exact<bool, number_integer_function_t, SAX,
 4112|       |        number_integer_t>::value,
 4113|       |        "Missing/invalid function: bool number_integer(number_integer_t)");
 4114|       |    static_assert(
 4115|       |        is_detected_exact<bool, number_unsigned_function_t, SAX,
 4116|       |        number_unsigned_t>::value,
 4117|       |        "Missing/invalid function: bool number_unsigned(number_unsigned_t)");
 4118|       |    static_assert(is_detected_exact<bool, number_float_function_t, SAX,
 4119|       |                  number_float_t, string_t>::value,
 4120|       |                  "Missing/invalid function: bool number_float(number_float_t, const string_t&)");
 4121|       |    static_assert(
 4122|       |        is_detected_exact<bool, string_function_t, SAX, string_t>::value,
 4123|       |        "Missing/invalid function: bool string(string_t&)");
 4124|       |    static_assert(is_detected_exact<bool, start_object_function_t, SAX>::value,
 4125|       |                  "Missing/invalid function: bool start_object(std::size_t)");
 4126|       |    static_assert(is_detected_exact<bool, key_function_t, SAX, string_t>::value,
 4127|       |                  "Missing/invalid function: bool key(string_t&)");
 4128|       |    static_assert(is_detected_exact<bool, end_object_function_t, SAX>::value,
 4129|       |                  "Missing/invalid function: bool end_object()");
 4130|       |    static_assert(is_detected_exact<bool, start_array_function_t, SAX>::value,
 4131|       |                  "Missing/invalid function: bool start_array(std::size_t)");
 4132|       |    static_assert(is_detected_exact<bool, end_array_function_t, SAX>::value,
 4133|       |                  "Missing/invalid function: bool end_array()");
 4134|       |    static_assert(
 4135|       |        is_detected_exact<bool, parse_error_function_t, SAX, exception_t>::value,
 4136|       |        "Missing/invalid function: bool parse_error(std::size_t, const "
 4137|       |        "std::string&, const exception&)");
 4138|       |};
 4139|       |}  // namespace detail
 4140|       |}  // namespace nlohmann
 4141|       |
 4142|       |// #include <nlohmann/detail/input/input_adapters.hpp>
 4143|       |
 4144|       |// #include <nlohmann/detail/input/json_sax.hpp>
 4145|       |
 4146|       |
 4147|       |#include <cstddef>
 4148|       |#include <string>
 4149|       |#include <vector>
 4150|       |
 4151|       |// #include <nlohmann/detail/input/parser.hpp>
 4152|       |
 4153|       |// #include <nlohmann/detail/exceptions.hpp>
 4154|       |
 4155|       |
 4156|       |namespace nlohmann
 4157|       |{
 4158|       |
 4159|       |/*!
 4160|       |@brief SAX interface
 4161|       |
 4162|       |This class describes the SAX interface used by @ref nlohmann::json::sax_parse.
 4163|       |Each function is called in different situations while the input is parsed. The
 4164|       |boolean return value informs the parser whether to continue processing the
 4165|       |input.
 4166|       |*/
 4167|       |template<typename BasicJsonType>
 4168|       |struct json_sax
 4169|       |{
 4170|       |    /// type for (signed) integers
 4171|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4172|       |    /// type for unsigned integers
 4173|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4174|       |    /// type for floating-point numbers
 4175|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4176|       |    /// type for strings
 4177|       |    using string_t = typename BasicJsonType::string_t;
 4178|       |
 4179|       |    /*!
 4180|       |    @brief a null value was read
 4181|       |    @return whether parsing should proceed
 4182|       |    */
 4183|       |    virtual bool null() = 0;
 4184|       |
 4185|       |    /*!
 4186|       |    @brief a boolean value was read
 4187|       |    @param[in] val  boolean value
 4188|       |    @return whether parsing should proceed
 4189|       |    */
 4190|       |    virtual bool boolean(bool val) = 0;
 4191|       |
 4192|       |    /*!
 4193|       |    @brief an integer number was read
 4194|       |    @param[in] val  integer value
 4195|       |    @return whether parsing should proceed
 4196|       |    */
 4197|       |    virtual bool number_integer(number_integer_t val) = 0;
 4198|       |
 4199|       |    /*!
 4200|       |    @brief an unsigned integer number was read
 4201|       |    @param[in] val  unsigned integer value
 4202|       |    @return whether parsing should proceed
 4203|       |    */
 4204|       |    virtual bool number_unsigned(number_unsigned_t val) = 0;
 4205|       |
 4206|       |    /*!
 4207|       |    @brief an floating-point number was read
 4208|       |    @param[in] val  floating-point value
 4209|       |    @param[in] s    raw token value
 4210|       |    @return whether parsing should proceed
 4211|       |    */
 4212|       |    virtual bool number_float(number_float_t val, const string_t& s) = 0;
 4213|       |
 4214|       |    /*!
 4215|       |    @brief a string was read
 4216|       |    @param[in] val  string value
 4217|       |    @return whether parsing should proceed
 4218|       |    @note It is safe to move the passed string.
 4219|       |    */
 4220|       |    virtual bool string(string_t& val) = 0;
 4221|       |
 4222|       |    /*!
 4223|       |    @brief the beginning of an object was read
 4224|       |    @param[in] elements  number of object elements or -1 if unknown
 4225|       |    @return whether parsing should proceed
 4226|       |    @note binary formats may report the number of elements
 4227|       |    */
 4228|       |    virtual bool start_object(std::size_t elements) = 0;
 4229|       |
 4230|       |    /*!
 4231|       |    @brief an object key was read
 4232|       |    @param[in] val  object key
 4233|       |    @return whether parsing should proceed
 4234|       |    @note It is safe to move the passed string.
 4235|       |    */
 4236|       |    virtual bool key(string_t& val) = 0;
 4237|       |
 4238|       |    /*!
 4239|       |    @brief the end of an object was read
 4240|       |    @return whether parsing should proceed
 4241|       |    */
 4242|       |    virtual bool end_object() = 0;
 4243|       |
 4244|       |    /*!
 4245|       |    @brief the beginning of an array was read
 4246|       |    @param[in] elements  number of array elements or -1 if unknown
 4247|       |    @return whether parsing should proceed
 4248|       |    @note binary formats may report the number of elements
 4249|       |    */
 4250|       |    virtual bool start_array(std::size_t elements) = 0;
 4251|       |
 4252|       |    /*!
 4253|       |    @brief the end of an array was read
 4254|       |    @return whether parsing should proceed
 4255|       |    */
 4256|       |    virtual bool end_array() = 0;
 4257|       |
 4258|       |    /*!
 4259|       |    @brief a parse error occurred
 4260|       |    @param[in] position    the position in the input where the error occurs
 4261|       |    @param[in] last_token  the last read token
 4262|       |    @param[in] ex          an exception object describing the error
 4263|       |    @return whether parsing should proceed (must return false)
 4264|       |    */
 4265|       |    virtual bool parse_error(std::size_t position,
 4266|       |                             const std::string& last_token,
 4267|       |                             const detail::exception& ex) = 0;
 4268|       |
 4269|       |    virtual ~json_sax() = default;
 4270|       |};
 4271|       |
 4272|       |
 4273|       |namespace detail
 4274|       |{
 4275|       |/*!
 4276|       |@brief SAX implementation to create a JSON value from SAX events
 4277|       |
 4278|       |This class implements the @ref json_sax interface and processes the SAX events
 4279|       |to create a JSON value which makes it basically a DOM parser. The structure or
 4280|       |hierarchy of the JSON value is managed by the stack `ref_stack` which contains
 4281|       |a pointer to the respective array or object for each recursion depth.
 4282|       |
 4283|       |After successful parsing, the value that is passed by reference to the
 4284|       |constructor contains the parsed value.
 4285|       |
 4286|       |@tparam BasicJsonType  the JSON type
 4287|       |*/
 4288|       |template<typename BasicJsonType>
 4289|       |class json_sax_dom_parser
 4290|       |{
 4291|       |  public:
 4292|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4293|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4294|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4295|       |    using string_t = typename BasicJsonType::string_t;
 4296|       |
 4297|       |    /*!
 4298|       |    @param[in, out] r  reference to a JSON value that is manipulated while
 4299|       |                       parsing
 4300|       |    @param[in] allow_exceptions_  whether parse errors yield exceptions
 4301|       |    */
 4302|       |    explicit json_sax_dom_parser(BasicJsonType& r, const bool allow_exceptions_ = true)
 4303|       |        : root(r), allow_exceptions(allow_exceptions_)
 4304|    866|    {}
 4305|       |
 4306|       |    bool null()
 4307|    414|    {
 4308|    414|        handle_value(nullptr);
 4309|    414|        return true;
 4310|    414|    }
 4311|       |
 4312|       |    bool boolean(bool val)
 4313|    620|    {
 4314|    620|        handle_value(val);
 4315|    620|        return true;
 4316|    620|    }
 4317|       |
 4318|       |    bool number_integer(number_integer_t val)
 4319|  9.45k|    {
 4320|  9.45k|        handle_value(val);
 4321|  9.45k|        return true;
 4322|  9.45k|    }
 4323|       |
 4324|       |    bool number_unsigned(number_unsigned_t val)
 4325|  79.3k|    {
 4326|  79.3k|        handle_value(val);
 4327|  79.3k|        return true;
 4328|  79.3k|    }
 4329|       |
 4330|       |    bool number_float(number_float_t val, const string_t& /*unused*/)
 4331|  59.2k|    {
 4332|  59.2k|        handle_value(val);
 4333|  59.2k|        return true;
 4334|  59.2k|    }
 4335|       |
 4336|       |    bool string(string_t& val)
 4337|  65.7k|    {
 4338|  65.7k|        handle_value(val);
 4339|  65.7k|        return true;
 4340|  65.7k|    }
 4341|       |
 4342|       |    bool start_object(std::size_t len)
 4343|  52.6k|    {
 4344|  52.6k|        ref_stack.push_back(handle_value(BasicJsonType::value_t::object));
 4345|  52.6k|
 4346|  52.6k|        if (JSON_UNLIKELY(len != std::size_t(-1) and len > ref_stack.back()->max_size()))
 4347|  52.6k|        {
 4348|      0|            JSON_THROW(out_of_range::create(408,
 4349|      0|                                            "excessive object size: " + std::to_string(len)));
 4350|      0|        }
 4351|  52.6k|
 4352|  52.6k|        return true;
 4353|  52.6k|    }
 4354|       |
 4355|       |    bool key(string_t& val)
 4356|   257k|    {
 4357|   257k|        // add null at given key and store the reference for later
 4358|   257k|        object_element = &(ref_stack.back()->m_value.object->operator[](val));
 4359|   257k|        return true;
 4360|   257k|    }
 4361|       |
 4362|       |    bool end_object()
 4363|  52.6k|    {
 4364|  52.6k|        ref_stack.pop_back();
 4365|  52.6k|        return true;
 4366|  52.6k|    }
 4367|       |
 4368|       |    bool start_array(std::size_t len)
 4369|    619|    {
 4370|    619|        ref_stack.push_back(handle_value(BasicJsonType::value_t::array));
 4371|    619|
 4372|    619|        if (JSON_UNLIKELY(len != std::size_t(-1) and len > ref_stack.back()->max_size()))
 4373|    619|        {
 4374|      0|            JSON_THROW(out_of_range::create(408,
 4375|      0|                                            "excessive array size: " + std::to_string(len)));
 4376|      0|        }
 4377|    619|
 4378|    619|        return true;
 4379|    619|    }
 4380|       |
 4381|       |    bool end_array()
 4382|    619|    {
 4383|    619|        ref_stack.pop_back();
 4384|    619|        return true;
 4385|    619|    }
 4386|       |
 4387|       |    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/,
 4388|       |                     const detail::exception& ex)
 4389|      0|    {
 4390|      0|        errored = true;
 4391|      0|        if (allow_exceptions)
 4392|      0|        {
 4393|      0|            // determine the proper exception type from the id
 4394|      0|            switch ((ex.id / 100) % 100)
 4395|      0|            {
 4396|      0|                case 1:
 4397|      0|                    JSON_THROW(*reinterpret_cast<const detail::parse_error*>(&ex));
 4398|      0|                case 4:
 4399|      0|                    JSON_THROW(*reinterpret_cast<const detail::out_of_range*>(&ex));
 4400|      0|                // LCOV_EXCL_START
 4401|      0|                case 2:
 4402|      0|                    JSON_THROW(*reinterpret_cast<const detail::invalid_iterator*>(&ex));
 4403|      0|                case 3:
 4404|      0|                    JSON_THROW(*reinterpret_cast<const detail::type_error*>(&ex));
 4405|      0|                case 5:
 4406|      0|                    JSON_THROW(*reinterpret_cast<const detail::other_error*>(&ex));
 4407|      0|                default:
 4408|      0|                    assert(false);
 4409|      0|                    // LCOV_EXCL_STOP
 4410|      0|            }
 4411|      0|        }
 4412|      0|        return false;
 4413|      0|    }
 4414|       |
 4415|       |    constexpr bool is_errored() const
 4416|    866|    {
 4417|    866|        return errored;
 4418|    866|    }
 4419|       |
 4420|       |  private:
 4421|       |    /*!
 4422|       |    @invariant If the ref stack is empty, then the passed value will be the new
 4423|       |               root.
 4424|       |    @invariant If the ref stack contains a value, then it is an array or an
 4425|       |               object to which we can add elements
 4426|       |    */
 4427|       |    template<typename Value>
 4428|       |    BasicJsonType* handle_value(Value&& v)
 4429|   268k|    {
 4430|   268k|        if (ref_stack.empty())
 4431|    866|        {
 4432|    866|            root = BasicJsonType(std::forward<Value>(v));
 4433|    866|            return &root;
 4434|    866|        }
 4435|   267k|
 4436|   267k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
 4437|   267k|
 4438|   267k|        if (ref_stack.back()->is_array())
 4439|  9.86k|        {
 4440|  9.86k|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
 4441|  9.86k|            return &(ref_stack.back()->m_value.array->back());
 4442|  9.86k|        }
 4443|   257k|        else
 4444|   257k|        {
 4445|   257k|            assert(object_element);
 4446|   257k|            *object_element = BasicJsonType(std::forward<Value>(v));
 4447|   257k|            return object_element;
 4448|   257k|        }
 4449|   267k|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueINS0_7value_tEEEPSC_OT_:
  | 4429|  53.2k|    {
  | 4430|  53.2k|        if (ref_stack.empty())
  | 4431|    866|        {
  | 4432|    866|            root = BasicJsonType(std::forward<Value>(v));
  | 4433|    866|            return &root;
  | 4434|    866|        }
  | 4435|  52.3k|
  | 4436|  52.3k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4437|  52.3k|
  | 4438|  52.3k|        if (ref_stack.back()->is_array())
  | 4439|  9.86k|        {
  | 4440|  9.86k|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4441|  9.86k|            return &(ref_stack.back()->m_value.array->back());
  | 4442|  9.86k|        }
  | 4443|  42.5k|        else
  | 4444|  42.5k|        {
  | 4445|  42.5k|            assert(object_element);
  | 4446|  42.5k|            *object_element = BasicJsonType(std::forward<Value>(v));
  | 4447|  42.5k|            return object_element;
  | 4448|  42.5k|        }
  | 4449|  52.3k|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRdEEPSC_OT_:
  | 4429|  59.2k|    {
  | 4430|  59.2k|        if (ref_stack.empty())
  | 4431|      0|        {
  | 4432|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4433|      0|            return &root;
  | 4434|      0|        }
  | 4435|  59.2k|
  | 4436|  59.2k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4437|  59.2k|
  | 4438|  59.2k|        if (ref_stack.back()->is_array())
  | 4439|      0|        {
  | 4440|      0|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4441|      0|            return &(ref_stack.back()->m_value.array->back());
  | 4442|      0|        }
  | 4443|  59.2k|        else
  | 4444|  59.2k|        {
  | 4445|  59.2k|            assert(object_element);
  | 4446|  59.2k|            *object_element = BasicJsonType(std::forward<Value>(v));
  | 4447|  59.2k|            return object_element;
  | 4448|  59.2k|        }
  | 4449|  59.2k|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRbEEPSC_OT_:
  | 4429|    620|    {
  | 4430|    620|        if (ref_stack.empty())
  | 4431|      0|        {
  | 4432|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4433|      0|            return &root;
  | 4434|      0|        }
  | 4435|    620|
  | 4436|    620|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4437|    620|
  | 4438|    620|        if (ref_stack.back()->is_array())
  | 4439|      0|        {
  | 4440|      0|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4441|      0|            return &(ref_stack.back()->m_value.array->back());
  | 4442|      0|        }
  | 4443|    620|        else
  | 4444|    620|        {
  | 4445|    620|            assert(object_element);
  | 4446|    620|            *object_element = BasicJsonType(std::forward<Value>(v));
  | 4447|    620|            return object_element;
  | 4448|    620|        }
  | 4449|    620|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIDnEEPSC_OT_:
  | 4429|    414|    {
  | 4430|    414|        if (ref_stack.empty())
  | 4431|      0|        {
  | 4432|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4433|      0|            return &root;
  | 4434|      0|        }
  | 4435|    414|
  | 4436|    414|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4437|    414|
  | 4438|    414|        if (ref_stack.back()->is_array())
  | 4439|      0|        {
  | 4440|      0|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4441|      0|            return &(ref_stack.back()->m_value.array->back());
  | 4442|      0|        }
  | 4443|    414|        else
  | 4444|    414|        {
  | 4445|    414|            assert(object_element);
  | 4446|    414|            *object_element = BasicJsonType(std::forward<Value>(v));
  | 4447|    414|            return object_element;
  | 4448|    414|        }
  | 4449|    414|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRlEEPSC_OT_:
  | 4429|  9.45k|    {
  | 4430|  9.45k|        if (ref_stack.empty())
  | 4431|      0|        {
  | 4432|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4433|      0|            return &root;
  | 4434|      0|        }
  | 4435|  9.45k|
  | 4436|  9.45k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4437|  9.45k|
  | 4438|  9.45k|        if (ref_stack.back()->is_array())
  | 4439|      0|        {
  | 4440|      0|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4441|      0|            return &(ref_stack.back()->m_value.array->back());
  | 4442|      0|        }
  | 4443|  9.45k|        else
  | 4444|  9.45k|        {
  | 4445|  9.45k|            assert(object_element);
  | 4446|  9.45k|            *object_element = BasicJsonType(std::forward<Value>(v));
  | 4447|  9.45k|            return object_element;
  | 4448|  9.45k|        }
  | 4449|  9.45k|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRSA_EEPSC_OT_:
  | 4429|  65.7k|    {
  | 4430|  65.7k|        if (ref_stack.empty())
  | 4431|      0|        {
  | 4432|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4433|      0|            return &root;
  | 4434|      0|        }
  | 4435|  65.7k|
  | 4436|  65.7k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4437|  65.7k|
  | 4438|  65.7k|        if (ref_stack.back()->is_array())
  | 4439|      0|        {
  | 4440|      0|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4441|      0|            return &(ref_stack.back()->m_value.array->back());
  | 4442|      0|        }
  | 4443|  65.7k|        else
  | 4444|  65.7k|        {
  | 4445|  65.7k|            assert(object_element);
  | 4446|  65.7k|            *object_element = BasicJsonType(std::forward<Value>(v));
  | 4447|  65.7k|            return object_element;
  | 4448|  65.7k|        }
  | 4449|  65.7k|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRmEEPSC_OT_:
  | 4429|  79.3k|    {
  | 4430|  79.3k|        if (ref_stack.empty())
  | 4431|      0|        {
  | 4432|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4433|      0|            return &root;
  | 4434|      0|        }
  | 4435|  79.3k|
  | 4436|  79.3k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4437|  79.3k|
  | 4438|  79.3k|        if (ref_stack.back()->is_array())
  | 4439|      0|        {
  | 4440|      0|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4441|      0|            return &(ref_stack.back()->m_value.array->back());
  | 4442|      0|        }
  | 4443|  79.3k|        else
  | 4444|  79.3k|        {
  | 4445|  79.3k|            assert(object_element);
  | 4446|  79.3k|            *object_element = BasicJsonType(std::forward<Value>(v));
  | 4447|  79.3k|            return object_element;
  | 4448|  79.3k|        }
  | 4449|  79.3k|    }
  ------------------
 4450|       |
 4451|       |    /// the parsed JSON value
 4452|       |    BasicJsonType& root;
 4453|       |    /// stack to model hierarchy of values
 4454|       |    std::vector<BasicJsonType*> ref_stack;
 4455|       |    /// helper to hold the reference for the next object element
 4456|       |    BasicJsonType* object_element = nullptr;
 4457|       |    /// whether a syntax error occurred
 4458|       |    bool errored = false;
 4459|       |    /// whether to throw exceptions in case of errors
 4460|       |    const bool allow_exceptions = true;
 4461|       |};
 4462|       |
 4463|       |template<typename BasicJsonType>
 4464|       |class json_sax_dom_callback_parser
 4465|       |{
 4466|       |  public:
 4467|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4468|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4469|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4470|       |    using string_t = typename BasicJsonType::string_t;
 4471|       |    using parser_callback_t = typename BasicJsonType::parser_callback_t;
 4472|       |    using parse_event_t = typename BasicJsonType::parse_event_t;
 4473|       |
 4474|       |    json_sax_dom_callback_parser(BasicJsonType& r,
 4475|       |                                 const parser_callback_t cb,
 4476|       |                                 const bool allow_exceptions_ = true)
 4477|       |        : root(r), callback(cb), allow_exceptions(allow_exceptions_)
 4478|      0|    {
 4479|      0|        keep_stack.push_back(true);
 4480|      0|    }
 4481|       |
 4482|       |    bool null()
 4483|      0|    {
 4484|      0|        handle_value(nullptr);
 4485|      0|        return true;
 4486|      0|    }
 4487|       |
 4488|       |    bool boolean(bool val)
 4489|      0|    {
 4490|      0|        handle_value(val);
 4491|      0|        return true;
 4492|      0|    }
 4493|       |
 4494|       |    bool number_integer(number_integer_t val)
 4495|      0|    {
 4496|      0|        handle_value(val);
 4497|      0|        return true;
 4498|      0|    }
 4499|       |
 4500|       |    bool number_unsigned(number_unsigned_t val)
 4501|      0|    {
 4502|      0|        handle_value(val);
 4503|      0|        return true;
 4504|      0|    }
 4505|       |
 4506|       |    bool number_float(number_float_t val, const string_t& /*unused*/)
 4507|      0|    {
 4508|      0|        handle_value(val);
 4509|      0|        return true;
 4510|      0|    }
 4511|       |
 4512|       |    bool string(string_t& val)
 4513|      0|    {
 4514|      0|        handle_value(val);
 4515|      0|        return true;
 4516|      0|    }
 4517|       |
 4518|       |    bool start_object(std::size_t len)
 4519|      0|    {
 4520|      0|        // check callback for object start
 4521|      0|        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::object_start, discarded);
 4522|      0|        keep_stack.push_back(keep);
 4523|      0|
 4524|      0|        auto val = handle_value(BasicJsonType::value_t::object, true);
 4525|      0|        ref_stack.push_back(val.second);
 4526|      0|
 4527|      0|        // check object limit
 4528|      0|        if (ref_stack.back())
 4529|      0|        {
 4530|      0|            if (JSON_UNLIKELY(len != std::size_t(-1) and len > ref_stack.back()->max_size()))
 4531|      0|            {
 4532|      0|                JSON_THROW(out_of_range::create(408,
 4533|      0|                                                "excessive object size: " + std::to_string(len)));
 4534|      0|            }
 4535|      0|        }
 4536|      0|
 4537|      0|        return true;
 4538|      0|    }
 4539|       |
 4540|       |    bool key(string_t& val)
 4541|      0|    {
 4542|      0|        BasicJsonType k = BasicJsonType(val);
 4543|      0|
 4544|      0|        // check callback for key
 4545|      0|        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::key, k);
 4546|      0|        key_keep_stack.push_back(keep);
 4547|      0|
 4548|      0|        // add discarded value at given key and store the reference for later
 4549|      0|        if (keep and ref_stack.back())
 4550|      0|        {
 4551|      0|            object_element = &(ref_stack.back()->m_value.object->operator[](val) = discarded);
 4552|      0|        }
 4553|      0|
 4554|      0|        return true;
 4555|      0|    }
 4556|       |
 4557|       |    bool end_object()
 4558|      0|    {
 4559|      0|        if (ref_stack.back())
 4560|      0|        {
 4561|      0|            if (not callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::object_end, *ref_stack.back()))
 4562|      0|            {
 4563|      0|                // discard object
 4564|      0|                *ref_stack.back() = discarded;
 4565|      0|            }
 4566|      0|        }
 4567|      0|
 4568|      0|        assert(not ref_stack.empty());
 4569|      0|        assert(not keep_stack.empty());
 4570|      0|        ref_stack.pop_back();
 4571|      0|        keep_stack.pop_back();
 4572|      0|
 4573|      0|        if (not ref_stack.empty() and ref_stack.back())
 4574|      0|        {
 4575|      0|            // remove discarded value
 4576|      0|            if (ref_stack.back()->is_object())
 4577|      0|            {
 4578|      0|                for (auto it = ref_stack.back()->begin(); it != ref_stack.back()->end(); ++it)
 4579|      0|                {
 4580|      0|                    if (it->is_discarded())
 4581|      0|                    {
 4582|      0|                        ref_stack.back()->erase(it);
 4583|      0|                        break;
 4584|      0|                    }
 4585|      0|                }
 4586|      0|            }
 4587|      0|        }
 4588|      0|
 4589|      0|        return true;
 4590|      0|    }
 4591|       |
 4592|       |    bool start_array(std::size_t len)
 4593|      0|    {
 4594|      0|        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::array_start, discarded);
 4595|      0|        keep_stack.push_back(keep);
 4596|      0|
 4597|      0|        auto val = handle_value(BasicJsonType::value_t::array, true);
 4598|      0|        ref_stack.push_back(val.second);
 4599|      0|
 4600|      0|        // check array limit
 4601|      0|        if (ref_stack.back())
 4602|      0|        {
 4603|      0|            if (JSON_UNLIKELY(len != std::size_t(-1) and len > ref_stack.back()->max_size()))
 4604|      0|            {
 4605|      0|                JSON_THROW(out_of_range::create(408,
 4606|      0|                                                "excessive array size: " + std::to_string(len)));
 4607|      0|            }
 4608|      0|        }
 4609|      0|
 4610|      0|        return true;
 4611|      0|    }
 4612|       |
 4613|       |    bool end_array()
 4614|      0|    {
 4615|      0|        bool keep = true;
 4616|      0|
 4617|      0|        if (ref_stack.back())
 4618|      0|        {
 4619|      0|            keep = callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::array_end, *ref_stack.back());
 4620|      0|            if (not keep)
 4621|      0|            {
 4622|      0|                // discard array
 4623|      0|                *ref_stack.back() = discarded;
 4624|      0|            }
 4625|      0|        }
 4626|      0|
 4627|      0|        assert(not ref_stack.empty());
 4628|      0|        assert(not keep_stack.empty());
 4629|      0|        ref_stack.pop_back();
 4630|      0|        keep_stack.pop_back();
 4631|      0|
 4632|      0|        // remove discarded value
 4633|      0|        if (not keep and not ref_stack.empty())
 4634|      0|        {
 4635|      0|            if (ref_stack.back()->is_array())
 4636|      0|            {
 4637|      0|                ref_stack.back()->m_value.array->pop_back();
 4638|      0|            }
 4639|      0|        }
 4640|      0|
 4641|      0|        return true;
 4642|      0|    }
 4643|       |
 4644|       |    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/,
 4645|       |                     const detail::exception& ex)
 4646|      0|    {
 4647|      0|        errored = true;
 4648|      0|        if (allow_exceptions)
 4649|      0|        {
 4650|      0|            // determine the proper exception type from the id
 4651|      0|            switch ((ex.id / 100) % 100)
 4652|      0|            {
 4653|      0|                case 1:
 4654|      0|                    JSON_THROW(*reinterpret_cast<const detail::parse_error*>(&ex));
 4655|      0|                case 4:
 4656|      0|                    JSON_THROW(*reinterpret_cast<const detail::out_of_range*>(&ex));
 4657|      0|                // LCOV_EXCL_START
 4658|      0|                case 2:
 4659|      0|                    JSON_THROW(*reinterpret_cast<const detail::invalid_iterator*>(&ex));
 4660|      0|                case 3:
 4661|      0|                    JSON_THROW(*reinterpret_cast<const detail::type_error*>(&ex));
 4662|      0|                case 5:
 4663|      0|                    JSON_THROW(*reinterpret_cast<const detail::other_error*>(&ex));
 4664|      0|                default:
 4665|      0|                    assert(false);
 4666|      0|                    // LCOV_EXCL_STOP
 4667|      0|            }
 4668|      0|        }
 4669|      0|        return false;
 4670|      0|    }
 4671|       |
 4672|       |    constexpr bool is_errored() const
 4673|      0|    {
 4674|      0|        return errored;
 4675|      0|    }
 4676|       |
 4677|       |  private:
 4678|       |    /*!
 4679|       |    @param[in] v  value to add to the JSON value we build during parsing
 4680|       |    @param[in] skip_callback  whether we should skip calling the callback
 4681|       |               function; this is required after start_array() and
 4682|       |               start_object() SAX events, because otherwise we would call the
 4683|       |               callback function with an empty array or object, respectively.
 4684|       |
 4685|       |    @invariant If the ref stack is empty, then the passed value will be the new
 4686|       |               root.
 4687|       |    @invariant If the ref stack contains a value, then it is an array or an
 4688|       |               object to which we can add elements
 4689|       |
 4690|       |    @return pair of boolean (whether value should be kept) and pointer (to the
 4691|       |            passed value in the ref_stack hierarchy; nullptr if not kept)
 4692|       |    */
 4693|       |    template<typename Value>
 4694|       |    std::pair<bool, BasicJsonType*> handle_value(Value&& v, const bool skip_callback = false)
 4695|      0|    {
 4696|      0|        assert(not keep_stack.empty());
 4697|      0|
 4698|      0|        // do not handle this value if we know it would be added to a discarded
 4699|      0|        // container
 4700|      0|        if (not keep_stack.back())
 4701|      0|        {
 4702|      0|            return {false, nullptr};
 4703|      0|        }
 4704|      0|
 4705|      0|        // create value
 4706|      0|        auto value = BasicJsonType(std::forward<Value>(v));
 4707|      0|
 4708|      0|        // check callback
 4709|      0|        const bool keep = skip_callback or callback(static_cast<int>(ref_stack.size()), parse_event_t::value, value);
 4710|      0|
 4711|      0|        // do not handle this value if we just learnt it shall be discarded
 4712|      0|        if (not keep)
 4713|      0|        {
 4714|      0|            return {false, nullptr};
 4715|      0|        }
 4716|      0|
 4717|      0|        if (ref_stack.empty())
 4718|      0|        {
 4719|      0|            root = std::move(value);
 4720|      0|            return {true, &root};
 4721|      0|        }
 4722|      0|
 4723|      0|        // skip this value if we already decided to skip the parent
 4724|      0|        // (https://github.com/nlohmann/json/issues/971#issuecomment-413678360)
 4725|      0|        if (not ref_stack.back())
 4726|      0|        {
 4727|      0|            return {false, nullptr};
 4728|      0|        }
 4729|      0|
 4730|      0|        // we now only expect arrays and objects
 4731|      0|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
 4732|      0|
 4733|      0|        if (ref_stack.back()->is_array())
 4734|      0|        {
 4735|      0|            ref_stack.back()->m_value.array->push_back(std::move(value));
 4736|      0|            return {true, &(ref_stack.back()->m_value.array->back())};
 4737|      0|        }
 4738|      0|        else
 4739|      0|        {
 4740|      0|            // check if we should store an element for the current key
 4741|      0|            assert(not key_keep_stack.empty());
 4742|      0|            const bool store_element = key_keep_stack.back();
 4743|      0|            key_keep_stack.pop_back();
 4744|      0|
 4745|      0|            if (not store_element)
 4746|      0|            {
 4747|      0|                return {false, nullptr};
 4748|      0|            }
 4749|      0|
 4750|      0|            assert(object_element);
 4751|      0|            *object_element = std::move(value);
 4752|      0|            return {true, object_element};
 4753|      0|        }
 4754|      0|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueINS0_7value_tEEESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRdEESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRbEESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIDnEESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRlEESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRSA_EESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRmEESt4pairIbPSC_EOT_b
  ------------------
 4755|       |
 4756|       |    /// the parsed JSON value
 4757|       |    BasicJsonType& root;
 4758|       |    /// stack to model hierarchy of values
 4759|       |    std::vector<BasicJsonType*> ref_stack;
 4760|       |    /// stack to manage which values to keep
 4761|       |    std::vector<bool> keep_stack;
 4762|       |    /// stack to manage which object keys to keep
 4763|       |    std::vector<bool> key_keep_stack;
 4764|       |    /// helper to hold the reference for the next object element
 4765|       |    BasicJsonType* object_element = nullptr;
 4766|       |    /// whether a syntax error occurred
 4767|       |    bool errored = false;
 4768|       |    /// callback function
 4769|       |    const parser_callback_t callback = nullptr;
 4770|       |    /// whether to throw exceptions in case of errors
 4771|       |    const bool allow_exceptions = true;
 4772|       |    /// a discarded value for the callback
 4773|       |    BasicJsonType discarded = BasicJsonType::value_t::discarded;
 4774|       |};
 4775|       |
 4776|       |template<typename BasicJsonType>
 4777|       |class json_sax_acceptor
 4778|       |{
 4779|       |  public:
 4780|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4781|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4782|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4783|       |    using string_t = typename BasicJsonType::string_t;
 4784|       |
 4785|       |    bool null()
 4786|       |    {
 4787|       |        return true;
 4788|       |    }
 4789|       |
 4790|       |    bool boolean(bool /*unused*/)
 4791|       |    {
 4792|       |        return true;
 4793|       |    }
 4794|       |
 4795|       |    bool number_integer(number_integer_t /*unused*/)
 4796|       |    {
 4797|       |        return true;
 4798|       |    }
 4799|       |
 4800|       |    bool number_unsigned(number_unsigned_t /*unused*/)
 4801|       |    {
 4802|       |        return true;
 4803|       |    }
 4804|       |
 4805|       |    bool number_float(number_float_t /*unused*/, const string_t& /*unused*/)
 4806|       |    {
 4807|       |        return true;
 4808|       |    }
 4809|       |
 4810|       |    bool string(string_t& /*unused*/)
 4811|       |    {
 4812|       |        return true;
 4813|       |    }
 4814|       |
 4815|       |    bool start_object(std::size_t  /*unused*/ = std::size_t(-1))
 4816|       |    {
 4817|       |        return true;
 4818|       |    }
 4819|       |
 4820|       |    bool key(string_t& /*unused*/)
 4821|       |    {
 4822|       |        return true;
 4823|       |    }
 4824|       |
 4825|       |    bool end_object()
 4826|       |    {
 4827|       |        return true;
 4828|       |    }
 4829|       |
 4830|       |    bool start_array(std::size_t  /*unused*/ = std::size_t(-1))
 4831|       |    {
 4832|       |        return true;
 4833|       |    }
 4834|       |
 4835|       |    bool end_array()
 4836|       |    {
 4837|       |        return true;
 4838|       |    }
 4839|       |
 4840|       |    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/, const detail::exception& /*unused*/)
 4841|       |    {
 4842|       |        return false;
 4843|       |    }
 4844|       |};
 4845|       |}  // namespace detail
 4846|       |
 4847|       |}  // namespace nlohmann
 4848|       |
 4849|       |// #include <nlohmann/detail/input/lexer.hpp>
 4850|       |
 4851|       |// #include <nlohmann/detail/value_t.hpp>
 4852|       |
 4853|       |
 4854|       |namespace nlohmann
 4855|       |{
 4856|       |namespace detail
 4857|       |{
 4858|       |////////////
 4859|       |// parser //
 4860|       |////////////
 4861|       |
 4862|       |/*!
 4863|       |@brief syntax analysis
 4864|       |
 4865|       |This class implements a recursive decent parser.
 4866|       |*/
 4867|       |template<typename BasicJsonType>
 4868|       |class parser
 4869|       |{
 4870|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4871|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4872|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4873|       |    using string_t = typename BasicJsonType::string_t;
 4874|       |    using lexer_t = lexer<BasicJsonType>;
 4875|       |    using token_type = typename lexer_t::token_type;
 4876|       |
 4877|       |  public:
 4878|       |    enum class parse_event_t : uint8_t
 4879|       |    {
 4880|       |        /// the parser read `{` and started to process a JSON object
 4881|       |        object_start,
 4882|       |        /// the parser read `}` and finished processing a JSON object
 4883|       |        object_end,
 4884|       |        /// the parser read `[` and started to process a JSON array
 4885|       |        array_start,
 4886|       |        /// the parser read `]` and finished processing a JSON array
 4887|       |        array_end,
 4888|       |        /// the parser read a key of a value in an object
 4889|       |        key,
 4890|       |        /// the parser finished reading a JSON value
 4891|       |        value
 4892|       |    };
 4893|       |
 4894|       |    using parser_callback_t =
 4895|       |        std::function<bool(int depth, parse_event_t event, BasicJsonType& parsed)>;
 4896|       |
 4897|       |    /// a parser reading from an input adapter
 4898|       |    explicit parser(detail::input_adapter_t&& adapter,
 4899|       |                    const parser_callback_t cb = nullptr,
 4900|       |                    const bool allow_exceptions_ = true)
 4901|       |        : callback(cb), m_lexer(std::move(adapter)), allow_exceptions(allow_exceptions_)
 4902|    866|    {
 4903|    866|        // read first token
 4904|    866|        get_token();
 4905|    866|    }
 4906|       |
 4907|       |    /*!
 4908|       |    @brief public parser interface
 4909|       |
 4910|       |    @param[in] strict      whether to expect the last token to be EOF
 4911|       |    @param[in,out] result  parsed JSON value
 4912|       |
 4913|       |    @throw parse_error.101 in case of an unexpected token
 4914|       |    @throw parse_error.102 if to_unicode fails or surrogate error
 4915|       |    @throw parse_error.103 if to_unicode fails
 4916|       |    */
 4917|       |    void parse(const bool strict, BasicJsonType& result)
 4918|    866|    {
 4919|    866|        if (callback)
 4920|      0|        {
 4921|      0|            json_sax_dom_callback_parser<BasicJsonType> sdp(result, callback, allow_exceptions);
 4922|      0|            sax_parse_internal(&sdp);
 4923|      0|            result.assert_invariant();
 4924|      0|
 4925|      0|            // in strict mode, input must be completely read
 4926|      0|            if (strict and (get_token() != token_type::end_of_input))
 4927|      0|            {
 4928|      0|                sdp.parse_error(m_lexer.get_position(),
 4929|      0|                                m_lexer.get_token_string(),
 4930|      0|                                parse_error::create(101, m_lexer.get_position(),
 4931|      0|                                                    exception_message(token_type::end_of_input, "value")));
 4932|      0|            }
 4933|      0|
 4934|      0|            // in case of an error, return discarded value
 4935|      0|            if (sdp.is_errored())
 4936|      0|            {
 4937|      0|                result = value_t::discarded;
 4938|      0|                return;
 4939|      0|            }
 4940|      0|
 4941|      0|            // set top-level value to null if it was discarded by the callback
 4942|      0|            // function
 4943|      0|            if (result.is_discarded())
 4944|      0|            {
 4945|      0|                result = nullptr;
 4946|      0|            }
 4947|      0|        }
 4948|    866|        else
 4949|    866|        {
 4950|    866|            json_sax_dom_parser<BasicJsonType> sdp(result, allow_exceptions);
 4951|    866|            sax_parse_internal(&sdp);
 4952|    866|            result.assert_invariant();
 4953|    866|
 4954|    866|            // in strict mode, input must be completely read
 4955|    866|            if (strict and (get_token() != token_type::end_of_input))
 4956|      0|            {
 4957|      0|                sdp.parse_error(m_lexer.get_position(),
 4958|      0|                                m_lexer.get_token_string(),
 4959|      0|                                parse_error::create(101, m_lexer.get_position(),
 4960|      0|                                                    exception_message(token_type::end_of_input, "value")));
 4961|      0|            }
 4962|    866|
 4963|    866|            // in case of an error, return discarded value
 4964|    866|            if (sdp.is_errored())
 4965|      0|            {
 4966|      0|                result = value_t::discarded;
 4967|      0|                return;
 4968|      0|            }
 4969|    866|        }
 4970|    866|    }
 4971|       |
 4972|       |    /*!
 4973|       |    @brief public accept interface
 4974|       |
 4975|       |    @param[in] strict  whether to expect the last token to be EOF
 4976|       |    @return whether the input is a proper JSON text
 4977|       |    */
 4978|       |    bool accept(const bool strict = true)
 4979|       |    {
 4980|       |        json_sax_acceptor<BasicJsonType> sax_acceptor;
 4981|       |        return sax_parse(&sax_acceptor, strict);
 4982|       |    }
 4983|       |
 4984|       |    template <typename SAX>
 4985|       |    bool sax_parse(SAX* sax, const bool strict = true)
 4986|       |    {
 4987|       |        (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};
 4988|       |        const bool result = sax_parse_internal(sax);
 4989|       |
 4990|       |        // strict mode: next byte must be EOF
 4991|       |        if (result and strict and (get_token() != token_type::end_of_input))
 4992|       |        {
 4993|       |            return sax->parse_error(m_lexer.get_position(),
 4994|       |                                    m_lexer.get_token_string(),
 4995|       |                                    parse_error::create(101, m_lexer.get_position(),
 4996|       |                                            exception_message(token_type::end_of_input, "value")));
 4997|       |        }
 4998|       |
 4999|       |        return result;
 5000|       |    }
 5001|       |
 5002|       |  private:
 5003|       |    template <typename SAX>
 5004|       |    bool sax_parse_internal(SAX* sax)
 5005|    866|    {
 5006|    866|        // stack to remember the hierarchy of structured values we are parsing
 5007|    866|        // true = array; false = object
 5008|    866|        std::vector<bool> states;
 5009|    866|        // value to avoid a goto (see comment where set to true)
 5010|    866|        bool skip_to_state_evaluation = false;
 5011|    866|
 5012|   321k|        while (true)
 5013|   321k|        {
 5014|   321k|            if (not skip_to_state_evaluation)
 5015|   268k|            {
 5016|   268k|                // invariant: get_token() was called before each iteration
 5017|   268k|                switch (last_token)
 5018|   268k|                {
 5019|   268k|                    case token_type::begin_object:
 5020|  52.6k|                    {
 5021|  52.6k|                        if (JSON_UNLIKELY(not sax->start_object(std::size_t(-1))))
 5022|  52.6k|                        {
 5023|      0|                            return false;
 5024|      0|                        }
 5025|  52.6k|
 5026|  52.6k|                        // closing } -> we are done
 5027|  52.6k|                        if (get_token() == token_type::end_object)
 5028|      0|                        {
 5029|      0|                            if (JSON_UNLIKELY(not sax->end_object()))
 5030|      0|                            {
 5031|      0|                                return false;
 5032|      0|                            }
 5033|      0|                            break;
 5034|      0|                        }
 5035|  52.6k|
 5036|  52.6k|                        // parse key
 5037|  52.6k|                        if (JSON_UNLIKELY(last_token != token_type::value_string))
 5038|  52.6k|                        {
 5039|      0|                            return sax->parse_error(m_lexer.get_position(),
 5040|      0|                                                    m_lexer.get_token_string(),
 5041|      0|                                                    parse_error::create(101, m_lexer.get_position(),
 5042|      0|                                                            exception_message(token_type::value_string, "object key")));
 5043|      0|                        }
 5044|  52.6k|                        if (JSON_UNLIKELY(not sax->key(m_lexer.get_string())))
 5045|  52.6k|                        {
 5046|      0|                            return false;
 5047|      0|                        }
 5048|  52.6k|
 5049|  52.6k|                        // parse separator (:)
 5050|  52.6k|                        if (JSON_UNLIKELY(get_token() != token_type::name_separator))
 5051|  52.6k|                        {
 5052|      0|                            return sax->parse_error(m_lexer.get_position(),
 5053|      0|                                                    m_lexer.get_token_string(),
 5054|      0|                                                    parse_error::create(101, m_lexer.get_position(),
 5055|      0|                                                            exception_message(token_type::name_separator, "object separator")));
 5056|      0|                        }
 5057|  52.6k|
 5058|  52.6k|                        // remember we are now inside an object
 5059|  52.6k|                        states.push_back(false);
 5060|  52.6k|
 5061|  52.6k|                        // parse values
 5062|  52.6k|                        get_token();
 5063|  52.6k|                        continue;
 5064|  52.6k|                    }
 5065|  52.6k|
 5066|  52.6k|                    case token_type::begin_array:
 5067|    619|                    {
 5068|    619|                        if (JSON_UNLIKELY(not sax->start_array(std::size_t(-1))))
 5069|    619|                        {
 5070|      0|                            return false;
 5071|      0|                        }
 5072|    619|
 5073|    619|                        // closing ] -> we are done
 5074|    619|                        if (get_token() == token_type::end_array)
 5075|    205|                        {
 5076|    205|                            if (JSON_UNLIKELY(not sax->end_array()))
 5077|    205|                            {
 5078|      0|                                return false;
 5079|      0|                            }
 5080|    205|                            break;
 5081|    205|                        }
 5082|    414|
 5083|    414|                        // remember we are now inside an array
 5084|    414|                        states.push_back(true);
 5085|    414|
 5086|    414|                        // parse values (no need to call get_token)
 5087|    414|                        continue;
 5088|    414|                    }
 5089|    414|
 5090|  59.2k|                    case token_type::value_float:
 5091|  59.2k|                    {
 5092|  59.2k|                        const auto res = m_lexer.get_number_float();
 5093|  59.2k|
 5094|  59.2k|                        if (JSON_UNLIKELY(not std::isfinite(res)))
 5095|  59.2k|                        {
 5096|      0|                            return sax->parse_error(m_lexer.get_position(),
 5097|      0|                                                    m_lexer.get_token_string(),
 5098|      0|                                                    out_of_range::create(406, "number overflow parsing '" + m_lexer.get_token_string() + "'"));
 5099|      0|                        }
 5100|  59.2k|                        else
 5101|  59.2k|                        {
 5102|  59.2k|                            if (JSON_UNLIKELY(not sax->number_float(res, m_lexer.get_string())))
 5103|  59.2k|                            {
 5104|      0|                                return false;
 5105|      0|                            }
 5106|  59.2k|                            break;
 5107|  59.2k|                        }
 5108|      0|                    }
 5109|      0|
 5110|      0|                    case token_type::literal_false:
 5111|      0|                    {
 5112|      0|                        if (JSON_UNLIKELY(not sax->boolean(false)))
 5113|      0|                        {
 5114|      0|                            return false;
 5115|      0|                        }
 5116|      0|                        break;
 5117|      0|                    }
 5118|      0|
 5119|    414|                    case token_type::literal_null:
 5120|    414|                    {
 5121|    414|                        if (JSON_UNLIKELY(not sax->null()))
 5122|    414|                        {
 5123|      0|                            return false;
 5124|      0|                        }
 5125|    414|                        break;
 5126|    414|                    }
 5127|    414|
 5128|    620|                    case token_type::literal_true:
 5129|    620|                    {
 5130|    620|                        if (JSON_UNLIKELY(not sax->boolean(true)))
 5131|    620|                        {
 5132|      0|                            return false;
 5133|      0|                        }
 5134|    620|                        break;
 5135|    620|                    }
 5136|    620|
 5137|  9.45k|                    case token_type::value_integer:
 5138|  9.45k|                    {
 5139|  9.45k|                        if (JSON_UNLIKELY(not sax->number_integer(m_lexer.get_number_integer())))
 5140|  9.45k|                        {
 5141|      0|                            return false;
 5142|      0|                        }
 5143|  9.45k|                        break;
 5144|  9.45k|                    }
 5145|  9.45k|
 5146|  65.7k|                    case token_type::value_string:
 5147|  65.7k|                    {
 5148|  65.7k|                        if (JSON_UNLIKELY(not sax->string(m_lexer.get_string())))
 5149|  65.7k|                        {
 5150|      0|                            return false;
 5151|      0|                        }
 5152|  65.7k|                        break;
 5153|  65.7k|                    }
 5154|  65.7k|
 5155|  79.3k|                    case token_type::value_unsigned:
 5156|  79.3k|                    {
 5157|  79.3k|                        if (JSON_UNLIKELY(not sax->number_unsigned(m_lexer.get_number_unsigned())))
 5158|  79.3k|                        {
 5159|      0|                            return false;
 5160|      0|                        }
 5161|  79.3k|                        break;
 5162|  79.3k|                    }
 5163|  79.3k|
 5164|  79.3k|                    case token_type::parse_error:
 5165|      0|                    {
 5166|      0|                        // using "uninitialized" to avoid "expected" message
 5167|      0|                        return sax->parse_error(m_lexer.get_position(),
 5168|      0|                                                m_lexer.get_token_string(),
 5169|      0|                                                parse_error::create(101, m_lexer.get_position(),
 5170|      0|                                                        exception_message(token_type::uninitialized, "value")));
 5171|  79.3k|                    }
 5172|  79.3k|
 5173|  79.3k|                    default: // the last token was unexpected
 5174|      0|                    {
 5175|      0|                        return sax->parse_error(m_lexer.get_position(),
 5176|      0|                                                m_lexer.get_token_string(),
 5177|      0|                                                parse_error::create(101, m_lexer.get_position(),
 5178|      0|                                                        exception_message(token_type::literal_or_value, "value")));
 5179|  53.0k|                    }
 5180|  53.0k|                }
 5181|  53.0k|            }
 5182|  53.0k|            else
 5183|  53.0k|            {
 5184|  53.0k|                skip_to_state_evaluation = false;
 5185|  53.0k|            }
 5186|   321k|
 5187|   321k|            // we reached this line after we successfully parsed a value
 5188|   321k|            if (states.empty())
 5189|    866|            {
 5190|    866|                // empty stack: we reached the end of the hierarchy: done
 5191|    866|                return true;
 5192|    866|            }
 5193|   267k|            else
 5194|   267k|            {
 5195|   267k|                if (states.back())  // array
 5196|  9.86k|                {
 5197|  9.86k|                    // comma -> next value
 5198|  9.86k|                    if (get_token() == token_type::value_separator)
 5199|  9.45k|                    {
 5200|  9.45k|                        // parse a new value
 5201|  9.45k|                        get_token();
 5202|  9.45k|                        continue;
 5203|  9.45k|                    }
 5204|    414|
 5205|    414|                    // closing ]
 5206|    414|                    if (JSON_LIKELY(last_token == token_type::end_array))
 5207|    414|                    {
 5208|    414|                        if (JSON_UNLIKELY(not sax->end_array()))
 5209|    414|                        {
 5210|      0|                            return false;
 5211|      0|                        }
 5212|    414|
 5213|    414|                        // We are done with this array. Before we can parse a
 5214|    414|                        // new value, we need to evaluate the new state first.
 5215|    414|                        // By setting skip_to_state_evaluation to false, we
 5216|    414|                        // are effectively jumping to the beginning of this if.
 5217|    414|                        assert(not states.empty());
 5218|    414|                        states.pop_back();
 5219|    414|                        skip_to_state_evaluation = true;
 5220|    414|                        continue;
 5221|    414|                    }
 5222|      0|                    else
 5223|      0|                    {
 5224|      0|                        return sax->parse_error(m_lexer.get_position(),
 5225|      0|                                                m_lexer.get_token_string(),
 5226|      0|                                                parse_error::create(101, m_lexer.get_position(),
 5227|      0|                                                        exception_message(token_type::end_array, "array")));
 5228|      0|                    }
 5229|   257k|                }
 5230|   257k|                else  // object
 5231|   257k|                {
 5232|   257k|                    // comma -> next value
 5233|   257k|                    if (get_token() == token_type::value_separator)
 5234|   204k|                    {
 5235|   204k|                        // parse key
 5236|   204k|                        if (JSON_UNLIKELY(get_token() != token_type::value_string))
 5237|   204k|                        {
 5238|      0|                            return sax->parse_error(m_lexer.get_position(),
 5239|      0|                                                    m_lexer.get_token_string(),
 5240|      0|                                                    parse_error::create(101, m_lexer.get_position(),
 5241|      0|                                                            exception_message(token_type::value_string, "object key")));
 5242|      0|                        }
 5243|   204k|                        else
 5244|   204k|                        {
 5245|   204k|                            if (JSON_UNLIKELY(not sax->key(m_lexer.get_string())))
 5246|   204k|                            {
 5247|      0|                                return false;
 5248|      0|                            }
 5249|   204k|                        }
 5250|   204k|
 5251|   204k|                        // parse separator (:)
 5252|   204k|                        if (JSON_UNLIKELY(get_token() != token_type::name_separator))
 5253|   204k|                        {
 5254|      0|                            return sax->parse_error(m_lexer.get_position(),
 5255|      0|                                                    m_lexer.get_token_string(),
 5256|      0|                                                    parse_error::create(101, m_lexer.get_position(),
 5257|      0|                                                            exception_message(token_type::name_separator, "object separator")));
 5258|      0|                        }
 5259|   204k|
 5260|   204k|                        // parse values
 5261|   204k|                        get_token();
 5262|   204k|                        continue;
 5263|   204k|                    }
 5264|  52.6k|
 5265|  52.6k|                    // closing }
 5266|  52.6k|                    if (JSON_LIKELY(last_token == token_type::end_object))
 5267|  52.6k|                    {
 5268|  52.6k|                        if (JSON_UNLIKELY(not sax->end_object()))
 5269|  52.6k|                        {
 5270|      0|                            return false;
 5271|      0|                        }
 5272|  52.6k|
 5273|  52.6k|                        // We are done with this object. Before we can parse a
 5274|  52.6k|                        // new value, we need to evaluate the new state first.
 5275|  52.6k|                        // By setting skip_to_state_evaluation to false, we
 5276|  52.6k|                        // are effectively jumping to the beginning of this if.
 5277|  52.6k|                        assert(not states.empty());
 5278|  52.6k|                        states.pop_back();
 5279|  52.6k|                        skip_to_state_evaluation = true;
 5280|  52.6k|                        continue;
 5281|  52.6k|                    }
 5282|      0|                    else
 5283|      0|                    {
 5284|      0|                        return sax->parse_error(m_lexer.get_position(),
 5285|      0|                                                m_lexer.get_token_string(),
 5286|      0|                                                parse_error::create(101, m_lexer.get_position(),
 5287|      0|                                                        exception_message(token_type::end_object, "object")));
 5288|      0|                    }
 5289|  52.6k|                }
 5290|   267k|            }
 5291|   268k|        }
 5292|    866|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail6parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE18sax_parse_internalINS0_28json_sax_dom_callback_parserISC_EEEEbPT_
  ------------------
  | _ZN8nlohmann6detail6parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE18sax_parse_internalINS0_19json_sax_dom_parserISC_EEEEbPT_:
  | 5005|    866|    {
  | 5006|    866|        // stack to remember the hierarchy of structured values we are parsing
  | 5007|    866|        // true = array; false = object
  | 5008|    866|        std::vector<bool> states;
  | 5009|    866|        // value to avoid a goto (see comment where set to true)
  | 5010|    866|        bool skip_to_state_evaluation = false;
  | 5011|    866|
  | 5012|   321k|        while (true)
  | 5013|   321k|        {
  | 5014|   321k|            if (not skip_to_state_evaluation)
  | 5015|   268k|            {
  | 5016|   268k|                // invariant: get_token() was called before each iteration
  | 5017|   268k|                switch (last_token)
  | 5018|   268k|                {
  | 5019|   268k|                    case token_type::begin_object:
  | 5020|  52.6k|                    {
  | 5021|  52.6k|                        if (JSON_UNLIKELY(not sax->start_object(std::size_t(-1))))
  | 5022|  52.6k|                        {
  | 5023|      0|                            return false;
  | 5024|      0|                        }
  | 5025|  52.6k|
  | 5026|  52.6k|                        // closing } -> we are done
  | 5027|  52.6k|                        if (get_token() == token_type::end_object)
  | 5028|      0|                        {
  | 5029|      0|                            if (JSON_UNLIKELY(not sax->end_object()))
  | 5030|      0|                            {
  | 5031|      0|                                return false;
  | 5032|      0|                            }
  | 5033|      0|                            break;
  | 5034|      0|                        }
  | 5035|  52.6k|
  | 5036|  52.6k|                        // parse key
  | 5037|  52.6k|                        if (JSON_UNLIKELY(last_token != token_type::value_string))
  | 5038|  52.6k|                        {
  | 5039|      0|                            return sax->parse_error(m_lexer.get_position(),
  | 5040|      0|                                                    m_lexer.get_token_string(),
  | 5041|      0|                                                    parse_error::create(101, m_lexer.get_position(),
  | 5042|      0|                                                            exception_message(token_type::value_string, "object key")));
  | 5043|      0|                        }
  | 5044|  52.6k|                        if (JSON_UNLIKELY(not sax->key(m_lexer.get_string())))
  | 5045|  52.6k|                        {
  | 5046|      0|                            return false;
  | 5047|      0|                        }
  | 5048|  52.6k|
  | 5049|  52.6k|                        // parse separator (:)
  | 5050|  52.6k|                        if (JSON_UNLIKELY(get_token() != token_type::name_separator))
  | 5051|  52.6k|                        {
  | 5052|      0|                            return sax->parse_error(m_lexer.get_position(),
  | 5053|      0|                                                    m_lexer.get_token_string(),
  | 5054|      0|                                                    parse_error::create(101, m_lexer.get_position(),
  | 5055|      0|                                                            exception_message(token_type::name_separator, "object separator")));
  | 5056|      0|                        }
  | 5057|  52.6k|
  | 5058|  52.6k|                        // remember we are now inside an object
  | 5059|  52.6k|                        states.push_back(false);
  | 5060|  52.6k|
  | 5061|  52.6k|                        // parse values
  | 5062|  52.6k|                        get_token();
  | 5063|  52.6k|                        continue;
  | 5064|  52.6k|                    }
  | 5065|  52.6k|
  | 5066|  52.6k|                    case token_type::begin_array:
  | 5067|    619|                    {
  | 5068|    619|                        if (JSON_UNLIKELY(not sax->start_array(std::size_t(-1))))
  | 5069|    619|                        {
  | 5070|      0|                            return false;
  | 5071|      0|                        }
  | 5072|    619|
  | 5073|    619|                        // closing ] -> we are done
  | 5074|    619|                        if (get_token() == token_type::end_array)
  | 5075|    205|                        {
  | 5076|    205|                            if (JSON_UNLIKELY(not sax->end_array()))
  | 5077|    205|                            {
  | 5078|      0|                                return false;
  | 5079|      0|                            }
  | 5080|    205|                            break;
  | 5081|    205|                        }
  | 5082|    414|
  | 5083|    414|                        // remember we are now inside an array
  | 5084|    414|                        states.push_back(true);
  | 5085|    414|
  | 5086|    414|                        // parse values (no need to call get_token)
  | 5087|    414|                        continue;
  | 5088|    414|                    }
  | 5089|    414|
  | 5090|  59.2k|                    case token_type::value_float:
  | 5091|  59.2k|                    {
  | 5092|  59.2k|                        const auto res = m_lexer.get_number_float();
  | 5093|  59.2k|
  | 5094|  59.2k|                        if (JSON_UNLIKELY(not std::isfinite(res)))
  | 5095|  59.2k|                        {
  | 5096|      0|                            return sax->parse_error(m_lexer.get_position(),
  | 5097|      0|                                                    m_lexer.get_token_string(),
  | 5098|      0|                                                    out_of_range::create(406, "number overflow parsing '" + m_lexer.get_token_string() + "'"));
  | 5099|      0|                        }
  | 5100|  59.2k|                        else
  | 5101|  59.2k|                        {
  | 5102|  59.2k|                            if (JSON_UNLIKELY(not sax->number_float(res, m_lexer.get_string())))
  | 5103|  59.2k|                            {
  | 5104|      0|                                return false;
  | 5105|      0|                            }
  | 5106|  59.2k|                            break;
  | 5107|  59.2k|                        }
  | 5108|      0|                    }
  | 5109|      0|
  | 5110|      0|                    case token_type::literal_false:
  | 5111|      0|                    {
  | 5112|      0|                        if (JSON_UNLIKELY(not sax->boolean(false)))
  | 5113|      0|                        {
  | 5114|      0|                            return false;
  | 5115|      0|                        }
  | 5116|      0|                        break;
  | 5117|      0|                    }
  | 5118|      0|
  | 5119|    414|                    case token_type::literal_null:
  | 5120|    414|                    {
  | 5121|    414|                        if (JSON_UNLIKELY(not sax->null()))
  | 5122|    414|                        {
  | 5123|      0|                            return false;
  | 5124|      0|                        }
  | 5125|    414|                        break;
  | 5126|    414|                    }
  | 5127|    414|
  | 5128|    620|                    case token_type::literal_true:
  | 5129|    620|                    {
  | 5130|    620|                        if (JSON_UNLIKELY(not sax->boolean(true)))
  | 5131|    620|                        {
  | 5132|      0|                            return false;
  | 5133|      0|                        }
  | 5134|    620|                        break;
  | 5135|    620|                    }
  | 5136|    620|
  | 5137|  9.45k|                    case token_type::value_integer:
  | 5138|  9.45k|                    {
  | 5139|  9.45k|                        if (JSON_UNLIKELY(not sax->number_integer(m_lexer.get_number_integer())))
  | 5140|  9.45k|                        {
  | 5141|      0|                            return false;
  | 5142|      0|                        }
  | 5143|  9.45k|                        break;
  | 5144|  9.45k|                    }
  | 5145|  9.45k|
  | 5146|  65.7k|                    case token_type::value_string:
  | 5147|  65.7k|                    {
  | 5148|  65.7k|                        if (JSON_UNLIKELY(not sax->string(m_lexer.get_string())))
  | 5149|  65.7k|                        {
  | 5150|      0|                            return false;
  | 5151|      0|                        }
  | 5152|  65.7k|                        break;
  | 5153|  65.7k|                    }
  | 5154|  65.7k|
  | 5155|  79.3k|                    case token_type::value_unsigned:
  | 5156|  79.3k|                    {
  | 5157|  79.3k|                        if (JSON_UNLIKELY(not sax->number_unsigned(m_lexer.get_number_unsigned())))
  | 5158|  79.3k|                        {
  | 5159|      0|                            return false;
  | 5160|      0|                        }
  | 5161|  79.3k|                        break;
  | 5162|  79.3k|                    }
  | 5163|  79.3k|
  | 5164|  79.3k|                    case token_type::parse_error:
  | 5165|      0|                    {
  | 5166|      0|                        // using "uninitialized" to avoid "expected" message
  | 5167|      0|                        return sax->parse_error(m_lexer.get_position(),
  | 5168|      0|                                                m_lexer.get_token_string(),
  | 5169|      0|                                                parse_error::create(101, m_lexer.get_position(),
  | 5170|      0|                                                        exception_message(token_type::uninitialized, "value")));
  | 5171|  79.3k|                    }
  | 5172|  79.3k|
  | 5173|  79.3k|                    default: // the last token was unexpected
  | 5174|      0|                    {
  | 5175|      0|                        return sax->parse_error(m_lexer.get_position(),
  | 5176|      0|                                                m_lexer.get_token_string(),
  | 5177|      0|                                                parse_error::create(101, m_lexer.get_position(),
  | 5178|      0|                                                        exception_message(token_type::literal_or_value, "value")));
  | 5179|  53.0k|                    }
  | 5180|  53.0k|                }
  | 5181|  53.0k|            }
  | 5182|  53.0k|            else
  | 5183|  53.0k|            {
  | 5184|  53.0k|                skip_to_state_evaluation = false;
  | 5185|  53.0k|            }
  | 5186|   321k|
  | 5187|   321k|            // we reached this line after we successfully parsed a value
  | 5188|   321k|            if (states.empty())
  | 5189|    866|            {
  | 5190|    866|                // empty stack: we reached the end of the hierarchy: done
  | 5191|    866|                return true;
  | 5192|    866|            }
  | 5193|   267k|            else
  | 5194|   267k|            {
  | 5195|   267k|                if (states.back())  // array
  | 5196|  9.86k|                {
  | 5197|  9.86k|                    // comma -> next value
  | 5198|  9.86k|                    if (get_token() == token_type::value_separator)
  | 5199|  9.45k|                    {
  | 5200|  9.45k|                        // parse a new value
  | 5201|  9.45k|                        get_token();
  | 5202|  9.45k|                        continue;
  | 5203|  9.45k|                    }
  | 5204|    414|
  | 5205|    414|                    // closing ]
  | 5206|    414|                    if (JSON_LIKELY(last_token == token_type::end_array))
  | 5207|    414|                    {
  | 5208|    414|                        if (JSON_UNLIKELY(not sax->end_array()))
  | 5209|    414|                        {
  | 5210|      0|                            return false;
  | 5211|      0|                        }
  | 5212|    414|
  | 5213|    414|                        // We are done with this array. Before we can parse a
  | 5214|    414|                        // new value, we need to evaluate the new state first.
  | 5215|    414|                        // By setting skip_to_state_evaluation to false, we
  | 5216|    414|                        // are effectively jumping to the beginning of this if.
  | 5217|    414|                        assert(not states.empty());
  | 5218|    414|                        states.pop_back();
  | 5219|    414|                        skip_to_state_evaluation = true;
  | 5220|    414|                        continue;
  | 5221|    414|                    }
  | 5222|      0|                    else
  | 5223|      0|                    {
  | 5224|      0|                        return sax->parse_error(m_lexer.get_position(),
  | 5225|      0|                                                m_lexer.get_token_string(),
  | 5226|      0|                                                parse_error::create(101, m_lexer.get_position(),
  | 5227|      0|                                                        exception_message(token_type::end_array, "array")));
  | 5228|      0|                    }
  | 5229|   257k|                }
  | 5230|   257k|                else  // object
  | 5231|   257k|                {
  | 5232|   257k|                    // comma -> next value
  | 5233|   257k|                    if (get_token() == token_type::value_separator)
  | 5234|   204k|                    {
  | 5235|   204k|                        // parse key
  | 5236|   204k|                        if (JSON_UNLIKELY(get_token() != token_type::value_string))
  | 5237|   204k|                        {
  | 5238|      0|                            return sax->parse_error(m_lexer.get_position(),
  | 5239|      0|                                                    m_lexer.get_token_string(),
  | 5240|      0|                                                    parse_error::create(101, m_lexer.get_position(),
  | 5241|      0|                                                            exception_message(token_type::value_string, "object key")));
  | 5242|      0|                        }
  | 5243|   204k|                        else
  | 5244|   204k|                        {
  | 5245|   204k|                            if (JSON_UNLIKELY(not sax->key(m_lexer.get_string())))
  | 5246|   204k|                            {
  | 5247|      0|                                return false;
  | 5248|      0|                            }
  | 5249|   204k|                        }
  | 5250|   204k|
  | 5251|   204k|                        // parse separator (:)
  | 5252|   204k|                        if (JSON_UNLIKELY(get_token() != token_type::name_separator))
  | 5253|   204k|                        {
  | 5254|      0|                            return sax->parse_error(m_lexer.get_position(),
  | 5255|      0|                                                    m_lexer.get_token_string(),
  | 5256|      0|                                                    parse_error::create(101, m_lexer.get_position(),
  | 5257|      0|                                                            exception_message(token_type::name_separator, "object separator")));
  | 5258|      0|                        }
  | 5259|   204k|
  | 5260|   204k|                        // parse values
  | 5261|   204k|                        get_token();
  | 5262|   204k|                        continue;
  | 5263|   204k|                    }
  | 5264|  52.6k|
  | 5265|  52.6k|                    // closing }
  | 5266|  52.6k|                    if (JSON_LIKELY(last_token == token_type::end_object))
  | 5267|  52.6k|                    {
  | 5268|  52.6k|                        if (JSON_UNLIKELY(not sax->end_object()))
  | 5269|  52.6k|                        {
  | 5270|      0|                            return false;
  | 5271|      0|                        }
  | 5272|  52.6k|
  | 5273|  52.6k|                        // We are done with this object. Before we can parse a
  | 5274|  52.6k|                        // new value, we need to evaluate the new state first.
  | 5275|  52.6k|                        // By setting skip_to_state_evaluation to false, we
  | 5276|  52.6k|                        // are effectively jumping to the beginning of this if.
  | 5277|  52.6k|                        assert(not states.empty());
  | 5278|  52.6k|                        states.pop_back();
  | 5279|  52.6k|                        skip_to_state_evaluation = true;
  | 5280|  52.6k|                        continue;
  | 5281|  52.6k|                    }
  | 5282|      0|                    else
  | 5283|      0|                    {
  | 5284|      0|                        return sax->parse_error(m_lexer.get_position(),
  | 5285|      0|                                                m_lexer.get_token_string(),
  | 5286|      0|                                                parse_error::create(101, m_lexer.get_position(),
  | 5287|      0|                                                        exception_message(token_type::end_object, "object")));
  | 5288|      0|                    }
  | 5289|  52.6k|                }
  | 5290|   267k|            }
  | 5291|   268k|        }
  | 5292|    866|    }
  ------------------
 5293|       |
 5294|       |    /// get next token from lexer
 5295|       |    token_type get_token()
 5296|  1.05M|    {
 5297|  1.05M|        return (last_token = m_lexer.scan());
 5298|  1.05M|    }
 5299|       |
 5300|       |    std::string exception_message(const token_type expected, const std::string& context)
 5301|      0|    {
 5302|      0|        std::string error_msg = "syntax error ";
 5303|      0|
 5304|      0|        if (not context.empty())
 5305|      0|        {
 5306|      0|            error_msg += "while parsing " + context + " ";
 5307|      0|        }
 5308|      0|
 5309|      0|        error_msg += "- ";
 5310|      0|
 5311|      0|        if (last_token == token_type::parse_error)
 5312|      0|        {
 5313|      0|            error_msg += std::string(m_lexer.get_error_message()) + "; last read: '" +
 5314|      0|                         m_lexer.get_token_string() + "'";
 5315|      0|        }
 5316|      0|        else
 5317|      0|        {
 5318|      0|            error_msg += "unexpected " + std::string(lexer_t::token_type_name(last_token));
 5319|      0|        }
 5320|      0|
 5321|      0|        if (expected != token_type::uninitialized)
 5322|      0|        {
 5323|      0|            error_msg += "; expected " + std::string(lexer_t::token_type_name(expected));
 5324|      0|        }
 5325|      0|
 5326|      0|        return error_msg;
 5327|      0|    }
 5328|       |
 5329|       |  private:
 5330|       |    /// callback function
 5331|       |    const parser_callback_t callback = nullptr;
 5332|       |    /// the type of the last read token
 5333|       |    token_type last_token = token_type::uninitialized;
 5334|       |    /// the lexer
 5335|       |    lexer_t m_lexer;
 5336|       |    /// whether to throw exceptions in case of errors
 5337|       |    const bool allow_exceptions = true;
 5338|       |};
 5339|       |}  // namespace detail
 5340|       |}  // namespace nlohmann
 5341|       |
 5342|       |// #include <nlohmann/detail/iterators/primitive_iterator.hpp>
 5343|       |
 5344|       |
 5345|       |#include <cstddef> // ptrdiff_t
 5346|       |#include <limits>  // numeric_limits
 5347|       |
 5348|       |namespace nlohmann
 5349|       |{
 5350|       |namespace detail
 5351|       |{
 5352|       |/*
 5353|       |@brief an iterator for primitive JSON types
 5354|       |
 5355|       |This class models an iterator for primitive JSON types (boolean, number,
 5356|       |string). It's only purpose is to allow the iterator/const_iterator classes
 5357|       |to "iterate" over primitive values. Internally, the iterator is modeled by
 5358|       |a `difference_type` variable. Value begin_value (`0`) models the begin,
 5359|       |end_value (`1`) models past the end.
 5360|       |*/
 5361|       |class primitive_iterator_t
 5362|       |{
 5363|       |  private:
 5364|       |    using difference_type = std::ptrdiff_t;
 5365|       |    static constexpr difference_type begin_value = 0;
 5366|       |    static constexpr difference_type end_value = begin_value + 1;
 5367|       |
 5368|       |    /// iterator as signed integer type
 5369|       |    difference_type m_it = (std::numeric_limits<std::ptrdiff_t>::min)();
 5370|       |
 5371|       |  public:
 5372|       |    constexpr difference_type get_value() const noexcept
 5373|      0|    {
 5374|      0|        return m_it;
 5375|      0|    }
 5376|       |
 5377|       |    /// set iterator to a defined beginning
 5378|       |    void set_begin() noexcept
 5379|      0|    {
 5380|      0|        m_it = begin_value;
 5381|      0|    }
 5382|       |
 5383|       |    /// set iterator to a defined past the end
 5384|       |    void set_end() noexcept
 5385|      2|    {
 5386|      2|        m_it = end_value;
 5387|      2|    }
 5388|       |
 5389|       |    /// return whether the iterator can be dereferenced
 5390|       |    constexpr bool is_begin() const noexcept
 5391|      0|    {
 5392|      0|        return m_it == begin_value;
 5393|      0|    }
 5394|       |
 5395|       |    /// return whether the iterator is at end
 5396|       |    constexpr bool is_end() const noexcept
 5397|      0|    {
 5398|      0|        return m_it == end_value;
 5399|      0|    }
 5400|       |
 5401|       |    friend constexpr bool operator==(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
 5402|      1|    {
 5403|      1|        return lhs.m_it == rhs.m_it;
 5404|      1|    }
 5405|       |
 5406|       |    friend constexpr bool operator<(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
 5407|       |    {
 5408|       |        return lhs.m_it < rhs.m_it;
 5409|       |    }
 5410|       |
 5411|       |    primitive_iterator_t operator+(difference_type n) noexcept
 5412|      0|    {
 5413|      0|        auto result = *this;
 5414|      0|        result += n;
 5415|      0|        return result;
 5416|      0|    }
 5417|       |
 5418|       |    friend constexpr difference_type operator-(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
 5419|       |    {
 5420|       |        return lhs.m_it - rhs.m_it;
 5421|       |    }
 5422|       |
 5423|       |    primitive_iterator_t& operator++() noexcept
 5424|      0|    {
 5425|      0|        ++m_it;
 5426|      0|        return *this;
 5427|      0|    }
 5428|       |
 5429|       |    primitive_iterator_t const operator++(int) noexcept
 5430|      0|    {
 5431|      0|        auto result = *this;
 5432|      0|        ++m_it;
 5433|      0|        return result;
 5434|      0|    }
 5435|       |
 5436|       |    primitive_iterator_t& operator--() noexcept
 5437|      0|    {
 5438|      0|        --m_it;
 5439|      0|        return *this;
 5440|      0|    }
 5441|       |
 5442|       |    primitive_iterator_t const operator--(int) noexcept
 5443|      0|    {
 5444|      0|        auto result = *this;
 5445|      0|        --m_it;
 5446|      0|        return result;
 5447|      0|    }
 5448|       |
 5449|       |    primitive_iterator_t& operator+=(difference_type n) noexcept
 5450|      0|    {
 5451|      0|        m_it += n;
 5452|      0|        return *this;
 5453|      0|    }
 5454|       |
 5455|       |    primitive_iterator_t& operator-=(difference_type n) noexcept
 5456|      0|    {
 5457|      0|        m_it -= n;
 5458|      0|        return *this;
 5459|      0|    }
 5460|       |};
 5461|       |}  // namespace detail
 5462|       |}  // namespace nlohmann
 5463|       |
 5464|       |// #include <nlohmann/detail/iterators/internal_iterator.hpp>
 5465|       |
 5466|       |
 5467|       |// #include <nlohmann/detail/iterators/primitive_iterator.hpp>
 5468|       |
 5469|       |
 5470|       |namespace nlohmann
 5471|       |{
 5472|       |namespace detail
 5473|       |{
 5474|       |/*!
 5475|       |@brief an iterator value
 5476|       |
 5477|       |@note This structure could easily be a union, but MSVC currently does not allow
 5478|       |unions members with complex constructors, see https://github.com/nlohmann/json/pull/105.
 5479|       |*/
 5480|       |template<typename BasicJsonType> struct internal_iterator
 5481|       |{
 5482|       |    /// iterator for JSON objects
 5483|       |    typename BasicJsonType::object_t::iterator object_iterator {};
 5484|       |    /// iterator for JSON arrays
 5485|       |    typename BasicJsonType::array_t::iterator array_iterator {};
 5486|       |    /// generic iterator for all other types
 5487|       |    primitive_iterator_t primitive_iterator {};
 5488|       |};
 5489|       |}  // namespace detail
 5490|       |}  // namespace nlohmann
 5491|       |
 5492|       |// #include <nlohmann/detail/iterators/iter_impl.hpp>
 5493|       |
 5494|       |
 5495|       |#include <ciso646> // not
 5496|       |#include <iterator> // iterator, random_access_iterator_tag, bidirectional_iterator_tag, advance, next
 5497|       |#include <type_traits> // conditional, is_const, remove_const
 5498|       |
 5499|       |// #include <nlohmann/detail/exceptions.hpp>
 5500|       |
 5501|       |// #include <nlohmann/detail/iterators/internal_iterator.hpp>
 5502|       |
 5503|       |// #include <nlohmann/detail/iterators/primitive_iterator.hpp>
 5504|       |
 5505|       |// #include <nlohmann/detail/macro_scope.hpp>
 5506|       |
 5507|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
 5508|       |
 5509|       |// #include <nlohmann/detail/value_t.hpp>
 5510|       |
 5511|       |
 5512|       |namespace nlohmann
 5513|       |{
 5514|       |namespace detail
 5515|       |{
 5516|       |// forward declare, to be able to friend it later on
 5517|       |template<typename IteratorType> class iteration_proxy;
 5518|       |
 5519|       |/*!
 5520|       |@brief a template for a bidirectional iterator for the @ref basic_json class
 5521|       |
 5522|       |This class implements a both iterators (iterator and const_iterator) for the
 5523|       |@ref basic_json class.
 5524|       |
 5525|       |@note An iterator is called *initialized* when a pointer to a JSON value has
 5526|       |      been set (e.g., by a constructor or a copy assignment). If the iterator is
 5527|       |      default-constructed, it is *uninitialized* and most methods are undefined.
 5528|       |      **The library uses assertions to detect calls on uninitialized iterators.**
 5529|       |
 5530|       |@requirement The class satisfies the following concept requirements:
 5531|       |-
 5532|       |[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
 5533|       |  The iterator that can be moved can be moved in both directions (i.e.
 5534|       |  incremented and decremented).
 5535|       |
 5536|       |@since version 1.0.0, simplified in version 2.0.9, change to bidirectional
 5537|       |       iterators in version 3.0.0 (see https://github.com/nlohmann/json/issues/593)
 5538|       |*/
 5539|       |template<typename BasicJsonType>
 5540|       |class iter_impl
 5541|       |{
 5542|       |    /// allow basic_json to access private members
 5543|       |    friend iter_impl<typename std::conditional<std::is_const<BasicJsonType>::value, typename std::remove_const<BasicJsonType>::type, const BasicJsonType>::type>;
 5544|       |    friend BasicJsonType;
 5545|       |    friend iteration_proxy<iter_impl>;
 5546|       |
 5547|       |    using object_t = typename BasicJsonType::object_t;
 5548|       |    using array_t = typename BasicJsonType::array_t;
 5549|       |    // make sure BasicJsonType is basic_json or const basic_json
 5550|       |    static_assert(is_basic_json<typename std::remove_const<BasicJsonType>::type>::value,
 5551|       |                  "iter_impl only accepts (const) basic_json");
 5552|       |
 5553|       |  public:
 5554|       |
 5555|       |    /// The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17.
 5556|       |    /// The C++ Standard has never required user-defined iterators to derive from std::iterator.
 5557|       |    /// A user-defined iterator should provide publicly accessible typedefs named
 5558|       |    /// iterator_category, value_type, difference_type, pointer, and reference.
 5559|       |    /// Note that value_type is required to be non-const, even for constant iterators.
 5560|       |    using iterator_category = std::bidirectional_iterator_tag;
 5561|       |
 5562|       |    /// the type of the values when the iterator is dereferenced
 5563|       |    using value_type = typename BasicJsonType::value_type;
 5564|       |    /// a type to represent differences between iterators
 5565|       |    using difference_type = typename BasicJsonType::difference_type;
 5566|       |    /// defines a pointer to the type iterated over (value_type)
 5567|       |    using pointer = typename std::conditional<std::is_const<BasicJsonType>::value,
 5568|       |          typename BasicJsonType::const_pointer,
 5569|       |          typename BasicJsonType::pointer>::type;
 5570|       |    /// defines a reference to the type iterated over (value_type)
 5571|       |    using reference =
 5572|       |        typename std::conditional<std::is_const<BasicJsonType>::value,
 5573|       |        typename BasicJsonType::const_reference,
 5574|       |        typename BasicJsonType::reference>::type;
 5575|       |
 5576|       |    /// default constructor
 5577|       |    iter_impl() = default;
 5578|       |
 5579|       |    /*!
 5580|       |    @brief constructor for a given JSON instance
 5581|       |    @param[in] object  pointer to a JSON object for this iterator
 5582|       |    @pre object != nullptr
 5583|       |    @post The iterator is initialized; i.e. `m_object != nullptr`.
 5584|       |    */
 5585|       |    explicit iter_impl(pointer object) noexcept : m_object(object)
 5586|  2.85k|    {
 5587|  2.85k|        assert(m_object != nullptr);
 5588|  2.85k|
 5589|  2.85k|        switch (m_object->m_type)
 5590|  2.85k|        {
 5591|  2.85k|            case value_t::object:
 5592|  2.83k|            {
 5593|  2.83k|                m_it.object_iterator = typename object_t::iterator();
 5594|  2.83k|                break;
 5595|  2.85k|            }
 5596|  2.85k|
 5597|  2.85k|            case value_t::array:
 5598|     16|            {
 5599|     16|                m_it.array_iterator = typename array_t::iterator();
 5600|     16|                break;
 5601|  2.85k|            }
 5602|  2.85k|
 5603|  2.85k|            default:
 5604|      2|            {
 5605|      2|                m_it.primitive_iterator = primitive_iterator_t();
 5606|      2|                break;
 5607|  2.85k|            }
 5608|  2.85k|        }
 5609|  2.85k|    }
 5610|       |
 5611|       |    /*!
 5612|       |    @note The conventional copy constructor and copy assignment are implicitly
 5613|       |          defined. Combined with the following converting constructor and
 5614|       |          assignment, they support: (1) copy from iterator to iterator, (2)
 5615|       |          copy from const iterator to const iterator, and (3) conversion from
 5616|       |          iterator to const iterator. However conversion from const iterator
 5617|       |          to iterator is not defined.
 5618|       |    */
 5619|       |
 5620|       |    /*!
 5621|       |    @brief converting constructor
 5622|       |    @param[in] other  non-const iterator to copy from
 5623|       |    @note It is not checked whether @a other is initialized.
 5624|       |    */
 5625|       |    iter_impl(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept
 5626|      0|        : m_object(other.m_object), m_it(other.m_it) {}
 5627|       |
 5628|       |    /*!
 5629|       |    @brief converting assignment
 5630|       |    @param[in,out] other  non-const iterator to copy from
 5631|       |    @return const/non-const iterator
 5632|       |    @note It is not checked whether @a other is initialized.
 5633|       |    */
 5634|       |    iter_impl& operator=(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept
 5635|       |    {
 5636|       |        m_object = other.m_object;
 5637|       |        m_it = other.m_it;
 5638|       |        return *this;
 5639|       |    }
 5640|       |
 5641|       |  private:
 5642|       |    /*!
 5643|       |    @brief set the iterator to the first value
 5644|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5645|       |    */
 5646|       |    void set_begin() noexcept
 5647|    609|    {
 5648|    609|        assert(m_object != nullptr);
 5649|    609|
 5650|    609|        switch (m_object->m_type)
 5651|    609|        {
 5652|    609|            case value_t::object:
 5653|    601|            {
 5654|    601|                m_it.object_iterator = m_object->m_value.object->begin();
 5655|    601|                break;
 5656|    609|            }
 5657|    609|
 5658|    609|            case value_t::array:
 5659|      8|            {
 5660|      8|                m_it.array_iterator = m_object->m_value.array->begin();
 5661|      8|                break;
 5662|    609|            }
 5663|    609|
 5664|    609|            case value_t::null:
 5665|      0|            {
 5666|      0|                // set to end so begin()==end() is true: null is empty
 5667|      0|                m_it.primitive_iterator.set_end();
 5668|      0|                break;
 5669|    609|            }
 5670|    609|
 5671|    609|            default:
 5672|      0|            {
 5673|      0|                m_it.primitive_iterator.set_begin();
 5674|      0|                break;
 5675|    609|            }
 5676|    609|        }
 5677|    609|    }
 5678|       |
 5679|       |    /*!
 5680|       |    @brief set the iterator past the last value
 5681|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5682|       |    */
 5683|       |    void set_end() noexcept
 5684|  2.24k|    {
 5685|  2.24k|        assert(m_object != nullptr);
 5686|  2.24k|
 5687|  2.24k|        switch (m_object->m_type)
 5688|  2.24k|        {
 5689|  2.24k|            case value_t::object:
 5690|  2.23k|            {
 5691|  2.23k|                m_it.object_iterator = m_object->m_value.object->end();
 5692|  2.23k|                break;
 5693|  2.24k|            }
 5694|  2.24k|
 5695|  2.24k|            case value_t::array:
 5696|      8|            {
 5697|      8|                m_it.array_iterator = m_object->m_value.array->end();
 5698|      8|                break;
 5699|  2.24k|            }
 5700|  2.24k|
 5701|  2.24k|            default:
 5702|      2|            {
 5703|      2|                m_it.primitive_iterator.set_end();
 5704|      2|                break;
 5705|  2.24k|            }
 5706|  2.24k|        }
 5707|  2.24k|    }
 5708|       |
 5709|       |  public:
 5710|       |    /*!
 5711|       |    @brief return a reference to the value pointed to by the iterator
 5712|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5713|       |    */
 5714|       |    reference operator*() const
 5715|  1.76k|    {
 5716|  1.76k|        assert(m_object != nullptr);
 5717|  1.76k|
 5718|  1.76k|        switch (m_object->m_type)
 5719|  1.76k|        {
 5720|  1.76k|            case value_t::object:
 5721|  1.61k|            {
 5722|  1.61k|                assert(m_it.object_iterator != m_object->m_value.object->end());
 5723|  1.61k|                return m_it.object_iterator->second;
 5724|  1.76k|            }
 5725|  1.76k|
 5726|  1.76k|            case value_t::array:
 5727|    146|            {
 5728|    146|                assert(m_it.array_iterator != m_object->m_value.array->end());
 5729|    146|                return *m_it.array_iterator;
 5730|  1.76k|            }
 5731|  1.76k|
 5732|  1.76k|            case value_t::null:
 5733|      0|                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
 5734|  1.76k|
 5735|  1.76k|            default:
 5736|      0|            {
 5737|      0|                if (JSON_LIKELY(m_it.primitive_iterator.is_begin()))
 5738|      0|                {
 5739|      0|                    return *m_object;
 5740|      0|                }
 5741|      0|
 5742|      0|                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
 5743|      0|            }
 5744|      0|        }
 5745|      0|    }
 5746|       |
 5747|       |    /*!
 5748|       |    @brief dereference the iterator
 5749|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5750|       |    */
 5751|       |    pointer operator->() const
 5752|      0|    {
 5753|      0|        assert(m_object != nullptr);
 5754|      0|
 5755|      0|        switch (m_object->m_type)
 5756|      0|        {
 5757|      0|            case value_t::object:
 5758|      0|            {
 5759|      0|                assert(m_it.object_iterator != m_object->m_value.object->end());
 5760|      0|                return &(m_it.object_iterator->second);
 5761|      0|            }
 5762|      0|
 5763|      0|            case value_t::array:
 5764|      0|            {
 5765|      0|                assert(m_it.array_iterator != m_object->m_value.array->end());
 5766|      0|                return &*m_it.array_iterator;
 5767|      0|            }
 5768|      0|
 5769|      0|            default:
 5770|      0|            {
 5771|      0|                if (JSON_LIKELY(m_it.primitive_iterator.is_begin()))
 5772|      0|                {
 5773|      0|                    return m_object;
 5774|      0|                }
 5775|      0|
 5776|      0|                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
 5777|      0|            }
 5778|      0|        }
 5779|      0|    }
 5780|       |
 5781|       |    /*!
 5782|       |    @brief post-increment (it++)
 5783|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5784|       |    */
 5785|       |    iter_impl const operator++(int)
 5786|       |    {
 5787|       |        auto result = *this;
 5788|       |        ++(*this);
 5789|       |        return result;
 5790|       |    }
 5791|       |
 5792|       |    /*!
 5793|       |    @brief pre-increment (++it)
 5794|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5795|       |    */
 5796|       |    iter_impl& operator++()
 5797|  1.75k|    {
 5798|  1.75k|        assert(m_object != nullptr);
 5799|  1.75k|
 5800|  1.75k|        switch (m_object->m_type)
 5801|  1.75k|        {
 5802|  1.75k|            case value_t::object:
 5803|  1.60k|            {
 5804|  1.60k|                std::advance(m_it.object_iterator, 1);
 5805|  1.60k|                break;
 5806|  1.75k|            }
 5807|  1.75k|
 5808|  1.75k|            case value_t::array:
 5809|    146|            {
 5810|    146|                std::advance(m_it.array_iterator, 1);
 5811|    146|                break;
 5812|  1.75k|            }
 5813|  1.75k|
 5814|  1.75k|            default:
 5815|      0|            {
 5816|      0|                ++m_it.primitive_iterator;
 5817|      0|                break;
 5818|  1.75k|            }
 5819|  1.75k|        }
 5820|  1.75k|
 5821|  1.75k|        return *this;
 5822|  1.75k|    }
 5823|       |
 5824|       |    /*!
 5825|       |    @brief post-decrement (it--)
 5826|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5827|       |    */
 5828|       |    iter_impl const operator--(int)
 5829|       |    {
 5830|       |        auto result = *this;
 5831|       |        --(*this);
 5832|       |        return result;
 5833|       |    }
 5834|       |
 5835|       |    /*!
 5836|       |    @brief pre-decrement (--it)
 5837|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5838|       |    */
 5839|       |    iter_impl& operator--()
 5840|       |    {
 5841|       |        assert(m_object != nullptr);
 5842|       |
 5843|       |        switch (m_object->m_type)
 5844|       |        {
 5845|       |            case value_t::object:
 5846|       |            {
 5847|       |                std::advance(m_it.object_iterator, -1);
 5848|       |                break;
 5849|       |            }
 5850|       |
 5851|       |            case value_t::array:
 5852|       |            {
 5853|       |                std::advance(m_it.array_iterator, -1);
 5854|       |                break;
 5855|       |            }
 5856|       |
 5857|       |            default:
 5858|       |            {
 5859|       |                --m_it.primitive_iterator;
 5860|       |                break;
 5861|       |            }
 5862|       |        }
 5863|       |
 5864|       |        return *this;
 5865|       |    }
 5866|       |
 5867|       |    /*!
 5868|       |    @brief  comparison: equal
 5869|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5870|       |    */
 5871|       |    bool operator==(const iter_impl& other) const
 5872|  2.37k|    {
 5873|  2.37k|        // if objects are not the same, the comparison is undefined
 5874|  2.37k|        if (JSON_UNLIKELY(m_object != other.m_object))
 5875|  2.37k|        {
 5876|      0|            JSON_THROW(invalid_iterator::create(212, "cannot compare iterators of different containers"));
 5877|      0|        }
 5878|  2.37k|
 5879|  2.37k|        assert(m_object != nullptr);
 5880|  2.37k|
 5881|  2.37k|        switch (m_object->m_type)
 5882|  2.37k|        {
 5883|  2.37k|            case value_t::object:
 5884|  2.22k|                return (m_it.object_iterator == other.m_it.object_iterator);
 5885|  2.37k|
 5886|  2.37k|            case value_t::array:
 5887|    154|                return (m_it.array_iterator == other.m_it.array_iterator);
 5888|  2.37k|
 5889|  2.37k|            default:
 5890|      1|                return (m_it.primitive_iterator == other.m_it.primitive_iterator);
 5891|      0|        }
 5892|      0|    }
 5893|       |
 5894|       |    /*!
 5895|       |    @brief  comparison: not equal
 5896|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5897|       |    */
 5898|       |    bool operator!=(const iter_impl& other) const
 5899|  2.37k|    {
 5900|  2.37k|        return not operator==(other);
 5901|  2.37k|    }
 5902|       |
 5903|       |    /*!
 5904|       |    @brief  comparison: smaller
 5905|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5906|       |    */
 5907|       |    bool operator<(const iter_impl& other) const
 5908|       |    {
 5909|       |        // if objects are not the same, the comparison is undefined
 5910|       |        if (JSON_UNLIKELY(m_object != other.m_object))
 5911|       |        {
 5912|       |            JSON_THROW(invalid_iterator::create(212, "cannot compare iterators of different containers"));
 5913|       |        }
 5914|       |
 5915|       |        assert(m_object != nullptr);
 5916|       |
 5917|       |        switch (m_object->m_type)
 5918|       |        {
 5919|       |            case value_t::object:
 5920|       |                JSON_THROW(invalid_iterator::create(213, "cannot compare order of object iterators"));
 5921|       |
 5922|       |            case value_t::array:
 5923|       |                return (m_it.array_iterator < other.m_it.array_iterator);
 5924|       |
 5925|       |            default:
 5926|       |                return (m_it.primitive_iterator < other.m_it.primitive_iterator);
 5927|       |        }
 5928|       |    }
 5929|       |
 5930|       |    /*!
 5931|       |    @brief  comparison: less than or equal
 5932|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5933|       |    */
 5934|       |    bool operator<=(const iter_impl& other) const
 5935|       |    {
 5936|       |        return not other.operator < (*this);
 5937|       |    }
 5938|       |
 5939|       |    /*!
 5940|       |    @brief  comparison: greater than
 5941|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5942|       |    */
 5943|       |    bool operator>(const iter_impl& other) const
 5944|       |    {
 5945|       |        return not operator<=(other);
 5946|       |    }
 5947|       |
 5948|       |    /*!
 5949|       |    @brief  comparison: greater than or equal
 5950|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5951|       |    */
 5952|       |    bool operator>=(const iter_impl& other) const
 5953|       |    {
 5954|       |        return not operator<(other);
 5955|       |    }
 5956|       |
 5957|       |    /*!
 5958|       |    @brief  add to iterator
 5959|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5960|       |    */
 5961|       |    iter_impl& operator+=(difference_type i)
 5962|       |    {
 5963|       |        assert(m_object != nullptr);
 5964|       |
 5965|       |        switch (m_object->m_type)
 5966|       |        {
 5967|       |            case value_t::object:
 5968|       |                JSON_THROW(invalid_iterator::create(209, "cannot use offsets with object iterators"));
 5969|       |
 5970|       |            case value_t::array:
 5971|       |            {
 5972|       |                std::advance(m_it.array_iterator, i);
 5973|       |                break;
 5974|       |            }
 5975|       |
 5976|       |            default:
 5977|       |            {
 5978|       |                m_it.primitive_iterator += i;
 5979|       |                break;
 5980|       |            }
 5981|       |        }
 5982|       |
 5983|       |        return *this;
 5984|       |    }
 5985|       |
 5986|       |    /*!
 5987|       |    @brief  subtract from iterator
 5988|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5989|       |    */
 5990|       |    iter_impl& operator-=(difference_type i)
 5991|       |    {
 5992|       |        return operator+=(-i);
 5993|       |    }
 5994|       |
 5995|       |    /*!
 5996|       |    @brief  add to iterator
 5997|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 5998|       |    */
 5999|       |    iter_impl operator+(difference_type i) const
 6000|       |    {
 6001|       |        auto result = *this;
 6002|       |        result += i;
 6003|       |        return result;
 6004|       |    }
 6005|       |
 6006|       |    /*!
 6007|       |    @brief  addition of distance and iterator
 6008|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 6009|       |    */
 6010|       |    friend iter_impl operator+(difference_type i, const iter_impl& it)
 6011|       |    {
 6012|       |        auto result = it;
 6013|       |        result += i;
 6014|       |        return result;
 6015|       |    }
 6016|       |
 6017|       |    /*!
 6018|       |    @brief  subtract from iterator
 6019|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 6020|       |    */
 6021|       |    iter_impl operator-(difference_type i) const
 6022|       |    {
 6023|       |        auto result = *this;
 6024|       |        result -= i;
 6025|       |        return result;
 6026|       |    }
 6027|       |
 6028|       |    /*!
 6029|       |    @brief  return difference
 6030|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 6031|       |    */
 6032|       |    difference_type operator-(const iter_impl& other) const
 6033|       |    {
 6034|       |        assert(m_object != nullptr);
 6035|       |
 6036|       |        switch (m_object->m_type)
 6037|       |        {
 6038|       |            case value_t::object:
 6039|       |                JSON_THROW(invalid_iterator::create(209, "cannot use offsets with object iterators"));
 6040|       |
 6041|       |            case value_t::array:
 6042|       |                return m_it.array_iterator - other.m_it.array_iterator;
 6043|       |
 6044|       |            default:
 6045|       |                return m_it.primitive_iterator - other.m_it.primitive_iterator;
 6046|       |        }
 6047|       |    }
 6048|       |
 6049|       |    /*!
 6050|       |    @brief  access to successor
 6051|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 6052|       |    */
 6053|       |    reference operator[](difference_type n) const
 6054|       |    {
 6055|       |        assert(m_object != nullptr);
 6056|       |
 6057|       |        switch (m_object->m_type)
 6058|       |        {
 6059|       |            case value_t::object:
 6060|       |                JSON_THROW(invalid_iterator::create(208, "cannot use operator[] for object iterators"));
 6061|       |
 6062|       |            case value_t::array:
 6063|       |                return *std::next(m_it.array_iterator, n);
 6064|       |
 6065|       |            case value_t::null:
 6066|       |                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
 6067|       |
 6068|       |            default:
 6069|       |            {
 6070|       |                if (JSON_LIKELY(m_it.primitive_iterator.get_value() == -n))
 6071|       |                {
 6072|       |                    return *m_object;
 6073|       |                }
 6074|       |
 6075|       |                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
 6076|       |            }
 6077|       |        }
 6078|       |    }
 6079|       |
 6080|       |    /*!
 6081|       |    @brief  return the key of an object iterator
 6082|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 6083|       |    */
 6084|       |    const typename object_t::key_type& key() const
 6085|      0|    {
 6086|      0|        assert(m_object != nullptr);
 6087|      0|
 6088|      0|        if (JSON_LIKELY(m_object->is_object()))
 6089|      0|        {
 6090|      0|            return m_it.object_iterator->first;
 6091|      0|        }
 6092|      0|
 6093|      0|        JSON_THROW(invalid_iterator::create(207, "cannot use key() for non-object iterators"));
 6094|      0|    }
 6095|       |
 6096|       |    /*!
 6097|       |    @brief  return the value of an iterator
 6098|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 6099|       |    */
 6100|       |    reference value() const
 6101|  1.61k|    {
 6102|  1.61k|        return operator*();
 6103|  1.61k|    }
 6104|       |
 6105|       |  private:
 6106|       |    /// associated JSON instance
 6107|       |    pointer m_object = nullptr;
 6108|       |    /// the actual iterator of the associated instance
 6109|       |    internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it;
 6110|       |};
 6111|       |}  // namespace detail
 6112|       |}  // namespace nlohmann
 6113|       |
 6114|       |// #include <nlohmann/detail/iterators/iteration_proxy.hpp>
 6115|       |
 6116|       |// #include <nlohmann/detail/iterators/json_reverse_iterator.hpp>
 6117|       |
 6118|       |
 6119|       |#include <cstddef> // ptrdiff_t
 6120|       |#include <iterator> // reverse_iterator
 6121|       |#include <utility> // declval
 6122|       |
 6123|       |namespace nlohmann
 6124|       |{
 6125|       |namespace detail
 6126|       |{
 6127|       |//////////////////////
 6128|       |// reverse_iterator //
 6129|       |//////////////////////
 6130|       |
 6131|       |/*!
 6132|       |@brief a template for a reverse iterator class
 6133|       |
 6134|       |@tparam Base the base iterator type to reverse. Valid types are @ref
 6135|       |iterator (to create @ref reverse_iterator) and @ref const_iterator (to
 6136|       |create @ref const_reverse_iterator).
 6137|       |
 6138|       |@requirement The class satisfies the following concept requirements:
 6139|       |-
 6140|       |[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
 6141|       |  The iterator that can be moved can be moved in both directions (i.e.
 6142|       |  incremented and decremented).
 6143|       |- [OutputIterator](https://en.cppreference.com/w/cpp/named_req/OutputIterator):
 6144|       |  It is possible to write to the pointed-to element (only if @a Base is
 6145|       |  @ref iterator).
 6146|       |
 6147|       |@since version 1.0.0
 6148|       |*/
 6149|       |template<typename Base>
 6150|       |class json_reverse_iterator : public std::reverse_iterator<Base>
 6151|       |{
 6152|       |  public:
 6153|       |    using difference_type = std::ptrdiff_t;
 6154|       |    /// shortcut to the reverse iterator adapter
 6155|       |    using base_iterator = std::reverse_iterator<Base>;
 6156|       |    /// the reference type for the pointed-to element
 6157|       |    using reference = typename Base::reference;
 6158|       |
 6159|       |    /// create reverse iterator from iterator
 6160|       |    explicit json_reverse_iterator(const typename base_iterator::iterator_type& it) noexcept
 6161|       |        : base_iterator(it) {}
 6162|       |
 6163|       |    /// create reverse iterator from base class
 6164|       |    explicit json_reverse_iterator(const base_iterator& it) noexcept : base_iterator(it) {}
 6165|       |
 6166|       |    /// post-increment (it++)
 6167|       |    json_reverse_iterator const operator++(int)
 6168|       |    {
 6169|       |        return static_cast<json_reverse_iterator>(base_iterator::operator++(1));
 6170|       |    }
 6171|       |
 6172|       |    /// pre-increment (++it)
 6173|       |    json_reverse_iterator& operator++()
 6174|       |    {
 6175|       |        return static_cast<json_reverse_iterator&>(base_iterator::operator++());
 6176|       |    }
 6177|       |
 6178|       |    /// post-decrement (it--)
 6179|       |    json_reverse_iterator const operator--(int)
 6180|       |    {
 6181|       |        return static_cast<json_reverse_iterator>(base_iterator::operator--(1));
 6182|       |    }
 6183|       |
 6184|       |    /// pre-decrement (--it)
 6185|       |    json_reverse_iterator& operator--()
 6186|       |    {
 6187|       |        return static_cast<json_reverse_iterator&>(base_iterator::operator--());
 6188|       |    }
 6189|       |
 6190|       |    /// add to iterator
 6191|       |    json_reverse_iterator& operator+=(difference_type i)
 6192|       |    {
 6193|       |        return static_cast<json_reverse_iterator&>(base_iterator::operator+=(i));
 6194|       |    }
 6195|       |
 6196|       |    /// add to iterator
 6197|       |    json_reverse_iterator operator+(difference_type i) const
 6198|       |    {
 6199|       |        return static_cast<json_reverse_iterator>(base_iterator::operator+(i));
 6200|       |    }
 6201|       |
 6202|       |    /// subtract from iterator
 6203|       |    json_reverse_iterator operator-(difference_type i) const
 6204|       |    {
 6205|       |        return static_cast<json_reverse_iterator>(base_iterator::operator-(i));
 6206|       |    }
 6207|       |
 6208|       |    /// return difference
 6209|       |    difference_type operator-(const json_reverse_iterator& other) const
 6210|       |    {
 6211|       |        return base_iterator(*this) - base_iterator(other);
 6212|       |    }
 6213|       |
 6214|       |    /// access to successor
 6215|       |    reference operator[](difference_type n) const
 6216|       |    {
 6217|       |        return *(this->operator+(n));
 6218|       |    }
 6219|       |
 6220|       |    /// return the key of an object iterator
 6221|       |    auto key() const -> decltype(std::declval<Base>().key())
 6222|       |    {
 6223|       |        auto it = --this->base();
 6224|       |        return it.key();
 6225|       |    }
 6226|       |
 6227|       |    /// return the value of an iterator
 6228|       |    reference value() const
 6229|       |    {
 6230|       |        auto it = --this->base();
 6231|       |        return it.operator * ();
 6232|       |    }
 6233|       |};
 6234|       |}  // namespace detail
 6235|       |}  // namespace nlohmann
 6236|       |
 6237|       |// #include <nlohmann/detail/output/output_adapters.hpp>
 6238|       |
 6239|       |
 6240|       |#include <algorithm> // copy
 6241|       |#include <cstddef> // size_t
 6242|       |#include <ios> // streamsize
 6243|       |#include <iterator> // back_inserter
 6244|       |#include <memory> // shared_ptr, make_shared
 6245|       |#include <ostream> // basic_ostream
 6246|       |#include <string> // basic_string
 6247|       |#include <vector> // vector
 6248|       |
 6249|       |namespace nlohmann
 6250|       |{
 6251|       |namespace detail
 6252|       |{
 6253|       |/// abstract output adapter interface
 6254|       |template<typename CharType> struct output_adapter_protocol
 6255|       |{
 6256|       |    virtual void write_character(CharType c) = 0;
 6257|       |    virtual void write_characters(const CharType* s, std::size_t length) = 0;
 6258|    144|    virtual ~output_adapter_protocol() = default;
 6259|       |};
 6260|       |
 6261|       |/// a type to simplify interfaces
 6262|       |template<typename CharType>
 6263|       |using output_adapter_t = std::shared_ptr<output_adapter_protocol<CharType>>;
 6264|       |
 6265|       |/// output adapter for byte vectors
 6266|       |template<typename CharType>
 6267|       |class output_vector_adapter : public output_adapter_protocol<CharType>
 6268|       |{
 6269|       |  public:
 6270|       |    explicit output_vector_adapter(std::vector<CharType>& vec) noexcept
 6271|       |        : v(vec)
 6272|       |    {}
 6273|       |
 6274|       |    void write_character(CharType c) override
 6275|       |    {
 6276|       |        v.push_back(c);
 6277|       |    }
 6278|       |
 6279|       |    void write_characters(const CharType* s, std::size_t length) override
 6280|       |    {
 6281|       |        std::copy(s, s + length, std::back_inserter(v));
 6282|       |    }
 6283|       |
 6284|       |  private:
 6285|       |    std::vector<CharType>& v;
 6286|       |};
 6287|       |
 6288|       |/// output adapter for output streams
 6289|       |template<typename CharType>
 6290|       |class output_stream_adapter : public output_adapter_protocol<CharType>
 6291|       |{
 6292|       |  public:
 6293|       |    explicit output_stream_adapter(std::basic_ostream<CharType>& s) noexcept
 6294|       |        : stream(s)
 6295|    125|    {}
 6296|       |
 6297|       |    void write_character(CharType c) override
 6298|  8.88k|    {
 6299|  8.88k|        stream.put(c);
 6300|  8.88k|    }
 6301|       |
 6302|       |    void write_characters(const CharType* s, std::size_t length) override
 6303|  12.2k|    {
 6304|  12.2k|        stream.write(s, static_cast<std::streamsize>(length));
 6305|  12.2k|    }
 6306|       |
 6307|       |  private:
 6308|       |    std::basic_ostream<CharType>& stream;
 6309|       |};
 6310|       |
 6311|       |/// output adapter for basic_string
 6312|       |template<typename CharType, typename StringType = std::basic_string<CharType>>
 6313|       |class output_string_adapter : public output_adapter_protocol<CharType>
 6314|       |{
 6315|       |  public:
 6316|       |    explicit output_string_adapter(StringType& s) noexcept
 6317|       |        : str(s)
 6318|     19|    {}
 6319|       |
 6320|       |    void write_character(CharType c) override
 6321|    434|    {
 6322|    434|        str.push_back(c);
 6323|    434|    }
 6324|       |
 6325|       |    void write_characters(const CharType* s, std::size_t length) override
 6326|    782|    {
 6327|    782|        str.append(s, length);
 6328|    782|    }
 6329|       |
 6330|       |  private:
 6331|       |    StringType& str;
 6332|       |};
 6333|       |
 6334|       |template<typename CharType, typename StringType = std::basic_string<CharType>>
 6335|       |class output_adapter
 6336|       |{
 6337|       |  public:
 6338|       |    output_adapter(std::vector<CharType>& vec)
 6339|       |        : oa(std::make_shared<output_vector_adapter<CharType>>(vec)) {}
 6340|       |
 6341|       |    output_adapter(std::basic_ostream<CharType>& s)
 6342|    125|        : oa(std::make_shared<output_stream_adapter<CharType>>(s)) {}
 6343|       |
 6344|       |    output_adapter(StringType& s)
 6345|     19|        : oa(std::make_shared<output_string_adapter<CharType, StringType>>(s)) {}
 6346|       |
 6347|       |    operator output_adapter_t<CharType>()
 6348|    144|    {
 6349|    144|        return oa;
 6350|    144|    }
 6351|       |
 6352|       |  private:
 6353|       |    output_adapter_t<CharType> oa = nullptr;
 6354|       |};
 6355|       |}  // namespace detail
 6356|       |}  // namespace nlohmann
 6357|       |
 6358|       |// #include <nlohmann/detail/input/binary_reader.hpp>
 6359|       |
 6360|       |
 6361|       |#include <algorithm> // generate_n
 6362|       |#include <array> // array
 6363|       |#include <cassert> // assert
 6364|       |#include <cmath> // ldexp
 6365|       |#include <cstddef> // size_t
 6366|       |#include <cstdint> // uint8_t, uint16_t, uint32_t, uint64_t
 6367|       |#include <cstdio> // snprintf
 6368|       |#include <cstring> // memcpy
 6369|       |#include <iterator> // back_inserter
 6370|       |#include <limits> // numeric_limits
 6371|       |#include <string> // char_traits, string
 6372|       |#include <utility> // make_pair, move
 6373|       |
 6374|       |// #include <nlohmann/detail/input/input_adapters.hpp>
 6375|       |
 6376|       |// #include <nlohmann/detail/input/json_sax.hpp>
 6377|       |
 6378|       |// #include <nlohmann/detail/exceptions.hpp>
 6379|       |
 6380|       |// #include <nlohmann/detail/macro_scope.hpp>
 6381|       |
 6382|       |// #include <nlohmann/detail/meta/is_sax.hpp>
 6383|       |
 6384|       |// #include <nlohmann/detail/value_t.hpp>
 6385|       |
 6386|       |
 6387|       |namespace nlohmann
 6388|       |{
 6389|       |namespace detail
 6390|       |{
 6391|       |///////////////////
 6392|       |// binary reader //
 6393|       |///////////////////
 6394|       |
 6395|       |/*!
 6396|       |@brief deserialization of CBOR, MessagePack, and UBJSON values
 6397|       |*/
 6398|       |template<typename BasicJsonType, typename SAX = json_sax_dom_parser<BasicJsonType>>
 6399|       |class binary_reader
 6400|       |{
 6401|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 6402|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 6403|       |    using number_float_t = typename BasicJsonType::number_float_t;
 6404|       |    using string_t = typename BasicJsonType::string_t;
 6405|       |    using json_sax_t = SAX;
 6406|       |
 6407|       |  public:
 6408|       |    /*!
 6409|       |    @brief create a binary reader
 6410|       |
 6411|       |    @param[in] adapter  input adapter to read from
 6412|       |    */
 6413|       |    explicit binary_reader(input_adapter_t adapter) : ia(std::move(adapter))
 6414|       |    {
 6415|       |        (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};
 6416|       |        assert(ia);
 6417|       |    }
 6418|       |
 6419|       |    /*!
 6420|       |    @param[in] format  the binary format to parse
 6421|       |    @param[in] sax_    a SAX event processor
 6422|       |    @param[in] strict  whether to expect the input to be consumed completed
 6423|       |
 6424|       |    @return
 6425|       |    */
 6426|       |    bool sax_parse(const input_format_t format,
 6427|       |                   json_sax_t* sax_,
 6428|       |                   const bool strict = true)
 6429|       |    {
 6430|       |        sax = sax_;
 6431|       |        bool result = false;
 6432|       |
 6433|       |        switch (format)
 6434|       |        {
 6435|       |            case input_format_t::bson:
 6436|       |                result = parse_bson_internal();
 6437|       |                break;
 6438|       |
 6439|       |            case input_format_t::cbor:
 6440|       |                result = parse_cbor_internal();
 6441|       |                break;
 6442|       |
 6443|       |            case input_format_t::msgpack:
 6444|       |                result = parse_msgpack_internal();
 6445|       |                break;
 6446|       |
 6447|       |            case input_format_t::ubjson:
 6448|       |                result = parse_ubjson_internal();
 6449|       |                break;
 6450|       |
 6451|       |            // LCOV_EXCL_START
 6452|       |            default:
 6453|       |                assert(false);
 6454|       |                // LCOV_EXCL_STOP
 6455|       |        }
 6456|       |
 6457|       |        // strict mode: next byte must be EOF
 6458|       |        if (result and strict)
 6459|       |        {
 6460|       |            if (format == input_format_t::ubjson)
 6461|       |            {
 6462|       |                get_ignore_noop();
 6463|       |            }
 6464|       |            else
 6465|       |            {
 6466|       |                get();
 6467|       |            }
 6468|       |
 6469|       |            if (JSON_UNLIKELY(current != std::char_traits<char>::eof()))
 6470|       |            {
 6471|       |                return sax->parse_error(chars_read, get_token_string(),
 6472|       |                                        parse_error::create(110, chars_read, exception_message(format, "expected end of input; last byte: 0x" + get_token_string(), "value")));
 6473|       |            }
 6474|       |        }
 6475|       |
 6476|       |        return result;
 6477|       |    }
 6478|       |
 6479|       |    /*!
 6480|       |    @brief determine system byte order
 6481|       |
 6482|       |    @return true if and only if system's byte order is little endian
 6483|       |
 6484|       |    @note from http://stackoverflow.com/a/1001328/266378
 6485|       |    */
 6486|       |    static constexpr bool little_endianess(int num = 1) noexcept
 6487|       |    {
 6488|       |        return (*reinterpret_cast<char*>(&num) == 1);
 6489|       |    }
 6490|       |
 6491|       |  private:
 6492|       |    //////////
 6493|       |    // BSON //
 6494|       |    //////////
 6495|       |
 6496|       |    /*!
 6497|       |    @brief Reads in a BSON-object and passes it to the SAX-parser.
 6498|       |    @return whether a valid BSON-value was passed to the SAX parser
 6499|       |    */
 6500|       |    bool parse_bson_internal()
 6501|       |    {
 6502|       |        std::int32_t document_size;
 6503|       |        get_number<std::int32_t, true>(input_format_t::bson, document_size);
 6504|       |
 6505|       |        if (JSON_UNLIKELY(not sax->start_object(std::size_t(-1))))
 6506|       |        {
 6507|       |            return false;
 6508|       |        }
 6509|       |
 6510|       |        if (JSON_UNLIKELY(not parse_bson_element_list(/*is_array*/false)))
 6511|       |        {
 6512|       |            return false;
 6513|       |        }
 6514|       |
 6515|       |        return sax->end_object();
 6516|       |    }
 6517|       |
 6518|       |    /*!
 6519|       |    @brief Parses a C-style string from the BSON input.
 6520|       |    @param[in, out] result  A reference to the string variable where the read
 6521|       |                            string is to be stored.
 6522|       |    @return `true` if the \x00-byte indicating the end of the string was
 6523|       |             encountered before the EOF; false` indicates an unexpected EOF.
 6524|       |    */
 6525|       |    bool get_bson_cstr(string_t& result)
 6526|       |    {
 6527|       |        auto out = std::back_inserter(result);
 6528|       |        while (true)
 6529|       |        {
 6530|       |            get();
 6531|       |            if (JSON_UNLIKELY(not unexpect_eof(input_format_t::bson, "cstring")))
 6532|       |            {
 6533|       |                return false;
 6534|       |            }
 6535|       |            if (current == 0x00)
 6536|       |            {
 6537|       |                return true;
 6538|       |            }
 6539|       |            *out++ = static_cast<char>(current);
 6540|       |        }
 6541|       |
 6542|       |        return true;
 6543|       |    }
 6544|       |
 6545|       |    /*!
 6546|       |    @brief Parses a zero-terminated string of length @a len from the BSON
 6547|       |           input.
 6548|       |    @param[in] len  The length (including the zero-byte at the end) of the
 6549|       |                    string to be read.
 6550|       |    @param[in, out] result  A reference to the string variable where the read
 6551|       |                            string is to be stored.
 6552|       |    @tparam NumberType The type of the length @a len
 6553|       |    @pre len >= 1
 6554|       |    @return `true` if the string was successfully parsed
 6555|       |    */
 6556|       |    template<typename NumberType>
 6557|       |    bool get_bson_string(const NumberType len, string_t& result)
 6558|       |    {
 6559|       |        if (JSON_UNLIKELY(len < 1))
 6560|       |        {
 6561|       |            auto last_token = get_token_string();
 6562|       |            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format_t::bson, "string length must be at least 1, is " + std::to_string(len), "string")));
 6563|       |        }
 6564|       |
 6565|       |        return get_string(input_format_t::bson, len - static_cast<NumberType>(1), result) and get() != std::char_traits<char>::eof();
 6566|       |    }
 6567|       |
 6568|       |    /*!
 6569|       |    @brief Read a BSON document element of the given @a element_type.
 6570|       |    @param[in] element_type The BSON element type, c.f. http://bsonspec.org/spec.html
 6571|       |    @param[in] element_type_parse_position The position in the input stream,
 6572|       |               where the `element_type` was read.
 6573|       |    @warning Not all BSON element types are supported yet. An unsupported
 6574|       |             @a element_type will give rise to a parse_error.114:
 6575|       |             Unsupported BSON record type 0x...
 6576|       |    @return whether a valid BSON-object/array was passed to the SAX parser
 6577|       |    */
 6578|       |    bool parse_bson_element_internal(const int element_type,
 6579|       |                                     const std::size_t element_type_parse_position)
 6580|       |    {
 6581|       |        switch (element_type)
 6582|       |        {
 6583|       |            case 0x01: // double
 6584|       |            {
 6585|       |                double number;
 6586|       |                return get_number<double, true>(input_format_t::bson, number) and sax->number_float(static_cast<number_float_t>(number), "");
 6587|       |            }
 6588|       |
 6589|       |            case 0x02: // string
 6590|       |            {
 6591|       |                std::int32_t len;
 6592|       |                string_t value;
 6593|       |                return get_number<std::int32_t, true>(input_format_t::bson, len) and get_bson_string(len, value) and sax->string(value);
 6594|       |            }
 6595|       |
 6596|       |            case 0x03: // object
 6597|       |            {
 6598|       |                return parse_bson_internal();
 6599|       |            }
 6600|       |
 6601|       |            case 0x04: // array
 6602|       |            {
 6603|       |                return parse_bson_array();
 6604|       |            }
 6605|       |
 6606|       |            case 0x08: // boolean
 6607|       |            {
 6608|       |                return sax->boolean(get() != 0);
 6609|       |            }
 6610|       |
 6611|       |            case 0x0A: // null
 6612|       |            {
 6613|       |                return sax->null();
 6614|       |            }
 6615|       |
 6616|       |            case 0x10: // int32
 6617|       |            {
 6618|       |                std::int32_t value;
 6619|       |                return get_number<std::int32_t, true>(input_format_t::bson, value) and sax->number_integer(value);
 6620|       |            }
 6621|       |
 6622|       |            case 0x12: // int64
 6623|       |            {
 6624|       |                std::int64_t value;
 6625|       |                return get_number<std::int64_t, true>(input_format_t::bson, value) and sax->number_integer(value);
 6626|       |            }
 6627|       |
 6628|       |            default: // anything else not supported (yet)
 6629|       |            {
 6630|       |                char cr[3];
 6631|       |                (std::snprintf)(cr, sizeof(cr), "%.2hhX", static_cast<unsigned char>(element_type));
 6632|       |                return sax->parse_error(element_type_parse_position, std::string(cr), parse_error::create(114, element_type_parse_position, "Unsupported BSON record type 0x" + std::string(cr)));
 6633|       |            }
 6634|       |        }
 6635|       |    }
 6636|       |
 6637|       |    /*!
 6638|       |    @brief Read a BSON element list (as specified in the BSON-spec)
 6639|       |
 6640|       |    The same binary layout is used for objects and arrays, hence it must be
 6641|       |    indicated with the argument @a is_array which one is expected
 6642|       |    (true --> array, false --> object).
 6643|       |
 6644|       |    @param[in] is_array Determines if the element list being read is to be
 6645|       |                        treated as an object (@a is_array == false), or as an
 6646|       |                        array (@a is_array == true).
 6647|       |    @return whether a valid BSON-object/array was passed to the SAX parser
 6648|       |    */
 6649|       |    bool parse_bson_element_list(const bool is_array)
 6650|       |    {
 6651|       |        string_t key;
 6652|       |        while (int element_type = get())
 6653|       |        {
 6654|       |            if (JSON_UNLIKELY(not unexpect_eof(input_format_t::bson, "element list")))
 6655|       |            {
 6656|       |                return false;
 6657|       |            }
 6658|       |
 6659|       |            const std::size_t element_type_parse_position = chars_read;
 6660|       |            if (JSON_UNLIKELY(not get_bson_cstr(key)))
 6661|       |            {
 6662|       |                return false;
 6663|       |            }
 6664|       |
 6665|       |            if (not is_array)
 6666|       |            {
 6667|       |                if (not sax->key(key))
 6668|       |                {
 6669|       |                    return false;
 6670|       |                }
 6671|       |            }
 6672|       |
 6673|       |            if (JSON_UNLIKELY(not parse_bson_element_internal(element_type, element_type_parse_position)))
 6674|       |            {
 6675|       |                return false;
 6676|       |            }
 6677|       |
 6678|       |            // get_bson_cstr only appends
 6679|       |            key.clear();
 6680|       |        }
 6681|       |
 6682|       |        return true;
 6683|       |    }
 6684|       |
 6685|       |    /*!
 6686|       |    @brief Reads an array from the BSON input and passes it to the SAX-parser.
 6687|       |    @return whether a valid BSON-array was passed to the SAX parser
 6688|       |    */
 6689|       |    bool parse_bson_array()
 6690|       |    {
 6691|       |        std::int32_t document_size;
 6692|       |        get_number<std::int32_t, true>(input_format_t::bson, document_size);
 6693|       |
 6694|       |        if (JSON_UNLIKELY(not sax->start_array(std::size_t(-1))))
 6695|       |        {
 6696|       |            return false;
 6697|       |        }
 6698|       |
 6699|       |        if (JSON_UNLIKELY(not parse_bson_element_list(/*is_array*/true)))
 6700|       |        {
 6701|       |            return false;
 6702|       |        }
 6703|       |
 6704|       |        return sax->end_array();
 6705|       |    }
 6706|       |
 6707|       |    //////////
 6708|       |    // CBOR //
 6709|       |    //////////
 6710|       |
 6711|       |    /*!
 6712|       |    @param[in] get_char  whether a new character should be retrieved from the
 6713|       |                         input (true, default) or whether the last read
 6714|       |                         character should be considered instead
 6715|       |
 6716|       |    @return whether a valid CBOR value was passed to the SAX parser
 6717|       |    */
 6718|       |    bool parse_cbor_internal(const bool get_char = true)
 6719|       |    {
 6720|       |        switch (get_char ? get() : current)
 6721|       |        {
 6722|       |            // EOF
 6723|       |            case std::char_traits<char>::eof():
 6724|       |                return unexpect_eof(input_format_t::cbor, "value");
 6725|       |
 6726|       |            // Integer 0x00..0x17 (0..23)
 6727|       |            case 0x00:
 6728|       |            case 0x01:
 6729|       |            case 0x02:
 6730|       |            case 0x03:
 6731|       |            case 0x04:
 6732|       |            case 0x05:
 6733|       |            case 0x06:
 6734|       |            case 0x07:
 6735|       |            case 0x08:
 6736|       |            case 0x09:
 6737|       |            case 0x0A:
 6738|       |            case 0x0B:
 6739|       |            case 0x0C:
 6740|       |            case 0x0D:
 6741|       |            case 0x0E:
 6742|       |            case 0x0F:
 6743|       |            case 0x10:
 6744|       |            case 0x11:
 6745|       |            case 0x12:
 6746|       |            case 0x13:
 6747|       |            case 0x14:
 6748|       |            case 0x15:
 6749|       |            case 0x16:
 6750|       |            case 0x17:
 6751|       |                return sax->number_unsigned(static_cast<number_unsigned_t>(current));
 6752|       |
 6753|       |            case 0x18: // Unsigned integer (one-byte uint8_t follows)
 6754|       |            {
 6755|       |                uint8_t number;
 6756|       |                return get_number(input_format_t::cbor, number) and sax->number_unsigned(number);
 6757|       |            }
 6758|       |
 6759|       |            case 0x19: // Unsigned integer (two-byte uint16_t follows)
 6760|       |            {
 6761|       |                uint16_t number;
 6762|       |                return get_number(input_format_t::cbor, number) and sax->number_unsigned(number);
 6763|       |            }
 6764|       |
 6765|       |            case 0x1A: // Unsigned integer (four-byte uint32_t follows)
 6766|       |            {
 6767|       |                uint32_t number;
 6768|       |                return get_number(input_format_t::cbor, number) and sax->number_unsigned(number);
 6769|       |            }
 6770|       |
 6771|       |            case 0x1B: // Unsigned integer (eight-byte uint64_t follows)
 6772|       |            {
 6773|       |                uint64_t number;
 6774|       |                return get_number(input_format_t::cbor, number) and sax->number_unsigned(number);
 6775|       |            }
 6776|       |
 6777|       |            // Negative integer -1-0x00..-1-0x17 (-1..-24)
 6778|       |            case 0x20:
 6779|       |            case 0x21:
 6780|       |            case 0x22:
 6781|       |            case 0x23:
 6782|       |            case 0x24:
 6783|       |            case 0x25:
 6784|       |            case 0x26:
 6785|       |            case 0x27:
 6786|       |            case 0x28:
 6787|       |            case 0x29:
 6788|       |            case 0x2A:
 6789|       |            case 0x2B:
 6790|       |            case 0x2C:
 6791|       |            case 0x2D:
 6792|       |            case 0x2E:
 6793|       |            case 0x2F:
 6794|       |            case 0x30:
 6795|       |            case 0x31:
 6796|       |            case 0x32:
 6797|       |            case 0x33:
 6798|       |            case 0x34:
 6799|       |            case 0x35:
 6800|       |            case 0x36:
 6801|       |            case 0x37:
 6802|       |                return sax->number_integer(static_cast<int8_t>(0x20 - 1 - current));
 6803|       |
 6804|       |            case 0x38: // Negative integer (one-byte uint8_t follows)
 6805|       |            {
 6806|       |                uint8_t number;
 6807|       |                return get_number(input_format_t::cbor, number) and sax->number_integer(static_cast<number_integer_t>(-1) - number);
 6808|       |            }
 6809|       |
 6810|       |            case 0x39: // Negative integer -1-n (two-byte uint16_t follows)
 6811|       |            {
 6812|       |                uint16_t number;
 6813|       |                return get_number(input_format_t::cbor, number) and sax->number_integer(static_cast<number_integer_t>(-1) - number);
 6814|       |            }
 6815|       |
 6816|       |            case 0x3A: // Negative integer -1-n (four-byte uint32_t follows)
 6817|       |            {
 6818|       |                uint32_t number;
 6819|       |                return get_number(input_format_t::cbor, number) and sax->number_integer(static_cast<number_integer_t>(-1) - number);
 6820|       |            }
 6821|       |
 6822|       |            case 0x3B: // Negative integer -1-n (eight-byte uint64_t follows)
 6823|       |            {
 6824|       |                uint64_t number;
 6825|       |                return get_number(input_format_t::cbor, number) and sax->number_integer(static_cast<number_integer_t>(-1)
 6826|       |                        - static_cast<number_integer_t>(number));
 6827|       |            }
 6828|       |
 6829|       |            // UTF-8 string (0x00..0x17 bytes follow)
 6830|       |            case 0x60:
 6831|       |            case 0x61:
 6832|       |            case 0x62:
 6833|       |            case 0x63:
 6834|       |            case 0x64:
 6835|       |            case 0x65:
 6836|       |            case 0x66:
 6837|       |            case 0x67:
 6838|       |            case 0x68:
 6839|       |            case 0x69:
 6840|       |            case 0x6A:
 6841|       |            case 0x6B:
 6842|       |            case 0x6C:
 6843|       |            case 0x6D:
 6844|       |            case 0x6E:
 6845|       |            case 0x6F:
 6846|       |            case 0x70:
 6847|       |            case 0x71:
 6848|       |            case 0x72:
 6849|       |            case 0x73:
 6850|       |            case 0x74:
 6851|       |            case 0x75:
 6852|       |            case 0x76:
 6853|       |            case 0x77:
 6854|       |            case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
 6855|       |            case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
 6856|       |            case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
 6857|       |            case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
 6858|       |            case 0x7F: // UTF-8 string (indefinite length)
 6859|       |            {
 6860|       |                string_t s;
 6861|       |                return get_cbor_string(s) and sax->string(s);
 6862|       |            }
 6863|       |
 6864|       |            // array (0x00..0x17 data items follow)
 6865|       |            case 0x80:
 6866|       |            case 0x81:
 6867|       |            case 0x82:
 6868|       |            case 0x83:
 6869|       |            case 0x84:
 6870|       |            case 0x85:
 6871|       |            case 0x86:
 6872|       |            case 0x87:
 6873|       |            case 0x88:
 6874|       |            case 0x89:
 6875|       |            case 0x8A:
 6876|       |            case 0x8B:
 6877|       |            case 0x8C:
 6878|       |            case 0x8D:
 6879|       |            case 0x8E:
 6880|       |            case 0x8F:
 6881|       |            case 0x90:
 6882|       |            case 0x91:
 6883|       |            case 0x92:
 6884|       |            case 0x93:
 6885|       |            case 0x94:
 6886|       |            case 0x95:
 6887|       |            case 0x96:
 6888|       |            case 0x97:
 6889|       |                return get_cbor_array(static_cast<std::size_t>(current & 0x1F));
 6890|       |
 6891|       |            case 0x98: // array (one-byte uint8_t for n follows)
 6892|       |            {
 6893|       |                uint8_t len;
 6894|       |                return get_number(input_format_t::cbor, len) and get_cbor_array(static_cast<std::size_t>(len));
 6895|       |            }
 6896|       |
 6897|       |            case 0x99: // array (two-byte uint16_t for n follow)
 6898|       |            {
 6899|       |                uint16_t len;
 6900|       |                return get_number(input_format_t::cbor, len) and get_cbor_array(static_cast<std::size_t>(len));
 6901|       |            }
 6902|       |
 6903|       |            case 0x9A: // array (four-byte uint32_t for n follow)
 6904|       |            {
 6905|       |                uint32_t len;
 6906|       |                return get_number(input_format_t::cbor, len) and get_cbor_array(static_cast<std::size_t>(len));
 6907|       |            }
 6908|       |
 6909|       |            case 0x9B: // array (eight-byte uint64_t for n follow)
 6910|       |            {
 6911|       |                uint64_t len;
 6912|       |                return get_number(input_format_t::cbor, len) and get_cbor_array(static_cast<std::size_t>(len));
 6913|       |            }
 6914|       |
 6915|       |            case 0x9F: // array (indefinite length)
 6916|       |                return get_cbor_array(std::size_t(-1));
 6917|       |
 6918|       |            // map (0x00..0x17 pairs of data items follow)
 6919|       |            case 0xA0:
 6920|       |            case 0xA1:
 6921|       |            case 0xA2:
 6922|       |            case 0xA3:
 6923|       |            case 0xA4:
 6924|       |            case 0xA5:
 6925|       |            case 0xA6:
 6926|       |            case 0xA7:
 6927|       |            case 0xA8:
 6928|       |            case 0xA9:
 6929|       |            case 0xAA:
 6930|       |            case 0xAB:
 6931|       |            case 0xAC:
 6932|       |            case 0xAD:
 6933|       |            case 0xAE:
 6934|       |            case 0xAF:
 6935|       |            case 0xB0:
 6936|       |            case 0xB1:
 6937|       |            case 0xB2:
 6938|       |            case 0xB3:
 6939|       |            case 0xB4:
 6940|       |            case 0xB5:
 6941|       |            case 0xB6:
 6942|       |            case 0xB7:
 6943|       |                return get_cbor_object(static_cast<std::size_t>(current & 0x1F));
 6944|       |
 6945|       |            case 0xB8: // map (one-byte uint8_t for n follows)
 6946|       |            {
 6947|       |                uint8_t len;
 6948|       |                return get_number(input_format_t::cbor, len) and get_cbor_object(static_cast<std::size_t>(len));
 6949|       |            }
 6950|       |
 6951|       |            case 0xB9: // map (two-byte uint16_t for n follow)
 6952|       |            {
 6953|       |                uint16_t len;
 6954|       |                return get_number(input_format_t::cbor, len) and get_cbor_object(static_cast<std::size_t>(len));
 6955|       |            }
 6956|       |
 6957|       |            case 0xBA: // map (four-byte uint32_t for n follow)
 6958|       |            {
 6959|       |                uint32_t len;
 6960|       |                return get_number(input_format_t::cbor, len) and get_cbor_object(static_cast<std::size_t>(len));
 6961|       |            }
 6962|       |
 6963|       |            case 0xBB: // map (eight-byte uint64_t for n follow)
 6964|       |            {
 6965|       |                uint64_t len;
 6966|       |                return get_number(input_format_t::cbor, len) and get_cbor_object(static_cast<std::size_t>(len));
 6967|       |            }
 6968|       |
 6969|       |            case 0xBF: // map (indefinite length)
 6970|       |                return get_cbor_object(std::size_t(-1));
 6971|       |
 6972|       |            case 0xF4: // false
 6973|       |                return sax->boolean(false);
 6974|       |
 6975|       |            case 0xF5: // true
 6976|       |                return sax->boolean(true);
 6977|       |
 6978|       |            case 0xF6: // null
 6979|       |                return sax->null();
 6980|       |
 6981|       |            case 0xF9: // Half-Precision Float (two-byte IEEE 754)
 6982|       |            {
 6983|       |                const int byte1_raw = get();
 6984|       |                if (JSON_UNLIKELY(not unexpect_eof(input_format_t::cbor, "number")))
 6985|       |                {
 6986|       |                    return false;
 6987|       |                }
 6988|       |                const int byte2_raw = get();
 6989|       |                if (JSON_UNLIKELY(not unexpect_eof(input_format_t::cbor, "number")))
 6990|       |                {
 6991|       |                    return false;
 6992|       |                }
 6993|       |
 6994|       |                const auto byte1 = static_cast<unsigned char>(byte1_raw);
 6995|       |                const auto byte2 = static_cast<unsigned char>(byte2_raw);
 6996|       |
 6997|       |                // code from RFC 7049, Appendix D, Figure 3:
 6998|       |                // As half-precision floating-point numbers were only added
 6999|       |                // to IEEE 754 in 2008, today's programming platforms often
 7000|       |                // still only have limited support for them. It is very
 7001|       |                // easy to include at least decoding support for them even
 7002|       |                // without such support. An example of a small decoder for
 7003|       |                // half-precision floating-point numbers in the C language
 7004|       |                // is shown in Fig. 3.
 7005|       |                const int half = (byte1 << 8) + byte2;
 7006|       |                const double val = [&half]
 7007|       |                {
 7008|       |                    const int exp = (half >> 10) & 0x1F;
 7009|       |                    const int mant = half & 0x3FF;
 7010|       |                    assert(0 <= exp and exp <= 32);
 7011|       |                    assert(0 <= mant and mant <= 1024);
 7012|       |                    switch (exp)
 7013|       |                    {
 7014|       |                        case 0:
 7015|       |                            return std::ldexp(mant, -24);
 7016|       |                        case 31:
 7017|       |                            return (mant == 0)
 7018|       |                            ? std::numeric_limits<double>::infinity()
 7019|       |                            : std::numeric_limits<double>::quiet_NaN();
 7020|       |                        default:
 7021|       |                            return std::ldexp(mant + 1024, exp - 25);
 7022|       |                    }
 7023|       |                }();
 7024|       |                return sax->number_float((half & 0x8000) != 0
 7025|       |                                         ? static_cast<number_float_t>(-val)
 7026|       |                                         : static_cast<number_float_t>(val), "");
 7027|       |            }
 7028|       |
 7029|       |            case 0xFA: // Single-Precision Float (four-byte IEEE 754)
 7030|       |            {
 7031|       |                float number;
 7032|       |                return get_number(input_format_t::cbor, number) and sax->number_float(static_cast<number_float_t>(number), "");
 7033|       |            }
 7034|       |
 7035|       |            case 0xFB: // Double-Precision Float (eight-byte IEEE 754)
 7036|       |            {
 7037|       |                double number;
 7038|       |                return get_number(input_format_t::cbor, number) and sax->number_float(static_cast<number_float_t>(number), "");
 7039|       |            }
 7040|       |
 7041|       |            default: // anything else (0xFF is handled inside the other types)
 7042|       |            {
 7043|       |                auto last_token = get_token_string();
 7044|       |                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format_t::cbor, "invalid byte: 0x" + last_token, "value")));
 7045|       |            }
 7046|       |        }
 7047|       |    }
 7048|       |
 7049|       |    /*!
 7050|       |    @brief reads a CBOR string
 7051|       |
 7052|       |    This function first reads starting bytes to determine the expected
 7053|       |    string length and then copies this number of bytes into a string.
 7054|       |    Additionally, CBOR's strings with indefinite lengths are supported.
 7055|       |
 7056|       |    @param[out] result  created string
 7057|       |
 7058|       |    @return whether string creation completed
 7059|       |    */
 7060|       |    bool get_cbor_string(string_t& result)
 7061|       |    {
 7062|       |        if (JSON_UNLIKELY(not unexpect_eof(input_format_t::cbor, "string")))
 7063|       |        {
 7064|       |            return false;
 7065|       |        }
 7066|       |
 7067|       |        switch (current)
 7068|       |        {
 7069|       |            // UTF-8 string (0x00..0x17 bytes follow)
 7070|       |            case 0x60:
 7071|       |            case 0x61:
 7072|       |            case 0x62:
 7073|       |            case 0x63:
 7074|       |            case 0x64:
 7075|       |            case 0x65:
 7076|       |            case 0x66:
 7077|       |            case 0x67:
 7078|       |            case 0x68:
 7079|       |            case 0x69:
 7080|       |            case 0x6A:
 7081|       |            case 0x6B:
 7082|       |            case 0x6C:
 7083|       |            case 0x6D:
 7084|       |            case 0x6E:
 7085|       |            case 0x6F:
 7086|       |            case 0x70:
 7087|       |            case 0x71:
 7088|       |            case 0x72:
 7089|       |            case 0x73:
 7090|       |            case 0x74:
 7091|       |            case 0x75:
 7092|       |            case 0x76:
 7093|       |            case 0x77:
 7094|       |            {
 7095|       |                return get_string(input_format_t::cbor, current & 0x1F, result);
 7096|       |            }
 7097|       |
 7098|       |            case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
 7099|       |            {
 7100|       |                uint8_t len;
 7101|       |                return get_number(input_format_t::cbor, len) and get_string(input_format_t::cbor, len, result);
 7102|       |            }
 7103|       |
 7104|       |            case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
 7105|       |            {
 7106|       |                uint16_t len;
 7107|       |                return get_number(input_format_t::cbor, len) and get_string(input_format_t::cbor, len, result);
 7108|       |            }
 7109|       |
 7110|       |            case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
 7111|       |            {
 7112|       |                uint32_t len;
 7113|       |                return get_number(input_format_t::cbor, len) and get_string(input_format_t::cbor, len, result);
 7114|       |            }
 7115|       |
 7116|       |            case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
 7117|       |            {
 7118|       |                uint64_t len;
 7119|       |                return get_number(input_format_t::cbor, len) and get_string(input_format_t::cbor, len, result);
 7120|       |            }
 7121|       |
 7122|       |            case 0x7F: // UTF-8 string (indefinite length)
 7123|       |            {
 7124|       |                while (get() != 0xFF)
 7125|       |                {
 7126|       |                    string_t chunk;
 7127|       |                    if (not get_cbor_string(chunk))
 7128|       |                    {
 7129|       |                        return false;
 7130|       |                    }
 7131|       |                    result.append(chunk);
 7132|       |                }
 7133|       |                return true;
 7134|       |            }
 7135|       |
 7136|       |            default:
 7137|       |            {
 7138|       |                auto last_token = get_token_string();
 7139|       |                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format_t::cbor, "expected length specification (0x60-0x7B) or indefinite string type (0x7F); last byte: 0x" + last_token, "string")));
 7140|       |            }
 7141|       |        }
 7142|       |    }
 7143|       |
 7144|       |    /*!
 7145|       |    @param[in] len  the length of the array or std::size_t(-1) for an
 7146|       |                    array of indefinite size
 7147|       |    @return whether array creation completed
 7148|       |    */
 7149|       |    bool get_cbor_array(const std::size_t len)
 7150|       |    {
 7151|       |        if (JSON_UNLIKELY(not sax->start_array(len)))
 7152|       |        {
 7153|       |            return false;
 7154|       |        }
 7155|       |
 7156|       |        if (len != std::size_t(-1))
 7157|       |        {
 7158|       |            for (std::size_t i = 0; i < len; ++i)
 7159|       |            {
 7160|       |                if (JSON_UNLIKELY(not parse_cbor_internal()))
 7161|       |                {
 7162|       |                    return false;
 7163|       |                }
 7164|       |            }
 7165|       |        }
 7166|       |        else
 7167|       |        {
 7168|       |            while (get() != 0xFF)
 7169|       |            {
 7170|       |                if (JSON_UNLIKELY(not parse_cbor_internal(false)))
 7171|       |                {
 7172|       |                    return false;
 7173|       |                }
 7174|       |            }
 7175|       |        }
 7176|       |
 7177|       |        return sax->end_array();
 7178|       |    }
 7179|       |
 7180|       |    /*!
 7181|       |    @param[in] len  the length of the object or std::size_t(-1) for an
 7182|       |                    object of indefinite size
 7183|       |    @return whether object creation completed
 7184|       |    */
 7185|       |    bool get_cbor_object(const std::size_t len)
 7186|       |    {
 7187|       |        if (not JSON_UNLIKELY(sax->start_object(len)))
 7188|       |        {
 7189|       |            return false;
 7190|       |        }
 7191|       |
 7192|       |        string_t key;
 7193|       |        if (len != std::size_t(-1))
 7194|       |        {
 7195|       |            for (std::size_t i = 0; i < len; ++i)
 7196|       |            {
 7197|       |                get();
 7198|       |                if (JSON_UNLIKELY(not get_cbor_string(key) or not sax->key(key)))
 7199|       |                {
 7200|       |                    return false;
 7201|       |                }
 7202|       |
 7203|       |                if (JSON_UNLIKELY(not parse_cbor_internal()))
 7204|       |                {
 7205|       |                    return false;
 7206|       |                }
 7207|       |                key.clear();
 7208|       |            }
 7209|       |        }
 7210|       |        else
 7211|       |        {
 7212|       |            while (get() != 0xFF)
 7213|       |            {
 7214|       |                if (JSON_UNLIKELY(not get_cbor_string(key) or not sax->key(key)))
 7215|       |                {
 7216|       |                    return false;
 7217|       |                }
 7218|       |
 7219|       |                if (JSON_UNLIKELY(not parse_cbor_internal()))
 7220|       |                {
 7221|       |                    return false;
 7222|       |                }
 7223|       |                key.clear();
 7224|       |            }
 7225|       |        }
 7226|       |
 7227|       |        return sax->end_object();
 7228|       |    }
 7229|       |
 7230|       |    /////////////
 7231|       |    // MsgPack //
 7232|       |    /////////////
 7233|       |
 7234|       |    /*!
 7235|       |    @return whether a valid MessagePack value was passed to the SAX parser
 7236|       |    */
 7237|       |    bool parse_msgpack_internal()
 7238|       |    {
 7239|       |        switch (get())
 7240|       |        {
 7241|       |            // EOF
 7242|       |            case std::char_traits<char>::eof():
 7243|       |                return unexpect_eof(input_format_t::msgpack, "value");
 7244|       |
 7245|       |            // positive fixint
 7246|       |            case 0x00:
 7247|       |            case 0x01:
 7248|       |            case 0x02:
 7249|       |            case 0x03:
 7250|       |            case 0x04:
 7251|       |            case 0x05:
 7252|       |            case 0x06:
 7253|       |            case 0x07:
 7254|       |            case 0x08:
 7255|       |            case 0x09:
 7256|       |            case 0x0A:
 7257|       |            case 0x0B:
 7258|       |            case 0x0C:
 7259|       |            case 0x0D:
 7260|       |            case 0x0E:
 7261|       |            case 0x0F:
 7262|       |            case 0x10:
 7263|       |            case 0x11:
 7264|       |            case 0x12:
 7265|       |            case 0x13:
 7266|       |            case 0x14:
 7267|       |            case 0x15:
 7268|       |            case 0x16:
 7269|       |            case 0x17:
 7270|       |            case 0x18:
 7271|       |            case 0x19:
 7272|       |            case 0x1A:
 7273|       |            case 0x1B:
 7274|       |            case 0x1C:
 7275|       |            case 0x1D:
 7276|       |            case 0x1E:
 7277|       |            case 0x1F:
 7278|       |            case 0x20:
 7279|       |            case 0x21:
 7280|       |            case 0x22:
 7281|       |            case 0x23:
 7282|       |            case 0x24:
 7283|       |            case 0x25:
 7284|       |            case 0x26:
 7285|       |            case 0x27:
 7286|       |            case 0x28:
 7287|       |            case 0x29:
 7288|       |            case 0x2A:
 7289|       |            case 0x2B:
 7290|       |            case 0x2C:
 7291|       |            case 0x2D:
 7292|       |            case 0x2E:
 7293|       |            case 0x2F:
 7294|       |            case 0x30:
 7295|       |            case 0x31:
 7296|       |            case 0x32:
 7297|       |            case 0x33:
 7298|       |            case 0x34:
 7299|       |            case 0x35:
 7300|       |            case 0x36:
 7301|       |            case 0x37:
 7302|       |            case 0x38:
 7303|       |            case 0x39:
 7304|       |            case 0x3A:
 7305|       |            case 0x3B:
 7306|       |            case 0x3C:
 7307|       |            case 0x3D:
 7308|       |            case 0x3E:
 7309|       |            case 0x3F:
 7310|       |            case 0x40:
 7311|       |            case 0x41:
 7312|       |            case 0x42:
 7313|       |            case 0x43:
 7314|       |            case 0x44:
 7315|       |            case 0x45:
 7316|       |            case 0x46:
 7317|       |            case 0x47:
 7318|       |            case 0x48:
 7319|       |            case 0x49:
 7320|       |            case 0x4A:
 7321|       |            case 0x4B:
 7322|       |            case 0x4C:
 7323|       |            case 0x4D:
 7324|       |            case 0x4E:
 7325|       |            case 0x4F:
 7326|       |            case 0x50:
 7327|       |            case 0x51:
 7328|       |            case 0x52:
 7329|       |            case 0x53:
 7330|       |            case 0x54:
 7331|       |            case 0x55:
 7332|       |            case 0x56:
 7333|       |            case 0x57:
 7334|       |            case 0x58:
 7335|       |            case 0x59:
 7336|       |            case 0x5A:
 7337|       |            case 0x5B:
 7338|       |            case 0x5C:
 7339|       |            case 0x5D:
 7340|       |            case 0x5E:
 7341|       |            case 0x5F:
 7342|       |            case 0x60:
 7343|       |            case 0x61:
 7344|       |            case 0x62:
 7345|       |            case 0x63:
 7346|       |            case 0x64:
 7347|       |            case 0x65:
 7348|       |            case 0x66:
 7349|       |            case 0x67:
 7350|       |            case 0x68:
 7351|       |            case 0x69:
 7352|       |            case 0x6A:
 7353|       |            case 0x6B:
 7354|       |            case 0x6C:
 7355|       |            case 0x6D:
 7356|       |            case 0x6E:
 7357|       |            case 0x6F:
 7358|       |            case 0x70:
 7359|       |            case 0x71:
 7360|       |            case 0x72:
 7361|       |            case 0x73:
 7362|       |            case 0x74:
 7363|       |            case 0x75:
 7364|       |            case 0x76:
 7365|       |            case 0x77:
 7366|       |            case 0x78:
 7367|       |            case 0x79:
 7368|       |            case 0x7A:
 7369|       |            case 0x7B:
 7370|       |            case 0x7C:
 7371|       |            case 0x7D:
 7372|       |            case 0x7E:
 7373|       |            case 0x7F:
 7374|       |                return sax->number_unsigned(static_cast<number_unsigned_t>(current));
 7375|       |
 7376|       |            // fixmap
 7377|       |            case 0x80:
 7378|       |            case 0x81:
 7379|       |            case 0x82:
 7380|       |            case 0x83:
 7381|       |            case 0x84:
 7382|       |            case 0x85:
 7383|       |            case 0x86:
 7384|       |            case 0x87:
 7385|       |            case 0x88:
 7386|       |            case 0x89:
 7387|       |            case 0x8A:
 7388|       |            case 0x8B:
 7389|       |            case 0x8C:
 7390|       |            case 0x8D:
 7391|       |            case 0x8E:
 7392|       |            case 0x8F:
 7393|       |                return get_msgpack_object(static_cast<std::size_t>(current & 0x0F));
 7394|       |
 7395|       |            // fixarray
 7396|       |            case 0x90:
 7397|       |            case 0x91:
 7398|       |            case 0x92:
 7399|       |            case 0x93:
 7400|       |            case 0x94:
 7401|       |            case 0x95:
 7402|       |            case 0x96:
 7403|       |            case 0x97:
 7404|       |            case 0x98:
 7405|       |            case 0x99:
 7406|       |            case 0x9A:
 7407|       |            case 0x9B:
 7408|       |            case 0x9C:
 7409|       |            case 0x9D:
 7410|       |            case 0x9E:
 7411|       |            case 0x9F:
 7412|       |                return get_msgpack_array(static_cast<std::size_t>(current & 0x0F));
 7413|       |
 7414|       |            // fixstr
 7415|       |            case 0xA0:
 7416|       |            case 0xA1:
 7417|       |            case 0xA2:
 7418|       |            case 0xA3:
 7419|       |            case 0xA4:
 7420|       |            case 0xA5:
 7421|       |            case 0xA6:
 7422|       |            case 0xA7:
 7423|       |            case 0xA8:
 7424|       |            case 0xA9:
 7425|       |            case 0xAA:
 7426|       |            case 0xAB:
 7427|       |            case 0xAC:
 7428|       |            case 0xAD:
 7429|       |            case 0xAE:
 7430|       |            case 0xAF:
 7431|       |            case 0xB0:
 7432|       |            case 0xB1:
 7433|       |            case 0xB2:
 7434|       |            case 0xB3:
 7435|       |            case 0xB4:
 7436|       |            case 0xB5:
 7437|       |            case 0xB6:
 7438|       |            case 0xB7:
 7439|       |            case 0xB8:
 7440|       |            case 0xB9:
 7441|       |            case 0xBA:
 7442|       |            case 0xBB:
 7443|       |            case 0xBC:
 7444|       |            case 0xBD:
 7445|       |            case 0xBE:
 7446|       |            case 0xBF:
 7447|       |            {
 7448|       |                string_t s;
 7449|       |                return get_msgpack_string(s) and sax->string(s);
 7450|       |            }
 7451|       |
 7452|       |            case 0xC0: // nil
 7453|       |                return sax->null();
 7454|       |
 7455|       |            case 0xC2: // false
 7456|       |                return sax->boolean(false);
 7457|       |
 7458|       |            case 0xC3: // true
 7459|       |                return sax->boolean(true);
 7460|       |
 7461|       |            case 0xCA: // float 32
 7462|       |            {
 7463|       |                float number;
 7464|       |                return get_number(input_format_t::msgpack, number) and sax->number_float(static_cast<number_float_t>(number), "");
 7465|       |            }
 7466|       |
 7467|       |            case 0xCB: // float 64
 7468|       |            {
 7469|       |                double number;
 7470|       |                return get_number(input_format_t::msgpack, number) and sax->number_float(static_cast<number_float_t>(number), "");
 7471|       |            }
 7472|       |
 7473|       |            case 0xCC: // uint 8
 7474|       |            {
 7475|       |                uint8_t number;
 7476|       |                return get_number(input_format_t::msgpack, number) and sax->number_unsigned(number);
 7477|       |            }
 7478|       |
 7479|       |            case 0xCD: // uint 16
 7480|       |            {
 7481|       |                uint16_t number;
 7482|       |                return get_number(input_format_t::msgpack, number) and sax->number_unsigned(number);
 7483|       |            }
 7484|       |
 7485|       |            case 0xCE: // uint 32
 7486|       |            {
 7487|       |                uint32_t number;
 7488|       |                return get_number(input_format_t::msgpack, number) and sax->number_unsigned(number);
 7489|       |            }
 7490|       |
 7491|       |            case 0xCF: // uint 64
 7492|       |            {
 7493|       |                uint64_t number;
 7494|       |                return get_number(input_format_t::msgpack, number) and sax->number_unsigned(number);
 7495|       |            }
 7496|       |
 7497|       |            case 0xD0: // int 8
 7498|       |            {
 7499|       |                int8_t number;
 7500|       |                return get_number(input_format_t::msgpack, number) and sax->number_integer(number);
 7501|       |            }
 7502|       |
 7503|       |            case 0xD1: // int 16
 7504|       |            {
 7505|       |                int16_t number;
 7506|       |                return get_number(input_format_t::msgpack, number) and sax->number_integer(number);
 7507|       |            }
 7508|       |
 7509|       |            case 0xD2: // int 32
 7510|       |            {
 7511|       |                int32_t number;
 7512|       |                return get_number(input_format_t::msgpack, number) and sax->number_integer(number);
 7513|       |            }
 7514|       |
 7515|       |            case 0xD3: // int 64
 7516|       |            {
 7517|       |                int64_t number;
 7518|       |                return get_number(input_format_t::msgpack, number) and sax->number_integer(number);
 7519|       |            }
 7520|       |
 7521|       |            case 0xD9: // str 8
 7522|       |            case 0xDA: // str 16
 7523|       |            case 0xDB: // str 32
 7524|       |            {
 7525|       |                string_t s;
 7526|       |                return get_msgpack_string(s) and sax->string(s);
 7527|       |            }
 7528|       |
 7529|       |            case 0xDC: // array 16
 7530|       |            {
 7531|       |                uint16_t len;
 7532|       |                return get_number(input_format_t::msgpack, len) and get_msgpack_array(static_cast<std::size_t>(len));
 7533|       |            }
 7534|       |
 7535|       |            case 0xDD: // array 32
 7536|       |            {
 7537|       |                uint32_t len;
 7538|       |                return get_number(input_format_t::msgpack, len) and get_msgpack_array(static_cast<std::size_t>(len));
 7539|       |            }
 7540|       |
 7541|       |            case 0xDE: // map 16
 7542|       |            {
 7543|       |                uint16_t len;
 7544|       |                return get_number(input_format_t::msgpack, len) and get_msgpack_object(static_cast<std::size_t>(len));
 7545|       |            }
 7546|       |
 7547|       |            case 0xDF: // map 32
 7548|       |            {
 7549|       |                uint32_t len;
 7550|       |                return get_number(input_format_t::msgpack, len) and get_msgpack_object(static_cast<std::size_t>(len));
 7551|       |            }
 7552|       |
 7553|       |            // negative fixint
 7554|       |            case 0xE0:
 7555|       |            case 0xE1:
 7556|       |            case 0xE2:
 7557|       |            case 0xE3:
 7558|       |            case 0xE4:
 7559|       |            case 0xE5:
 7560|       |            case 0xE6:
 7561|       |            case 0xE7:
 7562|       |            case 0xE8:
 7563|       |            case 0xE9:
 7564|       |            case 0xEA:
 7565|       |            case 0xEB:
 7566|       |            case 0xEC:
 7567|       |            case 0xED:
 7568|       |            case 0xEE:
 7569|       |            case 0xEF:
 7570|       |            case 0xF0:
 7571|       |            case 0xF1:
 7572|       |            case 0xF2:
 7573|       |            case 0xF3:
 7574|       |            case 0xF4:
 7575|       |            case 0xF5:
 7576|       |            case 0xF6:
 7577|       |            case 0xF7:
 7578|       |            case 0xF8:
 7579|       |            case 0xF9:
 7580|       |            case 0xFA:
 7581|       |            case 0xFB:
 7582|       |            case 0xFC:
 7583|       |            case 0xFD:
 7584|       |            case 0xFE:
 7585|       |            case 0xFF:
 7586|       |                return sax->number_integer(static_cast<int8_t>(current));
 7587|       |
 7588|       |            default: // anything else
 7589|       |            {
 7590|       |                auto last_token = get_token_string();
 7591|       |                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format_t::msgpack, "invalid byte: 0x" + last_token, "value")));
 7592|       |            }
 7593|       |        }
 7594|       |    }
 7595|       |
 7596|       |    /*!
 7597|       |    @brief reads a MessagePack string
 7598|       |
 7599|       |    This function first reads starting bytes to determine the expected
 7600|       |    string length and then copies this number of bytes into a string.
 7601|       |
 7602|       |    @param[out] result  created string
 7603|       |
 7604|       |    @return whether string creation completed
 7605|       |    */
 7606|       |    bool get_msgpack_string(string_t& result)
 7607|       |    {
 7608|       |        if (JSON_UNLIKELY(not unexpect_eof(input_format_t::msgpack, "string")))
 7609|       |        {
 7610|       |            return false;
 7611|       |        }
 7612|       |
 7613|       |        switch (current)
 7614|       |        {
 7615|       |            // fixstr
 7616|       |            case 0xA0:
 7617|       |            case 0xA1:
 7618|       |            case 0xA2:
 7619|       |            case 0xA3:
 7620|       |            case 0xA4:
 7621|       |            case 0xA5:
 7622|       |            case 0xA6:
 7623|       |            case 0xA7:
 7624|       |            case 0xA8:
 7625|       |            case 0xA9:
 7626|       |            case 0xAA:
 7627|       |            case 0xAB:
 7628|       |            case 0xAC:
 7629|       |            case 0xAD:
 7630|       |            case 0xAE:
 7631|       |            case 0xAF:
 7632|       |            case 0xB0:
 7633|       |            case 0xB1:
 7634|       |            case 0xB2:
 7635|       |            case 0xB3:
 7636|       |            case 0xB4:
 7637|       |            case 0xB5:
 7638|       |            case 0xB6:
 7639|       |            case 0xB7:
 7640|       |            case 0xB8:
 7641|       |            case 0xB9:
 7642|       |            case 0xBA:
 7643|       |            case 0xBB:
 7644|       |            case 0xBC:
 7645|       |            case 0xBD:
 7646|       |            case 0xBE:
 7647|       |            case 0xBF:
 7648|       |            {
 7649|       |                return get_string(input_format_t::msgpack, current & 0x1F, result);
 7650|       |            }
 7651|       |
 7652|       |            case 0xD9: // str 8
 7653|       |            {
 7654|       |                uint8_t len;
 7655|       |                return get_number(input_format_t::msgpack, len) and get_string(input_format_t::msgpack, len, result);
 7656|       |            }
 7657|       |
 7658|       |            case 0xDA: // str 16
 7659|       |            {
 7660|       |                uint16_t len;
 7661|       |                return get_number(input_format_t::msgpack, len) and get_string(input_format_t::msgpack, len, result);
 7662|       |            }
 7663|       |
 7664|       |            case 0xDB: // str 32
 7665|       |            {
 7666|       |                uint32_t len;
 7667|       |                return get_number(input_format_t::msgpack, len) and get_string(input_format_t::msgpack, len, result);
 7668|       |            }
 7669|       |
 7670|       |            default:
 7671|       |            {
 7672|       |                auto last_token = get_token_string();
 7673|       |                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format_t::msgpack, "expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x" + last_token, "string")));
 7674|       |            }
 7675|       |        }
 7676|       |    }
 7677|       |
 7678|       |    /*!
 7679|       |    @param[in] len  the length of the array
 7680|       |    @return whether array creation completed
 7681|       |    */
 7682|       |    bool get_msgpack_array(const std::size_t len)
 7683|       |    {
 7684|       |        if (JSON_UNLIKELY(not sax->start_array(len)))
 7685|       |        {
 7686|       |            return false;
 7687|       |        }
 7688|       |
 7689|       |        for (std::size_t i = 0; i < len; ++i)
 7690|       |        {
 7691|       |            if (JSON_UNLIKELY(not parse_msgpack_internal()))
 7692|       |            {
 7693|       |                return false;
 7694|       |            }
 7695|       |        }
 7696|       |
 7697|       |        return sax->end_array();
 7698|       |    }
 7699|       |
 7700|       |    /*!
 7701|       |    @param[in] len  the length of the object
 7702|       |    @return whether object creation completed
 7703|       |    */
 7704|       |    bool get_msgpack_object(const std::size_t len)
 7705|       |    {
 7706|       |        if (JSON_UNLIKELY(not sax->start_object(len)))
 7707|       |        {
 7708|       |            return false;
 7709|       |        }
 7710|       |
 7711|       |        string_t key;
 7712|       |        for (std::size_t i = 0; i < len; ++i)
 7713|       |        {
 7714|       |            get();
 7715|       |            if (JSON_UNLIKELY(not get_msgpack_string(key) or not sax->key(key)))
 7716|       |            {
 7717|       |                return false;
 7718|       |            }
 7719|       |
 7720|       |            if (JSON_UNLIKELY(not parse_msgpack_internal()))
 7721|       |            {
 7722|       |                return false;
 7723|       |            }
 7724|       |            key.clear();
 7725|       |        }
 7726|       |
 7727|       |        return sax->end_object();
 7728|       |    }
 7729|       |
 7730|       |    ////////////
 7731|       |    // UBJSON //
 7732|       |    ////////////
 7733|       |
 7734|       |    /*!
 7735|       |    @param[in] get_char  whether a new character should be retrieved from the
 7736|       |                         input (true, default) or whether the last read
 7737|       |                         character should be considered instead
 7738|       |
 7739|       |    @return whether a valid UBJSON value was passed to the SAX parser
 7740|       |    */
 7741|       |    bool parse_ubjson_internal(const bool get_char = true)
 7742|       |    {
 7743|       |        return get_ubjson_value(get_char ? get_ignore_noop() : current);
 7744|       |    }
 7745|       |
 7746|       |    /*!
 7747|       |    @brief reads a UBJSON string
 7748|       |
 7749|       |    This function is either called after reading the 'S' byte explicitly
 7750|       |    indicating a string, or in case of an object key where the 'S' byte can be
 7751|       |    left out.
 7752|       |
 7753|       |    @param[out] result   created string
 7754|       |    @param[in] get_char  whether a new character should be retrieved from the
 7755|       |                         input (true, default) or whether the last read
 7756|       |                         character should be considered instead
 7757|       |
 7758|       |    @return whether string creation completed
 7759|       |    */
 7760|       |    bool get_ubjson_string(string_t& result, const bool get_char = true)
 7761|       |    {
 7762|       |        if (get_char)
 7763|       |        {
 7764|       |            get();  // TODO: may we ignore N here?
 7765|       |        }
 7766|       |
 7767|       |        if (JSON_UNLIKELY(not unexpect_eof(input_format_t::ubjson, "value")))
 7768|       |        {
 7769|       |            return false;
 7770|       |        }
 7771|       |
 7772|       |        switch (current)
 7773|       |        {
 7774|       |            case 'U':
 7775|       |            {
 7776|       |                uint8_t len;
 7777|       |                return get_number(input_format_t::ubjson, len) and get_string(input_format_t::ubjson, len, result);
 7778|       |            }
 7779|       |
 7780|       |            case 'i':
 7781|       |            {
 7782|       |                int8_t len;
 7783|       |                return get_number(input_format_t::ubjson, len) and get_string(input_format_t::ubjson, len, result);
 7784|       |            }
 7785|       |
 7786|       |            case 'I':
 7787|       |            {
 7788|       |                int16_t len;
 7789|       |                return get_number(input_format_t::ubjson, len) and get_string(input_format_t::ubjson, len, result);
 7790|       |            }
 7791|       |
 7792|       |            case 'l':
 7793|       |            {
 7794|       |                int32_t len;
 7795|       |                return get_number(input_format_t::ubjson, len) and get_string(input_format_t::ubjson, len, result);
 7796|       |            }
 7797|       |
 7798|       |            case 'L':
 7799|       |            {
 7800|       |                int64_t len;
 7801|       |                return get_number(input_format_t::ubjson, len) and get_string(input_format_t::ubjson, len, result);
 7802|       |            }
 7803|       |
 7804|       |            default:
 7805|       |                auto last_token = get_token_string();
 7806|       |                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format_t::ubjson, "expected length type specification (U, i, I, l, L); last byte: 0x" + last_token, "string")));
 7807|       |        }
 7808|       |    }
 7809|       |
 7810|       |    /*!
 7811|       |    @param[out] result  determined size
 7812|       |    @return whether size determination completed
 7813|       |    */
 7814|       |    bool get_ubjson_size_value(std::size_t& result)
 7815|       |    {
 7816|       |        switch (get_ignore_noop())
 7817|       |        {
 7818|       |            case 'U':
 7819|       |            {
 7820|       |                uint8_t number;
 7821|       |                if (JSON_UNLIKELY(not get_number(input_format_t::ubjson, number)))
 7822|       |                {
 7823|       |                    return false;
 7824|       |                }
 7825|       |                result = static_cast<std::size_t>(number);
 7826|       |                return true;
 7827|       |            }
 7828|       |
 7829|       |            case 'i':
 7830|       |            {
 7831|       |                int8_t number;
 7832|       |                if (JSON_UNLIKELY(not get_number(input_format_t::ubjson, number)))
 7833|       |                {
 7834|       |                    return false;
 7835|       |                }
 7836|       |                result = static_cast<std::size_t>(number);
 7837|       |                return true;
 7838|       |            }
 7839|       |
 7840|       |            case 'I':
 7841|       |            {
 7842|       |                int16_t number;
 7843|       |                if (JSON_UNLIKELY(not get_number(input_format_t::ubjson, number)))
 7844|       |                {
 7845|       |                    return false;
 7846|       |                }
 7847|       |                result = static_cast<std::size_t>(number);
 7848|       |                return true;
 7849|       |            }
 7850|       |
 7851|       |            case 'l':
 7852|       |            {
 7853|       |                int32_t number;
 7854|       |                if (JSON_UNLIKELY(not get_number(input_format_t::ubjson, number)))
 7855|       |                {
 7856|       |                    return false;
 7857|       |                }
 7858|       |                result = static_cast<std::size_t>(number);
 7859|       |                return true;
 7860|       |            }
 7861|       |
 7862|       |            case 'L':
 7863|       |            {
 7864|       |                int64_t number;
 7865|       |                if (JSON_UNLIKELY(not get_number(input_format_t::ubjson, number)))
 7866|       |                {
 7867|       |                    return false;
 7868|       |                }
 7869|       |                result = static_cast<std::size_t>(number);
 7870|       |                return true;
 7871|       |            }
 7872|       |
 7873|       |            default:
 7874|       |            {
 7875|       |                auto last_token = get_token_string();
 7876|       |                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format_t::ubjson, "expected length type specification (U, i, I, l, L) after '#'; last byte: 0x" + last_token, "size")));
 7877|       |            }
 7878|       |        }
 7879|       |    }
 7880|       |
 7881|       |    /*!
 7882|       |    @brief determine the type and size for a container
 7883|       |
 7884|       |    In the optimized UBJSON format, a type and a size can be provided to allow
 7885|       |    for a more compact representation.
 7886|       |
 7887|       |    @param[out] result  pair of the size and the type
 7888|       |
 7889|       |    @return whether pair creation completed
 7890|       |    */
 7891|       |    bool get_ubjson_size_type(std::pair<std::size_t, int>& result)
 7892|       |    {
 7893|       |        result.first = string_t::npos; // size
 7894|       |        result.second = 0; // type
 7895|       |
 7896|       |        get_ignore_noop();
 7897|       |
 7898|       |        if (current == '$')
 7899|       |        {
 7900|       |            result.second = get();  // must not ignore 'N', because 'N' maybe the type
 7901|       |            if (JSON_UNLIKELY(not unexpect_eof(input_format_t::ubjson, "type")))
 7902|       |            {
 7903|       |                return false;
 7904|       |            }
 7905|       |
 7906|       |            get_ignore_noop();
 7907|       |            if (JSON_UNLIKELY(current != '#'))
 7908|       |            {
 7909|       |                if (JSON_UNLIKELY(not unexpect_eof(input_format_t::ubjson, "value")))
 7910|       |                {
 7911|       |                    return false;
 7912|       |                }
 7913|       |                auto last_token = get_token_string();
 7914|       |                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format_t::ubjson, "expected '#' after type information; last byte: 0x" + last_token, "size")));
 7915|       |            }
 7916|       |
 7917|       |            return get_ubjson_size_value(result.first);
 7918|       |        }
 7919|       |        else if (current == '#')
 7920|       |        {
 7921|       |            return get_ubjson_size_value(result.first);
 7922|       |        }
 7923|       |        return true;
 7924|       |    }
 7925|       |
 7926|       |    /*!
 7927|       |    @param prefix  the previously read or set type prefix
 7928|       |    @return whether value creation completed
 7929|       |    */
 7930|       |    bool get_ubjson_value(const int prefix)
 7931|       |    {
 7932|       |        switch (prefix)
 7933|       |        {
 7934|       |            case std::char_traits<char>::eof():  // EOF
 7935|       |                return unexpect_eof(input_format_t::ubjson, "value");
 7936|       |
 7937|       |            case 'T':  // true
 7938|       |                return sax->boolean(true);
 7939|       |            case 'F':  // false
 7940|       |                return sax->boolean(false);
 7941|       |
 7942|       |            case 'Z':  // null
 7943|       |                return sax->null();
 7944|       |
 7945|       |            case 'U':
 7946|       |            {
 7947|       |                uint8_t number;
 7948|       |                return get_number(input_format_t::ubjson, number) and sax->number_unsigned(number);
 7949|       |            }
 7950|       |
 7951|       |            case 'i':
 7952|       |            {
 7953|       |                int8_t number;
 7954|       |                return get_number(input_format_t::ubjson, number) and sax->number_integer(number);
 7955|       |            }
 7956|       |
 7957|       |            case 'I':
 7958|       |            {
 7959|       |                int16_t number;
 7960|       |                return get_number(input_format_t::ubjson, number) and sax->number_integer(number);
 7961|       |            }
 7962|       |
 7963|       |            case 'l':
 7964|       |            {
 7965|       |                int32_t number;
 7966|       |                return get_number(input_format_t::ubjson, number) and sax->number_integer(number);
 7967|       |            }
 7968|       |
 7969|       |            case 'L':
 7970|       |            {
 7971|       |                int64_t number;
 7972|       |                return get_number(input_format_t::ubjson, number) and sax->number_integer(number);
 7973|       |            }
 7974|       |
 7975|       |            case 'd':
 7976|       |            {
 7977|       |                float number;
 7978|       |                return get_number(input_format_t::ubjson, number) and sax->number_float(static_cast<number_float_t>(number), "");
 7979|       |            }
 7980|       |
 7981|       |            case 'D':
 7982|       |            {
 7983|       |                double number;
 7984|       |                return get_number(input_format_t::ubjson, number) and sax->number_float(static_cast<number_float_t>(number), "");
 7985|       |            }
 7986|       |
 7987|       |            case 'C':  // char
 7988|       |            {
 7989|       |                get();
 7990|       |                if (JSON_UNLIKELY(not unexpect_eof(input_format_t::ubjson, "char")))
 7991|       |                {
 7992|       |                    return false;
 7993|       |                }
 7994|       |                if (JSON_UNLIKELY(current > 127))
 7995|       |                {
 7996|       |                    auto last_token = get_token_string();
 7997|       |                    return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format_t::ubjson, "byte after 'C' must be in range 0x00..0x7F; last byte: 0x" + last_token, "char")));
 7998|       |                }
 7999|       |                string_t s(1, static_cast<char>(current));
 8000|       |                return sax->string(s);
 8001|       |            }
 8002|       |
 8003|       |            case 'S':  // string
 8004|       |            {
 8005|       |                string_t s;
 8006|       |                return get_ubjson_string(s) and sax->string(s);
 8007|       |            }
 8008|       |
 8009|       |            case '[':  // array
 8010|       |                return get_ubjson_array();
 8011|       |
 8012|       |            case '{':  // object
 8013|       |                return get_ubjson_object();
 8014|       |
 8015|       |            default: // anything else
 8016|       |            {
 8017|       |                auto last_token = get_token_string();
 8018|       |                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format_t::ubjson, "invalid byte: 0x" + last_token, "value")));
 8019|       |            }
 8020|       |        }
 8021|       |    }
 8022|       |
 8023|       |    /*!
 8024|       |    @return whether array creation completed
 8025|       |    */
 8026|       |    bool get_ubjson_array()
 8027|       |    {
 8028|       |        std::pair<std::size_t, int> size_and_type;
 8029|       |        if (JSON_UNLIKELY(not get_ubjson_size_type(size_and_type)))
 8030|       |        {
 8031|       |            return false;
 8032|       |        }
 8033|       |
 8034|       |        if (size_and_type.first != string_t::npos)
 8035|       |        {
 8036|       |            if (JSON_UNLIKELY(not sax->start_array(size_and_type.first)))
 8037|       |            {
 8038|       |                return false;
 8039|       |            }
 8040|       |
 8041|       |            if (size_and_type.second != 0)
 8042|       |            {
 8043|       |                if (size_and_type.second != 'N')
 8044|       |                {
 8045|       |                    for (std::size_t i = 0; i < size_and_type.first; ++i)
 8046|       |                    {
 8047|       |                        if (JSON_UNLIKELY(not get_ubjson_value(size_and_type.second)))
 8048|       |                        {
 8049|       |                            return false;
 8050|       |                        }
 8051|       |                    }
 8052|       |                }
 8053|       |            }
 8054|       |            else
 8055|       |            {
 8056|       |                for (std::size_t i = 0; i < size_and_type.first; ++i)
 8057|       |                {
 8058|       |                    if (JSON_UNLIKELY(not parse_ubjson_internal()))
 8059|       |                    {
 8060|       |                        return false;
 8061|       |                    }
 8062|       |                }
 8063|       |            }
 8064|       |        }
 8065|       |        else
 8066|       |        {
 8067|       |            if (JSON_UNLIKELY(not sax->start_array(std::size_t(-1))))
 8068|       |            {
 8069|       |                return false;
 8070|       |            }
 8071|       |
 8072|       |            while (current != ']')
 8073|       |            {
 8074|       |                if (JSON_UNLIKELY(not parse_ubjson_internal(false)))
 8075|       |                {
 8076|       |                    return false;
 8077|       |                }
 8078|       |                get_ignore_noop();
 8079|       |            }
 8080|       |        }
 8081|       |
 8082|       |        return sax->end_array();
 8083|       |    }
 8084|       |
 8085|       |    /*!
 8086|       |    @return whether object creation completed
 8087|       |    */
 8088|       |    bool get_ubjson_object()
 8089|       |    {
 8090|       |        std::pair<std::size_t, int> size_and_type;
 8091|       |        if (JSON_UNLIKELY(not get_ubjson_size_type(size_and_type)))
 8092|       |        {
 8093|       |            return false;
 8094|       |        }
 8095|       |
 8096|       |        string_t key;
 8097|       |        if (size_and_type.first != string_t::npos)
 8098|       |        {
 8099|       |            if (JSON_UNLIKELY(not sax->start_object(size_and_type.first)))
 8100|       |            {
 8101|       |                return false;
 8102|       |            }
 8103|       |
 8104|       |            if (size_and_type.second != 0)
 8105|       |            {
 8106|       |                for (std::size_t i = 0; i < size_and_type.first; ++i)
 8107|       |                {
 8108|       |                    if (JSON_UNLIKELY(not get_ubjson_string(key) or not sax->key(key)))
 8109|       |                    {
 8110|       |                        return false;
 8111|       |                    }
 8112|       |                    if (JSON_UNLIKELY(not get_ubjson_value(size_and_type.second)))
 8113|       |                    {
 8114|       |                        return false;
 8115|       |                    }
 8116|       |                    key.clear();
 8117|       |                }
 8118|       |            }
 8119|       |            else
 8120|       |            {
 8121|       |                for (std::size_t i = 0; i < size_and_type.first; ++i)
 8122|       |                {
 8123|       |                    if (JSON_UNLIKELY(not get_ubjson_string(key) or not sax->key(key)))
 8124|       |                    {
 8125|       |                        return false;
 8126|       |                    }
 8127|       |                    if (JSON_UNLIKELY(not parse_ubjson_internal()))
 8128|       |                    {
 8129|       |                        return false;
 8130|       |                    }
 8131|       |                    key.clear();
 8132|       |                }
 8133|       |            }
 8134|       |        }
 8135|       |        else
 8136|       |        {
 8137|       |            if (JSON_UNLIKELY(not sax->start_object(std::size_t(-1))))
 8138|       |            {
 8139|       |                return false;
 8140|       |            }
 8141|       |
 8142|       |            while (current != '}')
 8143|       |            {
 8144|       |                if (JSON_UNLIKELY(not get_ubjson_string(key, false) or not sax->key(key)))
 8145|       |                {
 8146|       |                    return false;
 8147|       |                }
 8148|       |                if (JSON_UNLIKELY(not parse_ubjson_internal()))
 8149|       |                {
 8150|       |                    return false;
 8151|       |                }
 8152|       |                get_ignore_noop();
 8153|       |                key.clear();
 8154|       |            }
 8155|       |        }
 8156|       |
 8157|       |        return sax->end_object();
 8158|       |    }
 8159|       |
 8160|       |    ///////////////////////
 8161|       |    // Utility functions //
 8162|       |    ///////////////////////
 8163|       |
 8164|       |    /*!
 8165|       |    @brief get next character from the input
 8166|       |
 8167|       |    This function provides the interface to the used input adapter. It does
 8168|       |    not throw in case the input reached EOF, but returns a -'ve valued
 8169|       |    `std::char_traits<char>::eof()` in that case.
 8170|       |
 8171|       |    @return character read from the input
 8172|       |    */
 8173|       |    int get()
 8174|       |    {
 8175|       |        ++chars_read;
 8176|       |        return (current = ia->get_character());
 8177|       |    }
 8178|       |
 8179|       |    /*!
 8180|       |    @return character read from the input after ignoring all 'N' entries
 8181|       |    */
 8182|       |    int get_ignore_noop()
 8183|       |    {
 8184|       |        do
 8185|       |        {
 8186|       |            get();
 8187|       |        }
 8188|       |        while (current == 'N');
 8189|       |
 8190|       |        return current;
 8191|       |    }
 8192|       |
 8193|       |    /*
 8194|       |    @brief read a number from the input
 8195|       |
 8196|       |    @tparam NumberType the type of the number
 8197|       |    @param[in] format   the current format (for diagnostics)
 8198|       |    @param[out] result  number of type @a NumberType
 8199|       |
 8200|       |    @return whether conversion completed
 8201|       |
 8202|       |    @note This function needs to respect the system's endianess, because
 8203|       |          bytes in CBOR, MessagePack, and UBJSON are stored in network order
 8204|       |          (big endian) and therefore need reordering on little endian systems.
 8205|       |    */
 8206|       |    template<typename NumberType, bool InputIsLittleEndian = false>
 8207|       |    bool get_number(const input_format_t format, NumberType& result)
 8208|       |    {
 8209|       |        // step 1: read input into array with system's byte order
 8210|       |        std::array<uint8_t, sizeof(NumberType)> vec;
 8211|       |        for (std::size_t i = 0; i < sizeof(NumberType); ++i)
 8212|       |        {
 8213|       |            get();
 8214|       |            if (JSON_UNLIKELY(not unexpect_eof(format, "number")))
 8215|       |            {
 8216|       |                return false;
 8217|       |            }
 8218|       |
 8219|       |            // reverse byte order prior to conversion if necessary
 8220|       |            if (is_little_endian && !InputIsLittleEndian)
 8221|       |            {
 8222|       |                vec[sizeof(NumberType) - i - 1] = static_cast<uint8_t>(current);
 8223|       |            }
 8224|       |            else
 8225|       |            {
 8226|       |                vec[i] = static_cast<uint8_t>(current); // LCOV_EXCL_LINE
 8227|       |            }
 8228|       |        }
 8229|       |
 8230|       |        // step 2: convert array into number of type T and return
 8231|       |        std::memcpy(&result, vec.data(), sizeof(NumberType));
 8232|       |        return true;
 8233|       |    }
 8234|       |
 8235|       |    /*!
 8236|       |    @brief create a string by reading characters from the input
 8237|       |
 8238|       |    @tparam NumberType the type of the number
 8239|       |    @param[in] format the current format (for diagnostics)
 8240|       |    @param[in] len number of characters to read
 8241|       |    @param[out] result string created by reading @a len bytes
 8242|       |
 8243|       |    @return whether string creation completed
 8244|       |
 8245|       |    @note We can not reserve @a len bytes for the result, because @a len
 8246|       |          may be too large. Usually, @ref unexpect_eof() detects the end of
 8247|       |          the input before we run out of string memory.
 8248|       |    */
 8249|       |    template<typename NumberType>
 8250|       |    bool get_string(const input_format_t format,
 8251|       |                    const NumberType len,
 8252|       |                    string_t& result)
 8253|       |    {
 8254|       |        bool success = true;
 8255|       |        std::generate_n(std::back_inserter(result), len, [this, &success, &format]()
 8256|       |        {
 8257|       |            get();
 8258|       |            if (JSON_UNLIKELY(not unexpect_eof(format, "string")))
 8259|       |            {
 8260|       |                success = false;
 8261|       |            }
 8262|       |            return static_cast<char>(current);
 8263|       |        });
 8264|       |        return success;
 8265|       |    }
 8266|       |
 8267|       |    /*!
 8268|       |    @param[in] format   the current format (for diagnostics)
 8269|       |    @param[in] context  further context information (for diagnostics)
 8270|       |    @return whether the last read character is not EOF
 8271|       |    */
 8272|       |    bool unexpect_eof(const input_format_t format, const char* context) const
 8273|       |    {
 8274|       |        if (JSON_UNLIKELY(current == std::char_traits<char>::eof()))
 8275|       |        {
 8276|       |            return sax->parse_error(chars_read, "<end of file>",
 8277|       |                                    parse_error::create(110, chars_read, exception_message(format, "unexpected end of input", context)));
 8278|       |        }
 8279|       |        return true;
 8280|       |    }
 8281|       |
 8282|       |    /*!
 8283|       |    @return a string representation of the last read byte
 8284|       |    */
 8285|       |    std::string get_token_string() const
 8286|       |    {
 8287|       |        char cr[3];
 8288|       |        (std::snprintf)(cr, 3, "%.2hhX", static_cast<unsigned char>(current));
 8289|       |        return std::string{cr};
 8290|       |    }
 8291|       |
 8292|       |    /*!
 8293|       |    @param[in] format   the current format
 8294|       |    @param[in] detail   a detailed error message
 8295|       |    @param[in] context  further contect information
 8296|       |    @return a message string to use in the parse_error exceptions
 8297|       |    */
 8298|       |    std::string exception_message(const input_format_t format,
 8299|       |                                  const std::string& detail,
 8300|       |                                  const std::string& context) const
 8301|       |    {
 8302|       |        std::string error_msg = "syntax error while parsing ";
 8303|       |
 8304|       |        switch (format)
 8305|       |        {
 8306|       |            case input_format_t::cbor:
 8307|       |                error_msg += "CBOR";
 8308|       |                break;
 8309|       |
 8310|       |            case input_format_t::msgpack:
 8311|       |                error_msg += "MessagePack";
 8312|       |                break;
 8313|       |
 8314|       |            case input_format_t::ubjson:
 8315|       |                error_msg += "UBJSON";
 8316|       |                break;
 8317|       |
 8318|       |            case input_format_t::bson:
 8319|       |                error_msg += "BSON";
 8320|       |                break;
 8321|       |
 8322|       |            // LCOV_EXCL_START
 8323|       |            default:
 8324|       |                assert(false);
 8325|       |                // LCOV_EXCL_STOP
 8326|       |        }
 8327|       |
 8328|       |        return error_msg + " " + context + ": " + detail;
 8329|       |    }
 8330|       |
 8331|       |  private:
 8332|       |    /// input adapter
 8333|       |    input_adapter_t ia = nullptr;
 8334|       |
 8335|       |    /// the current character
 8336|       |    int current = std::char_traits<char>::eof();
 8337|       |
 8338|       |    /// the number of characters read
 8339|       |    std::size_t chars_read = 0;
 8340|       |
 8341|       |    /// whether we can assume little endianess
 8342|       |    const bool is_little_endian = little_endianess();
 8343|       |
 8344|       |    /// the SAX parser
 8345|       |    json_sax_t* sax = nullptr;
 8346|       |};
 8347|       |}  // namespace detail
 8348|       |}  // namespace nlohmann
 8349|       |
 8350|       |// #include <nlohmann/detail/output/binary_writer.hpp>
 8351|       |
 8352|       |
 8353|       |#include <algorithm> // reverse
 8354|       |#include <array> // array
 8355|       |#include <cstdint> // uint8_t, uint16_t, uint32_t, uint64_t
 8356|       |#include <cstring> // memcpy
 8357|       |#include <limits> // numeric_limits
 8358|       |
 8359|       |// #include <nlohmann/detail/input/binary_reader.hpp>
 8360|       |
 8361|       |// #include <nlohmann/detail/output/output_adapters.hpp>
 8362|       |
 8363|       |
 8364|       |namespace nlohmann
 8365|       |{
 8366|       |namespace detail
 8367|       |{
 8368|       |///////////////////
 8369|       |// binary writer //
 8370|       |///////////////////
 8371|       |
 8372|       |/*!
 8373|       |@brief serialization to CBOR and MessagePack values
 8374|       |*/
 8375|       |template<typename BasicJsonType, typename CharType>
 8376|       |class binary_writer
 8377|       |{
 8378|       |    using string_t = typename BasicJsonType::string_t;
 8379|       |
 8380|       |  public:
 8381|       |    /*!
 8382|       |    @brief create a binary writer
 8383|       |
 8384|       |    @param[in] adapter  output adapter to write to
 8385|       |    */
 8386|       |    explicit binary_writer(output_adapter_t<CharType> adapter) : oa(adapter)
 8387|       |    {
 8388|       |        assert(oa);
 8389|       |    }
 8390|       |
 8391|       |    /*!
 8392|       |    @param[in] j  JSON value to serialize
 8393|       |    @pre       j.type() == value_t::object
 8394|       |    */
 8395|       |    void write_bson(const BasicJsonType& j)
 8396|       |    {
 8397|       |        switch (j.type())
 8398|       |        {
 8399|       |            case value_t::object:
 8400|       |            {
 8401|       |                write_bson_object(*j.m_value.object);
 8402|       |                break;
 8403|       |            }
 8404|       |
 8405|       |            default:
 8406|       |            {
 8407|       |                JSON_THROW(type_error::create(317, "to serialize to BSON, top-level type must be object, but is " + std::string(j.type_name())));
 8408|       |            }
 8409|       |        }
 8410|       |    }
 8411|       |
 8412|       |    /*!
 8413|       |    @param[in] j  JSON value to serialize
 8414|       |    */
 8415|       |    void write_cbor(const BasicJsonType& j)
 8416|       |    {
 8417|       |        switch (j.type())
 8418|       |        {
 8419|       |            case value_t::null:
 8420|       |            {
 8421|       |                oa->write_character(to_char_type(0xF6));
 8422|       |                break;
 8423|       |            }
 8424|       |
 8425|       |            case value_t::boolean:
 8426|       |            {
 8427|       |                oa->write_character(j.m_value.boolean
 8428|       |                                    ? to_char_type(0xF5)
 8429|       |                                    : to_char_type(0xF4));
 8430|       |                break;
 8431|       |            }
 8432|       |
 8433|       |            case value_t::number_integer:
 8434|       |            {
 8435|       |                if (j.m_value.number_integer >= 0)
 8436|       |                {
 8437|       |                    // CBOR does not differentiate between positive signed
 8438|       |                    // integers and unsigned integers. Therefore, we used the
 8439|       |                    // code from the value_t::number_unsigned case here.
 8440|       |                    if (j.m_value.number_integer <= 0x17)
 8441|       |                    {
 8442|       |                        write_number(static_cast<uint8_t>(j.m_value.number_integer));
 8443|       |                    }
 8444|       |                    else if (j.m_value.number_integer <= (std::numeric_limits<uint8_t>::max)())
 8445|       |                    {
 8446|       |                        oa->write_character(to_char_type(0x18));
 8447|       |                        write_number(static_cast<uint8_t>(j.m_value.number_integer));
 8448|       |                    }
 8449|       |                    else if (j.m_value.number_integer <= (std::numeric_limits<uint16_t>::max)())
 8450|       |                    {
 8451|       |                        oa->write_character(to_char_type(0x19));
 8452|       |                        write_number(static_cast<uint16_t>(j.m_value.number_integer));
 8453|       |                    }
 8454|       |                    else if (j.m_value.number_integer <= (std::numeric_limits<uint32_t>::max)())
 8455|       |                    {
 8456|       |                        oa->write_character(to_char_type(0x1A));
 8457|       |                        write_number(static_cast<uint32_t>(j.m_value.number_integer));
 8458|       |                    }
 8459|       |                    else
 8460|       |                    {
 8461|       |                        oa->write_character(to_char_type(0x1B));
 8462|       |                        write_number(static_cast<uint64_t>(j.m_value.number_integer));
 8463|       |                    }
 8464|       |                }
 8465|       |                else
 8466|       |                {
 8467|       |                    // The conversions below encode the sign in the first
 8468|       |                    // byte, and the value is converted to a positive number.
 8469|       |                    const auto positive_number = -1 - j.m_value.number_integer;
 8470|       |                    if (j.m_value.number_integer >= -24)
 8471|       |                    {
 8472|       |                        write_number(static_cast<uint8_t>(0x20 + positive_number));
 8473|       |                    }
 8474|       |                    else if (positive_number <= (std::numeric_limits<uint8_t>::max)())
 8475|       |                    {
 8476|       |                        oa->write_character(to_char_type(0x38));
 8477|       |                        write_number(static_cast<uint8_t>(positive_number));
 8478|       |                    }
 8479|       |                    else if (positive_number <= (std::numeric_limits<uint16_t>::max)())
 8480|       |                    {
 8481|       |                        oa->write_character(to_char_type(0x39));
 8482|       |                        write_number(static_cast<uint16_t>(positive_number));
 8483|       |                    }
 8484|       |                    else if (positive_number <= (std::numeric_limits<uint32_t>::max)())
 8485|       |                    {
 8486|       |                        oa->write_character(to_char_type(0x3A));
 8487|       |                        write_number(static_cast<uint32_t>(positive_number));
 8488|       |                    }
 8489|       |                    else
 8490|       |                    {
 8491|       |                        oa->write_character(to_char_type(0x3B));
 8492|       |                        write_number(static_cast<uint64_t>(positive_number));
 8493|       |                    }
 8494|       |                }
 8495|       |                break;
 8496|       |            }
 8497|       |
 8498|       |            case value_t::number_unsigned:
 8499|       |            {
 8500|       |                if (j.m_value.number_unsigned <= 0x17)
 8501|       |                {
 8502|       |                    write_number(static_cast<uint8_t>(j.m_value.number_unsigned));
 8503|       |                }
 8504|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<uint8_t>::max)())
 8505|       |                {
 8506|       |                    oa->write_character(to_char_type(0x18));
 8507|       |                    write_number(static_cast<uint8_t>(j.m_value.number_unsigned));
 8508|       |                }
 8509|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<uint16_t>::max)())
 8510|       |                {
 8511|       |                    oa->write_character(to_char_type(0x19));
 8512|       |                    write_number(static_cast<uint16_t>(j.m_value.number_unsigned));
 8513|       |                }
 8514|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<uint32_t>::max)())
 8515|       |                {
 8516|       |                    oa->write_character(to_char_type(0x1A));
 8517|       |                    write_number(static_cast<uint32_t>(j.m_value.number_unsigned));
 8518|       |                }
 8519|       |                else
 8520|       |                {
 8521|       |                    oa->write_character(to_char_type(0x1B));
 8522|       |                    write_number(static_cast<uint64_t>(j.m_value.number_unsigned));
 8523|       |                }
 8524|       |                break;
 8525|       |            }
 8526|       |
 8527|       |            case value_t::number_float:
 8528|       |            {
 8529|       |                oa->write_character(get_cbor_float_prefix(j.m_value.number_float));
 8530|       |                write_number(j.m_value.number_float);
 8531|       |                break;
 8532|       |            }
 8533|       |
 8534|       |            case value_t::string:
 8535|       |            {
 8536|       |                // step 1: write control byte and the string length
 8537|       |                const auto N = j.m_value.string->size();
 8538|       |                if (N <= 0x17)
 8539|       |                {
 8540|       |                    write_number(static_cast<uint8_t>(0x60 + N));
 8541|       |                }
 8542|       |                else if (N <= (std::numeric_limits<uint8_t>::max)())
 8543|       |                {
 8544|       |                    oa->write_character(to_char_type(0x78));
 8545|       |                    write_number(static_cast<uint8_t>(N));
 8546|       |                }
 8547|       |                else if (N <= (std::numeric_limits<uint16_t>::max)())
 8548|       |                {
 8549|       |                    oa->write_character(to_char_type(0x79));
 8550|       |                    write_number(static_cast<uint16_t>(N));
 8551|       |                }
 8552|       |                else if (N <= (std::numeric_limits<uint32_t>::max)())
 8553|       |                {
 8554|       |                    oa->write_character(to_char_type(0x7A));
 8555|       |                    write_number(static_cast<uint32_t>(N));
 8556|       |                }
 8557|       |                // LCOV_EXCL_START
 8558|       |                else if (N <= (std::numeric_limits<uint64_t>::max)())
 8559|       |                {
 8560|       |                    oa->write_character(to_char_type(0x7B));
 8561|       |                    write_number(static_cast<uint64_t>(N));
 8562|       |                }
 8563|       |                // LCOV_EXCL_STOP
 8564|       |
 8565|       |                // step 2: write the string
 8566|       |                oa->write_characters(
 8567|       |                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
 8568|       |                    j.m_value.string->size());
 8569|       |                break;
 8570|       |            }
 8571|       |
 8572|       |            case value_t::array:
 8573|       |            {
 8574|       |                // step 1: write control byte and the array size
 8575|       |                const auto N = j.m_value.array->size();
 8576|       |                if (N <= 0x17)
 8577|       |                {
 8578|       |                    write_number(static_cast<uint8_t>(0x80 + N));
 8579|       |                }
 8580|       |                else if (N <= (std::numeric_limits<uint8_t>::max)())
 8581|       |                {
 8582|       |                    oa->write_character(to_char_type(0x98));
 8583|       |                    write_number(static_cast<uint8_t>(N));
 8584|       |                }
 8585|       |                else if (N <= (std::numeric_limits<uint16_t>::max)())
 8586|       |                {
 8587|       |                    oa->write_character(to_char_type(0x99));
 8588|       |                    write_number(static_cast<uint16_t>(N));
 8589|       |                }
 8590|       |                else if (N <= (std::numeric_limits<uint32_t>::max)())
 8591|       |                {
 8592|       |                    oa->write_character(to_char_type(0x9A));
 8593|       |                    write_number(static_cast<uint32_t>(N));
 8594|       |                }
 8595|       |                // LCOV_EXCL_START
 8596|       |                else if (N <= (std::numeric_limits<uint64_t>::max)())
 8597|       |                {
 8598|       |                    oa->write_character(to_char_type(0x9B));
 8599|       |                    write_number(static_cast<uint64_t>(N));
 8600|       |                }
 8601|       |                // LCOV_EXCL_STOP
 8602|       |
 8603|       |                // step 2: write each element
 8604|       |                for (const auto& el : *j.m_value.array)
 8605|       |                {
 8606|       |                    write_cbor(el);
 8607|       |                }
 8608|       |                break;
 8609|       |            }
 8610|       |
 8611|       |            case value_t::object:
 8612|       |            {
 8613|       |                // step 1: write control byte and the object size
 8614|       |                const auto N = j.m_value.object->size();
 8615|       |                if (N <= 0x17)
 8616|       |                {
 8617|       |                    write_number(static_cast<uint8_t>(0xA0 + N));
 8618|       |                }
 8619|       |                else if (N <= (std::numeric_limits<uint8_t>::max)())
 8620|       |                {
 8621|       |                    oa->write_character(to_char_type(0xB8));
 8622|       |                    write_number(static_cast<uint8_t>(N));
 8623|       |                }
 8624|       |                else if (N <= (std::numeric_limits<uint16_t>::max)())
 8625|       |                {
 8626|       |                    oa->write_character(to_char_type(0xB9));
 8627|       |                    write_number(static_cast<uint16_t>(N));
 8628|       |                }
 8629|       |                else if (N <= (std::numeric_limits<uint32_t>::max)())
 8630|       |                {
 8631|       |                    oa->write_character(to_char_type(0xBA));
 8632|       |                    write_number(static_cast<uint32_t>(N));
 8633|       |                }
 8634|       |                // LCOV_EXCL_START
 8635|       |                else if (N <= (std::numeric_limits<uint64_t>::max)())
 8636|       |                {
 8637|       |                    oa->write_character(to_char_type(0xBB));
 8638|       |                    write_number(static_cast<uint64_t>(N));
 8639|       |                }
 8640|       |                // LCOV_EXCL_STOP
 8641|       |
 8642|       |                // step 2: write each element
 8643|       |                for (const auto& el : *j.m_value.object)
 8644|       |                {
 8645|       |                    write_cbor(el.first);
 8646|       |                    write_cbor(el.second);
 8647|       |                }
 8648|       |                break;
 8649|       |            }
 8650|       |
 8651|       |            default:
 8652|       |                break;
 8653|       |        }
 8654|       |    }
 8655|       |
 8656|       |    /*!
 8657|       |    @param[in] j  JSON value to serialize
 8658|       |    */
 8659|       |    void write_msgpack(const BasicJsonType& j)
 8660|       |    {
 8661|       |        switch (j.type())
 8662|       |        {
 8663|       |            case value_t::null: // nil
 8664|       |            {
 8665|       |                oa->write_character(to_char_type(0xC0));
 8666|       |                break;
 8667|       |            }
 8668|       |
 8669|       |            case value_t::boolean: // true and false
 8670|       |            {
 8671|       |                oa->write_character(j.m_value.boolean
 8672|       |                                    ? to_char_type(0xC3)
 8673|       |                                    : to_char_type(0xC2));
 8674|       |                break;
 8675|       |            }
 8676|       |
 8677|       |            case value_t::number_integer:
 8678|       |            {
 8679|       |                if (j.m_value.number_integer >= 0)
 8680|       |                {
 8681|       |                    // MessagePack does not differentiate between positive
 8682|       |                    // signed integers and unsigned integers. Therefore, we used
 8683|       |                    // the code from the value_t::number_unsigned case here.
 8684|       |                    if (j.m_value.number_unsigned < 128)
 8685|       |                    {
 8686|       |                        // positive fixnum
 8687|       |                        write_number(static_cast<uint8_t>(j.m_value.number_integer));
 8688|       |                    }
 8689|       |                    else if (j.m_value.number_unsigned <= (std::numeric_limits<uint8_t>::max)())
 8690|       |                    {
 8691|       |                        // uint 8
 8692|       |                        oa->write_character(to_char_type(0xCC));
 8693|       |                        write_number(static_cast<uint8_t>(j.m_value.number_integer));
 8694|       |                    }
 8695|       |                    else if (j.m_value.number_unsigned <= (std::numeric_limits<uint16_t>::max)())
 8696|       |                    {
 8697|       |                        // uint 16
 8698|       |                        oa->write_character(to_char_type(0xCD));
 8699|       |                        write_number(static_cast<uint16_t>(j.m_value.number_integer));
 8700|       |                    }
 8701|       |                    else if (j.m_value.number_unsigned <= (std::numeric_limits<uint32_t>::max)())
 8702|       |                    {
 8703|       |                        // uint 32
 8704|       |                        oa->write_character(to_char_type(0xCE));
 8705|       |                        write_number(static_cast<uint32_t>(j.m_value.number_integer));
 8706|       |                    }
 8707|       |                    else if (j.m_value.number_unsigned <= (std::numeric_limits<uint64_t>::max)())
 8708|       |                    {
 8709|       |                        // uint 64
 8710|       |                        oa->write_character(to_char_type(0xCF));
 8711|       |                        write_number(static_cast<uint64_t>(j.m_value.number_integer));
 8712|       |                    }
 8713|       |                }
 8714|       |                else
 8715|       |                {
 8716|       |                    if (j.m_value.number_integer >= -32)
 8717|       |                    {
 8718|       |                        // negative fixnum
 8719|       |                        write_number(static_cast<int8_t>(j.m_value.number_integer));
 8720|       |                    }
 8721|       |                    else if (j.m_value.number_integer >= (std::numeric_limits<int8_t>::min)() and
 8722|       |                             j.m_value.number_integer <= (std::numeric_limits<int8_t>::max)())
 8723|       |                    {
 8724|       |                        // int 8
 8725|       |                        oa->write_character(to_char_type(0xD0));
 8726|       |                        write_number(static_cast<int8_t>(j.m_value.number_integer));
 8727|       |                    }
 8728|       |                    else if (j.m_value.number_integer >= (std::numeric_limits<int16_t>::min)() and
 8729|       |                             j.m_value.number_integer <= (std::numeric_limits<int16_t>::max)())
 8730|       |                    {
 8731|       |                        // int 16
 8732|       |                        oa->write_character(to_char_type(0xD1));
 8733|       |                        write_number(static_cast<int16_t>(j.m_value.number_integer));
 8734|       |                    }
 8735|       |                    else if (j.m_value.number_integer >= (std::numeric_limits<int32_t>::min)() and
 8736|       |                             j.m_value.number_integer <= (std::numeric_limits<int32_t>::max)())
 8737|       |                    {
 8738|       |                        // int 32
 8739|       |                        oa->write_character(to_char_type(0xD2));
 8740|       |                        write_number(static_cast<int32_t>(j.m_value.number_integer));
 8741|       |                    }
 8742|       |                    else if (j.m_value.number_integer >= (std::numeric_limits<int64_t>::min)() and
 8743|       |                             j.m_value.number_integer <= (std::numeric_limits<int64_t>::max)())
 8744|       |                    {
 8745|       |                        // int 64
 8746|       |                        oa->write_character(to_char_type(0xD3));
 8747|       |                        write_number(static_cast<int64_t>(j.m_value.number_integer));
 8748|       |                    }
 8749|       |                }
 8750|       |                break;
 8751|       |            }
 8752|       |
 8753|       |            case value_t::number_unsigned:
 8754|       |            {
 8755|       |                if (j.m_value.number_unsigned < 128)
 8756|       |                {
 8757|       |                    // positive fixnum
 8758|       |                    write_number(static_cast<uint8_t>(j.m_value.number_integer));
 8759|       |                }
 8760|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<uint8_t>::max)())
 8761|       |                {
 8762|       |                    // uint 8
 8763|       |                    oa->write_character(to_char_type(0xCC));
 8764|       |                    write_number(static_cast<uint8_t>(j.m_value.number_integer));
 8765|       |                }
 8766|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<uint16_t>::max)())
 8767|       |                {
 8768|       |                    // uint 16
 8769|       |                    oa->write_character(to_char_type(0xCD));
 8770|       |                    write_number(static_cast<uint16_t>(j.m_value.number_integer));
 8771|       |                }
 8772|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<uint32_t>::max)())
 8773|       |                {
 8774|       |                    // uint 32
 8775|       |                    oa->write_character(to_char_type(0xCE));
 8776|       |                    write_number(static_cast<uint32_t>(j.m_value.number_integer));
 8777|       |                }
 8778|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<uint64_t>::max)())
 8779|       |                {
 8780|       |                    // uint 64
 8781|       |                    oa->write_character(to_char_type(0xCF));
 8782|       |                    write_number(static_cast<uint64_t>(j.m_value.number_integer));
 8783|       |                }
 8784|       |                break;
 8785|       |            }
 8786|       |
 8787|       |            case value_t::number_float:
 8788|       |            {
 8789|       |                oa->write_character(get_msgpack_float_prefix(j.m_value.number_float));
 8790|       |                write_number(j.m_value.number_float);
 8791|       |                break;
 8792|       |            }
 8793|       |
 8794|       |            case value_t::string:
 8795|       |            {
 8796|       |                // step 1: write control byte and the string length
 8797|       |                const auto N = j.m_value.string->size();
 8798|       |                if (N <= 31)
 8799|       |                {
 8800|       |                    // fixstr
 8801|       |                    write_number(static_cast<uint8_t>(0xA0 | N));
 8802|       |                }
 8803|       |                else if (N <= (std::numeric_limits<uint8_t>::max)())
 8804|       |                {
 8805|       |                    // str 8
 8806|       |                    oa->write_character(to_char_type(0xD9));
 8807|       |                    write_number(static_cast<uint8_t>(N));
 8808|       |                }
 8809|       |                else if (N <= (std::numeric_limits<uint16_t>::max)())
 8810|       |                {
 8811|       |                    // str 16
 8812|       |                    oa->write_character(to_char_type(0xDA));
 8813|       |                    write_number(static_cast<uint16_t>(N));
 8814|       |                }
 8815|       |                else if (N <= (std::numeric_limits<uint32_t>::max)())
 8816|       |                {
 8817|       |                    // str 32
 8818|       |                    oa->write_character(to_char_type(0xDB));
 8819|       |                    write_number(static_cast<uint32_t>(N));
 8820|       |                }
 8821|       |
 8822|       |                // step 2: write the string
 8823|       |                oa->write_characters(
 8824|       |                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
 8825|       |                    j.m_value.string->size());
 8826|       |                break;
 8827|       |            }
 8828|       |
 8829|       |            case value_t::array:
 8830|       |            {
 8831|       |                // step 1: write control byte and the array size
 8832|       |                const auto N = j.m_value.array->size();
 8833|       |                if (N <= 15)
 8834|       |                {
 8835|       |                    // fixarray
 8836|       |                    write_number(static_cast<uint8_t>(0x90 | N));
 8837|       |                }
 8838|       |                else if (N <= (std::numeric_limits<uint16_t>::max)())
 8839|       |                {
 8840|       |                    // array 16
 8841|       |                    oa->write_character(to_char_type(0xDC));
 8842|       |                    write_number(static_cast<uint16_t>(N));
 8843|       |                }
 8844|       |                else if (N <= (std::numeric_limits<uint32_t>::max)())
 8845|       |                {
 8846|       |                    // array 32
 8847|       |                    oa->write_character(to_char_type(0xDD));
 8848|       |                    write_number(static_cast<uint32_t>(N));
 8849|       |                }
 8850|       |
 8851|       |                // step 2: write each element
 8852|       |                for (const auto& el : *j.m_value.array)
 8853|       |                {
 8854|       |                    write_msgpack(el);
 8855|       |                }
 8856|       |                break;
 8857|       |            }
 8858|       |
 8859|       |            case value_t::object:
 8860|       |            {
 8861|       |                // step 1: write control byte and the object size
 8862|       |                const auto N = j.m_value.object->size();
 8863|       |                if (N <= 15)
 8864|       |                {
 8865|       |                    // fixmap
 8866|       |                    write_number(static_cast<uint8_t>(0x80 | (N & 0xF)));
 8867|       |                }
 8868|       |                else if (N <= (std::numeric_limits<uint16_t>::max)())
 8869|       |                {
 8870|       |                    // map 16
 8871|       |                    oa->write_character(to_char_type(0xDE));
 8872|       |                    write_number(static_cast<uint16_t>(N));
 8873|       |                }
 8874|       |                else if (N <= (std::numeric_limits<uint32_t>::max)())
 8875|       |                {
 8876|       |                    // map 32
 8877|       |                    oa->write_character(to_char_type(0xDF));
 8878|       |                    write_number(static_cast<uint32_t>(N));
 8879|       |                }
 8880|       |
 8881|       |                // step 2: write each element
 8882|       |                for (const auto& el : *j.m_value.object)
 8883|       |                {
 8884|       |                    write_msgpack(el.first);
 8885|       |                    write_msgpack(el.second);
 8886|       |                }
 8887|       |                break;
 8888|       |            }
 8889|       |
 8890|       |            default:
 8891|       |                break;
 8892|       |        }
 8893|       |    }
 8894|       |
 8895|       |    /*!
 8896|       |    @param[in] j  JSON value to serialize
 8897|       |    @param[in] use_count   whether to use '#' prefixes (optimized format)
 8898|       |    @param[in] use_type    whether to use '$' prefixes (optimized format)
 8899|       |    @param[in] add_prefix  whether prefixes need to be used for this value
 8900|       |    */
 8901|       |    void write_ubjson(const BasicJsonType& j, const bool use_count,
 8902|       |                      const bool use_type, const bool add_prefix = true)
 8903|       |    {
 8904|       |        switch (j.type())
 8905|       |        {
 8906|       |            case value_t::null:
 8907|       |            {
 8908|       |                if (add_prefix)
 8909|       |                {
 8910|       |                    oa->write_character(to_char_type('Z'));
 8911|       |                }
 8912|       |                break;
 8913|       |            }
 8914|       |
 8915|       |            case value_t::boolean:
 8916|       |            {
 8917|       |                if (add_prefix)
 8918|       |                {
 8919|       |                    oa->write_character(j.m_value.boolean
 8920|       |                                        ? to_char_type('T')
 8921|       |                                        : to_char_type('F'));
 8922|       |                }
 8923|       |                break;
 8924|       |            }
 8925|       |
 8926|       |            case value_t::number_integer:
 8927|       |            {
 8928|       |                write_number_with_ubjson_prefix(j.m_value.number_integer, add_prefix);
 8929|       |                break;
 8930|       |            }
 8931|       |
 8932|       |            case value_t::number_unsigned:
 8933|       |            {
 8934|       |                write_number_with_ubjson_prefix(j.m_value.number_unsigned, add_prefix);
 8935|       |                break;
 8936|       |            }
 8937|       |
 8938|       |            case value_t::number_float:
 8939|       |            {
 8940|       |                write_number_with_ubjson_prefix(j.m_value.number_float, add_prefix);
 8941|       |                break;
 8942|       |            }
 8943|       |
 8944|       |            case value_t::string:
 8945|       |            {
 8946|       |                if (add_prefix)
 8947|       |                {
 8948|       |                    oa->write_character(to_char_type('S'));
 8949|       |                }
 8950|       |                write_number_with_ubjson_prefix(j.m_value.string->size(), true);
 8951|       |                oa->write_characters(
 8952|       |                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
 8953|       |                    j.m_value.string->size());
 8954|       |                break;
 8955|       |            }
 8956|       |
 8957|       |            case value_t::array:
 8958|       |            {
 8959|       |                if (add_prefix)
 8960|       |                {
 8961|       |                    oa->write_character(to_char_type('['));
 8962|       |                }
 8963|       |
 8964|       |                bool prefix_required = true;
 8965|       |                if (use_type and not j.m_value.array->empty())
 8966|       |                {
 8967|       |                    assert(use_count);
 8968|       |                    const CharType first_prefix = ubjson_prefix(j.front());
 8969|       |                    const bool same_prefix = std::all_of(j.begin() + 1, j.end(),
 8970|       |                                                         [this, first_prefix](const BasicJsonType & v)
 8971|       |                    {
 8972|       |                        return ubjson_prefix(v) == first_prefix;
 8973|       |                    });
 8974|       |
 8975|       |                    if (same_prefix)
 8976|       |                    {
 8977|       |                        prefix_required = false;
 8978|       |                        oa->write_character(to_char_type('$'));
 8979|       |                        oa->write_character(first_prefix);
 8980|       |                    }
 8981|       |                }
 8982|       |
 8983|       |                if (use_count)
 8984|       |                {
 8985|       |                    oa->write_character(to_char_type('#'));
 8986|       |                    write_number_with_ubjson_prefix(j.m_value.array->size(), true);
 8987|       |                }
 8988|       |
 8989|       |                for (const auto& el : *j.m_value.array)
 8990|       |                {
 8991|       |                    write_ubjson(el, use_count, use_type, prefix_required);
 8992|       |                }
 8993|       |
 8994|       |                if (not use_count)
 8995|       |                {
 8996|       |                    oa->write_character(to_char_type(']'));
 8997|       |                }
 8998|       |
 8999|       |                break;
 9000|       |            }
 9001|       |
 9002|       |            case value_t::object:
 9003|       |            {
 9004|       |                if (add_prefix)
 9005|       |                {
 9006|       |                    oa->write_character(to_char_type('{'));
 9007|       |                }
 9008|       |
 9009|       |                bool prefix_required = true;
 9010|       |                if (use_type and not j.m_value.object->empty())
 9011|       |                {
 9012|       |                    assert(use_count);
 9013|       |                    const CharType first_prefix = ubjson_prefix(j.front());
 9014|       |                    const bool same_prefix = std::all_of(j.begin(), j.end(),
 9015|       |                                                         [this, first_prefix](const BasicJsonType & v)
 9016|       |                    {
 9017|       |                        return ubjson_prefix(v) == first_prefix;
 9018|       |                    });
 9019|       |
 9020|       |                    if (same_prefix)
 9021|       |                    {
 9022|       |                        prefix_required = false;
 9023|       |                        oa->write_character(to_char_type('$'));
 9024|       |                        oa->write_character(first_prefix);
 9025|       |                    }
 9026|       |                }
 9027|       |
 9028|       |                if (use_count)
 9029|       |                {
 9030|       |                    oa->write_character(to_char_type('#'));
 9031|       |                    write_number_with_ubjson_prefix(j.m_value.object->size(), true);
 9032|       |                }
 9033|       |
 9034|       |                for (const auto& el : *j.m_value.object)
 9035|       |                {
 9036|       |                    write_number_with_ubjson_prefix(el.first.size(), true);
 9037|       |                    oa->write_characters(
 9038|       |                        reinterpret_cast<const CharType*>(el.first.c_str()),
 9039|       |                        el.first.size());
 9040|       |                    write_ubjson(el.second, use_count, use_type, prefix_required);
 9041|       |                }
 9042|       |
 9043|       |                if (not use_count)
 9044|       |                {
 9045|       |                    oa->write_character(to_char_type('}'));
 9046|       |                }
 9047|       |
 9048|       |                break;
 9049|       |            }
 9050|       |
 9051|       |            default:
 9052|       |                break;
 9053|       |        }
 9054|       |    }
 9055|       |
 9056|       |  private:
 9057|       |    //////////
 9058|       |    // BSON //
 9059|       |    //////////
 9060|       |
 9061|       |    /*!
 9062|       |    @return The size of a BSON document entry header, including the id marker
 9063|       |            and the entry name size (and its null-terminator).
 9064|       |    */
 9065|       |    static std::size_t calc_bson_entry_header_size(const string_t& name)
 9066|       |    {
 9067|       |        const auto it = name.find(static_cast<typename string_t::value_type>(0));
 9068|       |        if (JSON_UNLIKELY(it != BasicJsonType::string_t::npos))
 9069|       |        {
 9070|       |            JSON_THROW(out_of_range::create(409,
 9071|       |                                            "BSON key cannot contain code point U+0000 (at byte " + std::to_string(it) + ")"));
 9072|       |        }
 9073|       |
 9074|       |        return /*id*/ 1ul + name.size() + /*zero-terminator*/1u;
 9075|       |    }
 9076|       |
 9077|       |    /*!
 9078|       |    @brief Writes the given @a element_type and @a name to the output adapter
 9079|       |    */
 9080|       |    void write_bson_entry_header(const string_t& name,
 9081|       |                                 const std::uint8_t element_type)
 9082|       |    {
 9083|       |        oa->write_character(to_char_type(element_type)); // boolean
 9084|       |        oa->write_characters(
 9085|       |            reinterpret_cast<const CharType*>(name.c_str()),
 9086|       |            name.size() + 1u);
 9087|       |    }
 9088|       |
 9089|       |    /*!
 9090|       |    @brief Writes a BSON element with key @a name and boolean value @a value
 9091|       |    */
 9092|       |    void write_bson_boolean(const string_t& name,
 9093|       |                            const bool value)
 9094|       |    {
 9095|       |        write_bson_entry_header(name, 0x08);
 9096|       |        oa->write_character(value ? to_char_type(0x01) : to_char_type(0x00));
 9097|       |    }
 9098|       |
 9099|       |    /*!
 9100|       |    @brief Writes a BSON element with key @a name and double value @a value
 9101|       |    */
 9102|       |    void write_bson_double(const string_t& name,
 9103|       |                           const double value)
 9104|       |    {
 9105|       |        write_bson_entry_header(name, 0x01);
 9106|       |        write_number<double, true>(value);
 9107|       |    }
 9108|       |
 9109|       |    /*!
 9110|       |    @return The size of the BSON-encoded string in @a value
 9111|       |    */
 9112|       |    static std::size_t calc_bson_string_size(const string_t& value)
 9113|       |    {
 9114|       |        return sizeof(std::int32_t) + value.size() + 1ul;
 9115|       |    }
 9116|       |
 9117|       |    /*!
 9118|       |    @brief Writes a BSON element with key @a name and string value @a value
 9119|       |    */
 9120|       |    void write_bson_string(const string_t& name,
 9121|       |                           const string_t& value)
 9122|       |    {
 9123|       |        write_bson_entry_header(name, 0x02);
 9124|       |
 9125|       |        write_number<std::int32_t, true>(static_cast<std::int32_t>(value.size() + 1ul));
 9126|       |        oa->write_characters(
 9127|       |            reinterpret_cast<const CharType*>(value.c_str()),
 9128|       |            value.size() + 1);
 9129|       |    }
 9130|       |
 9131|       |    /*!
 9132|       |    @brief Writes a BSON element with key @a name and null value
 9133|       |    */
 9134|       |    void write_bson_null(const string_t& name)
 9135|       |    {
 9136|       |        write_bson_entry_header(name, 0x0A);
 9137|       |    }
 9138|       |
 9139|       |    /*!
 9140|       |    @return The size of the BSON-encoded integer @a value
 9141|       |    */
 9142|       |    static std::size_t calc_bson_integer_size(const std::int64_t value)
 9143|       |    {
 9144|       |        if ((std::numeric_limits<std::int32_t>::min)() <= value and value <= (std::numeric_limits<std::int32_t>::max)())
 9145|       |        {
 9146|       |            return sizeof(std::int32_t);
 9147|       |        }
 9148|       |        else
 9149|       |        {
 9150|       |            return sizeof(std::int64_t);
 9151|       |        }
 9152|       |    }
 9153|       |
 9154|       |    /*!
 9155|       |    @brief Writes a BSON element with key @a name and integer @a value
 9156|       |    */
 9157|       |    void write_bson_integer(const string_t& name,
 9158|       |                            const std::int64_t value)
 9159|       |    {
 9160|       |        if ((std::numeric_limits<std::int32_t>::min)() <= value and value <= (std::numeric_limits<std::int32_t>::max)())
 9161|       |        {
 9162|       |            write_bson_entry_header(name, 0x10); // int32
 9163|       |            write_number<std::int32_t, true>(static_cast<std::int32_t>(value));
 9164|       |        }
 9165|       |        else
 9166|       |        {
 9167|       |            write_bson_entry_header(name, 0x12); // int64
 9168|       |            write_number<std::int64_t, true>(static_cast<std::int64_t>(value));
 9169|       |        }
 9170|       |    }
 9171|       |
 9172|       |    /*!
 9173|       |    @return The size of the BSON-encoded unsigned integer in @a j
 9174|       |    */
 9175|       |    static constexpr std::size_t calc_bson_unsigned_size(const std::uint64_t value) noexcept
 9176|       |    {
 9177|       |        return (value <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
 9178|       |               ? sizeof(std::int32_t)
 9179|       |               : sizeof(std::int64_t);
 9180|       |    }
 9181|       |
 9182|       |    /*!
 9183|       |    @brief Writes a BSON element with key @a name and unsigned @a value
 9184|       |    */
 9185|       |    void write_bson_unsigned(const string_t& name,
 9186|       |                             const std::uint64_t value)
 9187|       |    {
 9188|       |        if (value <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
 9189|       |        {
 9190|       |            write_bson_entry_header(name, 0x10 /* int32 */);
 9191|       |            write_number<std::int32_t, true>(static_cast<std::int32_t>(value));
 9192|       |        }
 9193|       |        else if (value <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))
 9194|       |        {
 9195|       |            write_bson_entry_header(name, 0x12 /* int64 */);
 9196|       |            write_number<std::int64_t, true>(static_cast<std::int64_t>(value));
 9197|       |        }
 9198|       |        else
 9199|       |        {
 9200|       |            JSON_THROW(out_of_range::create(407, "integer number " + std::to_string(value) + " cannot be represented by BSON as it does not fit int64"));
 9201|       |        }
 9202|       |    }
 9203|       |
 9204|       |    /*!
 9205|       |    @brief Writes a BSON element with key @a name and object @a value
 9206|       |    */
 9207|       |    void write_bson_object_entry(const string_t& name,
 9208|       |                                 const typename BasicJsonType::object_t& value)
 9209|       |    {
 9210|       |        write_bson_entry_header(name, 0x03); // object
 9211|       |        write_bson_object(value);
 9212|       |    }
 9213|       |
 9214|       |    /*!
 9215|       |    @return The size of the BSON-encoded array @a value
 9216|       |    */
 9217|       |    static std::size_t calc_bson_array_size(const typename BasicJsonType::array_t& value)
 9218|       |    {
 9219|       |        std::size_t embedded_document_size = 0ul;
 9220|       |        std::size_t array_index = 0ul;
 9221|       |
 9222|       |        for (const auto& el : value)
 9223|       |        {
 9224|       |            embedded_document_size += calc_bson_element_size(std::to_string(array_index++), el);
 9225|       |        }
 9226|       |
 9227|       |        return sizeof(std::int32_t) + embedded_document_size + 1ul;
 9228|       |    }
 9229|       |
 9230|       |    /*!
 9231|       |    @brief Writes a BSON element with key @a name and array @a value
 9232|       |    */
 9233|       |    void write_bson_array(const string_t& name,
 9234|       |                          const typename BasicJsonType::array_t& value)
 9235|       |    {
 9236|       |        write_bson_entry_header(name, 0x04); // array
 9237|       |        write_number<std::int32_t, true>(static_cast<std::int32_t>(calc_bson_array_size(value)));
 9238|       |
 9239|       |        std::size_t array_index = 0ul;
 9240|       |
 9241|       |        for (const auto& el : value)
 9242|       |        {
 9243|       |            write_bson_element(std::to_string(array_index++), el);
 9244|       |        }
 9245|       |
 9246|       |        oa->write_character(to_char_type(0x00));
 9247|       |    }
 9248|       |
 9249|       |    /*!
 9250|       |    @brief Calculates the size necessary to serialize the JSON value @a j with its @a name
 9251|       |    @return The calculated size for the BSON document entry for @a j with the given @a name.
 9252|       |    */
 9253|       |    static std::size_t calc_bson_element_size(const string_t& name,
 9254|       |            const BasicJsonType& j)
 9255|       |    {
 9256|       |        const auto header_size = calc_bson_entry_header_size(name);
 9257|       |        switch (j.type())
 9258|       |        {
 9259|       |            case value_t::object:
 9260|       |                return header_size + calc_bson_object_size(*j.m_value.object);
 9261|       |
 9262|       |            case value_t::array:
 9263|       |                return header_size + calc_bson_array_size(*j.m_value.array);
 9264|       |
 9265|       |            case value_t::boolean:
 9266|       |                return header_size + 1ul;
 9267|       |
 9268|       |            case value_t::number_float:
 9269|       |                return header_size + 8ul;
 9270|       |
 9271|       |            case value_t::number_integer:
 9272|       |                return header_size + calc_bson_integer_size(j.m_value.number_integer);
 9273|       |
 9274|       |            case value_t::number_unsigned:
 9275|       |                return header_size + calc_bson_unsigned_size(j.m_value.number_unsigned);
 9276|       |
 9277|       |            case value_t::string:
 9278|       |                return header_size + calc_bson_string_size(*j.m_value.string);
 9279|       |
 9280|       |            case value_t::null:
 9281|       |                return header_size + 0ul;
 9282|       |
 9283|       |            // LCOV_EXCL_START
 9284|       |            default:
 9285|       |                assert(false);
 9286|       |                return 0ul;
 9287|       |                // LCOV_EXCL_STOP
 9288|       |        };
 9289|       |    }
 9290|       |
 9291|       |    /*!
 9292|       |    @brief Serializes the JSON value @a j to BSON and associates it with the
 9293|       |           key @a name.
 9294|       |    @param name The name to associate with the JSON entity @a j within the
 9295|       |                current BSON document
 9296|       |    @return The size of the BSON entry
 9297|       |    */
 9298|       |    void write_bson_element(const string_t& name,
 9299|       |                            const BasicJsonType& j)
 9300|       |    {
 9301|       |        switch (j.type())
 9302|       |        {
 9303|       |            case value_t::object:
 9304|       |                return write_bson_object_entry(name, *j.m_value.object);
 9305|       |
 9306|       |            case value_t::array:
 9307|       |                return write_bson_array(name, *j.m_value.array);
 9308|       |
 9309|       |            case value_t::boolean:
 9310|       |                return write_bson_boolean(name, j.m_value.boolean);
 9311|       |
 9312|       |            case value_t::number_float:
 9313|       |                return write_bson_double(name, j.m_value.number_float);
 9314|       |
 9315|       |            case value_t::number_integer:
 9316|       |                return write_bson_integer(name, j.m_value.number_integer);
 9317|       |
 9318|       |            case value_t::number_unsigned:
 9319|       |                return write_bson_unsigned(name, j.m_value.number_unsigned);
 9320|       |
 9321|       |            case value_t::string:
 9322|       |                return write_bson_string(name, *j.m_value.string);
 9323|       |
 9324|       |            case value_t::null:
 9325|       |                return write_bson_null(name);
 9326|       |
 9327|       |            // LCOV_EXCL_START
 9328|       |            default:
 9329|       |                assert(false);
 9330|       |                return;
 9331|       |                // LCOV_EXCL_STOP
 9332|       |        };
 9333|       |    }
 9334|       |
 9335|       |    /*!
 9336|       |    @brief Calculates the size of the BSON serialization of the given
 9337|       |           JSON-object @a j.
 9338|       |    @param[in] j  JSON value to serialize
 9339|       |    @pre       j.type() == value_t::object
 9340|       |    */
 9341|       |    static std::size_t calc_bson_object_size(const typename BasicJsonType::object_t& value)
 9342|       |    {
 9343|       |        std::size_t document_size = std::accumulate(value.begin(), value.end(), 0ul,
 9344|       |                                    [](size_t result, const typename BasicJsonType::object_t::value_type & el)
 9345|       |        {
 9346|       |            return result += calc_bson_element_size(el.first, el.second);
 9347|       |        });
 9348|       |
 9349|       |        return sizeof(std::int32_t) + document_size + 1ul;
 9350|       |    }
 9351|       |
 9352|       |    /*!
 9353|       |    @param[in] j  JSON value to serialize
 9354|       |    @pre       j.type() == value_t::object
 9355|       |    */
 9356|       |    void write_bson_object(const typename BasicJsonType::object_t& value)
 9357|       |    {
 9358|       |        write_number<std::int32_t, true>(static_cast<std::int32_t>(calc_bson_object_size(value)));
 9359|       |
 9360|       |        for (const auto& el : value)
 9361|       |        {
 9362|       |            write_bson_element(el.first, el.second);
 9363|       |        }
 9364|       |
 9365|       |        oa->write_character(to_char_type(0x00));
 9366|       |    }
 9367|       |
 9368|       |    //////////
 9369|       |    // CBOR //
 9370|       |    //////////
 9371|       |
 9372|       |    static constexpr CharType get_cbor_float_prefix(float /*unused*/)
 9373|       |    {
 9374|       |        return to_char_type(0xFA);  // Single-Precision Float
 9375|       |    }
 9376|       |
 9377|       |    static constexpr CharType get_cbor_float_prefix(double /*unused*/)
 9378|       |    {
 9379|       |        return to_char_type(0xFB);  // Double-Precision Float
 9380|       |    }
 9381|       |
 9382|       |    /////////////
 9383|       |    // MsgPack //
 9384|       |    /////////////
 9385|       |
 9386|       |    static constexpr CharType get_msgpack_float_prefix(float /*unused*/)
 9387|       |    {
 9388|       |        return to_char_type(0xCA);  // float 32
 9389|       |    }
 9390|       |
 9391|       |    static constexpr CharType get_msgpack_float_prefix(double /*unused*/)
 9392|       |    {
 9393|       |        return to_char_type(0xCB);  // float 64
 9394|       |    }
 9395|       |
 9396|       |    ////////////
 9397|       |    // UBJSON //
 9398|       |    ////////////
 9399|       |
 9400|       |    // UBJSON: write number (floating point)
 9401|       |    template<typename NumberType, typename std::enable_if<
 9402|       |                 std::is_floating_point<NumberType>::value, int>::type = 0>
 9403|       |    void write_number_with_ubjson_prefix(const NumberType n,
 9404|       |                                         const bool add_prefix)
 9405|       |    {
 9406|       |        if (add_prefix)
 9407|       |        {
 9408|       |            oa->write_character(get_ubjson_float_prefix(n));
 9409|       |        }
 9410|       |        write_number(n);
 9411|       |    }
 9412|       |
 9413|       |    // UBJSON: write number (unsigned integer)
 9414|       |    template<typename NumberType, typename std::enable_if<
 9415|       |                 std::is_unsigned<NumberType>::value, int>::type = 0>
 9416|       |    void write_number_with_ubjson_prefix(const NumberType n,
 9417|       |                                         const bool add_prefix)
 9418|       |    {
 9419|       |        if (n <= static_cast<uint64_t>((std::numeric_limits<int8_t>::max)()))
 9420|       |        {
 9421|       |            if (add_prefix)
 9422|       |            {
 9423|       |                oa->write_character(to_char_type('i'));  // int8
 9424|       |            }
 9425|       |            write_number(static_cast<uint8_t>(n));
 9426|       |        }
 9427|       |        else if (n <= (std::numeric_limits<uint8_t>::max)())
 9428|       |        {
 9429|       |            if (add_prefix)
 9430|       |            {
 9431|       |                oa->write_character(to_char_type('U'));  // uint8
 9432|       |            }
 9433|       |            write_number(static_cast<uint8_t>(n));
 9434|       |        }
 9435|       |        else if (n <= static_cast<uint64_t>((std::numeric_limits<int16_t>::max)()))
 9436|       |        {
 9437|       |            if (add_prefix)
 9438|       |            {
 9439|       |                oa->write_character(to_char_type('I'));  // int16
 9440|       |            }
 9441|       |            write_number(static_cast<int16_t>(n));
 9442|       |        }
 9443|       |        else if (n <= static_cast<uint64_t>((std::numeric_limits<int32_t>::max)()))
 9444|       |        {
 9445|       |            if (add_prefix)
 9446|       |            {
 9447|       |                oa->write_character(to_char_type('l'));  // int32
 9448|       |            }
 9449|       |            write_number(static_cast<int32_t>(n));
 9450|       |        }
 9451|       |        else if (n <= static_cast<uint64_t>((std::numeric_limits<int64_t>::max)()))
 9452|       |        {
 9453|       |            if (add_prefix)
 9454|       |            {
 9455|       |                oa->write_character(to_char_type('L'));  // int64
 9456|       |            }
 9457|       |            write_number(static_cast<int64_t>(n));
 9458|       |        }
 9459|       |        else
 9460|       |        {
 9461|       |            JSON_THROW(out_of_range::create(407, "integer number " + std::to_string(n) + " cannot be represented by UBJSON as it does not fit int64"));
 9462|       |        }
 9463|       |    }
 9464|       |
 9465|       |    // UBJSON: write number (signed integer)
 9466|       |    template<typename NumberType, typename std::enable_if<
 9467|       |                 std::is_signed<NumberType>::value and
 9468|       |                 not std::is_floating_point<NumberType>::value, int>::type = 0>
 9469|       |    void write_number_with_ubjson_prefix(const NumberType n,
 9470|       |                                         const bool add_prefix)
 9471|       |    {
 9472|       |        if ((std::numeric_limits<int8_t>::min)() <= n and n <= (std::numeric_limits<int8_t>::max)())
 9473|       |        {
 9474|       |            if (add_prefix)
 9475|       |            {
 9476|       |                oa->write_character(to_char_type('i'));  // int8
 9477|       |            }
 9478|       |            write_number(static_cast<int8_t>(n));
 9479|       |        }
 9480|       |        else if (static_cast<int64_t>((std::numeric_limits<uint8_t>::min)()) <= n and n <= static_cast<int64_t>((std::numeric_limits<uint8_t>::max)()))
 9481|       |        {
 9482|       |            if (add_prefix)
 9483|       |            {
 9484|       |                oa->write_character(to_char_type('U'));  // uint8
 9485|       |            }
 9486|       |            write_number(static_cast<uint8_t>(n));
 9487|       |        }
 9488|       |        else if ((std::numeric_limits<int16_t>::min)() <= n and n <= (std::numeric_limits<int16_t>::max)())
 9489|       |        {
 9490|       |            if (add_prefix)
 9491|       |            {
 9492|       |                oa->write_character(to_char_type('I'));  // int16
 9493|       |            }
 9494|       |            write_number(static_cast<int16_t>(n));
 9495|       |        }
 9496|       |        else if ((std::numeric_limits<int32_t>::min)() <= n and n <= (std::numeric_limits<int32_t>::max)())
 9497|       |        {
 9498|       |            if (add_prefix)
 9499|       |            {
 9500|       |                oa->write_character(to_char_type('l'));  // int32
 9501|       |            }
 9502|       |            write_number(static_cast<int32_t>(n));
 9503|       |        }
 9504|       |        else if ((std::numeric_limits<int64_t>::min)() <= n and n <= (std::numeric_limits<int64_t>::max)())
 9505|       |        {
 9506|       |            if (add_prefix)
 9507|       |            {
 9508|       |                oa->write_character(to_char_type('L'));  // int64
 9509|       |            }
 9510|       |            write_number(static_cast<int64_t>(n));
 9511|       |        }
 9512|       |        // LCOV_EXCL_START
 9513|       |        else
 9514|       |        {
 9515|       |            JSON_THROW(out_of_range::create(407, "integer number " + std::to_string(n) + " cannot be represented by UBJSON as it does not fit int64"));
 9516|       |        }
 9517|       |        // LCOV_EXCL_STOP
 9518|       |    }
 9519|       |
 9520|       |    /*!
 9521|       |    @brief determine the type prefix of container values
 9522|       |
 9523|       |    @note This function does not need to be 100% accurate when it comes to
 9524|       |          integer limits. In case a number exceeds the limits of int64_t,
 9525|       |          this will be detected by a later call to function
 9526|       |          write_number_with_ubjson_prefix. Therefore, we return 'L' for any
 9527|       |          value that does not fit the previous limits.
 9528|       |    */
 9529|       |    CharType ubjson_prefix(const BasicJsonType& j) const noexcept
 9530|       |    {
 9531|       |        switch (j.type())
 9532|       |        {
 9533|       |            case value_t::null:
 9534|       |                return 'Z';
 9535|       |
 9536|       |            case value_t::boolean:
 9537|       |                return j.m_value.boolean ? 'T' : 'F';
 9538|       |
 9539|       |            case value_t::number_integer:
 9540|       |            {
 9541|       |                if ((std::numeric_limits<int8_t>::min)() <= j.m_value.number_integer and j.m_value.number_integer <= (std::numeric_limits<int8_t>::max)())
 9542|       |                {
 9543|       |                    return 'i';
 9544|       |                }
 9545|       |                if ((std::numeric_limits<uint8_t>::min)() <= j.m_value.number_integer and j.m_value.number_integer <= (std::numeric_limits<uint8_t>::max)())
 9546|       |                {
 9547|       |                    return 'U';
 9548|       |                }
 9549|       |                if ((std::numeric_limits<int16_t>::min)() <= j.m_value.number_integer and j.m_value.number_integer <= (std::numeric_limits<int16_t>::max)())
 9550|       |                {
 9551|       |                    return 'I';
 9552|       |                }
 9553|       |                if ((std::numeric_limits<int32_t>::min)() <= j.m_value.number_integer and j.m_value.number_integer <= (std::numeric_limits<int32_t>::max)())
 9554|       |                {
 9555|       |                    return 'l';
 9556|       |                }
 9557|       |                // no check and assume int64_t (see note above)
 9558|       |                return 'L';
 9559|       |            }
 9560|       |
 9561|       |            case value_t::number_unsigned:
 9562|       |            {
 9563|       |                if (j.m_value.number_unsigned <= (std::numeric_limits<int8_t>::max)())
 9564|       |                {
 9565|       |                    return 'i';
 9566|       |                }
 9567|       |                if (j.m_value.number_unsigned <= (std::numeric_limits<uint8_t>::max)())
 9568|       |                {
 9569|       |                    return 'U';
 9570|       |                }
 9571|       |                if (j.m_value.number_unsigned <= (std::numeric_limits<int16_t>::max)())
 9572|       |                {
 9573|       |                    return 'I';
 9574|       |                }
 9575|       |                if (j.m_value.number_unsigned <= (std::numeric_limits<int32_t>::max)())
 9576|       |                {
 9577|       |                    return 'l';
 9578|       |                }
 9579|       |                // no check and assume int64_t (see note above)
 9580|       |                return 'L';
 9581|       |            }
 9582|       |
 9583|       |            case value_t::number_float:
 9584|       |                return get_ubjson_float_prefix(j.m_value.number_float);
 9585|       |
 9586|       |            case value_t::string:
 9587|       |                return 'S';
 9588|       |
 9589|       |            case value_t::array:
 9590|       |                return '[';
 9591|       |
 9592|       |            case value_t::object:
 9593|       |                return '{';
 9594|       |
 9595|       |            default:  // discarded values
 9596|       |                return 'N';
 9597|       |        }
 9598|       |    }
 9599|       |
 9600|       |    static constexpr CharType get_ubjson_float_prefix(float /*unused*/)
 9601|       |    {
 9602|       |        return 'd';  // float 32
 9603|       |    }
 9604|       |
 9605|       |    static constexpr CharType get_ubjson_float_prefix(double /*unused*/)
 9606|       |    {
 9607|       |        return 'D';  // float 64
 9608|       |    }
 9609|       |
 9610|       |    ///////////////////////
 9611|       |    // Utility functions //
 9612|       |    ///////////////////////
 9613|       |
 9614|       |    /*
 9615|       |    @brief write a number to output input
 9616|       |    @param[in] n number of type @a NumberType
 9617|       |    @tparam NumberType the type of the number
 9618|       |    @tparam OutputIsLittleEndian Set to true if output data is
 9619|       |                                 required to be little endian
 9620|       |
 9621|       |    @note This function needs to respect the system's endianess, because bytes
 9622|       |          in CBOR, MessagePack, and UBJSON are stored in network order (big
 9623|       |          endian) and therefore need reordering on little endian systems.
 9624|       |    */
 9625|       |    template<typename NumberType, bool OutputIsLittleEndian = false>
 9626|       |    void write_number(const NumberType n)
 9627|       |    {
 9628|       |        // step 1: write number to array of length NumberType
 9629|       |        std::array<CharType, sizeof(NumberType)> vec;
 9630|       |        std::memcpy(vec.data(), &n, sizeof(NumberType));
 9631|       |
 9632|       |        // step 2: write array to output (with possible reordering)
 9633|       |        if (is_little_endian and not OutputIsLittleEndian)
 9634|       |        {
 9635|       |            // reverse byte order prior to conversion if necessary
 9636|       |            std::reverse(vec.begin(), vec.end());
 9637|       |        }
 9638|       |
 9639|       |        oa->write_characters(vec.data(), sizeof(NumberType));
 9640|       |    }
 9641|       |
 9642|       |  public:
 9643|       |    // The following to_char_type functions are implement the conversion
 9644|       |    // between uint8_t and CharType. In case CharType is not unsigned,
 9645|       |    // such a conversion is required to allow values greater than 128.
 9646|       |    // See <https://github.com/nlohmann/json/issues/1286> for a discussion.
 9647|       |    template < typename C = CharType,
 9648|       |               enable_if_t < std::is_signed<C>::value and std::is_signed<char>::value > * = nullptr >
 9649|       |    static constexpr CharType to_char_type(std::uint8_t x) noexcept
 9650|       |    {
 9651|       |        return *reinterpret_cast<char*>(&x);
 9652|       |    }
 9653|       |
 9654|       |    template < typename C = CharType,
 9655|       |               enable_if_t < std::is_signed<C>::value and std::is_unsigned<char>::value > * = nullptr >
 9656|       |    static CharType to_char_type(std::uint8_t x) noexcept
 9657|       |    {
 9658|       |        static_assert(sizeof(std::uint8_t) == sizeof(CharType), "size of CharType must be equal to std::uint8_t");
 9659|       |        static_assert(std::is_pod<CharType>::value, "CharType must be POD");
 9660|       |        CharType result;
 9661|       |        std::memcpy(&result, &x, sizeof(x));
 9662|       |        return result;
 9663|       |    }
 9664|       |
 9665|       |    template<typename C = CharType,
 9666|       |             enable_if_t<std::is_unsigned<C>::value>* = nullptr>
 9667|       |    static constexpr CharType to_char_type(std::uint8_t x) noexcept
 9668|       |    {
 9669|       |        return x;
 9670|       |    }
 9671|       |
 9672|       |    template < typename InputCharType, typename C = CharType,
 9673|       |               enable_if_t <
 9674|       |                   std::is_signed<C>::value and
 9675|       |                   std::is_signed<char>::value and
 9676|       |                   std::is_same<char, typename std::remove_cv<InputCharType>::type>::value
 9677|       |                   > * = nullptr >
 9678|       |    static constexpr CharType to_char_type(InputCharType x) noexcept
 9679|      0|    {
 9680|      0|        return x;
 9681|      0|    }
 9682|       |
 9683|       |  private:
 9684|       |    /// whether we can assume little endianess
 9685|       |    const bool is_little_endian = binary_reader<BasicJsonType>::little_endianess();
 9686|       |
 9687|       |    /// the output
 9688|       |    output_adapter_t<CharType> oa = nullptr;
 9689|       |};
 9690|       |}  // namespace detail
 9691|       |}  // namespace nlohmann
 9692|       |
 9693|       |// #include <nlohmann/detail/output/serializer.hpp>
 9694|       |
 9695|       |
 9696|       |#include <algorithm> // reverse, remove, fill, find, none_of
 9697|       |#include <array> // array
 9698|       |#include <cassert> // assert
 9699|       |#include <ciso646> // and, or
 9700|       |#include <clocale> // localeconv, lconv
 9701|       |#include <cmath> // labs, isfinite, isnan, signbit
 9702|       |#include <cstddef> // size_t, ptrdiff_t
 9703|       |#include <cstdint> // uint8_t
 9704|       |#include <cstdio> // snprintf
 9705|       |#include <limits> // numeric_limits
 9706|       |#include <string> // string
 9707|       |#include <type_traits> // is_same
 9708|       |
 9709|       |// #include <nlohmann/detail/exceptions.hpp>
 9710|       |
 9711|       |// #include <nlohmann/detail/conversions/to_chars.hpp>
 9712|       |
 9713|       |
 9714|       |#include <cassert> // assert
 9715|       |#include <ciso646> // or, and, not
 9716|       |#include <cmath>   // signbit, isfinite
 9717|       |#include <cstdint> // intN_t, uintN_t
 9718|       |#include <cstring> // memcpy, memmove
 9719|       |
 9720|       |namespace nlohmann
 9721|       |{
 9722|       |namespace detail
 9723|       |{
 9724|       |
 9725|       |/*!
 9726|       |@brief implements the Grisu2 algorithm for binary to decimal floating-point
 9727|       |conversion.
 9728|       |
 9729|       |This implementation is a slightly modified version of the reference
 9730|       |implementation which may be obtained from
 9731|       |http://florian.loitsch.com/publications (bench.tar.gz).
 9732|       |
 9733|       |The code is distributed under the MIT license, Copyright (c) 2009 Florian Loitsch.
 9734|       |
 9735|       |For a detailed description of the algorithm see:
 9736|       |
 9737|       |[1] Loitsch, "Printing Floating-Point Numbers Quickly and Accurately with
 9738|       |    Integers", Proceedings of the ACM SIGPLAN 2010 Conference on Programming
 9739|       |    Language Design and Implementation, PLDI 2010
 9740|       |[2] Burger, Dybvig, "Printing Floating-Point Numbers Quickly and Accurately",
 9741|       |    Proceedings of the ACM SIGPLAN 1996 Conference on Programming Language
 9742|       |    Design and Implementation, PLDI 1996
 9743|       |*/
 9744|       |namespace dtoa_impl
 9745|       |{
 9746|       |
 9747|       |template <typename Target, typename Source>
 9748|       |Target reinterpret_bits(const Source source)
 9749|      7|{
 9750|      7|    static_assert(sizeof(Target) == sizeof(Source), "size mismatch");
 9751|      7|
 9752|      7|    Target target;
 9753|      7|    std::memcpy(&target, &source, sizeof(Source));
 9754|      7|    return target;
 9755|      7|}
 9756|       |
 9757|       |struct diyfp // f * 2^e
 9758|       |{
 9759|       |    static constexpr int kPrecision = 64; // = q
 9760|       |
 9761|       |    uint64_t f = 0;
 9762|       |    int e = 0;
 9763|       |
 9764|     91|    constexpr diyfp(uint64_t f_, int e_) noexcept : f(f_), e(e_) {}
 9765|       |
 9766|       |    /*!
 9767|       |    @brief returns x - y
 9768|       |    @pre x.e == y.e and x.f >= y.f
 9769|       |    */
 9770|       |    static diyfp sub(const diyfp& x, const diyfp& y) noexcept
 9771|     14|    {
 9772|     14|        assert(x.e == y.e);
 9773|     14|        assert(x.f >= y.f);
 9774|     14|
 9775|     14|        return {x.f - y.f, x.e};
 9776|     14|    }
 9777|       |
 9778|       |    /*!
 9779|       |    @brief returns x * y
 9780|       |    @note The result is rounded. (Only the upper q bits are returned.)
 9781|       |    */
 9782|       |    static diyfp mul(const diyfp& x, const diyfp& y) noexcept
 9783|     21|    {
 9784|     21|        static_assert(kPrecision == 64, "internal error");
 9785|     21|
 9786|     21|        // Computes:
 9787|     21|        //  f = round((x.f * y.f) / 2^q)
 9788|     21|        //  e = x.e + y.e + q
 9789|     21|
 9790|     21|        // Emulate the 64-bit * 64-bit multiplication:
 9791|     21|        //
 9792|     21|        // p = u * v
 9793|     21|        //   = (u_lo + 2^32 u_hi) (v_lo + 2^32 v_hi)
 9794|     21|        //   = (u_lo v_lo         ) + 2^32 ((u_lo v_hi         ) + (u_hi v_lo         )) + 2^64 (u_hi v_hi         )
 9795|     21|        //   = (p0                ) + 2^32 ((p1                ) + (p2                )) + 2^64 (p3                )
 9796|     21|        //   = (p0_lo + 2^32 p0_hi) + 2^32 ((p1_lo + 2^32 p1_hi) + (p2_lo + 2^32 p2_hi)) + 2^64 (p3                )
 9797|     21|        //   = (p0_lo             ) + 2^32 (p0_hi + p1_lo + p2_lo                      ) + 2^64 (p1_hi + p2_hi + p3)
 9798|     21|        //   = (p0_lo             ) + 2^32 (Q                                          ) + 2^64 (H                 )
 9799|     21|        //   = (p0_lo             ) + 2^32 (Q_lo + 2^32 Q_hi                           ) + 2^64 (H                 )
 9800|     21|        //
 9801|     21|        // (Since Q might be larger than 2^32 - 1)
 9802|     21|        //
 9803|     21|        //   = (p0_lo + 2^32 Q_lo) + 2^64 (Q_hi + H)
 9804|     21|        //
 9805|     21|        // (Q_hi + H does not overflow a 64-bit int)
 9806|     21|        //
 9807|     21|        //   = p_lo + 2^64 p_hi
 9808|     21|
 9809|     21|        const uint64_t u_lo = x.f & 0xFFFFFFFF;
 9810|     21|        const uint64_t u_hi = x.f >> 32;
 9811|     21|        const uint64_t v_lo = y.f & 0xFFFFFFFF;
 9812|     21|        const uint64_t v_hi = y.f >> 32;
 9813|     21|
 9814|     21|        const uint64_t p0 = u_lo * v_lo;
 9815|     21|        const uint64_t p1 = u_lo * v_hi;
 9816|     21|        const uint64_t p2 = u_hi * v_lo;
 9817|     21|        const uint64_t p3 = u_hi * v_hi;
 9818|     21|
 9819|     21|        const uint64_t p0_hi = p0 >> 32;
 9820|     21|        const uint64_t p1_lo = p1 & 0xFFFFFFFF;
 9821|     21|        const uint64_t p1_hi = p1 >> 32;
 9822|     21|        const uint64_t p2_lo = p2 & 0xFFFFFFFF;
 9823|     21|        const uint64_t p2_hi = p2 >> 32;
 9824|     21|
 9825|     21|        uint64_t Q = p0_hi + p1_lo + p2_lo;
 9826|     21|
 9827|     21|        // The full product might now be computed as
 9828|     21|        //
 9829|     21|        // p_hi = p3 + p2_hi + p1_hi + (Q >> 32)
 9830|     21|        // p_lo = p0_lo + (Q << 32)
 9831|     21|        //
 9832|     21|        // But in this particular case here, the full p_lo is not required.
 9833|     21|        // Effectively we only need to add the highest bit in p_lo to p_hi (and
 9834|     21|        // Q_hi + 1 does not overflow).
 9835|     21|
 9836|     21|        Q += uint64_t{1} << (64 - 32 - 1); // round, ties up
 9837|     21|
 9838|     21|        const uint64_t h = p3 + p2_hi + p1_hi + (Q >> 32);
 9839|     21|
 9840|     21|        return {h, x.e + y.e + 64};
 9841|     21|    }
 9842|       |
 9843|       |    /*!
 9844|       |    @brief normalize x such that the significand is >= 2^(q-1)
 9845|       |    @pre x.f != 0
 9846|       |    */
 9847|       |    static diyfp normalize(diyfp x) noexcept
 9848|     14|    {
 9849|     14|        assert(x.f != 0);
 9850|     14|
 9851|    161|        while ((x.f >> 63) == 0)
 9852|    147|        {
 9853|    147|            x.f <<= 1;
 9854|    147|            x.e--;
 9855|    147|        }
 9856|     14|
 9857|     14|        return x;
 9858|     14|    }
 9859|       |
 9860|       |    /*!
 9861|       |    @brief normalize x such that the result has the exponent E
 9862|       |    @pre e >= x.e and the upper e - x.e bits of x.f must be zero.
 9863|       |    */
 9864|       |    static diyfp normalize_to(const diyfp& x, const int target_exponent) noexcept
 9865|      7|    {
 9866|      7|        const int delta = x.e - target_exponent;
 9867|      7|
 9868|      7|        assert(delta >= 0);
 9869|      7|        assert(((x.f << delta) >> delta) == x.f);
 9870|      7|
 9871|      7|        return {x.f << delta, target_exponent};
 9872|      7|    }
 9873|       |};
 9874|       |
 9875|       |struct boundaries
 9876|       |{
 9877|       |    diyfp w;
 9878|       |    diyfp minus;
 9879|       |    diyfp plus;
 9880|       |};
 9881|       |
 9882|       |/*!
 9883|       |Compute the (normalized) diyfp representing the input number 'value' and its
 9884|       |boundaries.
 9885|       |
 9886|       |@pre value must be finite and positive
 9887|       |*/
 9888|       |template <typename FloatType>
 9889|       |boundaries compute_boundaries(FloatType value)
 9890|      7|{
 9891|      7|    assert(std::isfinite(value));
 9892|      7|    assert(value > 0);
 9893|      7|
 9894|      7|    // Convert the IEEE representation into a diyfp.
 9895|      7|    //
 9896|      7|    // If v is denormal:
 9897|      7|    //      value = 0.F * 2^(1 - bias) = (          F) * 2^(1 - bias - (p-1))
 9898|      7|    // If v is normalized:
 9899|      7|    //      value = 1.F * 2^(E - bias) = (2^(p-1) + F) * 2^(E - bias - (p-1))
 9900|      7|
 9901|      7|    static_assert(std::numeric_limits<FloatType>::is_iec559,
 9902|      7|                  "internal error: dtoa_short requires an IEEE-754 floating-point implementation");
 9903|      7|
 9904|      7|    constexpr int      kPrecision = std::numeric_limits<FloatType>::digits; // = p (includes the hidden bit)
 9905|      7|    constexpr int      kBias      = std::numeric_limits<FloatType>::max_exponent - 1 + (kPrecision - 1);
 9906|      7|    constexpr int      kMinExp    = 1 - kBias;
 9907|      7|    constexpr uint64_t kHiddenBit = uint64_t{1} << (kPrecision - 1); // = 2^(p-1)
 9908|      7|
 9909|      7|    using bits_type = typename std::conditional< kPrecision == 24, uint32_t, uint64_t >::type;
 9910|      7|
 9911|      7|    const uint64_t bits = reinterpret_bits<bits_type>(value);
 9912|      7|    const uint64_t E = bits >> (kPrecision - 1);
 9913|      7|    const uint64_t F = bits & (kHiddenBit - 1);
 9914|      7|
 9915|      7|    const bool is_denormal = (E == 0);
 9916|      7|    const diyfp v = is_denormal
 9917|      7|                    ? diyfp(F, kMinExp)
 9918|      7|                    : diyfp(F + kHiddenBit, static_cast<int>(E) - kBias);
 9919|      7|
 9920|      7|    // Compute the boundaries m- and m+ of the floating-point value
 9921|      7|    // v = f * 2^e.
 9922|      7|    //
 9923|      7|    // Determine v- and v+, the floating-point predecessor and successor if v,
 9924|      7|    // respectively.
 9925|      7|    //
 9926|      7|    //      v- = v - 2^e        if f != 2^(p-1) or e == e_min                (A)
 9927|      7|    //         = v - 2^(e-1)    if f == 2^(p-1) and e > e_min                (B)
 9928|      7|    //
 9929|      7|    //      v+ = v + 2^e
 9930|      7|    //
 9931|      7|    // Let m- = (v- + v) / 2 and m+ = (v + v+) / 2. All real numbers _strictly_
 9932|      7|    // between m- and m+ round to v, regardless of how the input rounding
 9933|      7|    // algorithm breaks ties.
 9934|      7|    //
 9935|      7|    //      ---+-------------+-------------+-------------+-------------+---  (A)
 9936|      7|    //         v-            m-            v             m+            v+
 9937|      7|    //
 9938|      7|    //      -----------------+------+------+-------------+-------------+---  (B)
 9939|      7|    //                       v-     m-     v             m+            v+
 9940|      7|
 9941|      7|    const bool lower_boundary_is_closer = (F == 0 and E > 1);
 9942|      7|    const diyfp m_plus = diyfp(2 * v.f + 1, v.e - 1);
 9943|      7|    const diyfp m_minus = lower_boundary_is_closer
 9944|      7|                          ? diyfp(4 * v.f - 1, v.e - 2)  // (B)
 9945|      7|                          : diyfp(2 * v.f - 1, v.e - 1); // (A)
 9946|      7|
 9947|      7|    // Determine the normalized w+ = m+.
 9948|      7|    const diyfp w_plus = diyfp::normalize(m_plus);
 9949|      7|
 9950|      7|    // Determine w- = m- such that e_(w-) = e_(w+).
 9951|      7|    const diyfp w_minus = diyfp::normalize_to(m_minus, w_plus.e);
 9952|      7|
 9953|      7|    return {diyfp::normalize(v), w_minus, w_plus};
 9954|      7|}
 9955|       |
 9956|       |// Given normalized diyfp w, Grisu needs to find a (normalized) cached
 9957|       |// power-of-ten c, such that the exponent of the product c * w = f * 2^e lies
 9958|       |// within a certain range [alpha, gamma] (Definition 3.2 from [1])
 9959|       |//
 9960|       |//      alpha <= e = e_c + e_w + q <= gamma
 9961|       |//
 9962|       |// or
 9963|       |//
 9964|       |//      f_c * f_w * 2^alpha <= f_c 2^(e_c) * f_w 2^(e_w) * 2^q
 9965|       |//                          <= f_c * f_w * 2^gamma
 9966|       |//
 9967|       |// Since c and w are normalized, i.e. 2^(q-1) <= f < 2^q, this implies
 9968|       |//
 9969|       |//      2^(q-1) * 2^(q-1) * 2^alpha <= c * w * 2^q < 2^q * 2^q * 2^gamma
 9970|       |//
 9971|       |// or
 9972|       |//
 9973|       |//      2^(q - 2 + alpha) <= c * w < 2^(q + gamma)
 9974|       |//
 9975|       |// The choice of (alpha,gamma) determines the size of the table and the form of
 9976|       |// the digit generation procedure. Using (alpha,gamma)=(-60,-32) works out well
 9977|       |// in practice:
 9978|       |//
 9979|       |// The idea is to cut the number c * w = f * 2^e into two parts, which can be
 9980|       |// processed independently: An integral part p1, and a fractional part p2:
 9981|       |//
 9982|       |//      f * 2^e = ( (f div 2^-e) * 2^-e + (f mod 2^-e) ) * 2^e
 9983|       |//              = (f div 2^-e) + (f mod 2^-e) * 2^e
 9984|       |//              = p1 + p2 * 2^e
 9985|       |//
 9986|       |// The conversion of p1 into decimal form requires a series of divisions and
 9987|       |// modulos by (a power of) 10. These operations are faster for 32-bit than for
 9988|       |// 64-bit integers, so p1 should ideally fit into a 32-bit integer. This can be
 9989|       |// achieved by choosing
 9990|       |//
 9991|       |//      -e >= 32   or   e <= -32 := gamma
 9992|       |//
 9993|       |// In order to convert the fractional part
 9994|       |//
 9995|       |//      p2 * 2^e = p2 / 2^-e = d[-1] / 10^1 + d[-2] / 10^2 + ...
 9996|       |//
 9997|       |// into decimal form, the fraction is repeatedly multiplied by 10 and the digits
 9998|       |// d[-i] are extracted in order:
 9999|       |//
10000|       |//      (10 * p2) div 2^-e = d[-1]
10001|       |//      (10 * p2) mod 2^-e = d[-2] / 10^1 + ...
10002|       |//
10003|       |// The multiplication by 10 must not overflow. It is sufficient to choose
10004|       |//
10005|       |//      10 * p2 < 16 * p2 = 2^4 * p2 <= 2^64.
10006|       |//
10007|       |// Since p2 = f mod 2^-e < 2^-e,
10008|       |//
10009|       |//      -e <= 60   or   e >= -60 := alpha
10010|       |
10011|       |constexpr int kAlpha = -60;
10012|       |constexpr int kGamma = -32;
10013|       |
10014|       |struct cached_power // c = f * 2^e ~= 10^k
10015|       |{
10016|       |    uint64_t f;
10017|       |    int e;
10018|       |    int k;
10019|       |};
10020|       |
10021|       |/*!
10022|       |For a normalized diyfp w = f * 2^e, this function returns a (normalized) cached
10023|       |power-of-ten c = f_c * 2^e_c, such that the exponent of the product w * c
10024|       |satisfies (Definition 3.2 from [1])
10025|       |
10026|       |     alpha <= e_c + e + q <= gamma.
10027|       |*/
10028|       |inline cached_power get_cached_power_for_binary_exponent(int e)
10029|      7|{
10030|      7|    // Now
10031|      7|    //
10032|      7|    //      alpha <= e_c + e + q <= gamma                                    (1)
10033|      7|    //      ==> f_c * 2^alpha <= c * 2^e * 2^q
10034|      7|    //
10035|      7|    // and since the c's are normalized, 2^(q-1) <= f_c,
10036|      7|    //
10037|      7|    //      ==> 2^(q - 1 + alpha) <= c * 2^(e + q)
10038|      7|    //      ==> 2^(alpha - e - 1) <= c
10039|      7|    //
10040|      7|    // If c were an exakt power of ten, i.e. c = 10^k, one may determine k as
10041|      7|    //
10042|      7|    //      k = ceil( log_10( 2^(alpha - e - 1) ) )
10043|      7|    //        = ceil( (alpha - e - 1) * log_10(2) )
10044|      7|    //
10045|      7|    // From the paper:
10046|      7|    // "In theory the result of the procedure could be wrong since c is rounded,
10047|      7|    //  and the computation itself is approximated [...]. In practice, however,
10048|      7|    //  this simple function is sufficient."
10049|      7|    //
10050|      7|    // For IEEE double precision floating-point numbers converted into
10051|      7|    // normalized diyfp's w = f * 2^e, with q = 64,
10052|      7|    //
10053|      7|    //      e >= -1022      (min IEEE exponent)
10054|      7|    //           -52        (p - 1)
10055|      7|    //           -52        (p - 1, possibly normalize denormal IEEE numbers)
10056|      7|    //           -11        (normalize the diyfp)
10057|      7|    //         = -1137
10058|      7|    //
10059|      7|    // and
10060|      7|    //
10061|      7|    //      e <= +1023      (max IEEE exponent)
10062|      7|    //           -52        (p - 1)
10063|      7|    //           -11        (normalize the diyfp)
10064|      7|    //         = 960
10065|      7|    //
10066|      7|    // This binary exponent range [-1137,960] results in a decimal exponent
10067|      7|    // range [-307,324]. One does not need to store a cached power for each
10068|      7|    // k in this range. For each such k it suffices to find a cached power
10069|      7|    // such that the exponent of the product lies in [alpha,gamma].
10070|      7|    // This implies that the difference of the decimal exponents of adjacent
10071|      7|    // table entries must be less than or equal to
10072|      7|    //
10073|      7|    //      floor( (gamma - alpha) * log_10(2) ) = 8.
10074|      7|    //
10075|      7|    // (A smaller distance gamma-alpha would require a larger table.)
10076|      7|
10077|      7|    // NB:
10078|      7|    // Actually this function returns c, such that -60 <= e_c + e + 64 <= -34.
10079|      7|
10080|      7|    constexpr int kCachedPowersSize = 79;
10081|      7|    constexpr int kCachedPowersMinDecExp = -300;
10082|      7|    constexpr int kCachedPowersDecStep = 8;
10083|      7|
10084|      7|    static constexpr cached_power kCachedPowers[] =
10085|      7|    {
10086|      7|        { 0xAB70FE17C79AC6CA, -1060, -300 },
10087|      7|        { 0xFF77B1FCBEBCDC4F, -1034, -292 },
10088|      7|        { 0xBE5691EF416BD60C, -1007, -284 },
10089|      7|        { 0x8DD01FAD907FFC3C,  -980, -276 },
10090|      7|        { 0xD3515C2831559A83,  -954, -268 },
10091|      7|        { 0x9D71AC8FADA6C9B5,  -927, -260 },
10092|      7|        { 0xEA9C227723EE8BCB,  -901, -252 },
10093|      7|        { 0xAECC49914078536D,  -874, -244 },
10094|      7|        { 0x823C12795DB6CE57,  -847, -236 },
10095|      7|        { 0xC21094364DFB5637,  -821, -228 },
10096|      7|        { 0x9096EA6F3848984F,  -794, -220 },
10097|      7|        { 0xD77485CB25823AC7,  -768, -212 },
10098|      7|        { 0xA086CFCD97BF97F4,  -741, -204 },
10099|      7|        { 0xEF340A98172AACE5,  -715, -196 },
10100|      7|        { 0xB23867FB2A35B28E,  -688, -188 },
10101|      7|        { 0x84C8D4DFD2C63F3B,  -661, -180 },
10102|      7|        { 0xC5DD44271AD3CDBA,  -635, -172 },
10103|      7|        { 0x936B9FCEBB25C996,  -608, -164 },
10104|      7|        { 0xDBAC6C247D62A584,  -582, -156 },
10105|      7|        { 0xA3AB66580D5FDAF6,  -555, -148 },
10106|      7|        { 0xF3E2F893DEC3F126,  -529, -140 },
10107|      7|        { 0xB5B5ADA8AAFF80B8,  -502, -132 },
10108|      7|        { 0x87625F056C7C4A8B,  -475, -124 },
10109|      7|        { 0xC9BCFF6034C13053,  -449, -116 },
10110|      7|        { 0x964E858C91BA2655,  -422, -108 },
10111|      7|        { 0xDFF9772470297EBD,  -396, -100 },
10112|      7|        { 0xA6DFBD9FB8E5B88F,  -369,  -92 },
10113|      7|        { 0xF8A95FCF88747D94,  -343,  -84 },
10114|      7|        { 0xB94470938FA89BCF,  -316,  -76 },
10115|      7|        { 0x8A08F0F8BF0F156B,  -289,  -68 },
10116|      7|        { 0xCDB02555653131B6,  -263,  -60 },
10117|      7|        { 0x993FE2C6D07B7FAC,  -236,  -52 },
10118|      7|        { 0xE45C10C42A2B3B06,  -210,  -44 },
10119|      7|        { 0xAA242499697392D3,  -183,  -36 },
10120|      7|        { 0xFD87B5F28300CA0E,  -157,  -28 },
10121|      7|        { 0xBCE5086492111AEB,  -130,  -20 },
10122|      7|        { 0x8CBCCC096F5088CC,  -103,  -12 },
10123|      7|        { 0xD1B71758E219652C,   -77,   -4 },
10124|      7|        { 0x9C40000000000000,   -50,    4 },
10125|      7|        { 0xE8D4A51000000000,   -24,   12 },
10126|      7|        { 0xAD78EBC5AC620000,     3,   20 },
10127|      7|        { 0x813F3978F8940984,    30,   28 },
10128|      7|        { 0xC097CE7BC90715B3,    56,   36 },
10129|      7|        { 0x8F7E32CE7BEA5C70,    83,   44 },
10130|      7|        { 0xD5D238A4ABE98068,   109,   52 },
10131|      7|        { 0x9F4F2726179A2245,   136,   60 },
10132|      7|        { 0xED63A231D4C4FB27,   162,   68 },
10133|      7|        { 0xB0DE65388CC8ADA8,   189,   76 },
10134|      7|        { 0x83C7088E1AAB65DB,   216,   84 },
10135|      7|        { 0xC45D1DF942711D9A,   242,   92 },
10136|      7|        { 0x924D692CA61BE758,   269,  100 },
10137|      7|        { 0xDA01EE641A708DEA,   295,  108 },
10138|      7|        { 0xA26DA3999AEF774A,   322,  116 },
10139|      7|        { 0xF209787BB47D6B85,   348,  124 },
10140|      7|        { 0xB454E4A179DD1877,   375,  132 },
10141|      7|        { 0x865B86925B9BC5C2,   402,  140 },
10142|      7|        { 0xC83553C5C8965D3D,   428,  148 },
10143|      7|        { 0x952AB45CFA97A0B3,   455,  156 },
10144|      7|        { 0xDE469FBD99A05FE3,   481,  164 },
10145|      7|        { 0xA59BC234DB398C25,   508,  172 },
10146|      7|        { 0xF6C69A72A3989F5C,   534,  180 },
10147|      7|        { 0xB7DCBF5354E9BECE,   561,  188 },
10148|      7|        { 0x88FCF317F22241E2,   588,  196 },
10149|      7|        { 0xCC20CE9BD35C78A5,   614,  204 },
10150|      7|        { 0x98165AF37B2153DF,   641,  212 },
10151|      7|        { 0xE2A0B5DC971F303A,   667,  220 },
10152|      7|        { 0xA8D9D1535CE3B396,   694,  228 },
10153|      7|        { 0xFB9B7CD9A4A7443C,   720,  236 },
10154|      7|        { 0xBB764C4CA7A44410,   747,  244 },
10155|      7|        { 0x8BAB8EEFB6409C1A,   774,  252 },
10156|      7|        { 0xD01FEF10A657842C,   800,  260 },
10157|      7|        { 0x9B10A4E5E9913129,   827,  268 },
10158|      7|        { 0xE7109BFBA19C0C9D,   853,  276 },
10159|      7|        { 0xAC2820D9623BF429,   880,  284 },
10160|      7|        { 0x80444B5E7AA7CF85,   907,  292 },
10161|      7|        { 0xBF21E44003ACDD2D,   933,  300 },
10162|      7|        { 0x8E679C2F5E44FF8F,   960,  308 },
10163|      7|        { 0xD433179D9C8CB841,   986,  316 },
10164|      7|        { 0x9E19DB92B4E31BA9,  1013,  324 },
10165|      7|    };
10166|      7|
10167|      7|    // This computation gives exactly the same results for k as
10168|      7|    //      k = ceil((kAlpha - e - 1) * 0.30102999566398114)
10169|      7|    // for |e| <= 1500, but doesn't require floating-point operations.
10170|      7|    // NB: log_10(2) ~= 78913 / 2^18
10171|      7|    assert(e >= -1500);
10172|      7|    assert(e <=  1500);
10173|      7|    const int f = kAlpha - e - 1;
10174|      7|    const int k = (f * 78913) / (1 << 18) + static_cast<int>(f > 0);
10175|      7|
10176|      7|    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;
10177|      7|    assert(index >= 0);
10178|      7|    assert(index < kCachedPowersSize);
10179|      7|    static_cast<void>(kCachedPowersSize); // Fix warning.
10180|      7|
10181|      7|    const cached_power cached = kCachedPowers[index];
10182|      7|    assert(kAlpha <= cached.e + e + 64);
10183|      7|    assert(kGamma >= cached.e + e + 64);
10184|      7|
10185|      7|    return cached;
10186|      7|}
10187|       |
10188|       |/*!
10189|       |For n != 0, returns k, such that pow10 := 10^(k-1) <= n < 10^k.
10190|       |For n == 0, returns 1 and sets pow10 := 1.
10191|       |*/
10192|       |inline int find_largest_pow10(const uint32_t n, uint32_t& pow10)
10193|      7|{
10194|      7|    // LCOV_EXCL_START
10195|      7|    if (n >= 1000000000)
10196|      0|    {
10197|      0|        pow10 = 1000000000;
10198|      0|        return 10;
10199|      0|    }
10200|      7|    // LCOV_EXCL_STOP
10201|      7|    else if (n >= 100000000)
10202|      0|    {
10203|      0|        pow10 = 100000000;
10204|      0|        return  9;
10205|      0|    }
10206|      7|    else if (n >= 10000000)
10207|      0|    {
10208|      0|        pow10 = 10000000;
10209|      0|        return  8;
10210|      0|    }
10211|      7|    else if (n >= 1000000)
10212|      0|    {
10213|      0|        pow10 = 1000000;
10214|      0|        return  7;
10215|      0|    }
10216|      7|    else if (n >= 100000)
10217|      6|    {
10218|      6|        pow10 = 100000;
10219|      6|        return  6;
10220|      6|    }
10221|      1|    else if (n >= 10000)
10222|      1|    {
10223|      1|        pow10 = 10000;
10224|      1|        return  5;
10225|      1|    }
10226|      0|    else if (n >= 1000)
10227|      0|    {
10228|      0|        pow10 = 1000;
10229|      0|        return  4;
10230|      0|    }
10231|      0|    else if (n >= 100)
10232|      0|    {
10233|      0|        pow10 = 100;
10234|      0|        return  3;
10235|      0|    }
10236|      0|    else if (n >= 10)
10237|      0|    {
10238|      0|        pow10 = 10;
10239|      0|        return  2;
10240|      0|    }
10241|      0|    else
10242|      0|    {
10243|      0|        pow10 = 1;
10244|      0|        return 1;
10245|      0|    }
10246|      0|}
10247|       |
10248|       |inline void grisu2_round(char* buf, int len, uint64_t dist, uint64_t delta,
10249|       |                         uint64_t rest, uint64_t ten_k)
10250|      7|{
10251|      7|    assert(len >= 1);
10252|      7|    assert(dist <= delta);
10253|      7|    assert(rest <= delta);
10254|      7|    assert(ten_k > 0);
10255|      7|
10256|      7|    //               <--------------------------- delta ---->
10257|      7|    //                                  <---- dist --------->
10258|      7|    // --------------[------------------+-------------------]--------------
10259|      7|    //               M-                 w                   M+
10260|      7|    //
10261|      7|    //                                  ten_k
10262|      7|    //                                <------>
10263|      7|    //                                       <---- rest ---->
10264|      7|    // --------------[------------------+----+--------------]--------------
10265|      7|    //                                  w    V
10266|      7|    //                                       = buf * 10^k
10267|      7|    //
10268|      7|    // ten_k represents a unit-in-the-last-place in the decimal representation
10269|      7|    // stored in buf.
10270|      7|    // Decrement buf by ten_k while this takes buf closer to w.
10271|      7|
10272|      7|    // The tests are written in this order to avoid overflow in unsigned
10273|      7|    // integer arithmetic.
10274|      7|
10275|      7|    while (rest < dist
10276|      7|            and delta - rest >= ten_k
10277|      7|            and (rest + ten_k < dist or dist - rest > rest + ten_k - dist))
10278|      0|    {
10279|      0|        assert(buf[len - 1] != '0');
10280|      0|        buf[len - 1]--;
10281|      0|        rest += ten_k;
10282|      0|    }
10283|      7|}
10284|       |
10285|       |/*!
10286|       |Generates V = buffer * 10^decimal_exponent, such that M- <= V <= M+.
10287|       |M- and M+ must be normalized and share the same exponent -60 <= e <= -32.
10288|       |*/
10289|       |inline void grisu2_digit_gen(char* buffer, int& length, int& decimal_exponent,
10290|       |                             diyfp M_minus, diyfp w, diyfp M_plus)
10291|      7|{
10292|      7|    static_assert(kAlpha >= -60, "internal error");
10293|      7|    static_assert(kGamma <= -32, "internal error");
10294|      7|
10295|      7|    // Generates the digits (and the exponent) of a decimal floating-point
10296|      7|    // number V = buffer * 10^decimal_exponent in the range [M-, M+]. The diyfp's
10297|      7|    // w, M- and M+ share the same exponent e, which satisfies alpha <= e <= gamma.
10298|      7|    //
10299|      7|    //               <--------------------------- delta ---->
10300|      7|    //                                  <---- dist --------->
10301|      7|    // --------------[------------------+-------------------]--------------
10302|      7|    //               M-                 w                   M+
10303|      7|    //
10304|      7|    // Grisu2 generates the digits of M+ from left to right and stops as soon as
10305|      7|    // V is in [M-,M+].
10306|      7|
10307|      7|    assert(M_plus.e >= kAlpha);
10308|      7|    assert(M_plus.e <= kGamma);
10309|      7|
10310|      7|    uint64_t delta = diyfp::sub(M_plus, M_minus).f; // (significand of (M+ - M-), implicit exponent is e)
10311|      7|    uint64_t dist  = diyfp::sub(M_plus, w      ).f; // (significand of (M+ - w ), implicit exponent is e)
10312|      7|
10313|      7|    // Split M+ = f * 2^e into two parts p1 and p2 (note: e < 0):
10314|      7|    //
10315|      7|    //      M+ = f * 2^e
10316|      7|    //         = ((f div 2^-e) * 2^-e + (f mod 2^-e)) * 2^e
10317|      7|    //         = ((p1        ) * 2^-e + (p2        )) * 2^e
10318|      7|    //         = p1 + p2 * 2^e
10319|      7|
10320|      7|    const diyfp one(uint64_t{1} << -M_plus.e, M_plus.e);
10321|      7|
10322|      7|    auto p1 = static_cast<uint32_t>(M_plus.f >> -one.e); // p1 = f div 2^-e (Since -e >= 32, p1 fits into a 32-bit int.)
10323|      7|    uint64_t p2 = M_plus.f & (one.f - 1);                    // p2 = f mod 2^-e
10324|      7|
10325|      7|    // 1)
10326|      7|    //
10327|      7|    // Generate the digits of the integral part p1 = d[n-1]...d[1]d[0]
10328|      7|
10329|      7|    assert(p1 > 0);
10330|      7|
10331|      7|    uint32_t pow10;
10332|      7|    const int k = find_largest_pow10(p1, pow10);
10333|      7|
10334|      7|    //      10^(k-1) <= p1 < 10^k, pow10 = 10^(k-1)
10335|      7|    //
10336|      7|    //      p1 = (p1 div 10^(k-1)) * 10^(k-1) + (p1 mod 10^(k-1))
10337|      7|    //         = (d[k-1]         ) * 10^(k-1) + (p1 mod 10^(k-1))
10338|      7|    //
10339|      7|    //      M+ = p1                                             + p2 * 2^e
10340|      7|    //         = d[k-1] * 10^(k-1) + (p1 mod 10^(k-1))          + p2 * 2^e
10341|      7|    //         = d[k-1] * 10^(k-1) + ((p1 mod 10^(k-1)) * 2^-e + p2) * 2^e
10342|      7|    //         = d[k-1] * 10^(k-1) + (                         rest) * 2^e
10343|      7|    //
10344|      7|    // Now generate the digits d[n] of p1 from left to right (n = k-1,...,0)
10345|      7|    //
10346|      7|    //      p1 = d[k-1]...d[n] * 10^n + d[n-1]...d[0]
10347|      7|    //
10348|      7|    // but stop as soon as
10349|      7|    //
10350|      7|    //      rest * 2^e = (d[n-1]...d[0] * 2^-e + p2) * 2^e <= delta * 2^e
10351|      7|
10352|      7|    int n = k;
10353|     41|    while (n > 0)
10354|     37|    {
10355|     37|        // Invariants:
10356|     37|        //      M+ = buffer * 10^n + (p1 + p2 * 2^e)    (buffer = 0 for n = k)
10357|     37|        //      pow10 = 10^(n-1) <= p1 < 10^n
10358|     37|        //
10359|     37|        const uint32_t d = p1 / pow10;  // d = p1 div 10^(n-1)
10360|     37|        const uint32_t r = p1 % pow10;  // r = p1 mod 10^(n-1)
10361|     37|        //
10362|     37|        //      M+ = buffer * 10^n + (d * 10^(n-1) + r) + p2 * 2^e
10363|     37|        //         = (buffer * 10 + d) * 10^(n-1) + (r + p2 * 2^e)
10364|     37|        //
10365|     37|        assert(d <= 9);
10366|     37|        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d
10367|     37|        //
10368|     37|        //      M+ = buffer * 10^(n-1) + (r + p2 * 2^e)
10369|     37|        //
10370|     37|        p1 = r;
10371|     37|        n--;
10372|     37|        //
10373|     37|        //      M+ = buffer * 10^n + (p1 + p2 * 2^e)
10374|     37|        //      pow10 = 10^n
10375|     37|        //
10376|     37|
10377|     37|        // Now check if enough digits have been generated.
10378|     37|        // Compute
10379|     37|        //
10380|     37|        //      p1 + p2 * 2^e = (p1 * 2^-e + p2) * 2^e = rest * 2^e
10381|     37|        //
10382|     37|        // Note:
10383|     37|        // Since rest and delta share the same exponent e, it suffices to
10384|     37|        // compare the significands.
10385|     37|        const uint64_t rest = (uint64_t{p1} << -one.e) + p2;
10386|     37|        if (rest <= delta)
10387|      3|        {
10388|      3|            // V = buffer * 10^n, with M- <= V <= M+.
10389|      3|
10390|      3|            decimal_exponent += n;
10391|      3|
10392|      3|            // We may now just stop. But instead look if the buffer could be
10393|      3|            // decremented to bring V closer to w.
10394|      3|            //
10395|      3|            // pow10 = 10^n is now 1 ulp in the decimal representation V.
10396|      3|            // The rounding procedure works with diyfp's with an implicit
10397|      3|            // exponent of e.
10398|      3|            //
10399|      3|            //      10^n = (10^n * 2^-e) * 2^e = ulp * 2^e
10400|      3|            //
10401|      3|            const uint64_t ten_n = uint64_t{pow10} << -one.e;
10402|      3|            grisu2_round(buffer, length, dist, delta, rest, ten_n);
10403|      3|
10404|      3|            return;
10405|      3|        }
10406|     34|
10407|     34|        pow10 /= 10;
10408|     34|        //
10409|     34|        //      pow10 = 10^(n-1) <= p1 < 10^n
10410|     34|        // Invariants restored.
10411|     34|    }
10412|      7|
10413|      7|    // 2)
10414|      7|    //
10415|      7|    // The digits of the integral part have been generated:
10416|      7|    //
10417|      7|    //      M+ = d[k-1]...d[1]d[0] + p2 * 2^e
10418|      7|    //         = buffer            + p2 * 2^e
10419|      7|    //
10420|      7|    // Now generate the digits of the fractional part p2 * 2^e.
10421|      7|    //
10422|      7|    // Note:
10423|      7|    // No decimal point is generated: the exponent is adjusted instead.
10424|      7|    //
10425|      7|    // p2 actually represents the fraction
10426|      7|    //
10427|      7|    //      p2 * 2^e
10428|      7|    //          = p2 / 2^-e
10429|      7|    //          = d[-1] / 10^1 + d[-2] / 10^2 + ...
10430|      7|    //
10431|      7|    // Now generate the digits d[-m] of p1 from left to right (m = 1,2,...)
10432|      7|    //
10433|      7|    //      p2 * 2^e = d[-1]d[-2]...d[-m] * 10^-m
10434|      7|    //                      + 10^-m * (d[-m-1] / 10^1 + d[-m-2] / 10^2 + ...)
10435|      7|    //
10436|      7|    // using
10437|      7|    //
10438|      7|    //      10^m * p2 = ((10^m * p2) div 2^-e) * 2^-e + ((10^m * p2) mod 2^-e)
10439|      7|    //                = (                   d) * 2^-e + (                   r)
10440|      7|    //
10441|      7|    // or
10442|      7|    //      10^m * p2 * 2^e = d + r * 2^e
10443|      7|    //
10444|      7|    // i.e.
10445|      7|    //
10446|      7|    //      M+ = buffer + p2 * 2^e
10447|      7|    //         = buffer + 10^-m * (d + r * 2^e)
10448|      7|    //         = (buffer * 10^m + d) * 10^-m + 10^-m * r * 2^e
10449|      7|    //
10450|      7|    // and stop as soon as 10^-m * r * 2^e <= delta * 2^e
10451|      7|
10452|      7|    assert(p2 > delta);
10453|      4|
10454|      4|    int m = 0;
10455|      4|    for (;;)
10456|      4|    {
10457|      4|        // Invariant:
10458|      4|        //      M+ = buffer * 10^-m + 10^-m * (d[-m-1] / 10 + d[-m-2] / 10^2 + ...) * 2^e
10459|      4|        //         = buffer * 10^-m + 10^-m * (p2                                 ) * 2^e
10460|      4|        //         = buffer * 10^-m + 10^-m * (1/10 * (10 * p2)                   ) * 2^e
10461|      4|        //         = buffer * 10^-m + 10^-m * (1/10 * ((10*p2 div 2^-e) * 2^-e + (10*p2 mod 2^-e)) * 2^e
10462|      4|        //
10463|      4|        assert(p2 <= UINT64_MAX / 10);
10464|      4|        p2 *= 10;
10465|      4|        const uint64_t d = p2 >> -one.e;     // d = (10 * p2) div 2^-e
10466|      4|        const uint64_t r = p2 & (one.f - 1); // r = (10 * p2) mod 2^-e
10467|      4|        //
10468|      4|        //      M+ = buffer * 10^-m + 10^-m * (1/10 * (d * 2^-e + r) * 2^e
10469|      4|        //         = buffer * 10^-m + 10^-m * (1/10 * (d + r * 2^e))
10470|      4|        //         = (buffer * 10 + d) * 10^(-m-1) + 10^(-m-1) * r * 2^e
10471|      4|        //
10472|      4|        assert(d <= 9);
10473|      4|        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d
10474|      4|        //
10475|      4|        //      M+ = buffer * 10^(-m-1) + 10^(-m-1) * r * 2^e
10476|      4|        //
10477|      4|        p2 = r;
10478|      4|        m++;
10479|      4|        //
10480|      4|        //      M+ = buffer * 10^-m + 10^-m * p2 * 2^e
10481|      4|        // Invariant restored.
10482|      4|
10483|      4|        // Check if enough digits have been generated.
10484|      4|        //
10485|      4|        //      10^-m * p2 * 2^e <= delta * 2^e
10486|      4|        //              p2 * 2^e <= 10^m * delta * 2^e
10487|      4|        //                    p2 <= 10^m * delta
10488|      4|        delta *= 10;
10489|      4|        dist  *= 10;
10490|      4|        if (p2 <= delta)
10491|      4|        {
10492|      4|            break;
10493|      4|        }
10494|      4|    }
10495|      4|
10496|      4|    // V = buffer * 10^-m, with M- <= V <= M+.
10497|      4|
10498|      4|    decimal_exponent -= m;
10499|      4|
10500|      4|    // 1 ulp in the decimal representation is now 10^-m.
10501|      4|    // Since delta and dist are now scaled by 10^m, we need to do the
10502|      4|    // same with ulp in order to keep the units in sync.
10503|      4|    //
10504|      4|    //      10^m * 10^-m = 1 = 2^-e * 2^e = ten_m * 2^e
10505|      4|    //
10506|      4|    const uint64_t ten_m = one.f;
10507|      4|    grisu2_round(buffer, length, dist, delta, p2, ten_m);
10508|      4|
10509|      4|    // By construction this algorithm generates the shortest possible decimal
10510|      4|    // number (Loitsch, Theorem 6.2) which rounds back to w.
10511|      4|    // For an input number of precision p, at least
10512|      4|    //
10513|      4|    //      N = 1 + ceil(p * log_10(2))
10514|      4|    //
10515|      4|    // decimal digits are sufficient to identify all binary floating-point
10516|      4|    // numbers (Matula, "In-and-Out conversions").
10517|      4|    // This implies that the algorithm does not produce more than N decimal
10518|      4|    // digits.
10519|      4|    //
10520|      4|    //      N = 17 for p = 53 (IEEE double precision)
10521|      4|    //      N = 9  for p = 24 (IEEE single precision)
10522|      4|}
10523|       |
10524|       |/*!
10525|       |v = buf * 10^decimal_exponent
10526|       |len is the length of the buffer (number of decimal digits)
10527|       |The buffer must be large enough, i.e. >= max_digits10.
10528|       |*/
10529|       |inline void grisu2(char* buf, int& len, int& decimal_exponent,
10530|       |                   diyfp m_minus, diyfp v, diyfp m_plus)
10531|      7|{
10532|      7|    assert(m_plus.e == m_minus.e);
10533|      7|    assert(m_plus.e == v.e);
10534|      7|
10535|      7|    //  --------(-----------------------+-----------------------)--------    (A)
10536|      7|    //          m-                      v                       m+
10537|      7|    //
10538|      7|    //  --------------------(-----------+-----------------------)--------    (B)
10539|      7|    //                      m-          v                       m+
10540|      7|    //
10541|      7|    // First scale v (and m- and m+) such that the exponent is in the range
10542|      7|    // [alpha, gamma].
10543|      7|
10544|      7|    const cached_power cached = get_cached_power_for_binary_exponent(m_plus.e);
10545|      7|
10546|      7|    const diyfp c_minus_k(cached.f, cached.e); // = c ~= 10^-k
10547|      7|
10548|      7|    // The exponent of the products is = v.e + c_minus_k.e + q and is in the range [alpha,gamma]
10549|      7|    const diyfp w       = diyfp::mul(v,       c_minus_k);
10550|      7|    const diyfp w_minus = diyfp::mul(m_minus, c_minus_k);
10551|      7|    const diyfp w_plus  = diyfp::mul(m_plus,  c_minus_k);
10552|      7|
10553|      7|    //  ----(---+---)---------------(---+---)---------------(---+---)----
10554|      7|    //          w-                      w                       w+
10555|      7|    //          = c*m-                  = c*v                   = c*m+
10556|      7|    //
10557|      7|    // diyfp::mul rounds its result and c_minus_k is approximated too. w, w- and
10558|      7|    // w+ are now off by a small amount.
10559|      7|    // In fact:
10560|      7|    //
10561|      7|    //      w - v * 10^k < 1 ulp
10562|      7|    //
10563|      7|    // To account for this inaccuracy, add resp. subtract 1 ulp.
10564|      7|    //
10565|      7|    //  --------+---[---------------(---+---)---------------]---+--------
10566|      7|    //          w-  M-                  w                   M+  w+
10567|      7|    //
10568|      7|    // Now any number in [M-, M+] (bounds included) will round to w when input,
10569|      7|    // regardless of how the input rounding algorithm breaks ties.
10570|      7|    //
10571|      7|    // And digit_gen generates the shortest possible such number in [M-, M+].
10572|      7|    // Note that this does not mean that Grisu2 always generates the shortest
10573|      7|    // possible number in the interval (m-, m+).
10574|      7|    const diyfp M_minus(w_minus.f + 1, w_minus.e);
10575|      7|    const diyfp M_plus (w_plus.f  - 1, w_plus.e );
10576|      7|
10577|      7|    decimal_exponent = -cached.k; // = -(-k) = k
10578|      7|
10579|      7|    grisu2_digit_gen(buf, len, decimal_exponent, M_minus, w, M_plus);
10580|      7|}
10581|       |
10582|       |/*!
10583|       |v = buf * 10^decimal_exponent
10584|       |len is the length of the buffer (number of decimal digits)
10585|       |The buffer must be large enough, i.e. >= max_digits10.
10586|       |*/
10587|       |template <typename FloatType>
10588|       |void grisu2(char* buf, int& len, int& decimal_exponent, FloatType value)
10589|      7|{
10590|      7|    static_assert(diyfp::kPrecision >= std::numeric_limits<FloatType>::digits + 3,
10591|      7|                  "internal error: not enough precision");
10592|      7|
10593|      7|    assert(std::isfinite(value));
10594|      7|    assert(value > 0);
10595|      7|
10596|      7|    // If the neighbors (and boundaries) of 'value' are always computed for double-precision
10597|      7|    // numbers, all float's can be recovered using strtod (and strtof). However, the resulting
10598|      7|    // decimal representations are not exactly "short".
10599|      7|    //
10600|      7|    // The documentation for 'std::to_chars' (https://en.cppreference.com/w/cpp/utility/to_chars)
10601|      7|    // says "value is converted to a string as if by std::sprintf in the default ("C") locale"
10602|      7|    // and since sprintf promotes float's to double's, I think this is exactly what 'std::to_chars'
10603|      7|    // does.
10604|      7|    // On the other hand, the documentation for 'std::to_chars' requires that "parsing the
10605|      7|    // representation using the corresponding std::from_chars function recovers value exactly". That
10606|      7|    // indicates that single precision floating-point numbers should be recovered using
10607|      7|    // 'std::strtof'.
10608|      7|    //
10609|      7|    // NB: If the neighbors are computed for single-precision numbers, there is a single float
10610|      7|    //     (7.0385307e-26f) which can't be recovered using strtod. The resulting double precision
10611|      7|    //     value is off by 1 ulp.
10612|       |#if 0
10613|       |    const boundaries w = compute_boundaries(static_cast<double>(value));
10614|       |#else
10615|       |    const boundaries w = compute_boundaries(value);
10616|      7|#endif
10617|      7|
10618|      7|    grisu2(buf, len, decimal_exponent, w.minus, w.w, w.plus);
10619|      7|}
10620|       |
10621|       |/*!
10622|       |@brief appends a decimal representation of e to buf
10623|       |@return a pointer to the element following the exponent.
10624|       |@pre -1000 < e < 1000
10625|       |*/
10626|       |inline char* append_exponent(char* buf, int e)
10627|      0|{
10628|      0|    assert(e > -1000);
10629|      0|    assert(e <  1000);
10630|      0|
10631|      0|    if (e < 0)
10632|      0|    {
10633|      0|        e = -e;
10634|      0|        *buf++ = '-';
10635|      0|    }
10636|      0|    else
10637|      0|    {
10638|      0|        *buf++ = '+';
10639|      0|    }
10640|      0|
10641|      0|    auto k = static_cast<uint32_t>(e);
10642|      0|    if (k < 10)
10643|      0|    {
10644|      0|        // Always print at least two digits in the exponent.
10645|      0|        // This is for compatibility with printf("%g").
10646|      0|        *buf++ = '0';
10647|      0|        *buf++ = static_cast<char>('0' + k);
10648|      0|    }
10649|      0|    else if (k < 100)
10650|      0|    {
10651|      0|        *buf++ = static_cast<char>('0' + k / 10);
10652|      0|        k %= 10;
10653|      0|        *buf++ = static_cast<char>('0' + k);
10654|      0|    }
10655|      0|    else
10656|      0|    {
10657|      0|        *buf++ = static_cast<char>('0' + k / 100);
10658|      0|        k %= 100;
10659|      0|        *buf++ = static_cast<char>('0' + k / 10);
10660|      0|        k %= 10;
10661|      0|        *buf++ = static_cast<char>('0' + k);
10662|      0|    }
10663|      0|
10664|      0|    return buf;
10665|      0|}
10666|       |
10667|       |/*!
10668|       |@brief prettify v = buf * 10^decimal_exponent
10669|       |
10670|       |If v is in the range [10^min_exp, 10^max_exp) it will be printed in fixed-point
10671|       |notation. Otherwise it will be printed in exponential notation.
10672|       |
10673|       |@pre min_exp < 0
10674|       |@pre max_exp > 0
10675|       |*/
10676|       |inline char* format_buffer(char* buf, int len, int decimal_exponent,
10677|       |                           int min_exp, int max_exp)
10678|      7|{
10679|      7|    assert(min_exp < 0);
10680|      7|    assert(max_exp > 0);
10681|      7|
10682|      7|    const int k = len;
10683|      7|    const int n = len + decimal_exponent;
10684|      7|
10685|      7|    // v = buf * 10^(n-k)
10686|      7|    // k is the length of the buffer (number of decimal digits)
10687|      7|    // n is the position of the decimal point relative to the start of the buffer.
10688|      7|
10689|      7|    if (k <= n and n <= max_exp)
10690|      0|    {
10691|      0|        // digits[000]
10692|      0|        // len <= max_exp + 2
10693|      0|
10694|      0|        std::memset(buf + k, '0', static_cast<size_t>(n - k));
10695|      0|        // Make it look like a floating-point number (#362, #378)
10696|      0|        buf[n + 0] = '.';
10697|      0|        buf[n + 1] = '0';
10698|      0|        return buf + (n + 2);
10699|      0|    }
10700|      7|
10701|      7|    if (0 < n and n <= max_exp)
10702|      7|    {
10703|      7|        // dig.its
10704|      7|        // len <= max_digits10 + 1
10705|      7|
10706|      7|        assert(k > n);
10707|      7|
10708|      7|        std::memmove(buf + (n + 1), buf + n, static_cast<size_t>(k - n));
10709|      7|        buf[n] = '.';
10710|      7|        return buf + (k + 1);
10711|      7|    }
10712|      0|
10713|      0|    if (min_exp < n and n <= 0)
10714|      0|    {
10715|      0|        // 0.[000]digits
10716|      0|        // len <= 2 + (-min_exp - 1) + max_digits10
10717|      0|
10718|      0|        std::memmove(buf + (2 + -n), buf, static_cast<size_t>(k));
10719|      0|        buf[0] = '0';
10720|      0|        buf[1] = '.';
10721|      0|        std::memset(buf + 2, '0', static_cast<size_t>(-n));
10722|      0|        return buf + (2 + (-n) + k);
10723|      0|    }
10724|      0|
10725|      0|    if (k == 1)
10726|      0|    {
10727|      0|        // dE+123
10728|      0|        // len <= 1 + 5
10729|      0|
10730|      0|        buf += 1;
10731|      0|    }
10732|      0|    else
10733|      0|    {
10734|      0|        // d.igitsE+123
10735|      0|        // len <= max_digits10 + 1 + 5
10736|      0|
10737|      0|        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k - 1));
10738|      0|        buf[1] = '.';
10739|      0|        buf += 1 + k;
10740|      0|    }
10741|      0|
10742|      0|    *buf++ = 'e';
10743|      0|    return append_exponent(buf, n - 1);
10744|      0|}
10745|       |
10746|       |} // namespace dtoa_impl
10747|       |
10748|       |/*!
10749|       |@brief generates a decimal representation of the floating-point number value in [first, last).
10750|       |
10751|       |The format of the resulting decimal representation is similar to printf's %g
10752|       |format. Returns an iterator pointing past-the-end of the decimal representation.
10753|       |
10754|       |@note The input number must be finite, i.e. NaN's and Inf's are not supported.
10755|       |@note The buffer must be large enough.
10756|       |@note The result is NOT null-terminated.
10757|       |*/
10758|       |template <typename FloatType>
10759|       |char* to_chars(char* first, const char* last, FloatType value)
10760|      7|{
10761|      7|    static_cast<void>(last); // maybe unused - fix warning
10762|      7|    assert(std::isfinite(value));
10763|      7|
10764|      7|    // Use signbit(value) instead of (value < 0) since signbit works for -0.
10765|      7|    if (std::signbit(value))
10766|      0|    {
10767|      0|        value = -value;
10768|      0|        *first++ = '-';
10769|      0|    }
10770|      7|
10771|      7|    if (value == 0) // +-0
10772|      0|    {
10773|      0|        *first++ = '0';
10774|      0|        // Make it look like a floating-point number (#362, #378)
10775|      0|        *first++ = '.';
10776|      0|        *first++ = '0';
10777|      0|        return first;
10778|      0|    }
10779|      7|
10780|      7|    assert(last - first >= std::numeric_limits<FloatType>::max_digits10);
10781|      7|
10782|      7|    // Compute v = buffer * 10^decimal_exponent.
10783|      7|    // The decimal digits are stored in the buffer, which needs to be interpreted
10784|      7|    // as an unsigned decimal integer.
10785|      7|    // len is the length of the buffer, i.e. the number of decimal digits.
10786|      7|    int len = 0;
10787|      7|    int decimal_exponent = 0;
10788|      7|    dtoa_impl::grisu2(first, len, decimal_exponent, value);
10789|      7|
10790|      7|    assert(len <= std::numeric_limits<FloatType>::max_digits10);
10791|      7|
10792|      7|    // Format the buffer like printf("%.*g", prec, value)
10793|      7|    constexpr int kMinExp = -4;
10794|      7|    // Use digits10 here to increase compatibility with version 2.
10795|      7|    constexpr int kMaxExp = std::numeric_limits<FloatType>::digits10;
10796|      7|
10797|      7|    assert(last - first >= kMaxExp + 2);
10798|      7|    assert(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);
10799|      7|    assert(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);
10800|      7|
10801|      7|    return dtoa_impl::format_buffer(first, len, decimal_exponent, kMinExp, kMaxExp);
10802|      7|}
10803|       |
10804|       |} // namespace detail
10805|       |} // namespace nlohmann
10806|       |
10807|       |// #include <nlohmann/detail/macro_scope.hpp>
10808|       |
10809|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
10810|       |
10811|       |// #include <nlohmann/detail/output/binary_writer.hpp>
10812|       |
10813|       |// #include <nlohmann/detail/output/output_adapters.hpp>
10814|       |
10815|       |// #include <nlohmann/detail/value_t.hpp>
10816|       |
10817|       |
10818|       |namespace nlohmann
10819|       |{
10820|       |namespace detail
10821|       |{
10822|       |///////////////////
10823|       |// serialization //
10824|       |///////////////////
10825|       |
10826|       |/// how to treat decoding errors
10827|       |enum class error_handler_t
10828|       |{
10829|       |    strict,  ///< throw a type_error exception in case of invalid UTF-8
10830|       |    replace, ///< replace invalid UTF-8 sequences with U+FFFD
10831|       |    ignore   ///< ignore invalid UTF-8 sequences
10832|       |};
10833|       |
10834|       |template<typename BasicJsonType>
10835|       |class serializer
10836|       |{
10837|       |    using string_t = typename BasicJsonType::string_t;
10838|       |    using number_float_t = typename BasicJsonType::number_float_t;
10839|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
10840|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
10841|       |    static constexpr uint8_t UTF8_ACCEPT = 0;
10842|       |    static constexpr uint8_t UTF8_REJECT = 1;
10843|       |
10844|       |  public:
10845|       |    /*!
10846|       |    @param[in] s  output stream to serialize to
10847|       |    @param[in] ichar  indentation character to use
10848|       |    @param[in] error_handler_  how to react on decoding errors
10849|       |    */
10850|       |    serializer(output_adapter_t<char> s, const char ichar,
10851|       |               error_handler_t error_handler_ = error_handler_t::strict)
10852|       |        : o(std::move(s))
10853|       |        , loc(std::localeconv())
10854|       |        , thousands_sep(loc->thousands_sep == nullptr ? '\0' : * (loc->thousands_sep))
10855|       |        , decimal_point(loc->decimal_point == nullptr ? '\0' : * (loc->decimal_point))
10856|       |        , indent_char(ichar)
10857|       |        , indent_string(512, indent_char)
10858|       |        , error_handler(error_handler_)
10859|    144|    {}
10860|       |
10861|       |    // delete because of pointer members
10862|       |    serializer(const serializer&) = delete;
10863|       |    serializer& operator=(const serializer&) = delete;
10864|       |    serializer(serializer&&) = delete;
10865|       |    serializer& operator=(serializer&&) = delete;
10866|    144|    ~serializer() = default;
10867|       |
10868|       |    /*!
10869|       |    @brief internal implementation of the serialization function
10870|       |
10871|       |    This function is called by the public member function dump and organizes
10872|       |    the serialization internally. The indentation level is propagated as
10873|       |    additional parameter. In case of arrays and objects, the function is
10874|       |    called recursively.
10875|       |
10876|       |    - strings and object keys are escaped using `escape_string()`
10877|       |    - integer numbers are converted implicitly via `operator<<`
10878|       |    - floating-point numbers are converted to a string using `"%g"` format
10879|       |
10880|       |    @param[in] val             value to serialize
10881|       |    @param[in] pretty_print    whether the output shall be pretty-printed
10882|       |    @param[in] indent_step     the indent level
10883|       |    @param[in] current_indent  the current indent level (only used internally)
10884|       |    */
10885|       |    void dump(const BasicJsonType& val, const bool pretty_print,
10886|       |              const bool ensure_ascii,
10887|       |              const unsigned int indent_step,
10888|       |              const unsigned int current_indent = 0)
10889|  3.17k|    {
10890|  3.17k|        switch (val.m_type)
10891|  3.17k|        {
10892|  3.17k|            case value_t::object:
10893|    724|            {
10894|    724|                if (val.m_value.object->empty())
10895|      0|                {
10896|      0|                    o->write_characters("{}", 2);
10897|      0|                    return;
10898|      0|                }
10899|    724|
10900|    724|                if (pretty_print)
10901|    437|                {
10902|    437|                    o->write_characters("{\n", 2);
10903|    437|
10904|    437|                    // variable to hold indentation for recursive calls
10905|    437|                    const auto new_indent = current_indent + indent_step;
10906|    437|                    if (JSON_UNLIKELY(indent_string.size() < new_indent))
10907|    437|                    {
10908|      0|                        indent_string.resize(indent_string.size() * 2, ' ');
10909|      0|                    }
10910|    437|
10911|    437|                    // first n-1 elements
10912|    437|                    auto i = val.m_value.object->cbegin();
10913|  2.05k|                    for (std::size_t cnt = 0; cnt < val.m_value.object->size() - 1; ++cnt, ++i)
10914|  1.62k|                    {
10915|  1.62k|                        o->write_characters(indent_string.c_str(), new_indent);
10916|  1.62k|                        o->write_character('\"');
10917|  1.62k|                        dump_escaped(i->first, ensure_ascii);
10918|  1.62k|                        o->write_characters("\": ", 3);
10919|  1.62k|                        dump(i->second, true, ensure_ascii, indent_step, new_indent);
10920|  1.62k|                        o->write_characters(",\n", 2);
10921|  1.62k|                    }
10922|    437|
10923|    437|                    // last element
10924|    437|                    assert(i != val.m_value.object->cend());
10925|    437|                    assert(std::next(i) == val.m_value.object->cend());
10926|    437|                    o->write_characters(indent_string.c_str(), new_indent);
10927|    437|                    o->write_character('\"');
10928|    437|                    dump_escaped(i->first, ensure_ascii);
10929|    437|                    o->write_characters("\": ", 3);
10930|    437|                    dump(i->second, true, ensure_ascii, indent_step, new_indent);
10931|    437|
10932|    437|                    o->write_character('\n');
10933|    437|                    o->write_characters(indent_string.c_str(), current_indent);
10934|    437|                    o->write_character('}');
10935|    437|                }
10936|    287|                else
10937|    287|                {
10938|    287|                    o->write_character('{');
10939|    287|
10940|    287|                    // first n-1 elements
10941|    287|                    auto i = val.m_value.object->cbegin();
10942|    971|                    for (std::size_t cnt = 0; cnt < val.m_value.object->size() - 1; ++cnt, ++i)
10943|    684|                    {
10944|    684|                        o->write_character('\"');
10945|    684|                        dump_escaped(i->first, ensure_ascii);
10946|    684|                        o->write_characters("\":", 2);
10947|    684|                        dump(i->second, false, ensure_ascii, indent_step, current_indent);
10948|    684|                        o->write_character(',');
10949|    684|                    }
10950|    287|
10951|    287|                    // last element
10952|    287|                    assert(i != val.m_value.object->cend());
10953|    287|                    assert(std::next(i) == val.m_value.object->cend());
10954|    287|                    o->write_character('\"');
10955|    287|                    dump_escaped(i->first, ensure_ascii);
10956|    287|                    o->write_characters("\":", 2);
10957|    287|                    dump(i->second, false, ensure_ascii, indent_step, current_indent);
10958|    287|
10959|    287|                    o->write_character('}');
10960|    287|                }
10961|    724|
10962|    724|                return;
10963|    724|            }
10964|    724|
10965|    724|            case value_t::array:
10966|      1|            {
10967|      1|                if (val.m_value.array->empty())
10968|      0|                {
10969|      0|                    o->write_characters("[]", 2);
10970|      0|                    return;
10971|      0|                }
10972|      1|
10973|      1|                if (pretty_print)
10974|      1|                {
10975|      1|                    o->write_characters("[\n", 2);
10976|      1|
10977|      1|                    // variable to hold indentation for recursive calls
10978|      1|                    const auto new_indent = current_indent + indent_step;
10979|      1|                    if (JSON_UNLIKELY(indent_string.size() < new_indent))
10980|      1|                    {
10981|      0|                        indent_string.resize(indent_string.size() * 2, ' ');
10982|      0|                    }
10983|      1|
10984|      1|                    // first n-1 elements
10985|      1|                    for (auto i = val.m_value.array->cbegin();
10986|      1|                            i != val.m_value.array->cend() - 1; ++i)
10987|      0|                    {
10988|      0|                        o->write_characters(indent_string.c_str(), new_indent);
10989|      0|                        dump(*i, true, ensure_ascii, indent_step, new_indent);
10990|      0|                        o->write_characters(",\n", 2);
10991|      0|                    }
10992|      1|
10993|      1|                    // last element
10994|      1|                    assert(not val.m_value.array->empty());
10995|      1|                    o->write_characters(indent_string.c_str(), new_indent);
10996|      1|                    dump(val.m_value.array->back(), true, ensure_ascii, indent_step, new_indent);
10997|      1|
10998|      1|                    o->write_character('\n');
10999|      1|                    o->write_characters(indent_string.c_str(), current_indent);
11000|      1|                    o->write_character(']');
11001|      1|                }
11002|      0|                else
11003|      0|                {
11004|      0|                    o->write_character('[');
11005|      0|
11006|      0|                    // first n-1 elements
11007|      0|                    for (auto i = val.m_value.array->cbegin();
11008|      0|                            i != val.m_value.array->cend() - 1; ++i)
11009|      0|                    {
11010|      0|                        dump(*i, false, ensure_ascii, indent_step, current_indent);
11011|      0|                        o->write_character(',');
11012|      0|                    }
11013|      0|
11014|      0|                    // last element
11015|      0|                    assert(not val.m_value.array->empty());
11016|      0|                    dump(val.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);
11017|      0|
11018|      0|                    o->write_character(']');
11019|      0|                }
11020|      1|
11021|      1|                return;
11022|      1|            }
11023|      1|
11024|  2.06k|            case value_t::string:
11025|  2.06k|            {
11026|  2.06k|                o->write_character('\"');
11027|  2.06k|                dump_escaped(*val.m_value.string, ensure_ascii);
11028|  2.06k|                o->write_character('\"');
11029|  2.06k|                return;
11030|      1|            }
11031|      1|
11032|      2|            case value_t::boolean:
11033|      2|            {
11034|      2|                if (val.m_value.boolean)
11035|      2|                {
11036|      2|                    o->write_characters("true", 4);
11037|      2|                }
11038|      0|                else
11039|      0|                {
11040|      0|                    o->write_characters("false", 5);
11041|      0|                }
11042|      2|                return;
11043|      1|            }
11044|      1|
11045|      2|            case value_t::number_integer:
11046|      2|            {
11047|      2|                dump_integer(val.m_value.number_integer);
11048|      2|                return;
11049|      1|            }
11050|      1|
11051|    356|            case value_t::number_unsigned:
11052|    356|            {
11053|    356|                dump_integer(val.m_value.number_unsigned);
11054|    356|                return;
11055|      1|            }
11056|      1|
11057|      7|            case value_t::number_float:
11058|      7|            {
11059|      7|                dump_float(val.m_value.number_float);
11060|      7|                return;
11061|      1|            }
11062|      1|
11063|      1|            case value_t::discarded:
11064|      0|            {
11065|      0|                o->write_characters("<discarded>", 11);
11066|      0|                return;
11067|      1|            }
11068|      1|
11069|     14|            case value_t::null:
11070|     14|            {
11071|     14|                o->write_characters("null", 4);
11072|     14|                return;
11073|      0|            }
11074|      0|        }
11075|      0|    }
11076|       |
11077|       |  private:
11078|       |    /*!
11079|       |    @brief dump escaped string
11080|       |
11081|       |    Escape a string by replacing certain special characters by a sequence of an
11082|       |    escape character (backslash) and another character and other control
11083|       |    characters by a sequence of "\u" followed by a four-digit hex
11084|       |    representation. The escaped string is written to output stream @a o.
11085|       |
11086|       |    @param[in] s  the string to escape
11087|       |    @param[in] ensure_ascii  whether to escape non-ASCII characters with
11088|       |                             \uXXXX sequences
11089|       |
11090|       |    @complexity Linear in the length of string @a s.
11091|       |    */
11092|       |    void dump_escaped(const string_t& s, const bool ensure_ascii)
11093|  5.09k|    {
11094|  5.09k|        uint32_t codepoint;
11095|  5.09k|        uint8_t state = UTF8_ACCEPT;
11096|  5.09k|        std::size_t bytes = 0;  // number of bytes written to string_buffer
11097|  5.09k|
11098|  5.09k|        // number of bytes written at the point of the last valid byte
11099|  5.09k|        std::size_t bytes_after_last_accept = 0;
11100|  5.09k|        std::size_t undumped_chars = 0;
11101|  5.09k|
11102|  33.6k|        for (std::size_t i = 0; i < s.size(); ++i)
11103|  28.5k|        {
11104|  28.5k|            const auto byte = static_cast<uint8_t>(s[i]);
11105|  28.5k|
11106|  28.5k|            switch (decode(state, codepoint, byte))
11107|  28.5k|            {
11108|  28.5k|                case UTF8_ACCEPT:  // decode found a new code point
11109|  28.5k|                {
11110|  28.5k|                    switch (codepoint)
11111|  28.5k|                    {
11112|  28.5k|                        case 0x08: // backspace
11113|      0|                        {
11114|      0|                            string_buffer[bytes++] = '\\';
11115|      0|                            string_buffer[bytes++] = 'b';
11116|      0|                            break;
11117|  28.5k|                        }
11118|  28.5k|
11119|  28.5k|                        case 0x09: // horizontal tab
11120|      0|                        {
11121|      0|                            string_buffer[bytes++] = '\\';
11122|      0|                            string_buffer[bytes++] = 't';
11123|      0|                            break;
11124|  28.5k|                        }
11125|  28.5k|
11126|  28.5k|                        case 0x0A: // newline
11127|      0|                        {
11128|      0|                            string_buffer[bytes++] = '\\';
11129|      0|                            string_buffer[bytes++] = 'n';
11130|      0|                            break;
11131|  28.5k|                        }
11132|  28.5k|
11133|  28.5k|                        case 0x0C: // formfeed
11134|      0|                        {
11135|      0|                            string_buffer[bytes++] = '\\';
11136|      0|                            string_buffer[bytes++] = 'f';
11137|      0|                            break;
11138|  28.5k|                        }
11139|  28.5k|
11140|  28.5k|                        case 0x0D: // carriage return
11141|      0|                        {
11142|      0|                            string_buffer[bytes++] = '\\';
11143|      0|                            string_buffer[bytes++] = 'r';
11144|      0|                            break;
11145|  28.5k|                        }
11146|  28.5k|
11147|  28.5k|                        case 0x22: // quotation mark
11148|      0|                        {
11149|      0|                            string_buffer[bytes++] = '\\';
11150|      0|                            string_buffer[bytes++] = '\"';
11151|      0|                            break;
11152|  28.5k|                        }
11153|  28.5k|
11154|  28.5k|                        case 0x5C: // reverse solidus
11155|      0|                        {
11156|      0|                            string_buffer[bytes++] = '\\';
11157|      0|                            string_buffer[bytes++] = '\\';
11158|      0|                            break;
11159|  28.5k|                        }
11160|  28.5k|
11161|  28.5k|                        default:
11162|  28.5k|                        {
11163|  28.5k|                            // escape control characters (0x00..0x1F) or, if
11164|  28.5k|                            // ensure_ascii parameter is used, non-ASCII characters
11165|  28.5k|                            if ((codepoint <= 0x1F) or (ensure_ascii and (codepoint >= 0x7F)))
11166|      0|                            {
11167|      0|                                if (codepoint <= 0xFFFF)
11168|      0|                                {
11169|      0|                                    (std::snprintf)(string_buffer.data() + bytes, 7, "\\u%04x",
11170|      0|                                                    static_cast<uint16_t>(codepoint));
11171|      0|                                    bytes += 6;
11172|      0|                                }
11173|      0|                                else
11174|      0|                                {
11175|      0|                                    (std::snprintf)(string_buffer.data() + bytes, 13, "\\u%04x\\u%04x",
11176|      0|                                                    static_cast<uint16_t>(0xD7C0 + (codepoint >> 10)),
11177|      0|                                                    static_cast<uint16_t>(0xDC00 + (codepoint & 0x3FF)));
11178|      0|                                    bytes += 12;
11179|      0|                                }
11180|      0|                            }
11181|  28.5k|                            else
11182|  28.5k|                            {
11183|  28.5k|                                // copy byte to buffer (all previous bytes
11184|  28.5k|                                // been copied have in default case above)
11185|  28.5k|                                string_buffer[bytes++] = s[i];
11186|  28.5k|                            }
11187|  28.5k|                            break;
11188|  28.5k|                        }
11189|  28.5k|                    }
11190|  28.5k|
11191|  28.5k|                    // write buffer and reset index; there must be 13 bytes
11192|  28.5k|                    // left, as this is the maximal number of bytes to be
11193|  28.5k|                    // written ("\uxxxx\uxxxx\0") for one code point
11194|  28.5k|                    if (string_buffer.size() - bytes < 13)
11195|      0|                    {
11196|      0|                        o->write_characters(string_buffer.data(), bytes);
11197|      0|                        bytes = 0;
11198|      0|                    }
11199|  28.5k|
11200|  28.5k|                    // remember the byte position of this accept
11201|  28.5k|                    bytes_after_last_accept = bytes;
11202|  28.5k|                    undumped_chars = 0;
11203|  28.5k|                    break;
11204|  28.5k|                }
11205|  28.5k|
11206|  28.5k|                case UTF8_REJECT:  // decode found invalid UTF-8 byte
11207|      0|                {
11208|      0|                    switch (error_handler)
11209|      0|                    {
11210|      0|                        case error_handler_t::strict:
11211|      0|                        {
11212|      0|                            std::string sn(3, '\0');
11213|      0|                            (std::snprintf)(&sn[0], sn.size(), "%.2X", byte);
11214|      0|                            JSON_THROW(type_error::create(316, "invalid UTF-8 byte at index " + std::to_string(i) + ": 0x" + sn));
11215|      0|                        }
11216|      0|
11217|      0|                        case error_handler_t::ignore:
11218|      0|                        case error_handler_t::replace:
11219|      0|                        {
11220|      0|                            // in case we saw this character the first time, we
11221|      0|                            // would like to read it again, because the byte
11222|      0|                            // may be OK for itself, but just not OK for the
11223|      0|                            // previous sequence
11224|      0|                            if (undumped_chars > 0)
11225|      0|                            {
11226|      0|                                --i;
11227|      0|                            }
11228|      0|
11229|      0|                            // reset length buffer to the last accepted index;
11230|      0|                            // thus removing/ignoring the invalid characters
11231|      0|                            bytes = bytes_after_last_accept;
11232|      0|
11233|      0|                            if (error_handler == error_handler_t::replace)
11234|      0|                            {
11235|      0|                                // add a replacement character
11236|      0|                                if (ensure_ascii)
11237|      0|                                {
11238|      0|                                    string_buffer[bytes++] = '\\';
11239|      0|                                    string_buffer[bytes++] = 'u';
11240|      0|                                    string_buffer[bytes++] = 'f';
11241|      0|                                    string_buffer[bytes++] = 'f';
11242|      0|                                    string_buffer[bytes++] = 'f';
11243|      0|                                    string_buffer[bytes++] = 'd';
11244|      0|                                }
11245|      0|                                else
11246|      0|                                {
11247|      0|                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xEF');
11248|      0|                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xBF');
11249|      0|                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xBD');
11250|      0|                                }
11251|      0|                                bytes_after_last_accept = bytes;
11252|      0|                            }
11253|      0|
11254|      0|                            undumped_chars = 0;
11255|      0|
11256|      0|                            // continue processing the string
11257|      0|                            state = UTF8_ACCEPT;
11258|      0|                            break;
11259|      0|                        }
11260|      0|                    }
11261|      0|                    break;
11262|      0|                }
11263|      0|
11264|      0|                default:  // decode found yet incomplete multi-byte code point
11265|      0|                {
11266|      0|                    if (not ensure_ascii)
11267|      0|                    {
11268|      0|                        // code point will not be escaped - copy byte to buffer
11269|      0|                        string_buffer[bytes++] = s[i];
11270|      0|                    }
11271|      0|                    ++undumped_chars;
11272|      0|                    break;
11273|      0|                }
11274|  28.5k|            }
11275|  28.5k|        }
11276|  5.09k|
11277|  5.09k|        // we finished processing the string
11278|  5.09k|        if (JSON_LIKELY(state == UTF8_ACCEPT))
11279|  5.09k|        {
11280|  5.09k|            // write buffer
11281|  5.09k|            if (bytes > 0)
11282|  5.09k|            {
11283|  5.09k|                o->write_characters(string_buffer.data(), bytes);
11284|  5.09k|            }
11285|  5.09k|        }
11286|      0|        else
11287|      0|        {
11288|      0|            // we finish reading, but do not accept: string was incomplete
11289|      0|            switch (error_handler)
11290|      0|            {
11291|      0|                case error_handler_t::strict:
11292|      0|                {
11293|      0|                    std::string sn(3, '\0');
11294|      0|                    (std::snprintf)(&sn[0], sn.size(), "%.2X", static_cast<uint8_t>(s.back()));
11295|      0|                    JSON_THROW(type_error::create(316, "incomplete UTF-8 string; last byte: 0x" + sn));
11296|      0|                }
11297|      0|
11298|      0|                case error_handler_t::ignore:
11299|      0|                {
11300|      0|                    // write all accepted bytes
11301|      0|                    o->write_characters(string_buffer.data(), bytes_after_last_accept);
11302|      0|                    break;
11303|      0|                }
11304|      0|
11305|      0|                case error_handler_t::replace:
11306|      0|                {
11307|      0|                    // write all accepted bytes
11308|      0|                    o->write_characters(string_buffer.data(), bytes_after_last_accept);
11309|      0|                    // add a replacement character
11310|      0|                    if (ensure_ascii)
11311|      0|                    {
11312|      0|                        o->write_characters("\\ufffd", 6);
11313|      0|                    }
11314|      0|                    else
11315|      0|                    {
11316|      0|                        o->write_characters("\xEF\xBF\xBD", 3);
11317|      0|                    }
11318|      0|                    break;
11319|  5.09k|                }
11320|  5.09k|            }
11321|  5.09k|        }
11322|  5.09k|    }
11323|       |
11324|       |    /*!
11325|       |    @brief dump an integer
11326|       |
11327|       |    Dump a given integer to output stream @a o. Works internally with
11328|       |    @a number_buffer.
11329|       |
11330|       |    @param[in] x  integer number (signed or unsigned) to dump
11331|       |    @tparam NumberType either @a number_integer_t or @a number_unsigned_t
11332|       |    */
11333|       |    template<typename NumberType, detail::enable_if_t<
11334|       |                 std::is_same<NumberType, number_unsigned_t>::value or
11335|       |                 std::is_same<NumberType, number_integer_t>::value,
11336|       |                 int> = 0>
11337|       |    void dump_integer(NumberType x)
11338|    358|    {
11339|    358|        // special case for "0"
11340|    358|        if (x == 0)
11341|     18|        {
11342|     18|            o->write_character('0');
11343|     18|            return;
11344|     18|        }
11345|    340|
11346|    340|        const bool is_negative = std::is_same<NumberType, number_integer_t>::value and not (x >= 0);  // see issue #755
11347|    340|        std::size_t i = 0;
11348|    340|
11349|    958|        while (x != 0)
11350|    618|        {
11351|    618|            // spare 1 byte for '\0'
11352|    618|            assert(i < number_buffer.size() - 1);
11353|    618|
11354|    618|            const auto digit = std::labs(static_cast<long>(x % 10));
11355|    618|            number_buffer[i++] = static_cast<char>('0' + digit);
11356|    618|            x /= 10;
11357|    618|        }
11358|    340|
11359|    340|        if (is_negative)
11360|      1|        {
11361|      1|            // make sure there is capacity for the '-'
11362|      1|            assert(i < number_buffer.size() - 2);
11363|      1|            number_buffer[i++] = '-';
11364|      1|        }
11365|    340|
11366|    340|        std::reverse(number_buffer.begin(), number_buffer.begin() + i);
11367|    340|        o->write_characters(number_buffer.data(), i);
11368|    340|    }
  ------------------
  | _ZN8nlohmann6detail10serializerINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12dump_integerIlLi0EEEvT_:
  |11338|      2|    {
  |11339|      2|        // special case for "0"
  |11340|      2|        if (x == 0)
  |11341|      0|        {
  |11342|      0|            o->write_character('0');
  |11343|      0|            return;
  |11344|      0|        }
  |11345|      2|
  |11346|      2|        const bool is_negative = std::is_same<NumberType, number_integer_t>::value and not (x >= 0);  // see issue #755
  |11347|      2|        std::size_t i = 0;
  |11348|      2|
  |11349|      9|        while (x != 0)
  |11350|      7|        {
  |11351|      7|            // spare 1 byte for '\0'
  |11352|      7|            assert(i < number_buffer.size() - 1);
  |11353|      7|
  |11354|      7|            const auto digit = std::labs(static_cast<long>(x % 10));
  |11355|      7|            number_buffer[i++] = static_cast<char>('0' + digit);
  |11356|      7|            x /= 10;
  |11357|      7|        }
  |11358|      2|
  |11359|      2|        if (is_negative)
  |11360|      1|        {
  |11361|      1|            // make sure there is capacity for the '-'
  |11362|      1|            assert(i < number_buffer.size() - 2);
  |11363|      1|            number_buffer[i++] = '-';
  |11364|      1|        }
  |11365|      2|
  |11366|      2|        std::reverse(number_buffer.begin(), number_buffer.begin() + i);
  |11367|      2|        o->write_characters(number_buffer.data(), i);
  |11368|      2|    }
  ------------------
  | _ZN8nlohmann6detail10serializerINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12dump_integerImLi0EEEvT_:
  |11338|    356|    {
  |11339|    356|        // special case for "0"
  |11340|    356|        if (x == 0)
  |11341|     18|        {
  |11342|     18|            o->write_character('0');
  |11343|     18|            return;
  |11344|     18|        }
  |11345|    338|
  |11346|    338|        const bool is_negative = std::is_same<NumberType, number_integer_t>::value and not (x >= 0);  // see issue #755
  |11347|    338|        std::size_t i = 0;
  |11348|    338|
  |11349|    949|        while (x != 0)
  |11350|    611|        {
  |11351|    611|            // spare 1 byte for '\0'
  |11352|    611|            assert(i < number_buffer.size() - 1);
  |11353|    611|
  |11354|    611|            const auto digit = std::labs(static_cast<long>(x % 10));
  |11355|    611|            number_buffer[i++] = static_cast<char>('0' + digit);
  |11356|    611|            x /= 10;
  |11357|    611|        }
  |11358|    338|
  |11359|    338|        if (is_negative)
  |11360|      0|        {
  |11361|      0|            // make sure there is capacity for the '-'
  |11362|      0|            assert(i < number_buffer.size() - 2);
  |11363|      0|            number_buffer[i++] = '-';
  |11364|      0|        }
  |11365|    338|
  |11366|    338|        std::reverse(number_buffer.begin(), number_buffer.begin() + i);
  |11367|    338|        o->write_characters(number_buffer.data(), i);
  |11368|    338|    }
  ------------------
11369|       |
11370|       |    /*!
11371|       |    @brief dump a floating-point number
11372|       |
11373|       |    Dump a given floating-point number to output stream @a o. Works internally
11374|       |    with @a number_buffer.
11375|       |
11376|       |    @param[in] x  floating-point number to dump
11377|       |    */
11378|       |    void dump_float(number_float_t x)
11379|      7|    {
11380|      7|        // NaN / inf
11381|      7|        if (not std::isfinite(x))
11382|      0|        {
11383|      0|            o->write_characters("null", 4);
11384|      0|            return;
11385|      0|        }
11386|      7|
11387|      7|        // If number_float_t is an IEEE-754 single or double precision number,
11388|      7|        // use the Grisu2 algorithm to produce short numbers which are
11389|      7|        // guaranteed to round-trip, using strtof and strtod, resp.
11390|      7|        //
11391|      7|        // NB: The test below works if <long double> == <double>.
11392|      7|        static constexpr bool is_ieee_single_or_double
11393|      7|            = (std::numeric_limits<number_float_t>::is_iec559 and std::numeric_limits<number_float_t>::digits == 24 and std::numeric_limits<number_float_t>::max_exponent == 128) or
11394|      7|              (std::numeric_limits<number_float_t>::is_iec559 and std::numeric_limits<number_float_t>::digits == 53 and std::numeric_limits<number_float_t>::max_exponent == 1024);
11395|      7|
11396|      7|        dump_float(x, std::integral_constant<bool, is_ieee_single_or_double>());
11397|      7|    }
11398|       |
11399|       |    void dump_float(number_float_t x, std::true_type /*is_ieee_single_or_double*/)
11400|      7|    {
11401|      7|        char* begin = number_buffer.data();
11402|      7|        char* end = ::nlohmann::detail::to_chars(begin, begin + number_buffer.size(), x);
11403|      7|
11404|      7|        o->write_characters(begin, static_cast<size_t>(end - begin));
11405|      7|    }
11406|       |
11407|       |    void dump_float(number_float_t x, std::false_type /*is_ieee_single_or_double*/)
11408|       |    {
11409|       |        // get number of digits for a float -> text -> float round-trip
11410|       |        static constexpr auto d = std::numeric_limits<number_float_t>::max_digits10;
11411|       |
11412|       |        // the actual conversion
11413|       |        std::ptrdiff_t len = (std::snprintf)(number_buffer.data(), number_buffer.size(), "%.*g", d, x);
11414|       |
11415|       |        // negative value indicates an error
11416|       |        assert(len > 0);
11417|       |        // check if buffer was large enough
11418|       |        assert(static_cast<std::size_t>(len) < number_buffer.size());
11419|       |
11420|       |        // erase thousands separator
11421|       |        if (thousands_sep != '\0')
11422|       |        {
11423|       |            const auto end = std::remove(number_buffer.begin(),
11424|       |                                         number_buffer.begin() + len, thousands_sep);
11425|       |            std::fill(end, number_buffer.end(), '\0');
11426|       |            assert((end - number_buffer.begin()) <= len);
11427|       |            len = (end - number_buffer.begin());
11428|       |        }
11429|       |
11430|       |        // convert decimal point to '.'
11431|       |        if (decimal_point != '\0' and decimal_point != '.')
11432|       |        {
11433|       |            const auto dec_pos = std::find(number_buffer.begin(), number_buffer.end(), decimal_point);
11434|       |            if (dec_pos != number_buffer.end())
11435|       |            {
11436|       |                *dec_pos = '.';
11437|       |            }
11438|       |        }
11439|       |
11440|       |        o->write_characters(number_buffer.data(), static_cast<std::size_t>(len));
11441|       |
11442|       |        // determine if need to append ".0"
11443|       |        const bool value_is_int_like =
11444|       |            std::none_of(number_buffer.begin(), number_buffer.begin() + len + 1,
11445|       |                         [](char c)
11446|       |        {
11447|       |            return (c == '.' or c == 'e');
11448|       |        });
11449|       |
11450|       |        if (value_is_int_like)
11451|       |        {
11452|       |            o->write_characters(".0", 2);
11453|       |        }
11454|       |    }
11455|       |
11456|       |    /*!
11457|       |    @brief check whether a string is UTF-8 encoded
11458|       |
11459|       |    The function checks each byte of a string whether it is UTF-8 encoded. The
11460|       |    result of the check is stored in the @a state parameter. The function must
11461|       |    be called initially with state 0 (accept). State 1 means the string must
11462|       |    be rejected, because the current byte is not allowed. If the string is
11463|       |    completely processed, but the state is non-zero, the string ended
11464|       |    prematurely; that is, the last byte indicated more bytes should have
11465|       |    followed.
11466|       |
11467|       |    @param[in,out] state  the state of the decoding
11468|       |    @param[in,out] codep  codepoint (valid only if resulting state is UTF8_ACCEPT)
11469|       |    @param[in] byte       next byte to decode
11470|       |    @return               new state
11471|       |
11472|       |    @note The function has been edited: a std::array is used.
11473|       |
11474|       |    @copyright Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>
11475|       |    @sa http://bjoern.hoehrmann.de/utf-8/decoder/dfa/
11476|       |    */
11477|       |    static uint8_t decode(uint8_t& state, uint32_t& codep, const uint8_t byte) noexcept
11478|  28.5k|    {
11479|  28.5k|        static const std::array<uint8_t, 400> utf8d =
11480|  28.5k|        {
11481|  28.5k|            {
11482|  28.5k|                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 00..1F
11483|  28.5k|                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20..3F
11484|  28.5k|                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40..5F
11485|  28.5k|                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 60..7F
11486|  28.5k|                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, // 80..9F
11487|  28.5k|                7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, // A0..BF
11488|  28.5k|                8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // C0..DF
11489|  28.5k|                0xA, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, // E0..EF
11490|  28.5k|                0xB, 0x6, 0x6, 0x6, 0x5, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, // F0..FF
11491|  28.5k|                0x0, 0x1, 0x2, 0x3, 0x5, 0x8, 0x7, 0x1, 0x1, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x1, // s0..s0
11492|  28.5k|                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // s1..s2
11493|  28.5k|                1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, // s3..s4
11494|  28.5k|                1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, // s5..s6
11495|  28.5k|                1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 // s7..s8
11496|  28.5k|            }
11497|  28.5k|        };
11498|  28.5k|
11499|  28.5k|        const uint8_t type = utf8d[byte];
11500|  28.5k|
11501|  28.5k|        codep = (state != UTF8_ACCEPT)
11502|  28.5k|                ? (byte & 0x3fu) | (codep << 6)
11503|  28.5k|                : static_cast<uint32_t>(0xff >> type) & (byte);
11504|  28.5k|
11505|  28.5k|        state = utf8d[256u + state * 16u + type];
11506|  28.5k|        return state;
11507|  28.5k|    }
11508|       |
11509|       |  private:
11510|       |    /// the output of the serializer
11511|       |    output_adapter_t<char> o = nullptr;
11512|       |
11513|       |    /// a (hopefully) large enough character buffer
11514|       |    std::array<char, 64> number_buffer{{}};
11515|       |
11516|       |    /// the locale
11517|       |    const std::lconv* loc = nullptr;
11518|       |    /// the locale's thousand separator character
11519|       |    const char thousands_sep = '\0';
11520|       |    /// the locale's decimal point character
11521|       |    const char decimal_point = '\0';
11522|       |
11523|       |    /// string buffer
11524|       |    std::array<char, 512> string_buffer{{}};
11525|       |
11526|       |    /// the indentation character
11527|       |    const char indent_char;
11528|       |    /// the indentation string
11529|       |    string_t indent_string;
11530|       |
11531|       |    /// error_handler how to react on decoding errors
11532|       |    const error_handler_t error_handler;
11533|       |};
11534|       |}  // namespace detail
11535|       |}  // namespace nlohmann
11536|       |
11537|       |// #include <nlohmann/detail/json_ref.hpp>
11538|       |
11539|       |
11540|       |#include <initializer_list>
11541|       |#include <utility>
11542|       |
11543|       |// #include <nlohmann/detail/meta/type_traits.hpp>
11544|       |
11545|       |
11546|       |namespace nlohmann
11547|       |{
11548|       |namespace detail
11549|       |{
11550|       |template<typename BasicJsonType>
11551|       |class json_ref
11552|       |{
11553|       |  public:
11554|       |    using value_type = BasicJsonType;
11555|       |
11556|       |    json_ref(value_type&& value)
11557|       |        : owned_value(std::move(value)), value_ref(&owned_value), is_rvalue(true)
11558|       |    {}
11559|       |
11560|       |    json_ref(const value_type& value)
11561|       |        : value_ref(const_cast<value_type*>(&value)), is_rvalue(false)
11562|       |    {}
11563|       |
11564|       |    json_ref(std::initializer_list<json_ref> init)
11565|       |        : owned_value(init), value_ref(&owned_value), is_rvalue(true)
11566|       |    {}
11567|       |
11568|       |    template <
11569|       |        class... Args,
11570|       |        enable_if_t<std::is_constructible<value_type, Args...>::value, int> = 0 >
11571|       |    json_ref(Args && ... args)
11572|       |        : owned_value(std::forward<Args>(args)...), value_ref(&owned_value),
11573|       |          is_rvalue(true) {}
11574|       |
11575|       |    // class should be movable only
11576|       |    json_ref(json_ref&&) = default;
11577|       |    json_ref(const json_ref&) = delete;
11578|       |    json_ref& operator=(const json_ref&) = delete;
11579|       |    json_ref& operator=(json_ref&&) = delete;
11580|       |    ~json_ref() = default;
11581|       |
11582|       |    value_type moved_or_copied() const
11583|       |    {
11584|       |        if (is_rvalue)
11585|       |        {
11586|       |            return std::move(*value_ref);
11587|       |        }
11588|       |        return *value_ref;
11589|       |    }
11590|       |
11591|       |    value_type const& operator*() const
11592|       |    {
11593|       |        return *static_cast<value_type const*>(value_ref);
11594|       |    }
11595|       |
11596|       |    value_type const* operator->() const
11597|       |    {
11598|       |        return static_cast<value_type const*>(value_ref);
11599|       |    }
11600|       |
11601|       |  private:
11602|       |    mutable value_type owned_value = nullptr;
11603|       |    value_type* value_ref = nullptr;
11604|       |    const bool is_rvalue;
11605|       |};
11606|       |}  // namespace detail
11607|       |}  // namespace nlohmann
11608|       |
11609|       |// #include <nlohmann/detail/json_pointer.hpp>
11610|       |
11611|       |
11612|       |#include <cassert> // assert
11613|       |#include <numeric> // accumulate
11614|       |#include <string> // string
11615|       |#include <vector> // vector
11616|       |
11617|       |// #include <nlohmann/detail/macro_scope.hpp>
11618|       |
11619|       |// #include <nlohmann/detail/exceptions.hpp>
11620|       |
11621|       |// #include <nlohmann/detail/value_t.hpp>
11622|       |
11623|       |
11624|       |namespace nlohmann
11625|       |{
11626|       |template<typename BasicJsonType>
11627|       |class json_pointer
11628|       |{
11629|       |    // allow basic_json to access private members
11630|       |    NLOHMANN_BASIC_JSON_TPL_DECLARATION
11631|       |    friend class basic_json;
11632|       |
11633|       |  public:
11634|       |    /*!
11635|       |    @brief create JSON pointer
11636|       |
11637|       |    Create a JSON pointer according to the syntax described in
11638|       |    [Section 3 of RFC6901](https://tools.ietf.org/html/rfc6901#section-3).
11639|       |
11640|       |    @param[in] s  string representing the JSON pointer; if omitted, the empty
11641|       |                  string is assumed which references the whole JSON value
11642|       |
11643|       |    @throw parse_error.107 if the given JSON pointer @a s is nonempty and does
11644|       |                           not begin with a slash (`/`); see example below
11645|       |
11646|       |    @throw parse_error.108 if a tilde (`~`) in the given JSON pointer @a s is
11647|       |    not followed by `0` (representing `~`) or `1` (representing `/`); see
11648|       |    example below
11649|       |
11650|       |    @liveexample{The example shows the construction several valid JSON pointers
11651|       |    as well as the exceptional behavior.,json_pointer}
11652|       |
11653|       |    @since version 2.0.0
11654|       |    */
11655|       |    explicit json_pointer(const std::string& s = "")
11656|       |        : reference_tokens(split(s))
11657|       |    {}
11658|       |
11659|       |    /*!
11660|       |    @brief return a string representation of the JSON pointer
11661|       |
11662|       |    @invariant For each JSON pointer `ptr`, it holds:
11663|       |    @code {.cpp}
11664|       |    ptr == json_pointer(ptr.to_string());
11665|       |    @endcode
11666|       |
11667|       |    @return a string representation of the JSON pointer
11668|       |
11669|       |    @liveexample{The example shows the result of `to_string`.,
11670|       |    json_pointer__to_string}
11671|       |
11672|       |    @since version 2.0.0
11673|       |    */
11674|       |    std::string to_string() const
11675|       |    {
11676|       |        return std::accumulate(reference_tokens.begin(), reference_tokens.end(),
11677|       |                               std::string{},
11678|       |                               [](const std::string & a, const std::string & b)
11679|       |        {
11680|       |            return a + "/" + escape(b);
11681|       |        });
11682|       |    }
11683|       |
11684|       |    /// @copydoc to_string()
11685|       |    operator std::string() const
11686|       |    {
11687|       |        return to_string();
11688|       |    }
11689|       |
11690|       |    /*!
11691|       |    @param[in] s  reference token to be converted into an array index
11692|       |
11693|       |    @return integer representation of @a s
11694|       |
11695|       |    @throw out_of_range.404 if string @a s could not be converted to an integer
11696|       |    */
11697|       |    static int array_index(const std::string& s)
11698|       |    {
11699|       |        std::size_t processed_chars = 0;
11700|       |        const int res = std::stoi(s, &processed_chars);
11701|       |
11702|       |        // check if the string was completely read
11703|       |        if (JSON_UNLIKELY(processed_chars != s.size()))
11704|       |        {
11705|       |            JSON_THROW(detail::out_of_range::create(404, "unresolved reference token '" + s + "'"));
11706|       |        }
11707|       |
11708|       |        return res;
11709|       |    }
11710|       |
11711|       |  private:
11712|       |    /*!
11713|       |    @brief remove and return last reference pointer
11714|       |    @throw out_of_range.405 if JSON pointer has no parent
11715|       |    */
11716|       |    std::string pop_back()
11717|       |    {
11718|       |        if (JSON_UNLIKELY(is_root()))
11719|       |        {
11720|       |            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent"));
11721|       |        }
11722|       |
11723|       |        auto last = reference_tokens.back();
11724|       |        reference_tokens.pop_back();
11725|       |        return last;
11726|       |    }
11727|       |
11728|       |    /// return whether pointer points to the root document
11729|       |    bool is_root() const noexcept
11730|       |    {
11731|       |        return reference_tokens.empty();
11732|       |    }
11733|       |
11734|       |    json_pointer top() const
11735|       |    {
11736|       |        if (JSON_UNLIKELY(is_root()))
11737|       |        {
11738|       |            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent"));
11739|       |        }
11740|       |
11741|       |        json_pointer result = *this;
11742|       |        result.reference_tokens = {reference_tokens[0]};
11743|       |        return result;
11744|       |    }
11745|       |
11746|       |    /*!
11747|       |    @brief create and return a reference to the pointed to value
11748|       |
11749|       |    @complexity Linear in the number of reference tokens.
11750|       |
11751|       |    @throw parse_error.109 if array index is not a number
11752|       |    @throw type_error.313 if value cannot be unflattened
11753|       |    */
11754|       |    BasicJsonType& get_and_create(BasicJsonType& j) const
11755|       |    {
11756|       |        using size_type = typename BasicJsonType::size_type;
11757|       |        auto result = &j;
11758|       |
11759|       |        // in case no reference tokens exist, return a reference to the JSON value
11760|       |        // j which will be overwritten by a primitive value
11761|       |        for (const auto& reference_token : reference_tokens)
11762|       |        {
11763|       |            switch (result->m_type)
11764|       |            {
11765|       |                case detail::value_t::null:
11766|       |                {
11767|       |                    if (reference_token == "0")
11768|       |                    {
11769|       |                        // start a new array if reference token is 0
11770|       |                        result = &result->operator[](0);
11771|       |                    }
11772|       |                    else
11773|       |                    {
11774|       |                        // start a new object otherwise
11775|       |                        result = &result->operator[](reference_token);
11776|       |                    }
11777|       |                    break;
11778|       |                }
11779|       |
11780|       |                case detail::value_t::object:
11781|       |                {
11782|       |                    // create an entry in the object
11783|       |                    result = &result->operator[](reference_token);
11784|       |                    break;
11785|       |                }
11786|       |
11787|       |                case detail::value_t::array:
11788|       |                {
11789|       |                    // create an entry in the array
11790|       |                    JSON_TRY
11791|       |                    {
11792|       |                        result = &result->operator[](static_cast<size_type>(array_index(reference_token)));
11793|       |                    }
11794|       |                    JSON_CATCH(std::invalid_argument&)
11795|       |                    {
11796|       |                        JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
11797|       |                    }
11798|       |                    break;
11799|       |                }
11800|       |
11801|       |                /*
11802|       |                The following code is only reached if there exists a reference
11803|       |                token _and_ the current value is primitive. In this case, we have
11804|       |                an error situation, because primitive values may only occur as
11805|       |                single value; that is, with an empty list of reference tokens.
11806|       |                */
11807|       |                default:
11808|       |                    JSON_THROW(detail::type_error::create(313, "invalid value to unflatten"));
11809|       |            }
11810|       |        }
11811|       |
11812|       |        return *result;
11813|       |    }
11814|       |
11815|       |    /*!
11816|       |    @brief return a reference to the pointed to value
11817|       |
11818|       |    @note This version does not throw if a value is not present, but tries to
11819|       |          create nested values instead. For instance, calling this function
11820|       |          with pointer `"/this/that"` on a null value is equivalent to calling
11821|       |          `operator[]("this").operator[]("that")` on that value, effectively
11822|       |          changing the null value to an object.
11823|       |
11824|       |    @param[in] ptr  a JSON value
11825|       |
11826|       |    @return reference to the JSON value pointed to by the JSON pointer
11827|       |
11828|       |    @complexity Linear in the length of the JSON pointer.
11829|       |
11830|       |    @throw parse_error.106   if an array index begins with '0'
11831|       |    @throw parse_error.109   if an array index was not a number
11832|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
11833|       |    */
11834|       |    BasicJsonType& get_unchecked(BasicJsonType* ptr) const
11835|       |    {
11836|       |        using size_type = typename BasicJsonType::size_type;
11837|       |        for (const auto& reference_token : reference_tokens)
11838|       |        {
11839|       |            // convert null values to arrays or objects before continuing
11840|       |            if (ptr->m_type == detail::value_t::null)
11841|       |            {
11842|       |                // check if reference token is a number
11843|       |                const bool nums =
11844|       |                    std::all_of(reference_token.begin(), reference_token.end(),
11845|       |                                [](const char x)
11846|       |                {
11847|       |                    return (x >= '0' and x <= '9');
11848|       |                });
11849|       |
11850|       |                // change value to array for numbers or "-" or to object otherwise
11851|       |                *ptr = (nums or reference_token == "-")
11852|       |                       ? detail::value_t::array
11853|       |                       : detail::value_t::object;
11854|       |            }
11855|       |
11856|       |            switch (ptr->m_type)
11857|       |            {
11858|       |                case detail::value_t::object:
11859|       |                {
11860|       |                    // use unchecked object access
11861|       |                    ptr = &ptr->operator[](reference_token);
11862|       |                    break;
11863|       |                }
11864|       |
11865|       |                case detail::value_t::array:
11866|       |                {
11867|       |                    // error condition (cf. RFC 6901, Sect. 4)
11868|       |                    if (JSON_UNLIKELY(reference_token.size() > 1 and reference_token[0] == '0'))
11869|       |                    {
11870|       |                        JSON_THROW(detail::parse_error::create(106, 0,
11871|       |                                                               "array index '" + reference_token +
11872|       |                                                               "' must not begin with '0'"));
11873|       |                    }
11874|       |
11875|       |                    if (reference_token == "-")
11876|       |                    {
11877|       |                        // explicitly treat "-" as index beyond the end
11878|       |                        ptr = &ptr->operator[](ptr->m_value.array->size());
11879|       |                    }
11880|       |                    else
11881|       |                    {
11882|       |                        // convert array index to number; unchecked access
11883|       |                        JSON_TRY
11884|       |                        {
11885|       |                            ptr = &ptr->operator[](
11886|       |                                static_cast<size_type>(array_index(reference_token)));
11887|       |                        }
11888|       |                        JSON_CATCH(std::invalid_argument&)
11889|       |                        {
11890|       |                            JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
11891|       |                        }
11892|       |                    }
11893|       |                    break;
11894|       |                }
11895|       |
11896|       |                default:
11897|       |                    JSON_THROW(detail::out_of_range::create(404, "unresolved reference token '" + reference_token + "'"));
11898|       |            }
11899|       |        }
11900|       |
11901|       |        return *ptr;
11902|       |    }
11903|       |
11904|       |    /*!
11905|       |    @throw parse_error.106   if an array index begins with '0'
11906|       |    @throw parse_error.109   if an array index was not a number
11907|       |    @throw out_of_range.402  if the array index '-' is used
11908|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
11909|       |    */
11910|       |    BasicJsonType& get_checked(BasicJsonType* ptr) const
11911|       |    {
11912|       |        using size_type = typename BasicJsonType::size_type;
11913|       |        for (const auto& reference_token : reference_tokens)
11914|       |        {
11915|       |            switch (ptr->m_type)
11916|       |            {
11917|       |                case detail::value_t::object:
11918|       |                {
11919|       |                    // note: at performs range check
11920|       |                    ptr = &ptr->at(reference_token);
11921|       |                    break;
11922|       |                }
11923|       |
11924|       |                case detail::value_t::array:
11925|       |                {
11926|       |                    if (JSON_UNLIKELY(reference_token == "-"))
11927|       |                    {
11928|       |                        // "-" always fails the range check
11929|       |                        JSON_THROW(detail::out_of_range::create(402,
11930|       |                                                                "array index '-' (" + std::to_string(ptr->m_value.array->size()) +
11931|       |                                                                ") is out of range"));
11932|       |                    }
11933|       |
11934|       |                    // error condition (cf. RFC 6901, Sect. 4)
11935|       |                    if (JSON_UNLIKELY(reference_token.size() > 1 and reference_token[0] == '0'))
11936|       |                    {
11937|       |                        JSON_THROW(detail::parse_error::create(106, 0,
11938|       |                                                               "array index '" + reference_token +
11939|       |                                                               "' must not begin with '0'"));
11940|       |                    }
11941|       |
11942|       |                    // note: at performs range check
11943|       |                    JSON_TRY
11944|       |                    {
11945|       |                        ptr = &ptr->at(static_cast<size_type>(array_index(reference_token)));
11946|       |                    }
11947|       |                    JSON_CATCH(std::invalid_argument&)
11948|       |                    {
11949|       |                        JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
11950|       |                    }
11951|       |                    break;
11952|       |                }
11953|       |
11954|       |                default:
11955|       |                    JSON_THROW(detail::out_of_range::create(404, "unresolved reference token '" + reference_token + "'"));
11956|       |            }
11957|       |        }
11958|       |
11959|       |        return *ptr;
11960|       |    }
11961|       |
11962|       |    /*!
11963|       |    @brief return a const reference to the pointed to value
11964|       |
11965|       |    @param[in] ptr  a JSON value
11966|       |
11967|       |    @return const reference to the JSON value pointed to by the JSON
11968|       |    pointer
11969|       |
11970|       |    @throw parse_error.106   if an array index begins with '0'
11971|       |    @throw parse_error.109   if an array index was not a number
11972|       |    @throw out_of_range.402  if the array index '-' is used
11973|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
11974|       |    */
11975|       |    const BasicJsonType& get_unchecked(const BasicJsonType* ptr) const
11976|       |    {
11977|       |        using size_type = typename BasicJsonType::size_type;
11978|       |        for (const auto& reference_token : reference_tokens)
11979|       |        {
11980|       |            switch (ptr->m_type)
11981|       |            {
11982|       |                case detail::value_t::object:
11983|       |                {
11984|       |                    // use unchecked object access
11985|       |                    ptr = &ptr->operator[](reference_token);
11986|       |                    break;
11987|       |                }
11988|       |
11989|       |                case detail::value_t::array:
11990|       |                {
11991|       |                    if (JSON_UNLIKELY(reference_token == "-"))
11992|       |                    {
11993|       |                        // "-" cannot be used for const access
11994|       |                        JSON_THROW(detail::out_of_range::create(402,
11995|       |                                                                "array index '-' (" + std::to_string(ptr->m_value.array->size()) +
11996|       |                                                                ") is out of range"));
11997|       |                    }
11998|       |
11999|       |                    // error condition (cf. RFC 6901, Sect. 4)
12000|       |                    if (JSON_UNLIKELY(reference_token.size() > 1 and reference_token[0] == '0'))
12001|       |                    {
12002|       |                        JSON_THROW(detail::parse_error::create(106, 0,
12003|       |                                                               "array index '" + reference_token +
12004|       |                                                               "' must not begin with '0'"));
12005|       |                    }
12006|       |
12007|       |                    // use unchecked array access
12008|       |                    JSON_TRY
12009|       |                    {
12010|       |                        ptr = &ptr->operator[](
12011|       |                            static_cast<size_type>(array_index(reference_token)));
12012|       |                    }
12013|       |                    JSON_CATCH(std::invalid_argument&)
12014|       |                    {
12015|       |                        JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
12016|       |                    }
12017|       |                    break;
12018|       |                }
12019|       |
12020|       |                default:
12021|       |                    JSON_THROW(detail::out_of_range::create(404, "unresolved reference token '" + reference_token + "'"));
12022|       |            }
12023|       |        }
12024|       |
12025|       |        return *ptr;
12026|       |    }
12027|       |
12028|       |    /*!
12029|       |    @throw parse_error.106   if an array index begins with '0'
12030|       |    @throw parse_error.109   if an array index was not a number
12031|       |    @throw out_of_range.402  if the array index '-' is used
12032|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
12033|       |    */
12034|       |    const BasicJsonType& get_checked(const BasicJsonType* ptr) const
12035|       |    {
12036|       |        using size_type = typename BasicJsonType::size_type;
12037|       |        for (const auto& reference_token : reference_tokens)
12038|       |        {
12039|       |            switch (ptr->m_type)
12040|       |            {
12041|       |                case detail::value_t::object:
12042|       |                {
12043|       |                    // note: at performs range check
12044|       |                    ptr = &ptr->at(reference_token);
12045|       |                    break;
12046|       |                }
12047|       |
12048|       |                case detail::value_t::array:
12049|       |                {
12050|       |                    if (JSON_UNLIKELY(reference_token == "-"))
12051|       |                    {
12052|       |                        // "-" always fails the range check
12053|       |                        JSON_THROW(detail::out_of_range::create(402,
12054|       |                                                                "array index '-' (" + std::to_string(ptr->m_value.array->size()) +
12055|       |                                                                ") is out of range"));
12056|       |                    }
12057|       |
12058|       |                    // error condition (cf. RFC 6901, Sect. 4)
12059|       |                    if (JSON_UNLIKELY(reference_token.size() > 1 and reference_token[0] == '0'))
12060|       |                    {
12061|       |                        JSON_THROW(detail::parse_error::create(106, 0,
12062|       |                                                               "array index '" + reference_token +
12063|       |                                                               "' must not begin with '0'"));
12064|       |                    }
12065|       |
12066|       |                    // note: at performs range check
12067|       |                    JSON_TRY
12068|       |                    {
12069|       |                        ptr = &ptr->at(static_cast<size_type>(array_index(reference_token)));
12070|       |                    }
12071|       |                    JSON_CATCH(std::invalid_argument&)
12072|       |                    {
12073|       |                        JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
12074|       |                    }
12075|       |                    break;
12076|       |                }
12077|       |
12078|       |                default:
12079|       |                    JSON_THROW(detail::out_of_range::create(404, "unresolved reference token '" + reference_token + "'"));
12080|       |            }
12081|       |        }
12082|       |
12083|       |        return *ptr;
12084|       |    }
12085|       |
12086|       |    /*!
12087|       |    @brief split the string input to reference tokens
12088|       |
12089|       |    @note This function is only called by the json_pointer constructor.
12090|       |          All exceptions below are documented there.
12091|       |
12092|       |    @throw parse_error.107  if the pointer is not empty or begins with '/'
12093|       |    @throw parse_error.108  if character '~' is not followed by '0' or '1'
12094|       |    */
12095|       |    static std::vector<std::string> split(const std::string& reference_string)
12096|      0|    {
12097|      0|        std::vector<std::string> result;
12098|      0|
12099|      0|        // special case: empty reference string -> no reference tokens
12100|      0|        if (reference_string.empty())
12101|      0|        {
12102|      0|            return result;
12103|      0|        }
12104|      0|
12105|      0|        // check if nonempty reference string begins with slash
12106|      0|        if (JSON_UNLIKELY(reference_string[0] != '/'))
12107|      0|        {
12108|      0|            JSON_THROW(detail::parse_error::create(107, 1,
12109|      0|                                                   "JSON pointer must be empty or begin with '/' - was: '" +
12110|      0|                                                   reference_string + "'"));
12111|      0|        }
12112|      0|
12113|      0|        // extract the reference tokens:
12114|      0|        // - slash: position of the last read slash (or end of string)
12115|      0|        // - start: position after the previous slash
12116|      0|        for (
12117|      0|            // search for the first slash after the first character
12118|      0|            std::size_t slash = reference_string.find_first_of('/', 1),
12119|      0|            // set the beginning of the first reference token
12120|      0|            start = 1;
12121|      0|            // we can stop if start == 0 (if slash == std::string::npos)
12122|      0|            start != 0;
12123|      0|            // set the beginning of the next reference token
12124|      0|            // (will eventually be 0 if slash == std::string::npos)
12125|      0|            start = (slash == std::string::npos) ? 0 : slash + 1,
12126|      0|            // find next slash
12127|      0|            slash = reference_string.find_first_of('/', start))
12128|      0|        {
12129|      0|            // use the text between the beginning of the reference token
12130|      0|            // (start) and the last slash (slash).
12131|      0|            auto reference_token = reference_string.substr(start, slash - start);
12132|      0|
12133|      0|            // check reference tokens are properly escaped
12134|      0|            for (std::size_t pos = reference_token.find_first_of('~');
12135|      0|                    pos != std::string::npos;
12136|      0|                    pos = reference_token.find_first_of('~', pos + 1))
12137|      0|            {
12138|      0|                assert(reference_token[pos] == '~');
12139|      0|
12140|      0|                // ~ must be followed by 0 or 1
12141|      0|                if (JSON_UNLIKELY(pos == reference_token.size() - 1 or
12142|      0|                                  (reference_token[pos + 1] != '0' and
12143|      0|                                   reference_token[pos + 1] != '1')))
12144|      0|                {
12145|      0|                    JSON_THROW(detail::parse_error::create(108, 0, "escape character '~' must be followed with '0' or '1'"));
12146|      0|                }
12147|      0|            }
12148|      0|
12149|      0|            // finally, store the reference token
12150|      0|            unescape(reference_token);
12151|      0|            result.push_back(reference_token);
12152|      0|        }
12153|      0|
12154|      0|        return result;
12155|      0|    }
12156|       |
12157|       |    /*!
12158|       |    @brief replace all occurrences of a substring by another string
12159|       |
12160|       |    @param[in,out] s  the string to manipulate; changed so that all
12161|       |                   occurrences of @a f are replaced with @a t
12162|       |    @param[in]     f  the substring to replace with @a t
12163|       |    @param[in]     t  the string to replace @a f
12164|       |
12165|       |    @pre The search string @a f must not be empty. **This precondition is
12166|       |    enforced with an assertion.**
12167|       |
12168|       |    @since version 2.0.0
12169|       |    */
12170|       |    static void replace_substring(std::string& s, const std::string& f,
12171|       |                                  const std::string& t)
12172|      0|    {
12173|      0|        assert(not f.empty());
12174|      0|        for (auto pos = s.find(f);                // find first occurrence of f
12175|      0|                pos != std::string::npos;         // make sure f was found
12176|      0|                s.replace(pos, f.size(), t),      // replace with t, and
12177|      0|                pos = s.find(f, pos + t.size()))  // find next occurrence of f
12178|      0|        {}
12179|      0|    }
12180|       |
12181|       |    /// escape "~" to "~0" and "/" to "~1"
12182|       |    static std::string escape(std::string s)
12183|       |    {
12184|       |        replace_substring(s, "~", "~0");
12185|       |        replace_substring(s, "/", "~1");
12186|       |        return s;
12187|       |    }
12188|       |
12189|       |    /// unescape "~1" to tilde and "~0" to slash (order is important!)
12190|       |    static void unescape(std::string& s)
12191|      0|    {
12192|      0|        replace_substring(s, "~1", "/");
12193|      0|        replace_substring(s, "~0", "~");
12194|      0|    }
12195|       |
12196|       |    /*!
12197|       |    @param[in] reference_string  the reference string to the current value
12198|       |    @param[in] value             the value to consider
12199|       |    @param[in,out] result        the result object to insert values to
12200|       |
12201|       |    @note Empty objects or arrays are flattened to `null`.
12202|       |    */
12203|       |    static void flatten(const std::string& reference_string,
12204|       |                        const BasicJsonType& value,
12205|       |                        BasicJsonType& result)
12206|       |    {
12207|       |        switch (value.m_type)
12208|       |        {
12209|       |            case detail::value_t::array:
12210|       |            {
12211|       |                if (value.m_value.array->empty())
12212|       |                {
12213|       |                    // flatten empty array as null
12214|       |                    result[reference_string] = nullptr;
12215|       |                }
12216|       |                else
12217|       |                {
12218|       |                    // iterate array and use index as reference string
12219|       |                    for (std::size_t i = 0; i < value.m_value.array->size(); ++i)
12220|       |                    {
12221|       |                        flatten(reference_string + "/" + std::to_string(i),
12222|       |                                value.m_value.array->operator[](i), result);
12223|       |                    }
12224|       |                }
12225|       |                break;
12226|       |            }
12227|       |
12228|       |            case detail::value_t::object:
12229|       |            {
12230|       |                if (value.m_value.object->empty())
12231|       |                {
12232|       |                    // flatten empty object as null
12233|       |                    result[reference_string] = nullptr;
12234|       |                }
12235|       |                else
12236|       |                {
12237|       |                    // iterate object and use keys as reference string
12238|       |                    for (const auto& element : *value.m_value.object)
12239|       |                    {
12240|       |                        flatten(reference_string + "/" + escape(element.first), element.second, result);
12241|       |                    }
12242|       |                }
12243|       |                break;
12244|       |            }
12245|       |
12246|       |            default:
12247|       |            {
12248|       |                // add primitive value with its reference string
12249|       |                result[reference_string] = value;
12250|       |                break;
12251|       |            }
12252|       |        }
12253|       |    }
12254|       |
12255|       |    /*!
12256|       |    @param[in] value  flattened JSON
12257|       |
12258|       |    @return unflattened JSON
12259|       |
12260|       |    @throw parse_error.109 if array index is not a number
12261|       |    @throw type_error.314  if value is not an object
12262|       |    @throw type_error.315  if object values are not primitive
12263|       |    @throw type_error.313  if value cannot be unflattened
12264|       |    */
12265|       |    static BasicJsonType
12266|       |    unflatten(const BasicJsonType& value)
12267|       |    {
12268|       |        if (JSON_UNLIKELY(not value.is_object()))
12269|       |        {
12270|       |            JSON_THROW(detail::type_error::create(314, "only objects can be unflattened"));
12271|       |        }
12272|       |
12273|       |        BasicJsonType result;
12274|       |
12275|       |        // iterate the JSON object values
12276|       |        for (const auto& element : *value.m_value.object)
12277|       |        {
12278|       |            if (JSON_UNLIKELY(not element.second.is_primitive()))
12279|       |            {
12280|       |                JSON_THROW(detail::type_error::create(315, "values in object must be primitive"));
12281|       |            }
12282|       |
12283|       |            // assign value to reference pointed to by JSON pointer; Note that if
12284|       |            // the JSON pointer is "" (i.e., points to the whole value), function
12285|       |            // get_and_create returns a reference to result itself. An assignment
12286|       |            // will then create a primitive value.
12287|       |            json_pointer(element.first).get_and_create(result) = element.second;
12288|       |        }
12289|       |
12290|       |        return result;
12291|       |    }
12292|       |
12293|       |    friend bool operator==(json_pointer const& lhs,
12294|       |                           json_pointer const& rhs) noexcept
12295|       |    {
12296|       |        return (lhs.reference_tokens == rhs.reference_tokens);
12297|       |    }
12298|       |
12299|       |    friend bool operator!=(json_pointer const& lhs,
12300|       |                           json_pointer const& rhs) noexcept
12301|       |    {
12302|       |        return not (lhs == rhs);
12303|       |    }
12304|       |
12305|       |    /// the reference tokens
12306|       |    std::vector<std::string> reference_tokens;
12307|       |};
12308|       |}  // namespace nlohmann
12309|       |
12310|       |// #include <nlohmann/adl_serializer.hpp>
12311|       |
12312|       |
12313|       |#include <utility>
12314|       |
12315|       |// #include <nlohmann/detail/conversions/from_json.hpp>
12316|       |
12317|       |// #include <nlohmann/detail/conversions/to_json.hpp>
12318|       |
12319|       |
12320|       |namespace nlohmann
12321|       |{
12322|       |
12323|       |template<typename, typename>
12324|       |struct adl_serializer
12325|       |{
12326|       |    /*!
12327|       |    @brief convert a JSON value to any value type
12328|       |
12329|       |    This function is usually called by the `get()` function of the
12330|       |    @ref basic_json class (either explicit or via conversion operators).
12331|       |
12332|       |    @param[in] j        JSON value to read from
12333|       |    @param[in,out] val  value to write to
12334|       |    */
12335|       |    template<typename BasicJsonType, typename ValueType>
12336|       |    static auto from_json(BasicJsonType&& j, ValueType& val) noexcept(
12337|       |        noexcept(::nlohmann::from_json(std::forward<BasicJsonType>(j), val)))
12338|       |    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), val), void())
12339|  13.0k|    {
12340|  13.0k|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
12341|  13.0k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIbvE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEbEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSG_RT0_:
  |12339|      2|    {
  |12340|      2|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  |12341|      2|    }
  ------------------
  | _ZN8nlohmann14adl_serializerINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorS6_blmdSaS0_EES6_EEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSG_RT0_:
  |12339|  12.7k|    {
  |12340|  12.7k|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  |12341|  12.7k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIivE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEiEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSG_RT0_:
  |12339|    155|    {
  |12340|    155|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  |12341|    155|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIdvE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEdEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSG_RT0_:
  |12339|    148|    {
  |12340|    148|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  |12341|    148|    }
  ------------------
12342|       |
12343|       |    /*!
12344|       |    @brief convert any value type to a JSON value
12345|       |
12346|       |    This function is usually called by the constructors of the @ref basic_json
12347|       |    class.
12348|       |
12349|       |    @param[in,out] j  JSON value to write to
12350|       |    @param[in] val    value to read from
12351|       |    */
12352|       |    template <typename BasicJsonType, typename ValueType>
12353|       |    static auto to_json(BasicJsonType& j, ValueType&& val) noexcept(
12354|       |        noexcept(::nlohmann::to_json(j, std::forward<ValueType>(val))))
12355|       |    -> decltype(::nlohmann::to_json(j, std::forward<ValueType>(val)), void())
12356|   216k|    {
12357|   216k|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
12358|   216k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE7to_jsonINS_10basic_jsonISt3mapSt6vectorS6_blmdSaS0_EERS6_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  |12356|  66.5k|    {
  |12357|  66.5k|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|  66.5k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIdvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERdEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  |12356|  59.2k|    {
  |12357|  59.2k|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|  59.2k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIbvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERbEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  |12356|    620|    {
  |12357|    620|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|    620|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIlvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERlEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  |12356|  9.45k|    {
  |12357|  9.45k|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|  9.45k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerImvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERmEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  |12356|  79.3k|    {
  |12357|  79.3k|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|  79.3k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIA474_cvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERA474_KcEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSI_:
  |12356|    205|    {
  |12357|    205|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|    205|    }
  ------------------
  | _ZN8nlohmann14adl_serializerINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE7to_jsonINS_10basic_jsonISt3mapSt6vectorS6_blmdSaS0_EES6_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  |12356|    513|    {
  |12357|    513|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|    513|    }
  ------------------
  | _ZN8nlohmann14adl_serializerINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE7to_jsonINS_10basic_jsonISt3mapSt6vectorS6_blmdSaS0_EEKS6_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  |12356|     57|    {
  |12357|     57|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|     57|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIjvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERjEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  |12356|    171|    {
  |12357|    171|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|    171|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIPKcvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERKS2_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSI_:
  |12356|     20|    {
  |12357|     20|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|     20|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIbvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEbEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  |12356|      1|    {
  |12357|      1|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|      1|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIdvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEdEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  |12356|      1|    {
  |12357|      1|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|      1|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIA6_cvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERA6_KcEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSI_:
  |12356|      1|    {
  |12357|      1|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|      1|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIivE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEiEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  |12356|      1|    {
  |12357|      1|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  |12358|      1|    }
  ------------------
12359|       |};
12360|       |
12361|       |}  // namespace nlohmann
12362|       |
12363|       |
12364|       |/*!
12365|       |@brief namespace for Niels Lohmann
12366|       |@see https://github.com/nlohmann
12367|       |@since version 1.0.0
12368|       |*/
12369|       |namespace nlohmann
12370|       |{
12371|       |
12372|       |/*!
12373|       |@brief a class to store JSON values
12374|       |
12375|       |@tparam ObjectType type for JSON objects (`std::map` by default; will be used
12376|       |in @ref object_t)
12377|       |@tparam ArrayType type for JSON arrays (`std::vector` by default; will be used
12378|       |in @ref array_t)
12379|       |@tparam StringType type for JSON strings and object keys (`std::string` by
12380|       |default; will be used in @ref string_t)
12381|       |@tparam BooleanType type for JSON booleans (`bool` by default; will be used
12382|       |in @ref boolean_t)
12383|       |@tparam NumberIntegerType type for JSON integer numbers (`int64_t` by
12384|       |default; will be used in @ref number_integer_t)
12385|       |@tparam NumberUnsignedType type for JSON unsigned integer numbers (@c
12386|       |`uint64_t` by default; will be used in @ref number_unsigned_t)
12387|       |@tparam NumberFloatType type for JSON floating-point numbers (`double` by
12388|       |default; will be used in @ref number_float_t)
12389|       |@tparam AllocatorType type of the allocator to use (`std::allocator` by
12390|       |default)
12391|       |@tparam JSONSerializer the serializer to resolve internal calls to `to_json()`
12392|       |and `from_json()` (@ref adl_serializer by default)
12393|       |
12394|       |@requirement The class satisfies the following concept requirements:
12395|       |- Basic
12396|       | - [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible):
12397|       |   JSON values can be default constructed. The result will be a JSON null
12398|       |   value.
12399|       | - [MoveConstructible](https://en.cppreference.com/w/cpp/named_req/MoveConstructible):
12400|       |   A JSON value can be constructed from an rvalue argument.
12401|       | - [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible):
12402|       |   A JSON value can be copy-constructed from an lvalue expression.
12403|       | - [MoveAssignable](https://en.cppreference.com/w/cpp/named_req/MoveAssignable):
12404|       |   A JSON value van be assigned from an rvalue argument.
12405|       | - [CopyAssignable](https://en.cppreference.com/w/cpp/named_req/CopyAssignable):
12406|       |   A JSON value can be copy-assigned from an lvalue expression.
12407|       | - [Destructible](https://en.cppreference.com/w/cpp/named_req/Destructible):
12408|       |   JSON values can be destructed.
12409|       |- Layout
12410|       | - [StandardLayoutType](https://en.cppreference.com/w/cpp/named_req/StandardLayoutType):
12411|       |   JSON values have
12412|       |   [standard layout](https://en.cppreference.com/w/cpp/language/data_members#Standard_layout):
12413|       |   All non-static data members are private and standard layout types, the
12414|       |   class has no virtual functions or (virtual) base classes.
12415|       |- Library-wide
12416|       | - [EqualityComparable](https://en.cppreference.com/w/cpp/named_req/EqualityComparable):
12417|       |   JSON values can be compared with `==`, see @ref
12418|       |   operator==(const_reference,const_reference).
12419|       | - [LessThanComparable](https://en.cppreference.com/w/cpp/named_req/LessThanComparable):
12420|       |   JSON values can be compared with `<`, see @ref
12421|       |   operator<(const_reference,const_reference).
12422|       | - [Swappable](https://en.cppreference.com/w/cpp/named_req/Swappable):
12423|       |   Any JSON lvalue or rvalue of can be swapped with any lvalue or rvalue of
12424|       |   other compatible types, using unqualified function call @ref swap().
12425|       | - [NullablePointer](https://en.cppreference.com/w/cpp/named_req/NullablePointer):
12426|       |   JSON values can be compared against `std::nullptr_t` objects which are used
12427|       |   to model the `null` value.
12428|       |- Container
12429|       | - [Container](https://en.cppreference.com/w/cpp/named_req/Container):
12430|       |   JSON values can be used like STL containers and provide iterator access.
12431|       | - [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer);
12432|       |   JSON values can be used like STL containers and provide reverse iterator
12433|       |   access.
12434|       |
12435|       |@invariant The member variables @a m_value and @a m_type have the following
12436|       |relationship:
12437|       |- If `m_type == value_t::object`, then `m_value.object != nullptr`.
12438|       |- If `m_type == value_t::array`, then `m_value.array != nullptr`.
12439|       |- If `m_type == value_t::string`, then `m_value.string != nullptr`.
12440|       |The invariants are checked by member function assert_invariant().
12441|       |
12442|       |@internal
12443|       |@note ObjectType trick from http://stackoverflow.com/a/9860911
12444|       |@endinternal
12445|       |
12446|       |@see [RFC 7159: The JavaScript Object Notation (JSON) Data Interchange
12447|       |Format](http://rfc7159.net/rfc7159)
12448|       |
12449|       |@since version 1.0.0
12450|       |
12451|       |@nosubgrouping
12452|       |*/
12453|       |NLOHMANN_BASIC_JSON_TPL_DECLARATION
12454|       |class basic_json
12455|       |{
12456|       |  private:
12457|       |    template<detail::value_t> friend struct detail::external_constructor;
12458|       |    friend ::nlohmann::json_pointer<basic_json>;
12459|       |    friend ::nlohmann::detail::parser<basic_json>;
12460|       |    friend ::nlohmann::detail::serializer<basic_json>;
12461|       |    template<typename BasicJsonType>
12462|       |    friend class ::nlohmann::detail::iter_impl;
12463|       |    template<typename BasicJsonType, typename CharType>
12464|       |    friend class ::nlohmann::detail::binary_writer;
12465|       |    template<typename BasicJsonType, typename SAX>
12466|       |    friend class ::nlohmann::detail::binary_reader;
12467|       |    template<typename BasicJsonType>
12468|       |    friend class ::nlohmann::detail::json_sax_dom_parser;
12469|       |    template<typename BasicJsonType>
12470|       |    friend class ::nlohmann::detail::json_sax_dom_callback_parser;
12471|       |
12472|       |    /// workaround type for MSVC
12473|       |    using basic_json_t = NLOHMANN_BASIC_JSON_TPL;
12474|       |
12475|       |    // convenience aliases for types residing in namespace detail;
12476|       |    using lexer = ::nlohmann::detail::lexer<basic_json>;
12477|       |    using parser = ::nlohmann::detail::parser<basic_json>;
12478|       |
12479|       |    using primitive_iterator_t = ::nlohmann::detail::primitive_iterator_t;
12480|       |    template<typename BasicJsonType>
12481|       |    using internal_iterator = ::nlohmann::detail::internal_iterator<BasicJsonType>;
12482|       |    template<typename BasicJsonType>
12483|       |    using iter_impl = ::nlohmann::detail::iter_impl<BasicJsonType>;
12484|       |    template<typename Iterator>
12485|       |    using iteration_proxy = ::nlohmann::detail::iteration_proxy<Iterator>;
12486|       |    template<typename Base> using json_reverse_iterator = ::nlohmann::detail::json_reverse_iterator<Base>;
12487|       |
12488|       |    template<typename CharType>
12489|       |    using output_adapter_t = ::nlohmann::detail::output_adapter_t<CharType>;
12490|       |
12491|       |    using binary_reader = ::nlohmann::detail::binary_reader<basic_json>;
12492|       |    template<typename CharType> using binary_writer = ::nlohmann::detail::binary_writer<basic_json, CharType>;
12493|       |
12494|       |    using serializer = ::nlohmann::detail::serializer<basic_json>;
12495|       |
12496|       |  public:
12497|       |    using value_t = detail::value_t;
12498|       |    /// JSON Pointer, see @ref nlohmann::json_pointer
12499|       |    using json_pointer = ::nlohmann::json_pointer<basic_json>;
12500|       |    template<typename T, typename SFINAE>
12501|       |    using json_serializer = JSONSerializer<T, SFINAE>;
12502|       |    /// how to treat decoding errors
12503|       |    using error_handler_t = detail::error_handler_t;
12504|       |    /// helper type for initializer lists of basic_json values
12505|       |    using initializer_list_t = std::initializer_list<detail::json_ref<basic_json>>;
12506|       |
12507|       |    using input_format_t = detail::input_format_t;
12508|       |    /// SAX interface type, see @ref nlohmann::json_sax
12509|       |    using json_sax_t = json_sax<basic_json>;
12510|       |
12511|       |    ////////////////
12512|       |    // exceptions //
12513|       |    ////////////////
12514|       |
12515|       |    /// @name exceptions
12516|       |    /// Classes to implement user-defined exceptions.
12517|       |    /// @{
12518|       |
12519|       |    /// @copydoc detail::exception
12520|       |    using exception = detail::exception;
12521|       |    /// @copydoc detail::parse_error
12522|       |    using parse_error = detail::parse_error;
12523|       |    /// @copydoc detail::invalid_iterator
12524|       |    using invalid_iterator = detail::invalid_iterator;
12525|       |    /// @copydoc detail::type_error
12526|       |    using type_error = detail::type_error;
12527|       |    /// @copydoc detail::out_of_range
12528|       |    using out_of_range = detail::out_of_range;
12529|       |    /// @copydoc detail::other_error
12530|       |    using other_error = detail::other_error;
12531|       |
12532|       |    /// @}
12533|       |
12534|       |
12535|       |    /////////////////////
12536|       |    // container types //
12537|       |    /////////////////////
12538|       |
12539|       |    /// @name container types
12540|       |    /// The canonic container types to use @ref basic_json like any other STL
12541|       |    /// container.
12542|       |    /// @{
12543|       |
12544|       |    /// the type of elements in a basic_json container
12545|       |    using value_type = basic_json;
12546|       |
12547|       |    /// the type of an element reference
12548|       |    using reference = value_type&;
12549|       |    /// the type of an element const reference
12550|       |    using const_reference = const value_type&;
12551|       |
12552|       |    /// a type to represent differences between iterators
12553|       |    using difference_type = std::ptrdiff_t;
12554|       |    /// a type to represent container sizes
12555|       |    using size_type = std::size_t;
12556|       |
12557|       |    /// the allocator type
12558|       |    using allocator_type = AllocatorType<basic_json>;
12559|       |
12560|       |    /// the type of an element pointer
12561|       |    using pointer = typename std::allocator_traits<allocator_type>::pointer;
12562|       |    /// the type of an element const pointer
12563|       |    using const_pointer = typename std::allocator_traits<allocator_type>::const_pointer;
12564|       |
12565|       |    /// an iterator for a basic_json container
12566|       |    using iterator = iter_impl<basic_json>;
12567|       |    /// a const iterator for a basic_json container
12568|       |    using const_iterator = iter_impl<const basic_json>;
12569|       |    /// a reverse iterator for a basic_json container
12570|       |    using reverse_iterator = json_reverse_iterator<typename basic_json::iterator>;
12571|       |    /// a const reverse iterator for a basic_json container
12572|       |    using const_reverse_iterator = json_reverse_iterator<typename basic_json::const_iterator>;
12573|       |
12574|       |    /// @}
12575|       |
12576|       |
12577|       |    /*!
12578|       |    @brief returns the allocator associated with the container
12579|       |    */
12580|       |    static allocator_type get_allocator()
12581|       |    {
12582|       |        return allocator_type();
12583|       |    }
12584|       |
12585|       |    /*!
12586|       |    @brief returns version information on the library
12587|       |
12588|       |    This function returns a JSON object with information about the library,
12589|       |    including the version number and information on the platform and compiler.
12590|       |
12591|       |    @return JSON object holding version information
12592|       |    key         | description
12593|       |    ----------- | ---------------
12594|       |    `compiler`  | Information on the used compiler. It is an object with the following keys: `c++` (the used C++ standard), `family` (the compiler family; possible values are `clang`, `icc`, `gcc`, `ilecpp`, `msvc`, `pgcpp`, `sunpro`, and `unknown`), and `version` (the compiler version).
12595|       |    `copyright` | The copyright line for the library as string.
12596|       |    `name`      | The name of the library as string.
12597|       |    `platform`  | The used platform as string. Possible values are `win32`, `linux`, `apple`, `unix`, and `unknown`.
12598|       |    `url`       | The URL of the project as string.
12599|       |    `version`   | The version of the library. It is an object with the following keys: `major`, `minor`, and `patch` as defined by [Semantic Versioning](http://semver.org), and `string` (the version string).
12600|       |
12601|       |    @liveexample{The following code shows an example output of the `meta()`
12602|       |    function.,meta}
12603|       |
12604|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
12605|       |    changes to any JSON value.
12606|       |
12607|       |    @complexity Constant.
12608|       |
12609|       |    @since 2.1.0
12610|       |    */
12611|       |    static basic_json meta()
12612|       |    {
12613|       |        basic_json result;
12614|       |
12615|       |        result["copyright"] = "(C) 2013-2017 Niels Lohmann";
12616|       |        result["name"] = "JSON for Modern C++";
12617|       |        result["url"] = "https://github.com/nlohmann/json";
12618|       |        result["version"]["string"] =
12619|       |            std::to_string(NLOHMANN_JSON_VERSION_MAJOR) + "." +
12620|       |            std::to_string(NLOHMANN_JSON_VERSION_MINOR) + "." +
12621|       |            std::to_string(NLOHMANN_JSON_VERSION_PATCH);
12622|       |        result["version"]["major"] = NLOHMANN_JSON_VERSION_MAJOR;
12623|       |        result["version"]["minor"] = NLOHMANN_JSON_VERSION_MINOR;
12624|       |        result["version"]["patch"] = NLOHMANN_JSON_VERSION_PATCH;
12625|       |
12626|       |#ifdef _WIN32
12627|       |        result["platform"] = "win32";
12628|       |#elif defined __linux__
12629|       |        result["platform"] = "linux";
12630|       |#elif defined __APPLE__
12631|       |        result["platform"] = "apple";
12632|       |#elif defined __unix__
12633|       |        result["platform"] = "unix";
12634|       |#else
12635|       |        result["platform"] = "unknown";
12636|       |#endif
12637|       |
12638|       |#if defined(__ICC) || defined(__INTEL_COMPILER)
12639|       |        result["compiler"] = {{"family", "icc"}, {"version", __INTEL_COMPILER}};
12640|       |#elif defined(__clang__)
12641|       |        result["compiler"] = {{"family", "clang"}, {"version", __clang_version__}};
12642|       |#elif defined(__GNUC__) || defined(__GNUG__)
12643|       |        result["compiler"] = {{"family", "gcc"}, {"version", std::to_string(__GNUC__) + "." + std::to_string(__GNUC_MINOR__) + "." + std::to_string(__GNUC_PATCHLEVEL__)}};
12644|       |#elif defined(__HP_cc) || defined(__HP_aCC)
12645|       |        result["compiler"] = "hp"
12646|       |#elif defined(__IBMCPP__)
12647|       |        result["compiler"] = {{"family", "ilecpp"}, {"version", __IBMCPP__}};
12648|       |#elif defined(_MSC_VER)
12649|       |        result["compiler"] = {{"family", "msvc"}, {"version", _MSC_VER}};
12650|       |#elif defined(__PGI)
12651|       |        result["compiler"] = {{"family", "pgcpp"}, {"version", __PGI}};
12652|       |#elif defined(__SUNPRO_CC)
12653|       |        result["compiler"] = {{"family", "sunpro"}, {"version", __SUNPRO_CC}};
12654|       |#else
12655|       |        result["compiler"] = {{"family", "unknown"}, {"version", "unknown"}};
12656|       |#endif
12657|       |
12658|       |#ifdef __cplusplus
12659|       |        result["compiler"]["c++"] = std::to_string(__cplusplus);
12660|       |#else
12661|       |        result["compiler"]["c++"] = "unknown";
12662|       |#endif
12663|       |        return result;
12664|       |    }
12665|       |
12666|       |
12667|       |    ///////////////////////////
12668|       |    // JSON value data types //
12669|       |    ///////////////////////////
12670|       |
12671|       |    /// @name JSON value data types
12672|       |    /// The data types to store a JSON value. These types are derived from
12673|       |    /// the template arguments passed to class @ref basic_json.
12674|       |    /// @{
12675|       |
12676|       |#if defined(JSON_HAS_CPP_14)
12677|       |    // Use transparent comparator if possible, combined with perfect forwarding
12678|       |    // on find() and count() calls prevents unnecessary string construction.
12679|       |    using object_comparator_t = std::less<>;
12680|       |#else
12681|       |    using object_comparator_t = std::less<StringType>;
12682|       |#endif
12683|       |
12684|       |    /*!
12685|       |    @brief a type for an object
12686|       |
12687|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes JSON objects as follows:
12688|       |    > An object is an unordered collection of zero or more name/value pairs,
12689|       |    > where a name is a string and a value is a string, number, boolean, null,
12690|       |    > object, or array.
12691|       |
12692|       |    To store objects in C++, a type is defined by the template parameters
12693|       |    described below.
12694|       |
12695|       |    @tparam ObjectType  the container to store objects (e.g., `std::map` or
12696|       |    `std::unordered_map`)
12697|       |    @tparam StringType the type of the keys or names (e.g., `std::string`).
12698|       |    The comparison function `std::less<StringType>` is used to order elements
12699|       |    inside the container.
12700|       |    @tparam AllocatorType the allocator to use for objects (e.g.,
12701|       |    `std::allocator`)
12702|       |
12703|       |    #### Default type
12704|       |
12705|       |    With the default values for @a ObjectType (`std::map`), @a StringType
12706|       |    (`std::string`), and @a AllocatorType (`std::allocator`), the default
12707|       |    value for @a object_t is:
12708|       |
12709|       |    @code {.cpp}
12710|       |    std::map<
12711|       |      std::string, // key_type
12712|       |      basic_json, // value_type
12713|       |      std::less<std::string>, // key_compare
12714|       |      std::allocator<std::pair<const std::string, basic_json>> // allocator_type
12715|       |    >
12716|       |    @endcode
12717|       |
12718|       |    #### Behavior
12719|       |
12720|       |    The choice of @a object_t influences the behavior of the JSON class. With
12721|       |    the default type, objects have the following behavior:
12722|       |
12723|       |    - When all names are unique, objects will be interoperable in the sense
12724|       |      that all software implementations receiving that object will agree on
12725|       |      the name-value mappings.
12726|       |    - When the names within an object are not unique, it is unspecified which
12727|       |      one of the values for a given key will be chosen. For instance,
12728|       |      `{"key": 2, "key": 1}` could be equal to either `{"key": 1}` or
12729|       |      `{"key": 2}`.
12730|       |    - Internally, name/value pairs are stored in lexicographical order of the
12731|       |      names. Objects will also be serialized (see @ref dump) in this order.
12732|       |      For instance, `{"b": 1, "a": 2}` and `{"a": 2, "b": 1}` will be stored
12733|       |      and serialized as `{"a": 2, "b": 1}`.
12734|       |    - When comparing objects, the order of the name/value pairs is irrelevant.
12735|       |      This makes objects interoperable in the sense that they will not be
12736|       |      affected by these differences. For instance, `{"b": 1, "a": 2}` and
12737|       |      `{"a": 2, "b": 1}` will be treated as equal.
12738|       |
12739|       |    #### Limits
12740|       |
12741|       |    [RFC 7159](http://rfc7159.net/rfc7159) specifies:
12742|       |    > An implementation may set limits on the maximum depth of nesting.
12743|       |
12744|       |    In this class, the object's limit of nesting is not explicitly constrained.
12745|       |    However, a maximum depth of nesting may be introduced by the compiler or
12746|       |    runtime environment. A theoretical limit can be queried by calling the
12747|       |    @ref max_size function of a JSON object.
12748|       |
12749|       |    #### Storage
12750|       |
12751|       |    Objects are stored as pointers in a @ref basic_json type. That is, for any
12752|       |    access to object values, a pointer of type `object_t*` must be
12753|       |    dereferenced.
12754|       |
12755|       |    @sa @ref array_t -- type for an array value
12756|       |
12757|       |    @since version 1.0.0
12758|       |
12759|       |    @note The order name/value pairs are added to the object is *not*
12760|       |    preserved by the library. Therefore, iterating an object may return
12761|       |    name/value pairs in a different order than they were originally stored. In
12762|       |    fact, keys will be traversed in alphabetical order as `std::map` with
12763|       |    `std::less` is used by default. Please note this behavior conforms to [RFC
12764|       |    7159](http://rfc7159.net/rfc7159), because any order implements the
12765|       |    specified "unordered" nature of JSON objects.
12766|       |    */
12767|       |    using object_t = ObjectType<StringType,
12768|       |          basic_json,
12769|       |          object_comparator_t,
12770|       |          AllocatorType<std::pair<const StringType,
12771|       |          basic_json>>>;
12772|       |
12773|       |    /*!
12774|       |    @brief a type for an array
12775|       |
12776|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes JSON arrays as follows:
12777|       |    > An array is an ordered sequence of zero or more values.
12778|       |
12779|       |    To store objects in C++, a type is defined by the template parameters
12780|       |    explained below.
12781|       |
12782|       |    @tparam ArrayType  container type to store arrays (e.g., `std::vector` or
12783|       |    `std::list`)
12784|       |    @tparam AllocatorType allocator to use for arrays (e.g., `std::allocator`)
12785|       |
12786|       |    #### Default type
12787|       |
12788|       |    With the default values for @a ArrayType (`std::vector`) and @a
12789|       |    AllocatorType (`std::allocator`), the default value for @a array_t is:
12790|       |
12791|       |    @code {.cpp}
12792|       |    std::vector<
12793|       |      basic_json, // value_type
12794|       |      std::allocator<basic_json> // allocator_type
12795|       |    >
12796|       |    @endcode
12797|       |
12798|       |    #### Limits
12799|       |
12800|       |    [RFC 7159](http://rfc7159.net/rfc7159) specifies:
12801|       |    > An implementation may set limits on the maximum depth of nesting.
12802|       |
12803|       |    In this class, the array's limit of nesting is not explicitly constrained.
12804|       |    However, a maximum depth of nesting may be introduced by the compiler or
12805|       |    runtime environment. A theoretical limit can be queried by calling the
12806|       |    @ref max_size function of a JSON array.
12807|       |
12808|       |    #### Storage
12809|       |
12810|       |    Arrays are stored as pointers in a @ref basic_json type. That is, for any
12811|       |    access to array values, a pointer of type `array_t*` must be dereferenced.
12812|       |
12813|       |    @sa @ref object_t -- type for an object value
12814|       |
12815|       |    @since version 1.0.0
12816|       |    */
12817|       |    using array_t = ArrayType<basic_json, AllocatorType<basic_json>>;
12818|       |
12819|       |    /*!
12820|       |    @brief a type for a string
12821|       |
12822|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes JSON strings as follows:
12823|       |    > A string is a sequence of zero or more Unicode characters.
12824|       |
12825|       |    To store objects in C++, a type is defined by the template parameter
12826|       |    described below. Unicode values are split by the JSON class into
12827|       |    byte-sized characters during deserialization.
12828|       |
12829|       |    @tparam StringType  the container to store strings (e.g., `std::string`).
12830|       |    Note this container is used for keys/names in objects, see @ref object_t.
12831|       |
12832|       |    #### Default type
12833|       |
12834|       |    With the default values for @a StringType (`std::string`), the default
12835|       |    value for @a string_t is:
12836|       |
12837|       |    @code {.cpp}
12838|       |    std::string
12839|       |    @endcode
12840|       |
12841|       |    #### Encoding
12842|       |
12843|       |    Strings are stored in UTF-8 encoding. Therefore, functions like
12844|       |    `std::string::size()` or `std::string::length()` return the number of
12845|       |    bytes in the string rather than the number of characters or glyphs.
12846|       |
12847|       |    #### String comparison
12848|       |
12849|       |    [RFC 7159](http://rfc7159.net/rfc7159) states:
12850|       |    > Software implementations are typically required to test names of object
12851|       |    > members for equality. Implementations that transform the textual
12852|       |    > representation into sequences of Unicode code units and then perform the
12853|       |    > comparison numerically, code unit by code unit, are interoperable in the
12854|       |    > sense that implementations will agree in all cases on equality or
12855|       |    > inequality of two strings. For example, implementations that compare
12856|       |    > strings with escaped characters unconverted may incorrectly find that
12857|       |    > `"a\\b"` and `"a\u005Cb"` are not equal.
12858|       |
12859|       |    This implementation is interoperable as it does compare strings code unit
12860|       |    by code unit.
12861|       |
12862|       |    #### Storage
12863|       |
12864|       |    String values are stored as pointers in a @ref basic_json type. That is,
12865|       |    for any access to string values, a pointer of type `string_t*` must be
12866|       |    dereferenced.
12867|       |
12868|       |    @since version 1.0.0
12869|       |    */
12870|       |    using string_t = StringType;
12871|       |
12872|       |    /*!
12873|       |    @brief a type for a boolean
12874|       |
12875|       |    [RFC 7159](http://rfc7159.net/rfc7159) implicitly describes a boolean as a
12876|       |    type which differentiates the two literals `true` and `false`.
12877|       |
12878|       |    To store objects in C++, a type is defined by the template parameter @a
12879|       |    BooleanType which chooses the type to use.
12880|       |
12881|       |    #### Default type
12882|       |
12883|       |    With the default values for @a BooleanType (`bool`), the default value for
12884|       |    @a boolean_t is:
12885|       |
12886|       |    @code {.cpp}
12887|       |    bool
12888|       |    @endcode
12889|       |
12890|       |    #### Storage
12891|       |
12892|       |    Boolean values are stored directly inside a @ref basic_json type.
12893|       |
12894|       |    @since version 1.0.0
12895|       |    */
12896|       |    using boolean_t = BooleanType;
12897|       |
12898|       |    /*!
12899|       |    @brief a type for a number (integer)
12900|       |
12901|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes numbers as follows:
12902|       |    > The representation of numbers is similar to that used in most
12903|       |    > programming languages. A number is represented in base 10 using decimal
12904|       |    > digits. It contains an integer component that may be prefixed with an
12905|       |    > optional minus sign, which may be followed by a fraction part and/or an
12906|       |    > exponent part. Leading zeros are not allowed. (...) Numeric values that
12907|       |    > cannot be represented in the grammar below (such as Infinity and NaN)
12908|       |    > are not permitted.
12909|       |
12910|       |    This description includes both integer and floating-point numbers.
12911|       |    However, C++ allows more precise storage if it is known whether the number
12912|       |    is a signed integer, an unsigned integer or a floating-point number.
12913|       |    Therefore, three different types, @ref number_integer_t, @ref
12914|       |    number_unsigned_t and @ref number_float_t are used.
12915|       |
12916|       |    To store integer numbers in C++, a type is defined by the template
12917|       |    parameter @a NumberIntegerType which chooses the type to use.
12918|       |
12919|       |    #### Default type
12920|       |
12921|       |    With the default values for @a NumberIntegerType (`int64_t`), the default
12922|       |    value for @a number_integer_t is:
12923|       |
12924|       |    @code {.cpp}
12925|       |    int64_t
12926|       |    @endcode
12927|       |
12928|       |    #### Default behavior
12929|       |
12930|       |    - The restrictions about leading zeros is not enforced in C++. Instead,
12931|       |      leading zeros in integer literals lead to an interpretation as octal
12932|       |      number. Internally, the value will be stored as decimal number. For
12933|       |      instance, the C++ integer literal `010` will be serialized to `8`.
12934|       |      During deserialization, leading zeros yield an error.
12935|       |    - Not-a-number (NaN) values will be serialized to `null`.
12936|       |
12937|       |    #### Limits
12938|       |
12939|       |    [RFC 7159](http://rfc7159.net/rfc7159) specifies:
12940|       |    > An implementation may set limits on the range and precision of numbers.
12941|       |
12942|       |    When the default type is used, the maximal integer number that can be
12943|       |    stored is `9223372036854775807` (INT64_MAX) and the minimal integer number
12944|       |    that can be stored is `-9223372036854775808` (INT64_MIN). Integer numbers
12945|       |    that are out of range will yield over/underflow when used in a
12946|       |    constructor. During deserialization, too large or small integer numbers
12947|       |    will be automatically be stored as @ref number_unsigned_t or @ref
12948|       |    number_float_t.
12949|       |
12950|       |    [RFC 7159](http://rfc7159.net/rfc7159) further states:
12951|       |    > Note that when such software is used, numbers that are integers and are
12952|       |    > in the range \f$[-2^{53}+1, 2^{53}-1]\f$ are interoperable in the sense
12953|       |    > that implementations will agree exactly on their numeric values.
12954|       |
12955|       |    As this range is a subrange of the exactly supported range [INT64_MIN,
12956|       |    INT64_MAX], this class's integer type is interoperable.
12957|       |
12958|       |    #### Storage
12959|       |
12960|       |    Integer number values are stored directly inside a @ref basic_json type.
12961|       |
12962|       |    @sa @ref number_float_t -- type for number values (floating-point)
12963|       |
12964|       |    @sa @ref number_unsigned_t -- type for number values (unsigned integer)
12965|       |
12966|       |    @since version 1.0.0
12967|       |    */
12968|       |    using number_integer_t = NumberIntegerType;
12969|       |
12970|       |    /*!
12971|       |    @brief a type for a number (unsigned)
12972|       |
12973|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes numbers as follows:
12974|       |    > The representation of numbers is similar to that used in most
12975|       |    > programming languages. A number is represented in base 10 using decimal
12976|       |    > digits. It contains an integer component that may be prefixed with an
12977|       |    > optional minus sign, which may be followed by a fraction part and/or an
12978|       |    > exponent part. Leading zeros are not allowed. (...) Numeric values that
12979|       |    > cannot be represented in the grammar below (such as Infinity and NaN)
12980|       |    > are not permitted.
12981|       |
12982|       |    This description includes both integer and floating-point numbers.
12983|       |    However, C++ allows more precise storage if it is known whether the number
12984|       |    is a signed integer, an unsigned integer or a floating-point number.
12985|       |    Therefore, three different types, @ref number_integer_t, @ref
12986|       |    number_unsigned_t and @ref number_float_t are used.
12987|       |
12988|       |    To store unsigned integer numbers in C++, a type is defined by the
12989|       |    template parameter @a NumberUnsignedType which chooses the type to use.
12990|       |
12991|       |    #### Default type
12992|       |
12993|       |    With the default values for @a NumberUnsignedType (`uint64_t`), the
12994|       |    default value for @a number_unsigned_t is:
12995|       |
12996|       |    @code {.cpp}
12997|       |    uint64_t
12998|       |    @endcode
12999|       |
13000|       |    #### Default behavior
13001|       |
13002|       |    - The restrictions about leading zeros is not enforced in C++. Instead,
13003|       |      leading zeros in integer literals lead to an interpretation as octal
13004|       |      number. Internally, the value will be stored as decimal number. For
13005|       |      instance, the C++ integer literal `010` will be serialized to `8`.
13006|       |      During deserialization, leading zeros yield an error.
13007|       |    - Not-a-number (NaN) values will be serialized to `null`.
13008|       |
13009|       |    #### Limits
13010|       |
13011|       |    [RFC 7159](http://rfc7159.net/rfc7159) specifies:
13012|       |    > An implementation may set limits on the range and precision of numbers.
13013|       |
13014|       |    When the default type is used, the maximal integer number that can be
13015|       |    stored is `18446744073709551615` (UINT64_MAX) and the minimal integer
13016|       |    number that can be stored is `0`. Integer numbers that are out of range
13017|       |    will yield over/underflow when used in a constructor. During
13018|       |    deserialization, too large or small integer numbers will be automatically
13019|       |    be stored as @ref number_integer_t or @ref number_float_t.
13020|       |
13021|       |    [RFC 7159](http://rfc7159.net/rfc7159) further states:
13022|       |    > Note that when such software is used, numbers that are integers and are
13023|       |    > in the range \f$[-2^{53}+1, 2^{53}-1]\f$ are interoperable in the sense
13024|       |    > that implementations will agree exactly on their numeric values.
13025|       |
13026|       |    As this range is a subrange (when considered in conjunction with the
13027|       |    number_integer_t type) of the exactly supported range [0, UINT64_MAX],
13028|       |    this class's integer type is interoperable.
13029|       |
13030|       |    #### Storage
13031|       |
13032|       |    Integer number values are stored directly inside a @ref basic_json type.
13033|       |
13034|       |    @sa @ref number_float_t -- type for number values (floating-point)
13035|       |    @sa @ref number_integer_t -- type for number values (integer)
13036|       |
13037|       |    @since version 2.0.0
13038|       |    */
13039|       |    using number_unsigned_t = NumberUnsignedType;
13040|       |
13041|       |    /*!
13042|       |    @brief a type for a number (floating-point)
13043|       |
13044|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes numbers as follows:
13045|       |    > The representation of numbers is similar to that used in most
13046|       |    > programming languages. A number is represented in base 10 using decimal
13047|       |    > digits. It contains an integer component that may be prefixed with an
13048|       |    > optional minus sign, which may be followed by a fraction part and/or an
13049|       |    > exponent part. Leading zeros are not allowed. (...) Numeric values that
13050|       |    > cannot be represented in the grammar below (such as Infinity and NaN)
13051|       |    > are not permitted.
13052|       |
13053|       |    This description includes both integer and floating-point numbers.
13054|       |    However, C++ allows more precise storage if it is known whether the number
13055|       |    is a signed integer, an unsigned integer or a floating-point number.
13056|       |    Therefore, three different types, @ref number_integer_t, @ref
13057|       |    number_unsigned_t and @ref number_float_t are used.
13058|       |
13059|       |    To store floating-point numbers in C++, a type is defined by the template
13060|       |    parameter @a NumberFloatType which chooses the type to use.
13061|       |
13062|       |    #### Default type
13063|       |
13064|       |    With the default values for @a NumberFloatType (`double`), the default
13065|       |    value for @a number_float_t is:
13066|       |
13067|       |    @code {.cpp}
13068|       |    double
13069|       |    @endcode
13070|       |
13071|       |    #### Default behavior
13072|       |
13073|       |    - The restrictions about leading zeros is not enforced in C++. Instead,
13074|       |      leading zeros in floating-point literals will be ignored. Internally,
13075|       |      the value will be stored as decimal number. For instance, the C++
13076|       |      floating-point literal `01.2` will be serialized to `1.2`. During
13077|       |      deserialization, leading zeros yield an error.
13078|       |    - Not-a-number (NaN) values will be serialized to `null`.
13079|       |
13080|       |    #### Limits
13081|       |
13082|       |    [RFC 7159](http://rfc7159.net/rfc7159) states:
13083|       |    > This specification allows implementations to set limits on the range and
13084|       |    > precision of numbers accepted. Since software that implements IEEE
13085|       |    > 754-2008 binary64 (double precision) numbers is generally available and
13086|       |    > widely used, good interoperability can be achieved by implementations
13087|       |    > that expect no more precision or range than these provide, in the sense
13088|       |    > that implementations will approximate JSON numbers within the expected
13089|       |    > precision.
13090|       |
13091|       |    This implementation does exactly follow this approach, as it uses double
13092|       |    precision floating-point numbers. Note values smaller than
13093|       |    `-1.79769313486232e+308` and values greater than `1.79769313486232e+308`
13094|       |    will be stored as NaN internally and be serialized to `null`.
13095|       |
13096|       |    #### Storage
13097|       |
13098|       |    Floating-point number values are stored directly inside a @ref basic_json
13099|       |    type.
13100|       |
13101|       |    @sa @ref number_integer_t -- type for number values (integer)
13102|       |
13103|       |    @sa @ref number_unsigned_t -- type for number values (unsigned integer)
13104|       |
13105|       |    @since version 1.0.0
13106|       |    */
13107|       |    using number_float_t = NumberFloatType;
13108|       |
13109|       |    /// @}
13110|       |
13111|       |  private:
13112|       |
13113|       |    /// helper for exception-safe object creation
13114|       |    template<typename T, typename... Args>
13115|       |    static T* create(Args&& ... args)
13116|   162k|    {
13117|   162k|        AllocatorType<T> alloc;
13118|   162k|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
13119|   162k|
13120|   162k|        auto deleter = [&](T * object)
13121|   162k|        {
13122|      0|            AllocatorTraits::deallocate(alloc, object, 1);
13123|      0|        };
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS1_IS8_SA_St4lessIvESaISt4pairIKS8_SA_EEEJEEEPT_DpOT0_ENKUlPSI_E_clESO_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS2_ISA_SaISA_EEJEEEPT_DpOT0_ENKUlPSD_E_clESJ_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA1_KcEEEPT_DpOT0_ENKUlPS8_E_clESK_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS1_IS8_SA_St4lessIvESaISt4pairIKS8_SA_EEEJRKSI_EEEPT_DpOT0_ENKUlPSI_E_clESQ_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS2_ISA_SaISA_EEJRKSD_EEEPT_DpOT0_ENKUlPSD_E_clESL_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKS8_EEEPT_DpOT0_ENKUlPS8_E_clESJ_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA474_KcEEEPT_DpOT0_ENKUlPS8_E_clESK_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JS8_EEEPT_DpOT0_ENKUlPS8_E_clESH_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKPKcEEEPT_DpOT0_ENKUlPS8_E_clESL_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA6_KcEEEPT_DpOT0_ENKUlPS8_E_clESK_
  ------------------
13124|   162k|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
13125|   162k|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
13126|   162k|        assert(object != nullptr);
13127|   162k|        return object.release();
13128|   162k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS1_IS8_SA_St4lessIvESaISt4pairIKS8_SA_EEEJEEEPT_DpOT0_:
  |13116|  53.0k|    {
  |13117|  53.0k|        AllocatorType<T> alloc;
  |13118|  53.0k|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |13119|  53.0k|
  |13120|  53.0k|        auto deleter = [&](T * object)
  |13121|  53.0k|        {
  |13122|  53.0k|            AllocatorTraits::deallocate(alloc, object, 1);
  |13123|  53.0k|        };
  |13124|  53.0k|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |13125|  53.0k|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |13126|  53.0k|        assert(object != nullptr);
  |13127|  53.0k|        return object.release();
  |13128|  53.0k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS2_ISA_SaISA_EEJEEEPT_DpOT0_:
  |13116|    619|    {
  |13117|    619|        AllocatorType<T> alloc;
  |13118|    619|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |13119|    619|
  |13120|    619|        auto deleter = [&](T * object)
  |13121|    619|        {
  |13122|    619|            AllocatorTraits::deallocate(alloc, object, 1);
  |13123|    619|        };
  |13124|    619|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |13125|    619|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |13126|    619|        assert(object != nullptr);
  |13127|    619|        return object.release();
  |13128|    619|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA1_KcEEEPT_DpOT0_
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS1_IS8_SA_St4lessIvESaISt4pairIKS8_SA_EEEJRKSI_EEEPT_DpOT0_:
  |13116|  6.34k|    {
  |13117|  6.34k|        AllocatorType<T> alloc;
  |13118|  6.34k|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |13119|  6.34k|
  |13120|  6.34k|        auto deleter = [&](T * object)
  |13121|  6.34k|        {
  |13122|  6.34k|            AllocatorTraits::deallocate(alloc, object, 1);
  |13123|  6.34k|        };
  |13124|  6.34k|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |13125|  6.34k|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |13126|  6.34k|        assert(object != nullptr);
  |13127|  6.34k|        return object.release();
  |13128|  6.34k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS2_ISA_SaISA_EEJRKSD_EEEPT_DpOT0_:
  |13116|     24|    {
  |13117|     24|        AllocatorType<T> alloc;
  |13118|     24|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |13119|     24|
  |13120|     24|        auto deleter = [&](T * object)
  |13121|     24|        {
  |13122|     24|            AllocatorTraits::deallocate(alloc, object, 1);
  |13123|     24|        };
  |13124|     24|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |13125|     24|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |13126|     24|        assert(object != nullptr);
  |13127|     24|        return object.release();
  |13128|     24|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKS8_EEEPT_DpOT0_:
  |13116|   101k|    {
  |13117|   101k|        AllocatorType<T> alloc;
  |13118|   101k|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |13119|   101k|
  |13120|   101k|        auto deleter = [&](T * object)
  |13121|   101k|        {
  |13122|   101k|            AllocatorTraits::deallocate(alloc, object, 1);
  |13123|   101k|        };
  |13124|   101k|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |13125|   101k|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |13126|   101k|        assert(object != nullptr);
  |13127|   101k|        return object.release();
  |13128|   101k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA474_KcEEEPT_DpOT0_:
  |13116|    205|    {
  |13117|    205|        AllocatorType<T> alloc;
  |13118|    205|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |13119|    205|
  |13120|    205|        auto deleter = [&](T * object)
  |13121|    205|        {
  |13122|    205|            AllocatorTraits::deallocate(alloc, object, 1);
  |13123|    205|        };
  |13124|    205|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |13125|    205|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |13126|    205|        assert(object != nullptr);
  |13127|    205|        return object.release();
  |13128|    205|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JS8_EEEPT_DpOT0_:
  |13116|    513|    {
  |13117|    513|        AllocatorType<T> alloc;
  |13118|    513|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |13119|    513|
  |13120|    513|        auto deleter = [&](T * object)
  |13121|    513|        {
  |13122|    513|            AllocatorTraits::deallocate(alloc, object, 1);
  |13123|    513|        };
  |13124|    513|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |13125|    513|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |13126|    513|        assert(object != nullptr);
  |13127|    513|        return object.release();
  |13128|    513|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKPKcEEEPT_DpOT0_:
  |13116|     20|    {
  |13117|     20|        AllocatorType<T> alloc;
  |13118|     20|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |13119|     20|
  |13120|     20|        auto deleter = [&](T * object)
  |13121|     20|        {
  |13122|     20|            AllocatorTraits::deallocate(alloc, object, 1);
  |13123|     20|        };
  |13124|     20|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |13125|     20|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |13126|     20|        assert(object != nullptr);
  |13127|     20|        return object.release();
  |13128|     20|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA6_KcEEEPT_DpOT0_:
  |13116|      1|    {
  |13117|      1|        AllocatorType<T> alloc;
  |13118|      1|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |13119|      1|
  |13120|      1|        auto deleter = [&](T * object)
  |13121|      1|        {
  |13122|      1|            AllocatorTraits::deallocate(alloc, object, 1);
  |13123|      1|        };
  |13124|      1|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |13125|      1|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |13126|      1|        assert(object != nullptr);
  |13127|      1|        return object.release();
  |13128|      1|    }
  ------------------
13129|       |
13130|       |    ////////////////////////
13131|       |    // JSON value storage //
13132|       |    ////////////////////////
13133|       |
13134|       |    /*!
13135|       |    @brief a JSON value
13136|       |
13137|       |    The actual storage for a JSON value of the @ref basic_json class. This
13138|       |    union combines the different storage types for the JSON value types
13139|       |    defined in @ref value_t.
13140|       |
13141|       |    JSON type | value_t type    | used type
13142|       |    --------- | --------------- | ------------------------
13143|       |    object    | object          | pointer to @ref object_t
13144|       |    array     | array           | pointer to @ref array_t
13145|       |    string    | string          | pointer to @ref string_t
13146|       |    boolean   | boolean         | @ref boolean_t
13147|       |    number    | number_integer  | @ref number_integer_t
13148|       |    number    | number_unsigned | @ref number_unsigned_t
13149|       |    number    | number_float    | @ref number_float_t
13150|       |    null      | null            | *no value is stored*
13151|       |
13152|       |    @note Variable-length types (objects, arrays, and strings) are stored as
13153|       |    pointers. The size of the union should not exceed 64 bits if the default
13154|       |    value types are used.
13155|       |
13156|       |    @since version 1.0.0
13157|       |    */
13158|       |    union json_value
13159|       |    {
13160|       |        /// object (stored with pointer to save storage)
13161|       |        object_t* object;
13162|       |        /// array (stored with pointer to save storage)
13163|       |        array_t* array;
13164|       |        /// string (stored with pointer to save storage)
13165|       |        string_t* string;
13166|       |        /// boolean
13167|       |        boolean_t boolean;
13168|       |        /// number (integer)
13169|       |        number_integer_t number_integer;
13170|       |        /// number (unsigned integer)
13171|       |        number_unsigned_t number_unsigned;
13172|       |        /// number (floating-point)
13173|       |        number_float_t number_float;
13174|       |
13175|       |        /// default constructor (for null values)
13176|       |        json_value() = default;
13177|       |        /// constructor for booleans
13178|    633|        json_value(boolean_t v) noexcept : boolean(v) {}
13179|       |        /// constructor for numbers (integer)
13180|  9.87k|        json_value(number_integer_t v) noexcept : number_integer(v) {}
13181|       |        /// constructor for numbers (unsigned)
13182|  83.2k|        json_value(number_unsigned_t v) noexcept : number_unsigned(v) {}
13183|       |        /// constructor for numbers (floating-point)
13184|  61.8k|        json_value(number_float_t v) noexcept : number_float(v) {}
13185|       |        /// constructor for empty values of a given type
13186|       |        json_value(value_t t)
13187|   314k|        {
13188|   314k|            switch (t)
13189|   314k|            {
13190|   314k|                case value_t::object:
13191|  52.9k|                {
13192|  52.9k|                    object = create<object_t>();
13193|  52.9k|                    break;
13194|   314k|                }
13195|   314k|
13196|   314k|                case value_t::array:
13197|    619|                {
13198|    619|                    array = create<array_t>();
13199|    619|                    break;
13200|   314k|                }
13201|   314k|
13202|   314k|                case value_t::string:
13203|      0|                {
13204|      0|                    string = create<string_t>("");
13205|      0|                    break;
13206|   314k|                }
13207|   314k|
13208|   314k|                case value_t::boolean:
13209|      0|                {
13210|      0|                    boolean = boolean_t(false);
13211|      0|                    break;
13212|   314k|                }
13213|   314k|
13214|   314k|                case value_t::number_integer:
13215|      0|                {
13216|      0|                    number_integer = number_integer_t(0);
13217|      0|                    break;
13218|   314k|                }
13219|   314k|
13220|   314k|                case value_t::number_unsigned:
13221|      0|                {
13222|      0|                    number_unsigned = number_unsigned_t(0);
13223|      0|                    break;
13224|   314k|                }
13225|   314k|
13226|   314k|                case value_t::number_float:
13227|      0|                {
13228|      0|                    number_float = number_float_t(0.0);
13229|      0|                    break;
13230|   314k|                }
13231|   314k|
13232|   314k|                case value_t::null:
13233|   261k|                {
13234|   261k|                    object = nullptr;  // silence warning, see #821
13235|   261k|                    break;
13236|   314k|                }
13237|   314k|
13238|   314k|                default:
13239|      0|                {
13240|      0|                    object = nullptr;  // silence warning, see #821
13241|      0|                    if (JSON_UNLIKELY(t == value_t::null))
13242|      0|                    {
13243|      0|                        JSON_THROW(other_error::create(500, "961c151d2e87f2686a955a9be24d316f1362bf21 3.4.0")); // LCOV_EXCL_LINE
13244|      0|                    }
13245|      0|                    break;
13246|      0|                }
13247|   314k|            }
13248|   314k|        }
13249|       |
13250|       |        /// constructor for strings
13251|       |        json_value(const string_t& value)
13252|   101k|        {
13253|   101k|            string = create<string_t>(value);
13254|   101k|        }
13255|       |
13256|       |        /// constructor for rvalue strings
13257|       |        json_value(string_t&& value)
13258|    513|        {
13259|    513|            string = create<string_t>(std::move(value));
13260|    513|        }
13261|       |
13262|       |        /// constructor for objects
13263|       |        json_value(const object_t& value)
13264|  6.34k|        {
13265|  6.34k|            object = create<object_t>(value);
13266|  6.34k|        }
13267|       |
13268|       |        /// constructor for rvalue objects
13269|       |        json_value(object_t&& value)
13270|       |        {
13271|       |            object = create<object_t>(std::move(value));
13272|       |        }
13273|       |
13274|       |        /// constructor for arrays
13275|       |        json_value(const array_t& value)
13276|     24|        {
13277|     24|            array = create<array_t>(value);
13278|     24|        }
13279|       |
13280|       |        /// constructor for rvalue arrays
13281|       |        json_value(array_t&& value)
13282|       |        {
13283|       |            array = create<array_t>(std::move(value));
13284|       |        }
13285|       |
13286|       |        void destroy(value_t t) noexcept
13287|   591k|        {
13288|   591k|            switch (t)
13289|   591k|            {
13290|   591k|                case value_t::object:
13291|  59.3k|                {
13292|  59.3k|                    AllocatorType<object_t> alloc;
13293|  59.3k|                    std::allocator_traits<decltype(alloc)>::destroy(alloc, object);
13294|  59.3k|                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, object, 1);
13295|  59.3k|                    break;
13296|   591k|                }
13297|   591k|
13298|   591k|                case value_t::array:
13299|    643|                {
13300|    643|                    AllocatorType<array_t> alloc;
13301|    643|                    std::allocator_traits<decltype(alloc)>::destroy(alloc, array);
13302|    643|                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, array, 1);
13303|    643|                    break;
13304|   591k|                }
13305|   591k|
13306|   591k|                case value_t::string:
13307|   102k|                {
13308|   102k|                    AllocatorType<string_t> alloc;
13309|   102k|                    std::allocator_traits<decltype(alloc)>::destroy(alloc, string);
13310|   102k|                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, string, 1);
13311|   102k|                    break;
13312|   591k|                }
13313|   591k|
13314|   591k|                default:
13315|   429k|                {
13316|   429k|                    break;
13317|   591k|                }
13318|   591k|            }
13319|   591k|        }
13320|       |    };
13321|       |
13322|       |    /*!
13323|       |    @brief checks the class invariants
13324|       |
13325|       |    This function asserts the class invariants. It needs to be called at the
13326|       |    end of every constructor to make sure that created objects respect the
13327|       |    invariant. Furthermore, it has to be called each time the type of a JSON
13328|       |    value is changed, because the invariant expresses a relationship between
13329|       |    @a m_type and @a m_value.
13330|       |    */
13331|       |    void assert_invariant() const noexcept
13332|  2.24M|    {
13333|  2.24M|        assert(m_type != value_t::object or m_value.object != nullptr);
13334|  2.24M|        assert(m_type != value_t::array or m_value.array != nullptr);
13335|  2.24M|        assert(m_type != value_t::string or m_value.string != nullptr);
13336|  2.24M|    }
13337|       |
13338|       |  public:
13339|       |    //////////////////////////
13340|       |    // JSON parser callback //
13341|       |    //////////////////////////
13342|       |
13343|       |    /*!
13344|       |    @brief parser event types
13345|       |
13346|       |    The parser callback distinguishes the following events:
13347|       |    - `object_start`: the parser read `{` and started to process a JSON object
13348|       |    - `key`: the parser read a key of a value in an object
13349|       |    - `object_end`: the parser read `}` and finished processing a JSON object
13350|       |    - `array_start`: the parser read `[` and started to process a JSON array
13351|       |    - `array_end`: the parser read `]` and finished processing a JSON array
13352|       |    - `value`: the parser finished reading a JSON value
13353|       |
13354|       |    @image html callback_events.png "Example when certain parse events are triggered"
13355|       |
13356|       |    @sa @ref parser_callback_t for more information and examples
13357|       |    */
13358|       |    using parse_event_t = typename parser::parse_event_t;
13359|       |
13360|       |    /*!
13361|       |    @brief per-element parser callback type
13362|       |
13363|       |    With a parser callback function, the result of parsing a JSON text can be
13364|       |    influenced. When passed to @ref parse, it is called on certain events
13365|       |    (passed as @ref parse_event_t via parameter @a event) with a set recursion
13366|       |    depth @a depth and context JSON value @a parsed. The return value of the
13367|       |    callback function is a boolean indicating whether the element that emitted
13368|       |    the callback shall be kept or not.
13369|       |
13370|       |    We distinguish six scenarios (determined by the event type) in which the
13371|       |    callback function can be called. The following table describes the values
13372|       |    of the parameters @a depth, @a event, and @a parsed.
13373|       |
13374|       |    parameter @a event | description | parameter @a depth | parameter @a parsed
13375|       |    ------------------ | ----------- | ------------------ | -------------------
13376|       |    parse_event_t::object_start | the parser read `{` and started to process a JSON object | depth of the parent of the JSON object | a JSON value with type discarded
13377|       |    parse_event_t::key | the parser read a key of a value in an object | depth of the currently parsed JSON object | a JSON string containing the key
13378|       |    parse_event_t::object_end | the parser read `}` and finished processing a JSON object | depth of the parent of the JSON object | the parsed JSON object
13379|       |    parse_event_t::array_start | the parser read `[` and started to process a JSON array | depth of the parent of the JSON array | a JSON value with type discarded
13380|       |    parse_event_t::array_end | the parser read `]` and finished processing a JSON array | depth of the parent of the JSON array | the parsed JSON array
13381|       |    parse_event_t::value | the parser finished reading a JSON value | depth of the value | the parsed JSON value
13382|       |
13383|       |    @image html callback_events.png "Example when certain parse events are triggered"
13384|       |
13385|       |    Discarding a value (i.e., returning `false`) has different effects
13386|       |    depending on the context in which function was called:
13387|       |
13388|       |    - Discarded values in structured types are skipped. That is, the parser
13389|       |      will behave as if the discarded value was never read.
13390|       |    - In case a value outside a structured type is skipped, it is replaced
13391|       |      with `null`. This case happens if the top-level element is skipped.
13392|       |
13393|       |    @param[in] depth  the depth of the recursion during parsing
13394|       |
13395|       |    @param[in] event  an event of type parse_event_t indicating the context in
13396|       |    the callback function has been called
13397|       |
13398|       |    @param[in,out] parsed  the current intermediate parse result; note that
13399|       |    writing to this value has no effect for parse_event_t::key events
13400|       |
13401|       |    @return Whether the JSON value which called the function during parsing
13402|       |    should be kept (`true`) or not (`false`). In the latter case, it is either
13403|       |    skipped completely or replaced by an empty discarded object.
13404|       |
13405|       |    @sa @ref parse for examples
13406|       |
13407|       |    @since version 1.0.0
13408|       |    */
13409|       |    using parser_callback_t = typename parser::parser_callback_t;
13410|       |
13411|       |    //////////////////
13412|       |    // constructors //
13413|       |    //////////////////
13414|       |
13415|       |    /// @name constructors and destructors
13416|       |    /// Constructors of class @ref basic_json, copy/move constructor, copy
13417|       |    /// assignment, static functions creating objects, and the destructor.
13418|       |    /// @{
13419|       |
13420|       |    /*!
13421|       |    @brief create an empty value with a given type
13422|       |
13423|       |    Create an empty JSON value with a given type. The value will be default
13424|       |    initialized with an empty value which depends on the type:
13425|       |
13426|       |    Value type  | initial value
13427|       |    ----------- | -------------
13428|       |    null        | `null`
13429|       |    boolean     | `false`
13430|       |    string      | `""`
13431|       |    number      | `0`
13432|       |    object      | `{}`
13433|       |    array       | `[]`
13434|       |
13435|       |    @param[in] v  the type of the value to create
13436|       |
13437|       |    @complexity Constant.
13438|       |
13439|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
13440|       |    changes to any JSON value.
13441|       |
13442|       |    @liveexample{The following code shows the constructor for different @ref
13443|       |    value_t values,basic_json__value_t}
13444|       |
13445|       |    @sa @ref clear() -- restores the postcondition of this constructor
13446|       |
13447|       |    @since version 1.0.0
13448|       |    */
13449|       |    basic_json(const value_t v)
13450|       |        : m_type(v), m_value(v)
13451|   314k|    {
13452|   314k|        assert_invariant();
13453|   314k|    }
13454|       |
13455|       |    /*!
13456|       |    @brief create a null object
13457|       |
13458|       |    Create a `null` JSON value. It either takes a null pointer as parameter
13459|       |    (explicitly creating `null`) or no parameter (implicitly creating `null`).
13460|       |    The passed null pointer itself is not read -- it is only used to choose
13461|       |    the right constructor.
13462|       |
13463|       |    @complexity Constant.
13464|       |
13465|       |    @exceptionsafety No-throw guarantee: this constructor never throws
13466|       |    exceptions.
13467|       |
13468|       |    @liveexample{The following code shows the constructor with and without a
13469|       |    null pointer parameter.,basic_json__nullptr_t}
13470|       |
13471|       |    @since version 1.0.0
13472|       |    */
13473|       |    basic_json(std::nullptr_t = nullptr) noexcept
13474|       |        : basic_json(value_t::null)
13475|   261k|    {
13476|   261k|        assert_invariant();
13477|   261k|    }
13478|       |
13479|       |    /*!
13480|       |    @brief create a JSON value
13481|       |
13482|       |    This is a "catch all" constructor for all compatible JSON types; that is,
13483|       |    types for which a `to_json()` method exists. The constructor forwards the
13484|       |    parameter @a val to that method (to `json_serializer<U>::to_json` method
13485|       |    with `U = uncvref_t<CompatibleType>`, to be exact).
13486|       |
13487|       |    Template type @a CompatibleType includes, but is not limited to, the
13488|       |    following types:
13489|       |    - **arrays**: @ref array_t and all kinds of compatible containers such as
13490|       |      `std::vector`, `std::deque`, `std::list`, `std::forward_list`,
13491|       |      `std::array`, `std::valarray`, `std::set`, `std::unordered_set`,
13492|       |      `std::multiset`, and `std::unordered_multiset` with a `value_type` from
13493|       |      which a @ref basic_json value can be constructed.
13494|       |    - **objects**: @ref object_t and all kinds of compatible associative
13495|       |      containers such as `std::map`, `std::unordered_map`, `std::multimap`,
13496|       |      and `std::unordered_multimap` with a `key_type` compatible to
13497|       |      @ref string_t and a `value_type` from which a @ref basic_json value can
13498|       |      be constructed.
13499|       |    - **strings**: @ref string_t, string literals, and all compatible string
13500|       |      containers can be used.
13501|       |    - **numbers**: @ref number_integer_t, @ref number_unsigned_t,
13502|       |      @ref number_float_t, and all convertible number types such as `int`,
13503|       |      `size_t`, `int64_t`, `float` or `double` can be used.
13504|       |    - **boolean**: @ref boolean_t / `bool` can be used.
13505|       |
13506|       |    See the examples below.
13507|       |
13508|       |    @tparam CompatibleType a type such that:
13509|       |    - @a CompatibleType is not derived from `std::istream`,
13510|       |    - @a CompatibleType is not @ref basic_json (to avoid hijacking copy/move
13511|       |         constructors),
13512|       |    - @a CompatibleType is not a different @ref basic_json type (i.e. with different template arguments)
13513|       |    - @a CompatibleType is not a @ref basic_json nested type (e.g.,
13514|       |         @ref json_pointer, @ref iterator, etc ...)
13515|       |    - @ref @ref json_serializer<U> has a
13516|       |         `to_json(basic_json_t&, CompatibleType&&)` method
13517|       |
13518|       |    @tparam U = `uncvref_t<CompatibleType>`
13519|       |
13520|       |    @param[in] val the value to be forwarded to the respective constructor
13521|       |
13522|       |    @complexity Usually linear in the size of the passed @a val, also
13523|       |                depending on the implementation of the called `to_json()`
13524|       |                method.
13525|       |
13526|       |    @exceptionsafety Depends on the called constructor. For types directly
13527|       |    supported by the library (i.e., all types for which no `to_json()` function
13528|       |    was provided), strong guarantee holds: if an exception is thrown, there are
13529|       |    no changes to any JSON value.
13530|       |
13531|       |    @liveexample{The following code shows the constructor with several
13532|       |    compatible types.,basic_json__CompatibleType}
13533|       |
13534|       |    @since version 2.1.0
13535|       |    */
13536|       |    template <typename CompatibleType,
13537|       |              typename U = detail::uncvref_t<CompatibleType>,
13538|       |              detail::enable_if_t<
13539|       |                  not detail::is_basic_json<U>::value and detail::is_compatible_type<basic_json_t, U>::value, int> = 0>
13540|       |    basic_json(CompatibleType && val) noexcept(noexcept(
13541|       |                JSONSerializer<U>::to_json(std::declval<basic_json_t&>(),
13542|       |                                           std::forward<CompatibleType>(val))))
13543|   216k|    {
13544|   216k|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
13545|   216k|        assert_invariant();
13546|   216k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRS8_S8_Li0EEEOT_:
  |13543|  66.5k|    {
  |13544|  66.5k|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|  66.5k|        assert_invariant();
  |13546|  66.5k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRddLi0EEEOT_:
  |13543|  59.2k|    {
  |13544|  59.2k|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|  59.2k|        assert_invariant();
  |13546|  59.2k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRbbLi0EEEOT_:
  |13543|    620|    {
  |13544|    620|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|    620|        assert_invariant();
  |13546|    620|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRllLi0EEEOT_:
  |13543|  9.45k|    {
  |13544|  9.45k|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|  9.45k|        assert_invariant();
  |13546|  9.45k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRmmLi0EEEOT_:
  |13543|  79.3k|    {
  |13544|  79.3k|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|  79.3k|        assert_invariant();
  |13546|  79.3k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRA474_KcA474_cLi0EEEOT_:
  |13543|    205|    {
  |13544|    205|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|    205|        assert_invariant();
  |13546|    205|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IS8_S8_Li0EEEOT_:
  |13543|    513|    {
  |13544|    513|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|    513|        assert_invariant();
  |13546|    513|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IKS8_S8_Li0EEEOT_:
  |13543|     57|    {
  |13544|     57|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|     57|        assert_invariant();
  |13546|     57|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRjjLi0EEEOT_:
  |13543|    171|    {
  |13544|    171|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|    171|        assert_invariant();
  |13546|    171|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRKPKcSD_Li0EEEOT_:
  |13543|     20|    {
  |13544|     20|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|     20|        assert_invariant();
  |13546|     20|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IbbLi0EEEOT_:
  |13543|      1|    {
  |13544|      1|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|      1|        assert_invariant();
  |13546|      1|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IddLi0EEEOT_:
  |13543|      1|    {
  |13544|      1|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|      1|        assert_invariant();
  |13546|      1|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRA6_KcA6_cLi0EEEOT_:
  |13543|      1|    {
  |13544|      1|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|      1|        assert_invariant();
  |13546|      1|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IiiLi0EEEOT_:
  |13543|      1|    {
  |13544|      1|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |13545|      1|        assert_invariant();
  |13546|      1|    }
  ------------------
13547|       |
13548|       |    /*!
13549|       |    @brief create a JSON value from an existing one
13550|       |
13551|       |    This is a constructor for existing @ref basic_json types.
13552|       |    It does not hijack copy/move constructors, since the parameter has different
13553|       |    template arguments than the current ones.
13554|       |
13555|       |    The constructor tries to convert the internal @ref m_value of the parameter.
13556|       |
13557|       |    @tparam BasicJsonType a type such that:
13558|       |    - @a BasicJsonType is a @ref basic_json type.
13559|       |    - @a BasicJsonType has different template arguments than @ref basic_json_t.
13560|       |
13561|       |    @param[in] val the @ref basic_json value to be converted.
13562|       |
13563|       |    @complexity Usually linear in the size of the passed @a val, also
13564|       |                depending on the implementation of the called `to_json()`
13565|       |                method.
13566|       |
13567|       |    @exceptionsafety Depends on the called constructor. For types directly
13568|       |    supported by the library (i.e., all types for which no `to_json()` function
13569|       |    was provided), strong guarantee holds: if an exception is thrown, there are
13570|       |    no changes to any JSON value.
13571|       |
13572|       |    @since version 3.2.0
13573|       |    */
13574|       |    template <typename BasicJsonType,
13575|       |              detail::enable_if_t<
13576|       |                  detail::is_basic_json<BasicJsonType>::value and not std::is_same<basic_json, BasicJsonType>::value, int> = 0>
13577|       |    basic_json(const BasicJsonType& val)
13578|       |    {
13579|       |        using other_boolean_t = typename BasicJsonType::boolean_t;
13580|       |        using other_number_float_t = typename BasicJsonType::number_float_t;
13581|       |        using other_number_integer_t = typename BasicJsonType::number_integer_t;
13582|       |        using other_number_unsigned_t = typename BasicJsonType::number_unsigned_t;
13583|       |        using other_string_t = typename BasicJsonType::string_t;
13584|       |        using other_object_t = typename BasicJsonType::object_t;
13585|       |        using other_array_t = typename BasicJsonType::array_t;
13586|       |
13587|       |        switch (val.type())
13588|       |        {
13589|       |            case value_t::boolean:
13590|       |                JSONSerializer<other_boolean_t>::to_json(*this, val.template get<other_boolean_t>());
13591|       |                break;
13592|       |            case value_t::number_float:
13593|       |                JSONSerializer<other_number_float_t>::to_json(*this, val.template get<other_number_float_t>());
13594|       |                break;
13595|       |            case value_t::number_integer:
13596|       |                JSONSerializer<other_number_integer_t>::to_json(*this, val.template get<other_number_integer_t>());
13597|       |                break;
13598|       |            case value_t::number_unsigned:
13599|       |                JSONSerializer<other_number_unsigned_t>::to_json(*this, val.template get<other_number_unsigned_t>());
13600|       |                break;
13601|       |            case value_t::string:
13602|       |                JSONSerializer<other_string_t>::to_json(*this, val.template get_ref<const other_string_t&>());
13603|       |                break;
13604|       |            case value_t::object:
13605|       |                JSONSerializer<other_object_t>::to_json(*this, val.template get_ref<const other_object_t&>());
13606|       |                break;
13607|       |            case value_t::array:
13608|       |                JSONSerializer<other_array_t>::to_json(*this, val.template get_ref<const other_array_t&>());
13609|       |                break;
13610|       |            case value_t::null:
13611|       |                *this = nullptr;
13612|       |                break;
13613|       |            case value_t::discarded:
13614|       |                m_type = value_t::discarded;
13615|       |                break;
13616|       |        }
13617|       |        assert_invariant();
13618|       |    }
13619|       |
13620|       |    /*!
13621|       |    @brief create a container (array or object) from an initializer list
13622|       |
13623|       |    Creates a JSON value of type array or object from the passed initializer
13624|       |    list @a init. In case @a type_deduction is `true` (default), the type of
13625|       |    the JSON value to be created is deducted from the initializer list @a init
13626|       |    according to the following rules:
13627|       |
13628|       |    1. If the list is empty, an empty JSON object value `{}` is created.
13629|       |    2. If the list consists of pairs whose first element is a string, a JSON
13630|       |       object value is created where the first elements of the pairs are
13631|       |       treated as keys and the second elements are as values.
13632|       |    3. In all other cases, an array is created.
13633|       |
13634|       |    The rules aim to create the best fit between a C++ initializer list and
13635|       |    JSON values. The rationale is as follows:
13636|       |
13637|       |    1. The empty initializer list is written as `{}` which is exactly an empty
13638|       |       JSON object.
13639|       |    2. C++ has no way of describing mapped types other than to list a list of
13640|       |       pairs. As JSON requires that keys must be of type string, rule 2 is the
13641|       |       weakest constraint one can pose on initializer lists to interpret them
13642|       |       as an object.
13643|       |    3. In all other cases, the initializer list could not be interpreted as
13644|       |       JSON object type, so interpreting it as JSON array type is safe.
13645|       |
13646|       |    With the rules described above, the following JSON values cannot be
13647|       |    expressed by an initializer list:
13648|       |
13649|       |    - the empty array (`[]`): use @ref array(initializer_list_t)
13650|       |      with an empty initializer list in this case
13651|       |    - arrays whose elements satisfy rule 2: use @ref
13652|       |      array(initializer_list_t) with the same initializer list
13653|       |      in this case
13654|       |
13655|       |    @note When used without parentheses around an empty initializer list, @ref
13656|       |    basic_json() is called instead of this function, yielding the JSON null
13657|       |    value.
13658|       |
13659|       |    @param[in] init  initializer list with JSON values
13660|       |
13661|       |    @param[in] type_deduction internal parameter; when set to `true`, the type
13662|       |    of the JSON value is deducted from the initializer list @a init; when set
13663|       |    to `false`, the type provided via @a manual_type is forced. This mode is
13664|       |    used by the functions @ref array(initializer_list_t) and
13665|       |    @ref object(initializer_list_t).
13666|       |
13667|       |    @param[in] manual_type internal parameter; when @a type_deduction is set
13668|       |    to `false`, the created JSON value will use the provided type (only @ref
13669|       |    value_t::array and @ref value_t::object are valid); when @a type_deduction
13670|       |    is set to `true`, this parameter has no effect
13671|       |
13672|       |    @throw type_error.301 if @a type_deduction is `false`, @a manual_type is
13673|       |    `value_t::object`, but @a init contains an element which is not a pair
13674|       |    whose first element is a string. In this case, the constructor could not
13675|       |    create an object. If @a type_deduction would have be `true`, an array
13676|       |    would have been created. See @ref object(initializer_list_t)
13677|       |    for an example.
13678|       |
13679|       |    @complexity Linear in the size of the initializer list @a init.
13680|       |
13681|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
13682|       |    changes to any JSON value.
13683|       |
13684|       |    @liveexample{The example below shows how JSON values are created from
13685|       |    initializer lists.,basic_json__list_init_t}
13686|       |
13687|       |    @sa @ref array(initializer_list_t) -- create a JSON array
13688|       |    value from an initializer list
13689|       |    @sa @ref object(initializer_list_t) -- create a JSON object
13690|       |    value from an initializer list
13691|       |
13692|       |    @since version 1.0.0
13693|       |    */
13694|       |    basic_json(initializer_list_t init,
13695|       |               bool type_deduction = true,
13696|       |               value_t manual_type = value_t::array)
13697|       |    {
13698|       |        // check if each element is an array with two elements whose first
13699|       |        // element is a string
13700|       |        bool is_an_object = std::all_of(init.begin(), init.end(),
13701|       |                                        [](const detail::json_ref<basic_json>& element_ref)
13702|       |        {
13703|       |            return (element_ref->is_array() and element_ref->size() == 2 and (*element_ref)[0].is_string());
13704|       |        });
13705|       |
13706|       |        // adjust type if type deduction is not wanted
13707|       |        if (not type_deduction)
13708|       |        {
13709|       |            // if array is wanted, do not create an object though possible
13710|       |            if (manual_type == value_t::array)
13711|       |            {
13712|       |                is_an_object = false;
13713|       |            }
13714|       |
13715|       |            // if object is wanted but impossible, throw an exception
13716|       |            if (JSON_UNLIKELY(manual_type == value_t::object and not is_an_object))
13717|       |            {
13718|       |                JSON_THROW(type_error::create(301, "cannot create object from initializer list"));
13719|       |            }
13720|       |        }
13721|       |
13722|       |        if (is_an_object)
13723|       |        {
13724|       |            // the initializer list is a list of pairs -> create object
13725|       |            m_type = value_t::object;
13726|       |            m_value = value_t::object;
13727|       |
13728|       |            std::for_each(init.begin(), init.end(), [this](const detail::json_ref<basic_json>& element_ref)
13729|       |            {
13730|       |                auto element = element_ref.moved_or_copied();
13731|       |                m_value.object->emplace(
13732|       |                    std::move(*((*element.m_value.array)[0].m_value.string)),
13733|       |                    std::move((*element.m_value.array)[1]));
13734|       |            });
13735|       |        }
13736|       |        else
13737|       |        {
13738|       |            // the initializer list describes an array -> create array
13739|       |            m_type = value_t::array;
13740|       |            m_value.array = create<array_t>(init.begin(), init.end());
13741|       |        }
13742|       |
13743|       |        assert_invariant();
13744|       |    }
13745|       |
13746|       |    /*!
13747|       |    @brief explicitly create an array from an initializer list
13748|       |
13749|       |    Creates a JSON array value from a given initializer list. That is, given a
13750|       |    list of values `a, b, c`, creates the JSON value `[a, b, c]`. If the
13751|       |    initializer list is empty, the empty array `[]` is created.
13752|       |
13753|       |    @note This function is only needed to express two edge cases that cannot
13754|       |    be realized with the initializer list constructor (@ref
13755|       |    basic_json(initializer_list_t, bool, value_t)). These cases
13756|       |    are:
13757|       |    1. creating an array whose elements are all pairs whose first element is a
13758|       |    string -- in this case, the initializer list constructor would create an
13759|       |    object, taking the first elements as keys
13760|       |    2. creating an empty array -- passing the empty initializer list to the
13761|       |    initializer list constructor yields an empty object
13762|       |
13763|       |    @param[in] init  initializer list with JSON values to create an array from
13764|       |    (optional)
13765|       |
13766|       |    @return JSON array value
13767|       |
13768|       |    @complexity Linear in the size of @a init.
13769|       |
13770|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
13771|       |    changes to any JSON value.
13772|       |
13773|       |    @liveexample{The following code shows an example for the `array`
13774|       |    function.,array}
13775|       |
13776|       |    @sa @ref basic_json(initializer_list_t, bool, value_t) --
13777|       |    create a JSON value from an initializer list
13778|       |    @sa @ref object(initializer_list_t) -- create a JSON object
13779|       |    value from an initializer list
13780|       |
13781|       |    @since version 1.0.0
13782|       |    */
13783|       |    static basic_json array(initializer_list_t init = {})
13784|       |    {
13785|       |        return basic_json(init, false, value_t::array);
13786|       |    }
13787|       |
13788|       |    /*!
13789|       |    @brief explicitly create an object from an initializer list
13790|       |
13791|       |    Creates a JSON object value from a given initializer list. The initializer
13792|       |    lists elements must be pairs, and their first elements must be strings. If
13793|       |    the initializer list is empty, the empty object `{}` is created.
13794|       |
13795|       |    @note This function is only added for symmetry reasons. In contrast to the
13796|       |    related function @ref array(initializer_list_t), there are
13797|       |    no cases which can only be expressed by this function. That is, any
13798|       |    initializer list @a init can also be passed to the initializer list
13799|       |    constructor @ref basic_json(initializer_list_t, bool, value_t).
13800|       |
13801|       |    @param[in] init  initializer list to create an object from (optional)
13802|       |
13803|       |    @return JSON object value
13804|       |
13805|       |    @throw type_error.301 if @a init is not a list of pairs whose first
13806|       |    elements are strings. In this case, no object can be created. When such a
13807|       |    value is passed to @ref basic_json(initializer_list_t, bool, value_t),
13808|       |    an array would have been created from the passed initializer list @a init.
13809|       |    See example below.
13810|       |
13811|       |    @complexity Linear in the size of @a init.
13812|       |
13813|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
13814|       |    changes to any JSON value.
13815|       |
13816|       |    @liveexample{The following code shows an example for the `object`
13817|       |    function.,object}
13818|       |
13819|       |    @sa @ref basic_json(initializer_list_t, bool, value_t) --
13820|       |    create a JSON value from an initializer list
13821|       |    @sa @ref array(initializer_list_t) -- create a JSON array
13822|       |    value from an initializer list
13823|       |
13824|       |    @since version 1.0.0
13825|       |    */
13826|       |    static basic_json object(initializer_list_t init = {})
13827|       |    {
13828|       |        return basic_json(init, false, value_t::object);
13829|       |    }
13830|       |
13831|       |    /*!
13832|       |    @brief construct an array with count copies of given value
13833|       |
13834|       |    Constructs a JSON array value by creating @a cnt copies of a passed value.
13835|       |    In case @a cnt is `0`, an empty array is created.
13836|       |
13837|       |    @param[in] cnt  the number of JSON copies of @a val to create
13838|       |    @param[in] val  the JSON value to copy
13839|       |
13840|       |    @post `std::distance(begin(),end()) == cnt` holds.
13841|       |
13842|       |    @complexity Linear in @a cnt.
13843|       |
13844|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
13845|       |    changes to any JSON value.
13846|       |
13847|       |    @liveexample{The following code shows examples for the @ref
13848|       |    basic_json(size_type\, const basic_json&)
13849|       |    constructor.,basic_json__size_type_basic_json}
13850|       |
13851|       |    @since version 1.0.0
13852|       |    */
13853|       |    basic_json(size_type cnt, const basic_json& val)
13854|       |        : m_type(value_t::array)
13855|       |    {
13856|       |        m_value.array = create<array_t>(cnt, val);
13857|       |        assert_invariant();
13858|       |    }
13859|       |
13860|       |    /*!
13861|       |    @brief construct a JSON container given an iterator range
13862|       |
13863|       |    Constructs the JSON value with the contents of the range `[first, last)`.
13864|       |    The semantics depends on the different types a JSON value can have:
13865|       |    - In case of a null type, invalid_iterator.206 is thrown.
13866|       |    - In case of other primitive types (number, boolean, or string), @a first
13867|       |      must be `begin()` and @a last must be `end()`. In this case, the value is
13868|       |      copied. Otherwise, invalid_iterator.204 is thrown.
13869|       |    - In case of structured types (array, object), the constructor behaves as
13870|       |      similar versions for `std::vector` or `std::map`; that is, a JSON array
13871|       |      or object is constructed from the values in the range.
13872|       |
13873|       |    @tparam InputIT an input iterator type (@ref iterator or @ref
13874|       |    const_iterator)
13875|       |
13876|       |    @param[in] first begin of the range to copy from (included)
13877|       |    @param[in] last end of the range to copy from (excluded)
13878|       |
13879|       |    @pre Iterators @a first and @a last must be initialized. **This
13880|       |         precondition is enforced with an assertion (see warning).** If
13881|       |         assertions are switched off, a violation of this precondition yields
13882|       |         undefined behavior.
13883|       |
13884|       |    @pre Range `[first, last)` is valid. Usually, this precondition cannot be
13885|       |         checked efficiently. Only certain edge cases are detected; see the
13886|       |         description of the exceptions below. A violation of this precondition
13887|       |         yields undefined behavior.
13888|       |
13889|       |    @warning A precondition is enforced with a runtime assertion that will
13890|       |             result in calling `std::abort` if this precondition is not met.
13891|       |             Assertions can be disabled by defining `NDEBUG` at compile time.
13892|       |             See https://en.cppreference.com/w/cpp/error/assert for more
13893|       |             information.
13894|       |
13895|       |    @throw invalid_iterator.201 if iterators @a first and @a last are not
13896|       |    compatible (i.e., do not belong to the same JSON value). In this case,
13897|       |    the range `[first, last)` is undefined.
13898|       |    @throw invalid_iterator.204 if iterators @a first and @a last belong to a
13899|       |    primitive type (number, boolean, or string), but @a first does not point
13900|       |    to the first element any more. In this case, the range `[first, last)` is
13901|       |    undefined. See example code below.
13902|       |    @throw invalid_iterator.206 if iterators @a first and @a last belong to a
13903|       |    null value. In this case, the range `[first, last)` is undefined.
13904|       |
13905|       |    @complexity Linear in distance between @a first and @a last.
13906|       |
13907|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
13908|       |    changes to any JSON value.
13909|       |
13910|       |    @liveexample{The example below shows several ways to create JSON values by
13911|       |    specifying a subrange with iterators.,basic_json__InputIt_InputIt}
13912|       |
13913|       |    @since version 1.0.0
13914|       |    */
13915|       |    template<class InputIT, typename std::enable_if<
13916|       |                 std::is_same<InputIT, typename basic_json_t::iterator>::value or
13917|       |                 std::is_same<InputIT, typename basic_json_t::const_iterator>::value, int>::type = 0>
13918|       |    basic_json(InputIT first, InputIT last)
13919|       |    {
13920|       |        assert(first.m_object != nullptr);
13921|       |        assert(last.m_object != nullptr);
13922|       |
13923|       |        // make sure iterator fits the current value
13924|       |        if (JSON_UNLIKELY(first.m_object != last.m_object))
13925|       |        {
13926|       |            JSON_THROW(invalid_iterator::create(201, "iterators are not compatible"));
13927|       |        }
13928|       |
13929|       |        // copy type from first iterator
13930|       |        m_type = first.m_object->m_type;
13931|       |
13932|       |        // check if iterator range is complete for primitive values
13933|       |        switch (m_type)
13934|       |        {
13935|       |            case value_t::boolean:
13936|       |            case value_t::number_float:
13937|       |            case value_t::number_integer:
13938|       |            case value_t::number_unsigned:
13939|       |            case value_t::string:
13940|       |            {
13941|       |                if (JSON_UNLIKELY(not first.m_it.primitive_iterator.is_begin()
13942|       |                                  or not last.m_it.primitive_iterator.is_end()))
13943|       |                {
13944|       |                    JSON_THROW(invalid_iterator::create(204, "iterators out of range"));
13945|       |                }
13946|       |                break;
13947|       |            }
13948|       |
13949|       |            default:
13950|       |                break;
13951|       |        }
13952|       |
13953|       |        switch (m_type)
13954|       |        {
13955|       |            case value_t::number_integer:
13956|       |            {
13957|       |                m_value.number_integer = first.m_object->m_value.number_integer;
13958|       |                break;
13959|       |            }
13960|       |
13961|       |            case value_t::number_unsigned:
13962|       |            {
13963|       |                m_value.number_unsigned = first.m_object->m_value.number_unsigned;
13964|       |                break;
13965|       |            }
13966|       |
13967|       |            case value_t::number_float:
13968|       |            {
13969|       |                m_value.number_float = first.m_object->m_value.number_float;
13970|       |                break;
13971|       |            }
13972|       |
13973|       |            case value_t::boolean:
13974|       |            {
13975|       |                m_value.boolean = first.m_object->m_value.boolean;
13976|       |                break;
13977|       |            }
13978|       |
13979|       |            case value_t::string:
13980|       |            {
13981|       |                m_value = *first.m_object->m_value.string;
13982|       |                break;
13983|       |            }
13984|       |
13985|       |            case value_t::object:
13986|       |            {
13987|       |                m_value.object = create<object_t>(first.m_it.object_iterator,
13988|       |                                                  last.m_it.object_iterator);
13989|       |                break;
13990|       |            }
13991|       |
13992|       |            case value_t::array:
13993|       |            {
13994|       |                m_value.array = create<array_t>(first.m_it.array_iterator,
13995|       |                                                last.m_it.array_iterator);
13996|       |                break;
13997|       |            }
13998|       |
13999|       |            default:
14000|       |                JSON_THROW(invalid_iterator::create(206, "cannot construct with iterators from " +
14001|       |                                                    std::string(first.m_object->type_name())));
14002|       |        }
14003|       |
14004|       |        assert_invariant();
14005|       |    }
14006|       |
14007|       |
14008|       |    ///////////////////////////////////////
14009|       |    // other constructors and destructor //
14010|       |    ///////////////////////////////////////
14011|       |
14012|       |    /// @private
14013|       |    basic_json(const detail::json_ref<basic_json>& ref)
14014|       |        : basic_json(ref.moved_or_copied())
14015|       |    {}
14016|       |
14017|       |    /*!
14018|       |    @brief copy constructor
14019|       |
14020|       |    Creates a copy of a given JSON value.
14021|       |
14022|       |    @param[in] other  the JSON value to copy
14023|       |
14024|       |    @post `*this == other`
14025|       |
14026|       |    @complexity Linear in the size of @a other.
14027|       |
14028|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
14029|       |    changes to any JSON value.
14030|       |
14031|       |    @requirement This function helps `basic_json` satisfying the
14032|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
14033|       |    requirements:
14034|       |    - The complexity is linear.
14035|       |    - As postcondition, it holds: `other == basic_json(other)`.
14036|       |
14037|       |    @liveexample{The following code shows an example for the copy
14038|       |    constructor.,basic_json__basic_json}
14039|       |
14040|       |    @since version 1.0.0
14041|       |    */
14042|       |    basic_json(const basic_json& other)
14043|       |        : m_type(other.m_type)
14044|  48.3k|    {
14045|  48.3k|        // check of passed value is valid
14046|  48.3k|        other.assert_invariant();
14047|  48.3k|
14048|  48.3k|        switch (m_type)
14049|  48.3k|        {
14050|  48.3k|            case value_t::object:
14051|  6.34k|            {
14052|  6.34k|                m_value = *other.m_value.object;
14053|  6.34k|                break;
14054|  48.3k|            }
14055|  48.3k|
14056|  48.3k|            case value_t::array:
14057|     24|            {
14058|     24|                m_value = *other.m_value.array;
14059|     24|                break;
14060|  48.3k|            }
14061|  48.3k|
14062|  48.3k|            case value_t::string:
14063|  35.2k|            {
14064|  35.2k|                m_value = *other.m_value.string;
14065|  35.2k|                break;
14066|  48.3k|            }
14067|  48.3k|
14068|  48.3k|            case value_t::boolean:
14069|     12|            {
14070|     12|                m_value = other.m_value.boolean;
14071|     12|                break;
14072|  48.3k|            }
14073|  48.3k|
14074|  48.3k|            case value_t::number_integer:
14075|    421|            {
14076|    421|                m_value = other.m_value.number_integer;
14077|    421|                break;
14078|  48.3k|            }
14079|  48.3k|
14080|  48.3k|            case value_t::number_unsigned:
14081|  3.69k|            {
14082|  3.69k|                m_value = other.m_value.number_unsigned;
14083|  3.69k|                break;
14084|  48.3k|            }
14085|  48.3k|
14086|  48.3k|            case value_t::number_float:
14087|  2.62k|            {
14088|  2.62k|                m_value = other.m_value.number_float;
14089|  2.62k|                break;
14090|  48.3k|            }
14091|  48.3k|
14092|  48.3k|            default:
14093|      8|                break;
14094|  48.3k|        }
14095|  48.3k|
14096|  48.3k|        assert_invariant();
14097|  48.3k|    }
14098|       |
14099|       |    /*!
14100|       |    @brief move constructor
14101|       |
14102|       |    Move constructor. Constructs a JSON value with the contents of the given
14103|       |    value @a other using move semantics. It "steals" the resources from @a
14104|       |    other and leaves it as JSON null value.
14105|       |
14106|       |    @param[in,out] other  value to move to this object
14107|       |
14108|       |    @post `*this` has the same value as @a other before the call.
14109|       |    @post @a other is a JSON null value.
14110|       |
14111|       |    @complexity Constant.
14112|       |
14113|       |    @exceptionsafety No-throw guarantee: this constructor never throws
14114|       |    exceptions.
14115|       |
14116|       |    @requirement This function helps `basic_json` satisfying the
14117|       |    [MoveConstructible](https://en.cppreference.com/w/cpp/named_req/MoveConstructible)
14118|       |    requirements.
14119|       |
14120|       |    @liveexample{The code below shows the move constructor explicitly called
14121|       |    via std::move.,basic_json__moveconstructor}
14122|       |
14123|       |    @since version 1.0.0
14124|       |    */
14125|       |    basic_json(basic_json&& other) noexcept
14126|       |        : m_type(std::move(other.m_type)),
14127|       |          m_value(std::move(other.m_value))
14128|  12.7k|    {
14129|  12.7k|        // check that passed value is valid
14130|  12.7k|        other.assert_invariant();
14131|  12.7k|
14132|  12.7k|        // invalidate payload
14133|  12.7k|        other.m_type = value_t::null;
14134|  12.7k|        other.m_value = {};
14135|  12.7k|
14136|  12.7k|        assert_invariant();
14137|  12.7k|    }
14138|       |
14139|       |    /*!
14140|       |    @brief copy assignment
14141|       |
14142|       |    Copy assignment operator. Copies a JSON value via the "copy and swap"
14143|       |    strategy: It is expressed in terms of the copy constructor, destructor,
14144|       |    and the `swap()` member function.
14145|       |
14146|       |    @param[in] other  value to copy from
14147|       |
14148|       |    @complexity Linear.
14149|       |
14150|       |    @requirement This function helps `basic_json` satisfying the
14151|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
14152|       |    requirements:
14153|       |    - The complexity is linear.
14154|       |
14155|       |    @liveexample{The code below shows and example for the copy assignment. It
14156|       |    creates a copy of value `a` which is then swapped with `b`. Finally\, the
14157|       |    copy of `a` (which is the null value after the swap) is
14158|       |    destroyed.,basic_json__copyassignment}
14159|       |
14160|       |    @since version 1.0.0
14161|       |    */
14162|       |    basic_json& operator=(basic_json other) noexcept (
14163|       |        std::is_nothrow_move_constructible<value_t>::value and
14164|       |        std::is_nothrow_move_assignable<value_t>::value and
14165|       |        std::is_nothrow_move_constructible<json_value>::value and
14166|       |        std::is_nothrow_move_assignable<json_value>::value
14167|       |    )
14168|   260k|    {
14169|   260k|        // check that passed value is valid
14170|   260k|        other.assert_invariant();
14171|   260k|
14172|   260k|        using std::swap;
14173|   260k|        swap(m_type, other.m_type);
14174|   260k|        swap(m_value, other.m_value);
14175|   260k|
14176|   260k|        assert_invariant();
14177|   260k|        return *this;
14178|   260k|    }
14179|       |
14180|       |    /*!
14181|       |    @brief destructor
14182|       |
14183|       |    Destroys the JSON value and frees all allocated memory.
14184|       |
14185|       |    @complexity Linear.
14186|       |
14187|       |    @requirement This function helps `basic_json` satisfying the
14188|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
14189|       |    requirements:
14190|       |    - The complexity is linear.
14191|       |    - All stored elements are destroyed and all memory is freed.
14192|       |
14193|       |    @since version 1.0.0
14194|       |    */
14195|       |    ~basic_json() noexcept
14196|   591k|    {
14197|   591k|        assert_invariant();
14198|   591k|        m_value.destroy(m_type);
14199|   591k|    }
14200|       |
14201|       |    /// @}
14202|       |
14203|       |  public:
14204|       |    ///////////////////////
14205|       |    // object inspection //
14206|       |    ///////////////////////
14207|       |
14208|       |    /// @name object inspection
14209|       |    /// Functions to inspect the type of a JSON value.
14210|       |    /// @{
14211|       |
14212|       |    /*!
14213|       |    @brief serialization
14214|       |
14215|       |    Serialization function for JSON values. The function tries to mimic
14216|       |    Python's `json.dumps()` function, and currently supports its @a indent
14217|       |    and @a ensure_ascii parameters.
14218|       |
14219|       |    @param[in] indent If indent is nonnegative, then array elements and object
14220|       |    members will be pretty-printed with that indent level. An indent level of
14221|       |    `0` will only insert newlines. `-1` (the default) selects the most compact
14222|       |    representation.
14223|       |    @param[in] indent_char The character to use for indentation if @a indent is
14224|       |    greater than `0`. The default is ` ` (space).
14225|       |    @param[in] ensure_ascii If @a ensure_ascii is true, all non-ASCII characters
14226|       |    in the output are escaped with `\uXXXX` sequences, and the result consists
14227|       |    of ASCII characters only.
14228|       |    @param[in] error_handler  how to react on decoding errors; there are three
14229|       |    possible values: `strict` (throws and exception in case a decoding error
14230|       |    occurs; default), `replace` (replace invalid UTF-8 sequences with U+FFFD),
14231|       |    and `ignore` (ignore invalid UTF-8 sequences during serialization).
14232|       |
14233|       |    @return string containing the serialization of the JSON value
14234|       |
14235|       |    @throw type_error.316 if a string stored inside the JSON value is not
14236|       |                          UTF-8 encoded
14237|       |
14238|       |    @complexity Linear.
14239|       |
14240|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
14241|       |    changes in the JSON value.
14242|       |
14243|       |    @liveexample{The following example shows the effect of different @a indent\,
14244|       |    @a indent_char\, and @a ensure_ascii parameters to the result of the
14245|       |    serialization.,dump}
14246|       |
14247|       |    @see https://docs.python.org/2/library/json.html#json.dump
14248|       |
14249|       |    @since version 1.0.0; indentation character @a indent_char, option
14250|       |           @a ensure_ascii and exceptions added in version 3.0.0; error
14251|       |           handlers added in version 3.4.0.
14252|       |    */
14253|       |    string_t dump(const int indent = -1,
14254|       |                  const char indent_char = ' ',
14255|       |                  const bool ensure_ascii = false,
14256|       |                  const error_handler_t error_handler = error_handler_t::strict) const
14257|     19|    {
14258|     19|        string_t result;
14259|     19|        serializer s(detail::output_adapter<char, string_t>(result), indent_char, error_handler);
14260|     19|
14261|     19|        if (indent >= 0)
14262|     17|        {
14263|     17|            s.dump(*this, true, ensure_ascii, static_cast<unsigned int>(indent));
14264|     17|        }
14265|      2|        else
14266|      2|        {
14267|      2|            s.dump(*this, false, ensure_ascii, 0);
14268|      2|        }
14269|     19|
14270|     19|        return result;
14271|     19|    }
14272|       |
14273|       |    /*!
14274|       |    @brief return the type of the JSON value (explicit)
14275|       |
14276|       |    Return the type of the JSON value as a value from the @ref value_t
14277|       |    enumeration.
14278|       |
14279|       |    @return the type of the JSON value
14280|       |            Value type                | return value
14281|       |            ------------------------- | -------------------------
14282|       |            null                      | value_t::null
14283|       |            boolean                   | value_t::boolean
14284|       |            string                    | value_t::string
14285|       |            number (integer)          | value_t::number_integer
14286|       |            number (unsigned integer) | value_t::number_unsigned
14287|       |            number (floating-point)   | value_t::number_float
14288|       |            object                    | value_t::object
14289|       |            array                     | value_t::array
14290|       |            discarded                 | value_t::discarded
14291|       |
14292|       |    @complexity Constant.
14293|       |
14294|       |    @exceptionsafety No-throw guarantee: this member function never throws
14295|       |    exceptions.
14296|       |
14297|       |    @liveexample{The following code exemplifies `type()` for all JSON
14298|       |    types.,type}
14299|       |
14300|       |    @sa @ref operator value_t() -- return the type of the JSON value (implicit)
14301|       |    @sa @ref type_name() -- return the type as string
14302|       |
14303|       |    @since version 1.0.0
14304|       |    */
14305|       |    constexpr value_t type() const noexcept
14306|     40|    {
14307|     40|        return m_type;
14308|     40|    }
14309|       |
14310|       |    /*!
14311|       |    @brief return whether type is primitive
14312|       |
14313|       |    This function returns true if and only if the JSON type is primitive
14314|       |    (string, number, boolean, or null).
14315|       |
14316|       |    @return `true` if type is primitive (string, number, boolean, or null),
14317|       |    `false` otherwise.
14318|       |
14319|       |    @complexity Constant.
14320|       |
14321|       |    @exceptionsafety No-throw guarantee: this member function never throws
14322|       |    exceptions.
14323|       |
14324|       |    @liveexample{The following code exemplifies `is_primitive()` for all JSON
14325|       |    types.,is_primitive}
14326|       |
14327|       |    @sa @ref is_structured() -- returns whether JSON value is structured
14328|       |    @sa @ref is_null() -- returns whether JSON value is `null`
14329|       |    @sa @ref is_string() -- returns whether JSON value is a string
14330|       |    @sa @ref is_boolean() -- returns whether JSON value is a boolean
14331|       |    @sa @ref is_number() -- returns whether JSON value is a number
14332|       |
14333|       |    @since version 1.0.0
14334|       |    */
14335|       |    constexpr bool is_primitive() const noexcept
14336|       |    {
14337|       |        return is_null() or is_string() or is_boolean() or is_number();
14338|       |    }
14339|       |
14340|       |    /*!
14341|       |    @brief return whether type is structured
14342|       |
14343|       |    This function returns true if and only if the JSON type is structured
14344|       |    (array or object).
14345|       |
14346|       |    @return `true` if type is structured (array or object), `false` otherwise.
14347|       |
14348|       |    @complexity Constant.
14349|       |
14350|       |    @exceptionsafety No-throw guarantee: this member function never throws
14351|       |    exceptions.
14352|       |
14353|       |    @liveexample{The following code exemplifies `is_structured()` for all JSON
14354|       |    types.,is_structured}
14355|       |
14356|       |    @sa @ref is_primitive() -- returns whether value is primitive
14357|       |    @sa @ref is_array() -- returns whether value is an array
14358|       |    @sa @ref is_object() -- returns whether value is an object
14359|       |
14360|       |    @since version 1.0.0
14361|       |    */
14362|       |    constexpr bool is_structured() const noexcept
14363|       |    {
14364|       |        return is_array() or is_object();
14365|       |    }
14366|       |
14367|       |    /*!
14368|       |    @brief return whether value is null
14369|       |
14370|       |    This function returns true if and only if the JSON value is null.
14371|       |
14372|       |    @return `true` if type is null, `false` otherwise.
14373|       |
14374|       |    @complexity Constant.
14375|       |
14376|       |    @exceptionsafety No-throw guarantee: this member function never throws
14377|       |    exceptions.
14378|       |
14379|       |    @liveexample{The following code exemplifies `is_null()` for all JSON
14380|       |    types.,is_null}
14381|       |
14382|       |    @since version 1.0.0
14383|       |    */
14384|       |    constexpr bool is_null() const noexcept
14385|  1.90k|    {
14386|  1.90k|        return (m_type == value_t::null);
14387|  1.90k|    }
14388|       |
14389|       |    /*!
14390|       |    @brief return whether value is a boolean
14391|       |
14392|       |    This function returns true if and only if the JSON value is a boolean.
14393|       |
14394|       |    @return `true` if type is boolean, `false` otherwise.
14395|       |
14396|       |    @complexity Constant.
14397|       |
14398|       |    @exceptionsafety No-throw guarantee: this member function never throws
14399|       |    exceptions.
14400|       |
14401|       |    @liveexample{The following code exemplifies `is_boolean()` for all JSON
14402|       |    types.,is_boolean}
14403|       |
14404|       |    @since version 1.0.0
14405|       |    */
14406|       |    constexpr bool is_boolean() const noexcept
14407|      4|    {
14408|      4|        return (m_type == value_t::boolean);
14409|      4|    }
14410|       |
14411|       |    /*!
14412|       |    @brief return whether value is a number
14413|       |
14414|       |    This function returns true if and only if the JSON value is a number. This
14415|       |    includes both integer (signed and unsigned) and floating-point values.
14416|       |
14417|       |    @return `true` if type is number (regardless whether integer, unsigned
14418|       |    integer or floating-type), `false` otherwise.
14419|       |
14420|       |    @complexity Constant.
14421|       |
14422|       |    @exceptionsafety No-throw guarantee: this member function never throws
14423|       |    exceptions.
14424|       |
14425|       |    @liveexample{The following code exemplifies `is_number()` for all JSON
14426|       |    types.,is_number}
14427|       |
14428|       |    @sa @ref is_number_integer() -- check if value is an integer or unsigned
14429|       |    integer number
14430|       |    @sa @ref is_number_unsigned() -- check if value is an unsigned integer
14431|       |    number
14432|       |    @sa @ref is_number_float() -- check if value is a floating-point number
14433|       |
14434|       |    @since version 1.0.0
14435|       |    */
14436|       |    constexpr bool is_number() const noexcept
14437|       |    {
14438|       |        return is_number_integer() or is_number_float();
14439|       |    }
14440|       |
14441|       |    /*!
14442|       |    @brief return whether value is an integer number
14443|       |
14444|       |    This function returns true if and only if the JSON value is a signed or
14445|       |    unsigned integer number. This excludes floating-point values.
14446|       |
14447|       |    @return `true` if type is an integer or unsigned integer number, `false`
14448|       |    otherwise.
14449|       |
14450|       |    @complexity Constant.
14451|       |
14452|       |    @exceptionsafety No-throw guarantee: this member function never throws
14453|       |    exceptions.
14454|       |
14455|       |    @liveexample{The following code exemplifies `is_number_integer()` for all
14456|       |    JSON types.,is_number_integer}
14457|       |
14458|       |    @sa @ref is_number() -- check if value is a number
14459|       |    @sa @ref is_number_unsigned() -- check if value is an unsigned integer
14460|       |    number
14461|       |    @sa @ref is_number_float() -- check if value is a floating-point number
14462|       |
14463|       |    @since version 1.0.0
14464|       |    */
14465|       |    constexpr bool is_number_integer() const noexcept
14466|      0|    {
14467|      0|        return (m_type == value_t::number_integer or m_type == value_t::number_unsigned);
14468|      0|    }
14469|       |
14470|       |    /*!
14471|       |    @brief return whether value is an unsigned integer number
14472|       |
14473|       |    This function returns true if and only if the JSON value is an unsigned
14474|       |    integer number. This excludes floating-point and signed integer values.
14475|       |
14476|       |    @return `true` if type is an unsigned integer number, `false` otherwise.
14477|       |
14478|       |    @complexity Constant.
14479|       |
14480|       |    @exceptionsafety No-throw guarantee: this member function never throws
14481|       |    exceptions.
14482|       |
14483|       |    @liveexample{The following code exemplifies `is_number_unsigned()` for all
14484|       |    JSON types.,is_number_unsigned}
14485|       |
14486|       |    @sa @ref is_number() -- check if value is a number
14487|       |    @sa @ref is_number_integer() -- check if value is an integer or unsigned
14488|       |    integer number
14489|       |    @sa @ref is_number_float() -- check if value is a floating-point number
14490|       |
14491|       |    @since version 2.0.0
14492|       |    */
14493|       |    constexpr bool is_number_unsigned() const noexcept
14494|    155|    {
14495|    155|        return (m_type == value_t::number_unsigned);
14496|    155|    }
14497|       |
14498|       |    /*!
14499|       |    @brief return whether value is a floating-point number
14500|       |
14501|       |    This function returns true if and only if the JSON value is a
14502|       |    floating-point number. This excludes signed and unsigned integer values.
14503|       |
14504|       |    @return `true` if type is a floating-point number, `false` otherwise.
14505|       |
14506|       |    @complexity Constant.
14507|       |
14508|       |    @exceptionsafety No-throw guarantee: this member function never throws
14509|       |    exceptions.
14510|       |
14511|       |    @liveexample{The following code exemplifies `is_number_float()` for all
14512|       |    JSON types.,is_number_float}
14513|       |
14514|       |    @sa @ref is_number() -- check if value is number
14515|       |    @sa @ref is_number_integer() -- check if value is an integer number
14516|       |    @sa @ref is_number_unsigned() -- check if value is an unsigned integer
14517|       |    number
14518|       |
14519|       |    @since version 1.0.0
14520|       |    */
14521|       |    constexpr bool is_number_float() const noexcept
14522|    148|    {
14523|    148|        return (m_type == value_t::number_float);
14524|    148|    }
14525|       |
14526|       |    /*!
14527|       |    @brief return whether value is an object
14528|       |
14529|       |    This function returns true if and only if the JSON value is an object.
14530|       |
14531|       |    @return `true` if type is object, `false` otherwise.
14532|       |
14533|       |    @complexity Constant.
14534|       |
14535|       |    @exceptionsafety No-throw guarantee: this member function never throws
14536|       |    exceptions.
14537|       |
14538|       |    @liveexample{The following code exemplifies `is_object()` for all JSON
14539|       |    types.,is_object}
14540|       |
14541|       |    @since version 1.0.0
14542|       |    */
14543|       |    constexpr bool is_object() const noexcept
14544|   273k|    {
14545|   273k|        return (m_type == value_t::object);
14546|   273k|    }
14547|       |
14548|       |    /*!
14549|       |    @brief return whether value is an array
14550|       |
14551|       |    This function returns true if and only if the JSON value is an array.
14552|       |
14553|       |    @return `true` if type is array, `false` otherwise.
14554|       |
14555|       |    @complexity Constant.
14556|       |
14557|       |    @exceptionsafety No-throw guarantee: this member function never throws
14558|       |    exceptions.
14559|       |
14560|       |    @liveexample{The following code exemplifies `is_array()` for all JSON
14561|       |    types.,is_array}
14562|       |
14563|       |    @since version 1.0.0
14564|       |    */
14565|       |    constexpr bool is_array() const noexcept
14566|   534k|    {
14567|   534k|        return (m_type == value_t::array);
14568|   534k|    }
14569|       |
14570|       |    /*!
14571|       |    @brief return whether value is a string
14572|       |
14573|       |    This function returns true if and only if the JSON value is a string.
14574|       |
14575|       |    @return `true` if type is string, `false` otherwise.
14576|       |
14577|       |    @complexity Constant.
14578|       |
14579|       |    @exceptionsafety No-throw guarantee: this member function never throws
14580|       |    exceptions.
14581|       |
14582|       |    @liveexample{The following code exemplifies `is_string()` for all JSON
14583|       |    types.,is_string}
14584|       |
14585|       |    @since version 1.0.0
14586|       |    */
14587|       |    constexpr bool is_string() const noexcept
14588|  25.5k|    {
14589|  25.5k|        return (m_type == value_t::string);
14590|  25.5k|    }
14591|       |
14592|       |    /*!
14593|       |    @brief return whether value is discarded
14594|       |
14595|       |    This function returns true if and only if the JSON value was discarded
14596|       |    during parsing with a callback function (see @ref parser_callback_t).
14597|       |
14598|       |    @note This function will always be `false` for JSON values after parsing.
14599|       |    That is, discarded values can only occur during parsing, but will be
14600|       |    removed when inside a structured value or replaced by null in other cases.
14601|       |
14602|       |    @return `true` if type is discarded, `false` otherwise.
14603|       |
14604|       |    @complexity Constant.
14605|       |
14606|       |    @exceptionsafety No-throw guarantee: this member function never throws
14607|       |    exceptions.
14608|       |
14609|       |    @liveexample{The following code exemplifies `is_discarded()` for all JSON
14610|       |    types.,is_discarded}
14611|       |
14612|       |    @since version 1.0.0
14613|       |    */
14614|       |    constexpr bool is_discarded() const noexcept
14615|      0|    {
14616|      0|        return (m_type == value_t::discarded);
14617|      0|    }
14618|       |
14619|       |    /*!
14620|       |    @brief return the type of the JSON value (implicit)
14621|       |
14622|       |    Implicitly return the type of the JSON value as a value from the @ref
14623|       |    value_t enumeration.
14624|       |
14625|       |    @return the type of the JSON value
14626|       |
14627|       |    @complexity Constant.
14628|       |
14629|       |    @exceptionsafety No-throw guarantee: this member function never throws
14630|       |    exceptions.
14631|       |
14632|       |    @liveexample{The following code exemplifies the @ref value_t operator for
14633|       |    all JSON types.,operator__value_t}
14634|       |
14635|       |    @sa @ref type() -- return the type of the JSON value (explicit)
14636|       |    @sa @ref type_name() -- return the type as string
14637|       |
14638|       |    @since version 1.0.0
14639|       |    */
14640|       |    constexpr operator value_t() const noexcept
14641|    303|    {
14642|    303|        return m_type;
14643|    303|    }
14644|       |
14645|       |    /// @}
14646|       |
14647|       |  private:
14648|       |    //////////////////
14649|       |    // value access //
14650|       |    //////////////////
14651|       |
14652|       |    /// get a boolean (explicit)
14653|       |    boolean_t get_impl(boolean_t* /*unused*/) const
14654|       |    {
14655|       |        if (JSON_LIKELY(is_boolean()))
14656|       |        {
14657|       |            return m_value.boolean;
14658|       |        }
14659|       |
14660|       |        JSON_THROW(type_error::create(302, "type must be boolean, but is " + std::string(type_name())));
14661|       |    }
14662|       |
14663|       |    /// get a pointer to the value (object)
14664|       |    object_t* get_impl_ptr(object_t* /*unused*/) noexcept
14665|       |    {
14666|       |        return is_object() ? m_value.object : nullptr;
14667|       |    }
14668|       |
14669|       |    /// get a pointer to the value (object)
14670|       |    constexpr const object_t* get_impl_ptr(const object_t* /*unused*/) const noexcept
14671|       |    {
14672|       |        return is_object() ? m_value.object : nullptr;
14673|       |    }
14674|       |
14675|       |    /// get a pointer to the value (array)
14676|       |    array_t* get_impl_ptr(array_t* /*unused*/) noexcept
14677|       |    {
14678|       |        return is_array() ? m_value.array : nullptr;
14679|       |    }
14680|       |
14681|       |    /// get a pointer to the value (array)
14682|       |    constexpr const array_t* get_impl_ptr(const array_t* /*unused*/) const noexcept
14683|       |    {
14684|       |        return is_array() ? m_value.array : nullptr;
14685|       |    }
14686|       |
14687|       |    /// get a pointer to the value (string)
14688|       |    string_t* get_impl_ptr(string_t* /*unused*/) noexcept
14689|       |    {
14690|       |        return is_string() ? m_value.string : nullptr;
14691|       |    }
14692|       |
14693|       |    /// get a pointer to the value (string)
14694|       |    constexpr const string_t* get_impl_ptr(const string_t* /*unused*/) const noexcept
14695|  12.7k|    {
14696|  12.7k|        return is_string() ? m_value.string : nullptr;
14697|  12.7k|    }
14698|       |
14699|       |    /// get a pointer to the value (boolean)
14700|       |    boolean_t* get_impl_ptr(boolean_t* /*unused*/) noexcept
14701|       |    {
14702|       |        return is_boolean() ? &m_value.boolean : nullptr;
14703|       |    }
14704|       |
14705|       |    /// get a pointer to the value (boolean)
14706|       |    constexpr const boolean_t* get_impl_ptr(const boolean_t* /*unused*/) const noexcept
14707|      2|    {
14708|      2|        return is_boolean() ? &m_value.boolean : nullptr;
14709|      2|    }
14710|       |
14711|       |    /// get a pointer to the value (integer number)
14712|       |    number_integer_t* get_impl_ptr(number_integer_t* /*unused*/) noexcept
14713|       |    {
14714|       |        return is_number_integer() ? &m_value.number_integer : nullptr;
14715|       |    }
14716|       |
14717|       |    /// get a pointer to the value (integer number)
14718|       |    constexpr const number_integer_t* get_impl_ptr(const number_integer_t* /*unused*/) const noexcept
14719|      0|    {
14720|      0|        return is_number_integer() ? &m_value.number_integer : nullptr;
14721|      0|    }
14722|       |
14723|       |    /// get a pointer to the value (unsigned number)
14724|       |    number_unsigned_t* get_impl_ptr(number_unsigned_t* /*unused*/) noexcept
14725|       |    {
14726|       |        return is_number_unsigned() ? &m_value.number_unsigned : nullptr;
14727|       |    }
14728|       |
14729|       |    /// get a pointer to the value (unsigned number)
14730|       |    constexpr const number_unsigned_t* get_impl_ptr(const number_unsigned_t* /*unused*/) const noexcept
14731|    155|    {
14732|    155|        return is_number_unsigned() ? &m_value.number_unsigned : nullptr;
14733|    155|    }
14734|       |
14735|       |    /// get a pointer to the value (floating-point number)
14736|       |    number_float_t* get_impl_ptr(number_float_t* /*unused*/) noexcept
14737|       |    {
14738|       |        return is_number_float() ? &m_value.number_float : nullptr;
14739|       |    }
14740|       |
14741|       |    /// get a pointer to the value (floating-point number)
14742|       |    constexpr const number_float_t* get_impl_ptr(const number_float_t* /*unused*/) const noexcept
14743|    148|    {
14744|    148|        return is_number_float() ? &m_value.number_float : nullptr;
14745|    148|    }
14746|       |
14747|       |    /*!
14748|       |    @brief helper function to implement get_ref()
14749|       |
14750|       |    This function helps to implement get_ref() without code duplication for
14751|       |    const and non-const overloads
14752|       |
14753|       |    @tparam ThisType will be deduced as `basic_json` or `const basic_json`
14754|       |
14755|       |    @throw type_error.303 if ReferenceType does not match underlying value
14756|       |    type of the current JSON
14757|       |    */
14758|       |    template<typename ReferenceType, typename ThisType>
14759|       |    static ReferenceType get_ref_impl(ThisType& obj)
14760|       |    {
14761|       |        // delegate the call to get_ptr<>()
14762|       |        auto ptr = obj.template get_ptr<typename std::add_pointer<ReferenceType>::type>();
14763|       |
14764|       |        if (JSON_LIKELY(ptr != nullptr))
14765|       |        {
14766|       |            return *ptr;
14767|       |        }
14768|       |
14769|       |        JSON_THROW(type_error::create(303, "incompatible ReferenceType for get_ref, actual type is " + std::string(obj.type_name())));
14770|       |    }
14771|       |
14772|       |  public:
14773|       |    /// @name value access
14774|       |    /// Direct access to the stored value of a JSON value.
14775|       |    /// @{
14776|       |
14777|       |    /*!
14778|       |    @brief get special-case overload
14779|       |
14780|       |    This overloads avoids a lot of template boilerplate, it can be seen as the
14781|       |    identity method
14782|       |
14783|       |    @tparam BasicJsonType == @ref basic_json
14784|       |
14785|       |    @return a copy of *this
14786|       |
14787|       |    @complexity Constant.
14788|       |
14789|       |    @since version 2.1.0
14790|       |    */
14791|       |    template<typename BasicJsonType, detail::enable_if_t<
14792|       |                 std::is_same<typename std::remove_const<BasicJsonType>::type, basic_json_t>::value,
14793|       |                 int> = 0>
14794|       |    basic_json get() const
14795|     12|    {
14796|     12|        return *this;
14797|     12|    }
14798|       |
14799|       |    /*!
14800|       |    @brief get special-case overload
14801|       |
14802|       |    This overloads converts the current @ref basic_json in a different
14803|       |    @ref basic_json type
14804|       |
14805|       |    @tparam BasicJsonType == @ref basic_json
14806|       |
14807|       |    @return a copy of *this, converted into @tparam BasicJsonType
14808|       |
14809|       |    @complexity Depending on the implementation of the called `from_json()`
14810|       |                method.
14811|       |
14812|       |    @since version 3.2.0
14813|       |    */
14814|       |    template<typename BasicJsonType, detail::enable_if_t<
14815|       |                 not std::is_same<BasicJsonType, basic_json>::value and
14816|       |                 detail::is_basic_json<BasicJsonType>::value, int> = 0>
14817|       |    BasicJsonType get() const
14818|       |    {
14819|       |        return *this;
14820|       |    }
14821|       |
14822|       |    /*!
14823|       |    @brief get a value (explicit)
14824|       |
14825|       |    Explicit type conversion between the JSON value and a compatible value
14826|       |    which is [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
14827|       |    and [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
14828|       |    The value is converted by calling the @ref json_serializer<ValueType>
14829|       |    `from_json()` method.
14830|       |
14831|       |    The function is equivalent to executing
14832|       |    @code {.cpp}
14833|       |    ValueType ret;
14834|       |    JSONSerializer<ValueType>::from_json(*this, ret);
14835|       |    return ret;
14836|       |    @endcode
14837|       |
14838|       |    This overloads is chosen if:
14839|       |    - @a ValueType is not @ref basic_json,
14840|       |    - @ref json_serializer<ValueType> has a `from_json()` method of the form
14841|       |      `void from_json(const basic_json&, ValueType&)`, and
14842|       |    - @ref json_serializer<ValueType> does not have a `from_json()` method of
14843|       |      the form `ValueType from_json(const basic_json&)`
14844|       |
14845|       |    @tparam ValueTypeCV the provided value type
14846|       |    @tparam ValueType the returned value type
14847|       |
14848|       |    @return copy of the JSON value, converted to @a ValueType
14849|       |
14850|       |    @throw what @ref json_serializer<ValueType> `from_json()` method throws
14851|       |
14852|       |    @liveexample{The example below shows several conversions from JSON values
14853|       |    to other types. There a few things to note: (1) Floating-point numbers can
14854|       |    be converted to integers\, (2) A JSON array can be converted to a standard
14855|       |    `std::vector<short>`\, (3) A JSON object can be converted to C++
14856|       |    associative containers such as `std::unordered_map<std::string\,
14857|       |    json>`.,get__ValueType_const}
14858|       |
14859|       |    @since version 2.1.0
14860|       |    */
14861|       |    template<typename ValueTypeCV, typename ValueType = detail::uncvref_t<ValueTypeCV>,
14862|       |             detail::enable_if_t <
14863|       |                 not detail::is_basic_json<ValueType>::value and
14864|       |                 detail::has_from_json<basic_json_t, ValueType>::value and
14865|       |                 not detail::has_non_default_from_json<basic_json_t, ValueType>::value,
14866|       |                 int> = 0>
14867|       |    ValueType get() const noexcept(noexcept(
14868|       |                                       JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), std::declval<ValueType&>())))
14869|  13.0k|    {
14870|  13.0k|        // we cannot static_assert on ValueTypeCV being non-const, because
14871|  13.0k|        // there is support for get<const basic_json_t>(), which is why we
14872|  13.0k|        // still need the uncvref
14873|  13.0k|        static_assert(not std::is_reference<ValueTypeCV>::value,
14874|  13.0k|                      "get() cannot be used with reference types, you might want to use get_ref()");
14875|  13.0k|        static_assert(std::is_default_constructible<ValueType>::value,
14876|  13.0k|                      "types must be DefaultConstructible when used with get()");
14877|  13.0k|
14878|  13.0k|        ValueType ret;
14879|  13.0k|        JSONSerializer<ValueType>::from_json(*this, ret);
14880|  13.0k|        return ret;
14881|  13.0k|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIbbLi0EEET0_v:
  |14869|      2|    {
  |14870|      2|        // we cannot static_assert on ValueTypeCV being non-const, because
  |14871|      2|        // there is support for get<const basic_json_t>(), which is why we
  |14872|      2|        // still need the uncvref
  |14873|      2|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |14874|      2|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |14875|      2|        static_assert(std::is_default_constructible<ValueType>::value,
  |14876|      2|                      "types must be DefaultConstructible when used with get()");
  |14877|      2|
  |14878|      2|        ValueType ret;
  |14879|      2|        JSONSerializer<ValueType>::from_json(*this, ret);
  |14880|      2|        return ret;
  |14881|      2|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIS8_S8_Li0EEET0_v:
  |14869|  12.7k|    {
  |14870|  12.7k|        // we cannot static_assert on ValueTypeCV being non-const, because
  |14871|  12.7k|        // there is support for get<const basic_json_t>(), which is why we
  |14872|  12.7k|        // still need the uncvref
  |14873|  12.7k|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |14874|  12.7k|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |14875|  12.7k|        static_assert(std::is_default_constructible<ValueType>::value,
  |14876|  12.7k|                      "types must be DefaultConstructible when used with get()");
  |14877|  12.7k|
  |14878|  12.7k|        ValueType ret;
  |14879|  12.7k|        JSONSerializer<ValueType>::from_json(*this, ret);
  |14880|  12.7k|        return ret;
  |14881|  12.7k|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIiiLi0EEET0_v:
  |14869|    155|    {
  |14870|    155|        // we cannot static_assert on ValueTypeCV being non-const, because
  |14871|    155|        // there is support for get<const basic_json_t>(), which is why we
  |14872|    155|        // still need the uncvref
  |14873|    155|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |14874|    155|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |14875|    155|        static_assert(std::is_default_constructible<ValueType>::value,
  |14876|    155|                      "types must be DefaultConstructible when used with get()");
  |14877|    155|
  |14878|    155|        ValueType ret;
  |14879|    155|        JSONSerializer<ValueType>::from_json(*this, ret);
  |14880|    155|        return ret;
  |14881|    155|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIddLi0EEET0_v:
  |14869|    148|    {
  |14870|    148|        // we cannot static_assert on ValueTypeCV being non-const, because
  |14871|    148|        // there is support for get<const basic_json_t>(), which is why we
  |14872|    148|        // still need the uncvref
  |14873|    148|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |14874|    148|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |14875|    148|        static_assert(std::is_default_constructible<ValueType>::value,
  |14876|    148|                      "types must be DefaultConstructible when used with get()");
  |14877|    148|
  |14878|    148|        ValueType ret;
  |14879|    148|        JSONSerializer<ValueType>::from_json(*this, ret);
  |14880|    148|        return ret;
  |14881|    148|    }
  ------------------
14882|       |
14883|       |    /*!
14884|       |    @brief get a value (explicit); special case
14885|       |
14886|       |    Explicit type conversion between the JSON value and a compatible value
14887|       |    which is **not** [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
14888|       |    and **not** [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
14889|       |    The value is converted by calling the @ref json_serializer<ValueType>
14890|       |    `from_json()` method.
14891|       |
14892|       |    The function is equivalent to executing
14893|       |    @code {.cpp}
14894|       |    return JSONSerializer<ValueTypeCV>::from_json(*this);
14895|       |    @endcode
14896|       |
14897|       |    This overloads is chosen if:
14898|       |    - @a ValueType is not @ref basic_json and
14899|       |    - @ref json_serializer<ValueType> has a `from_json()` method of the form
14900|       |      `ValueType from_json(const basic_json&)`
14901|       |
14902|       |    @note If @ref json_serializer<ValueType> has both overloads of
14903|       |    `from_json()`, this one is chosen.
14904|       |
14905|       |    @tparam ValueTypeCV the provided value type
14906|       |    @tparam ValueType the returned value type
14907|       |
14908|       |    @return copy of the JSON value, converted to @a ValueType
14909|       |
14910|       |    @throw what @ref json_serializer<ValueType> `from_json()` method throws
14911|       |
14912|       |    @since version 2.1.0
14913|       |    */
14914|       |    template<typename ValueTypeCV, typename ValueType = detail::uncvref_t<ValueTypeCV>,
14915|       |             detail::enable_if_t<not std::is_same<basic_json_t, ValueType>::value and
14916|       |                                 detail::has_non_default_from_json<basic_json_t, ValueType>::value,
14917|       |                                 int> = 0>
14918|       |    ValueType get() const noexcept(noexcept(
14919|       |                                       JSONSerializer<ValueTypeCV>::from_json(std::declval<const basic_json_t&>())))
14920|       |    {
14921|       |        static_assert(not std::is_reference<ValueTypeCV>::value,
14922|       |                      "get() cannot be used with reference types, you might want to use get_ref()");
14923|       |        return JSONSerializer<ValueTypeCV>::from_json(*this);
14924|       |    }
14925|       |
14926|       |    /*!
14927|       |    @brief get a value (explicit)
14928|       |
14929|       |    Explicit type conversion between the JSON value and a compatible value.
14930|       |    The value is filled into the input parameter by calling the @ref json_serializer<ValueType>
14931|       |    `from_json()` method.
14932|       |
14933|       |    The function is equivalent to executing
14934|       |    @code {.cpp}
14935|       |    ValueType v;
14936|       |    JSONSerializer<ValueType>::from_json(*this, v);
14937|       |    @endcode
14938|       |
14939|       |    This overloads is chosen if:
14940|       |    - @a ValueType is not @ref basic_json,
14941|       |    - @ref json_serializer<ValueType> has a `from_json()` method of the form
14942|       |      `void from_json(const basic_json&, ValueType&)`, and
14943|       |
14944|       |    @tparam ValueType the input parameter type.
14945|       |
14946|       |    @return the input parameter, allowing chaining calls.
14947|       |
14948|       |    @throw what @ref json_serializer<ValueType> `from_json()` method throws
14949|       |
14950|       |    @liveexample{The example below shows several conversions from JSON values
14951|       |    to other types. There a few things to note: (1) Floating-point numbers can
14952|       |    be converted to integers\, (2) A JSON array can be converted to a standard
14953|       |    `std::vector<short>`\, (3) A JSON object can be converted to C++
14954|       |    associative containers such as `std::unordered_map<std::string\,
14955|       |    json>`.,get_to}
14956|       |
14957|       |    @since version 3.3.0
14958|       |    */
14959|       |    template<typename ValueType,
14960|       |             detail::enable_if_t <
14961|       |                 not detail::is_basic_json<ValueType>::value and
14962|       |                 detail::has_from_json<basic_json_t, ValueType>::value,
14963|       |                 int> = 0>
14964|       |    ValueType & get_to(ValueType& v) const noexcept(noexcept(
14965|       |                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), v)))
14966|       |    {
14967|       |        JSONSerializer<ValueType>::from_json(*this, v);
14968|       |        return v;
14969|       |    }
14970|       |
14971|       |
14972|       |    /*!
14973|       |    @brief get a pointer value (implicit)
14974|       |
14975|       |    Implicit pointer access to the internally stored JSON value. No copies are
14976|       |    made.
14977|       |
14978|       |    @warning Writing data to the pointee of the result yields an undefined
14979|       |    state.
14980|       |
14981|       |    @tparam PointerType pointer type; must be a pointer to @ref array_t, @ref
14982|       |    object_t, @ref string_t, @ref boolean_t, @ref number_integer_t,
14983|       |    @ref number_unsigned_t, or @ref number_float_t. Enforced by a static
14984|       |    assertion.
14985|       |
14986|       |    @return pointer to the internally stored JSON value if the requested
14987|       |    pointer type @a PointerType fits to the JSON value; `nullptr` otherwise
14988|       |
14989|       |    @complexity Constant.
14990|       |
14991|       |    @liveexample{The example below shows how pointers to internal values of a
14992|       |    JSON value can be requested. Note that no type conversions are made and a
14993|       |    `nullptr` is returned if the value and the requested pointer type does not
14994|       |    match.,get_ptr}
14995|       |
14996|       |    @since version 1.0.0
14997|       |    */
14998|       |    template<typename PointerType, typename std::enable_if<
14999|       |                 std::is_pointer<PointerType>::value, int>::type = 0>
15000|       |    auto get_ptr() noexcept -> decltype(std::declval<basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))
15001|       |    {
15002|       |        // delegate the call to get_impl_ptr<>()
15003|       |        return get_impl_ptr(static_cast<PointerType>(nullptr));
15004|       |    }
15005|       |
15006|       |    /*!
15007|       |    @brief get a pointer value (implicit)
15008|       |    @copydoc get_ptr()
15009|       |    */
15010|       |    template<typename PointerType, typename std::enable_if<
15011|       |                 std::is_pointer<PointerType>::value and
15012|       |                 std::is_const<typename std::remove_pointer<PointerType>::type>::value, int>::type = 0>
15013|       |    constexpr auto get_ptr() const noexcept -> decltype(std::declval<const basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))
15014|  13.0k|    {
15015|  13.0k|        // delegate the call to get_impl_ptr<>() const
15016|  13.0k|        return get_impl_ptr(static_cast<PointerType>(nullptr));
15017|  13.0k|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE7get_ptrIPKbLi0EEEDTcldtclL_ZSt7declvalIRKSA_ENSt20add_rvalue_referenceIT_E4typeEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv:
  |15014|      2|    {
  |15015|      2|        // delegate the call to get_impl_ptr<>() const
  |15016|      2|        return get_impl_ptr(static_cast<PointerType>(nullptr));
  |15017|      2|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE7get_ptrIPKS8_Li0EEEDTcldtclL_ZSt7declvalIRKSA_ENSt20add_rvalue_referenceIT_E4typeEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv:
  |15014|  12.7k|    {
  |15015|  12.7k|        // delegate the call to get_impl_ptr<>() const
  |15016|  12.7k|        return get_impl_ptr(static_cast<PointerType>(nullptr));
  |15017|  12.7k|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE7get_ptrIPKmLi0EEEDTcldtclL_ZSt7declvalIRKSA_ENSt20add_rvalue_referenceIT_E4typeEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv:
  |15014|    155|    {
  |15015|    155|        // delegate the call to get_impl_ptr<>() const
  |15016|    155|        return get_impl_ptr(static_cast<PointerType>(nullptr));
  |15017|    155|    }
  ------------------
  | Unexecuted instantiation: _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE7get_ptrIPKlLi0EEEDTcldtclL_ZSt7declvalIRKSA_ENSt20add_rvalue_referenceIT_E4typeEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE7get_ptrIPKdLi0EEEDTcldtclL_ZSt7declvalIRKSA_ENSt20add_rvalue_referenceIT_E4typeEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv:
  |15014|    148|    {
  |15015|    148|        // delegate the call to get_impl_ptr<>() const
  |15016|    148|        return get_impl_ptr(static_cast<PointerType>(nullptr));
  |15017|    148|    }
  ------------------
15018|       |
15019|       |    /*!
15020|       |    @brief get a pointer value (explicit)
15021|       |
15022|       |    Explicit pointer access to the internally stored JSON value. No copies are
15023|       |    made.
15024|       |
15025|       |    @warning The pointer becomes invalid if the underlying JSON object
15026|       |    changes.
15027|       |
15028|       |    @tparam PointerType pointer type; must be a pointer to @ref array_t, @ref
15029|       |    object_t, @ref string_t, @ref boolean_t, @ref number_integer_t,
15030|       |    @ref number_unsigned_t, or @ref number_float_t.
15031|       |
15032|       |    @return pointer to the internally stored JSON value if the requested
15033|       |    pointer type @a PointerType fits to the JSON value; `nullptr` otherwise
15034|       |
15035|       |    @complexity Constant.
15036|       |
15037|       |    @liveexample{The example below shows how pointers to internal values of a
15038|       |    JSON value can be requested. Note that no type conversions are made and a
15039|       |    `nullptr` is returned if the value and the requested pointer type does not
15040|       |    match.,get__PointerType}
15041|       |
15042|       |    @sa @ref get_ptr() for explicit pointer-member access
15043|       |
15044|       |    @since version 1.0.0
15045|       |    */
15046|       |    template<typename PointerType, typename std::enable_if<
15047|       |                 std::is_pointer<PointerType>::value, int>::type = 0>
15048|       |    auto get() noexcept -> decltype(std::declval<basic_json_t&>().template get_ptr<PointerType>())
15049|       |    {
15050|       |        // delegate the call to get_ptr
15051|       |        return get_ptr<PointerType>();
15052|       |    }
15053|       |
15054|       |    /*!
15055|       |    @brief get a pointer value (explicit)
15056|       |    @copydoc get()
15057|       |    */
15058|       |    template<typename PointerType, typename std::enable_if<
15059|       |                 std::is_pointer<PointerType>::value, int>::type = 0>
15060|       |    constexpr auto get() const noexcept -> decltype(std::declval<const basic_json_t&>().template get_ptr<PointerType>())
15061|       |    {
15062|       |        // delegate the call to get_ptr
15063|       |        return get_ptr<PointerType>();
15064|       |    }
15065|       |
15066|       |    /*!
15067|       |    @brief get a reference value (implicit)
15068|       |
15069|       |    Implicit reference access to the internally stored JSON value. No copies
15070|       |    are made.
15071|       |
15072|       |    @warning Writing data to the referee of the result yields an undefined
15073|       |    state.
15074|       |
15075|       |    @tparam ReferenceType reference type; must be a reference to @ref array_t,
15076|       |    @ref object_t, @ref string_t, @ref boolean_t, @ref number_integer_t, or
15077|       |    @ref number_float_t. Enforced by static assertion.
15078|       |
15079|       |    @return reference to the internally stored JSON value if the requested
15080|       |    reference type @a ReferenceType fits to the JSON value; throws
15081|       |    type_error.303 otherwise
15082|       |
15083|       |    @throw type_error.303 in case passed type @a ReferenceType is incompatible
15084|       |    with the stored JSON value; see example below
15085|       |
15086|       |    @complexity Constant.
15087|       |
15088|       |    @liveexample{The example shows several calls to `get_ref()`.,get_ref}
15089|       |
15090|       |    @since version 1.1.0
15091|       |    */
15092|       |    template<typename ReferenceType, typename std::enable_if<
15093|       |                 std::is_reference<ReferenceType>::value, int>::type = 0>
15094|       |    ReferenceType get_ref()
15095|       |    {
15096|       |        // delegate call to get_ref_impl
15097|       |        return get_ref_impl<ReferenceType>(*this);
15098|       |    }
15099|       |
15100|       |    /*!
15101|       |    @brief get a reference value (implicit)
15102|       |    @copydoc get_ref()
15103|       |    */
15104|       |    template<typename ReferenceType, typename std::enable_if<
15105|       |                 std::is_reference<ReferenceType>::value and
15106|       |                 std::is_const<typename std::remove_reference<ReferenceType>::type>::value, int>::type = 0>
15107|       |    ReferenceType get_ref() const
15108|       |    {
15109|       |        // delegate call to get_ref_impl
15110|       |        return get_ref_impl<ReferenceType>(*this);
15111|       |    }
15112|       |
15113|       |    /*!
15114|       |    @brief get a value (implicit)
15115|       |
15116|       |    Implicit type conversion between the JSON value and a compatible value.
15117|       |    The call is realized by calling @ref get() const.
15118|       |
15119|       |    @tparam ValueType non-pointer type compatible to the JSON value, for
15120|       |    instance `int` for JSON integer numbers, `bool` for JSON booleans, or
15121|       |    `std::vector` types for JSON arrays. The character type of @ref string_t
15122|       |    as well as an initializer list of this type is excluded to avoid
15123|       |    ambiguities as these types implicitly convert to `std::string`.
15124|       |
15125|       |    @return copy of the JSON value, converted to type @a ValueType
15126|       |
15127|       |    @throw type_error.302 in case passed type @a ValueType is incompatible
15128|       |    to the JSON value type (e.g., the JSON value is of type boolean, but a
15129|       |    string is requested); see example below
15130|       |
15131|       |    @complexity Linear in the size of the JSON value.
15132|       |
15133|       |    @liveexample{The example below shows several conversions from JSON values
15134|       |    to other types. There a few things to note: (1) Floating-point numbers can
15135|       |    be converted to integers\, (2) A JSON array can be converted to a standard
15136|       |    `std::vector<short>`\, (3) A JSON object can be converted to C++
15137|       |    associative containers such as `std::unordered_map<std::string\,
15138|       |    json>`.,operator__ValueType}
15139|       |
15140|       |    @since version 1.0.0
15141|       |    */
15142|       |    template < typename ValueType, typename std::enable_if <
15143|       |                   not std::is_pointer<ValueType>::value and
15144|       |                   not std::is_same<ValueType, detail::json_ref<basic_json>>::value and
15145|       |                   not std::is_same<ValueType, typename string_t::value_type>::value and
15146|       |                   not detail::is_basic_json<ValueType>::value
15147|       |
15148|       |#ifndef _MSC_VER  // fix for issue #167 operator<< ambiguity under VS2015
15149|       |                   and not std::is_same<ValueType, std::initializer_list<typename string_t::value_type>>::value
15150|       |#if defined(JSON_HAS_CPP_17) && defined(_MSC_VER) and _MSC_VER <= 1914
15151|       |                   and not std::is_same<ValueType, typename std::string_view>::value
15152|       |#endif
15153|       |#endif
15154|       |                   and detail::is_detected<detail::get_template_function, const basic_json_t&, ValueType>::value
15155|       |                   , int >::type = 0 >
15156|       |    operator ValueType() const
15157|       |    {
15158|       |        // delegate the call to get<>() const
15159|       |        return get<ValueType>();
15160|       |    }
15161|       |
15162|       |    /// @}
15163|       |
15164|       |
15165|       |    ////////////////////
15166|       |    // element access //
15167|       |    ////////////////////
15168|       |
15169|       |    /// @name element access
15170|       |    /// Access to the JSON value.
15171|       |    /// @{
15172|       |
15173|       |    /*!
15174|       |    @brief access specified array element with bounds checking
15175|       |
15176|       |    Returns a reference to the element at specified location @a idx, with
15177|       |    bounds checking.
15178|       |
15179|       |    @param[in] idx  index of the element to access
15180|       |
15181|       |    @return reference to the element at index @a idx
15182|       |
15183|       |    @throw type_error.304 if the JSON value is not an array; in this case,
15184|       |    calling `at` with an index makes no sense. See example below.
15185|       |    @throw out_of_range.401 if the index @a idx is out of range of the array;
15186|       |    that is, `idx >= size()`. See example below.
15187|       |
15188|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
15189|       |    changes in the JSON value.
15190|       |
15191|       |    @complexity Constant.
15192|       |
15193|       |    @since version 1.0.0
15194|       |
15195|       |    @liveexample{The example below shows how array elements can be read and
15196|       |    written using `at()`. It also demonstrates the different exceptions that
15197|       |    can be thrown.,at__size_type}
15198|       |    */
15199|       |    reference at(size_type idx)
15200|       |    {
15201|       |        // at only works for arrays
15202|       |        if (JSON_LIKELY(is_array()))
15203|       |        {
15204|       |            JSON_TRY
15205|       |            {
15206|       |                return m_value.array->at(idx);
15207|       |            }
15208|       |            JSON_CATCH (std::out_of_range&)
15209|       |            {
15210|       |                // create better exception explanation
15211|       |                JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
15212|       |            }
15213|       |        }
15214|       |        else
15215|       |        {
15216|       |            JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
15217|       |        }
15218|       |    }
15219|       |
15220|       |    /*!
15221|       |    @brief access specified array element with bounds checking
15222|       |
15223|       |    Returns a const reference to the element at specified location @a idx,
15224|       |    with bounds checking.
15225|       |
15226|       |    @param[in] idx  index of the element to access
15227|       |
15228|       |    @return const reference to the element at index @a idx
15229|       |
15230|       |    @throw type_error.304 if the JSON value is not an array; in this case,
15231|       |    calling `at` with an index makes no sense. See example below.
15232|       |    @throw out_of_range.401 if the index @a idx is out of range of the array;
15233|       |    that is, `idx >= size()`. See example below.
15234|       |
15235|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
15236|       |    changes in the JSON value.
15237|       |
15238|       |    @complexity Constant.
15239|       |
15240|       |    @since version 1.0.0
15241|       |
15242|       |    @liveexample{The example below shows how array elements can be read using
15243|       |    `at()`. It also demonstrates the different exceptions that can be thrown.,
15244|       |    at__size_type_const}
15245|       |    */
15246|       |    const_reference at(size_type idx) const
15247|       |    {
15248|       |        // at only works for arrays
15249|       |        if (JSON_LIKELY(is_array()))
15250|       |        {
15251|       |            JSON_TRY
15252|       |            {
15253|       |                return m_value.array->at(idx);
15254|       |            }
15255|       |            JSON_CATCH (std::out_of_range&)
15256|       |            {
15257|       |                // create better exception explanation
15258|       |                JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
15259|       |            }
15260|       |        }
15261|       |        else
15262|       |        {
15263|       |            JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
15264|       |        }
15265|       |    }
15266|       |
15267|       |    /*!
15268|       |    @brief access specified object element with bounds checking
15269|       |
15270|       |    Returns a reference to the element at with specified key @a key, with
15271|       |    bounds checking.
15272|       |
15273|       |    @param[in] key  key of the element to access
15274|       |
15275|       |    @return reference to the element at key @a key
15276|       |
15277|       |    @throw type_error.304 if the JSON value is not an object; in this case,
15278|       |    calling `at` with a key makes no sense. See example below.
15279|       |    @throw out_of_range.403 if the key @a key is is not stored in the object;
15280|       |    that is, `find(key) == end()`. See example below.
15281|       |
15282|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
15283|       |    changes in the JSON value.
15284|       |
15285|       |    @complexity Logarithmic in the size of the container.
15286|       |
15287|       |    @sa @ref operator[](const typename object_t::key_type&) for unchecked
15288|       |    access by reference
15289|       |    @sa @ref value() for access by value with a default value
15290|       |
15291|       |    @since version 1.0.0
15292|       |
15293|       |    @liveexample{The example below shows how object elements can be read and
15294|       |    written using `at()`. It also demonstrates the different exceptions that
15295|       |    can be thrown.,at__object_t_key_type}
15296|       |    */
15297|       |    reference at(const typename object_t::key_type& key)
15298|  13.9k|    {
15299|  13.9k|        // at only works for objects
15300|  13.9k|        if (JSON_LIKELY(is_object()))
15301|  13.9k|        {
15302|  13.9k|            JSON_TRY
15303|  13.9k|            {
15304|  13.9k|                return m_value.object->at(key);
15305|  13.9k|            }
15306|      1|            JSON_CATCH (std::out_of_range&)
15307|      1|            {
15308|      1|                // create better exception explanation
15309|      1|                JSON_THROW(out_of_range::create(403, "key '" + key + "' not found"));
15310|      1|            }
15311|      0|        }
15312|      0|        else
15313|      0|        {
15314|      0|            JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
15315|      0|        }
15316|      0|    }
15317|       |
15318|       |    /*!
15319|       |    @brief access specified object element with bounds checking
15320|       |
15321|       |    Returns a const reference to the element at with specified key @a key,
15322|       |    with bounds checking.
15323|       |
15324|       |    @param[in] key  key of the element to access
15325|       |
15326|       |    @return const reference to the element at key @a key
15327|       |
15328|       |    @throw type_error.304 if the JSON value is not an object; in this case,
15329|       |    calling `at` with a key makes no sense. See example below.
15330|       |    @throw out_of_range.403 if the key @a key is is not stored in the object;
15331|       |    that is, `find(key) == end()`. See example below.
15332|       |
15333|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
15334|       |    changes in the JSON value.
15335|       |
15336|       |    @complexity Logarithmic in the size of the container.
15337|       |
15338|       |    @sa @ref operator[](const typename object_t::key_type&) for unchecked
15339|       |    access by reference
15340|       |    @sa @ref value() for access by value with a default value
15341|       |
15342|       |    @since version 1.0.0
15343|       |
15344|       |    @liveexample{The example below shows how object elements can be read using
15345|       |    `at()`. It also demonstrates the different exceptions that can be thrown.,
15346|       |    at__object_t_key_type_const}
15347|       |    */
15348|       |    const_reference at(const typename object_t::key_type& key) const
15349|       |    {
15350|       |        // at only works for objects
15351|       |        if (JSON_LIKELY(is_object()))
15352|       |        {
15353|       |            JSON_TRY
15354|       |            {
15355|       |                return m_value.object->at(key);
15356|       |            }
15357|       |            JSON_CATCH (std::out_of_range&)
15358|       |            {
15359|       |                // create better exception explanation
15360|       |                JSON_THROW(out_of_range::create(403, "key '" + key + "' not found"));
15361|       |            }
15362|       |        }
15363|       |        else
15364|       |        {
15365|       |            JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
15366|       |        }
15367|       |    }
15368|       |
15369|       |    /*!
15370|       |    @brief access specified array element
15371|       |
15372|       |    Returns a reference to the element at specified location @a idx.
15373|       |
15374|       |    @note If @a idx is beyond the range of the array (i.e., `idx >= size()`),
15375|       |    then the array is silently filled up with `null` values to make `idx` a
15376|       |    valid reference to the last stored element.
15377|       |
15378|       |    @param[in] idx  index of the element to access
15379|       |
15380|       |    @return reference to the element at index @a idx
15381|       |
15382|       |    @throw type_error.305 if the JSON value is not an array or null; in that
15383|       |    cases, using the [] operator with an index makes no sense.
15384|       |
15385|       |    @complexity Constant if @a idx is in the range of the array. Otherwise
15386|       |    linear in `idx - size()`.
15387|       |
15388|       |    @liveexample{The example below shows how array elements can be read and
15389|       |    written using `[]` operator. Note the addition of `null`
15390|       |    values.,operatorarray__size_type}
15391|       |
15392|       |    @since version 1.0.0
15393|       |    */
15394|       |    reference operator[](size_type idx)
15395|       |    {
15396|       |        // implicitly convert null value to an empty array
15397|       |        if (is_null())
15398|       |        {
15399|       |            m_type = value_t::array;
15400|       |            m_value.array = create<array_t>();
15401|       |            assert_invariant();
15402|       |        }
15403|       |
15404|       |        // operator[] only works for arrays
15405|       |        if (JSON_LIKELY(is_array()))
15406|       |        {
15407|       |            // fill up array with null values if given idx is outside range
15408|       |            if (idx >= m_value.array->size())
15409|       |            {
15410|       |                m_value.array->insert(m_value.array->end(),
15411|       |                                      idx - m_value.array->size() + 1,
15412|       |                                      basic_json());
15413|       |            }
15414|       |
15415|       |            return m_value.array->operator[](idx);
15416|       |        }
15417|       |
15418|       |        JSON_THROW(type_error::create(305, "cannot use operator[] with a numeric argument with " + std::string(type_name())));
15419|       |    }
15420|       |
15421|       |    /*!
15422|       |    @brief access specified array element
15423|       |
15424|       |    Returns a const reference to the element at specified location @a idx.
15425|       |
15426|       |    @param[in] idx  index of the element to access
15427|       |
15428|       |    @return const reference to the element at index @a idx
15429|       |
15430|       |    @throw type_error.305 if the JSON value is not an array; in that case,
15431|       |    using the [] operator with an index makes no sense.
15432|       |
15433|       |    @complexity Constant.
15434|       |
15435|       |    @liveexample{The example below shows how array elements can be read using
15436|       |    the `[]` operator.,operatorarray__size_type_const}
15437|       |
15438|       |    @since version 1.0.0
15439|       |    */
15440|       |    const_reference operator[](size_type idx) const
15441|       |    {
15442|       |        // const operator[] only works for arrays
15443|       |        if (JSON_LIKELY(is_array()))
15444|       |        {
15445|       |            return m_value.array->operator[](idx);
15446|       |        }
15447|       |
15448|       |        JSON_THROW(type_error::create(305, "cannot use operator[] with a numeric argument with " + std::string(type_name())));
15449|       |    }
15450|       |
15451|       |    /*!
15452|       |    @brief access specified object element
15453|       |
15454|       |    Returns a reference to the element at with specified key @a key.
15455|       |
15456|       |    @note If @a key is not found in the object, then it is silently added to
15457|       |    the object and filled with a `null` value to make `key` a valid reference.
15458|       |    In case the value was `null` before, it is converted to an object.
15459|       |
15460|       |    @param[in] key  key of the element to access
15461|       |
15462|       |    @return reference to the element at key @a key
15463|       |
15464|       |    @throw type_error.305 if the JSON value is not an object or null; in that
15465|       |    cases, using the [] operator with a key makes no sense.
15466|       |
15467|       |    @complexity Logarithmic in the size of the container.
15468|       |
15469|       |    @liveexample{The example below shows how object elements can be read and
15470|       |    written using the `[]` operator.,operatorarray__key_type}
15471|       |
15472|       |    @sa @ref at(const typename object_t::key_type&) for access by reference
15473|       |    with range checking
15474|       |    @sa @ref value() for access by value with a default value
15475|       |
15476|       |    @since version 1.0.0
15477|       |    */
15478|       |    reference operator[](const typename object_t::key_type& key)
15479|    367|    {
15480|    367|        // implicitly convert null value to an empty object
15481|    367|        if (is_null())
15482|     87|        {
15483|     87|            m_type = value_t::object;
15484|     87|            m_value.object = create<object_t>();
15485|     87|            assert_invariant();
15486|     87|        }
15487|    367|
15488|    367|        // operator[] only works for objects
15489|    367|        if (JSON_LIKELY(is_object()))
15490|    367|        {
15491|    367|            return m_value.object->operator[](key);
15492|    367|        }
15493|      0|
15494|      0|        JSON_THROW(type_error::create(305, "cannot use operator[] with a string argument with " + std::string(type_name())));
15495|      0|    }
15496|       |
15497|       |    /*!
15498|       |    @brief read-only access specified object element
15499|       |
15500|       |    Returns a const reference to the element at with specified key @a key. No
15501|       |    bounds checking is performed.
15502|       |
15503|       |    @warning If the element with key @a key does not exist, the behavior is
15504|       |    undefined.
15505|       |
15506|       |    @param[in] key  key of the element to access
15507|       |
15508|       |    @return const reference to the element at key @a key
15509|       |
15510|       |    @pre The element with key @a key must exist. **This precondition is
15511|       |         enforced with an assertion.**
15512|       |
15513|       |    @throw type_error.305 if the JSON value is not an object; in that case,
15514|       |    using the [] operator with a key makes no sense.
15515|       |
15516|       |    @complexity Logarithmic in the size of the container.
15517|       |
15518|       |    @liveexample{The example below shows how object elements can be read using
15519|       |    the `[]` operator.,operatorarray__key_type_const}
15520|       |
15521|       |    @sa @ref at(const typename object_t::key_type&) for access by reference
15522|       |    with range checking
15523|       |    @sa @ref value() for access by value with a default value
15524|       |
15525|       |    @since version 1.0.0
15526|       |    */
15527|       |    const_reference operator[](const typename object_t::key_type& key) const
15528|       |    {
15529|       |        // const operator[] only works for objects
15530|       |        if (JSON_LIKELY(is_object()))
15531|       |        {
15532|       |            assert(m_value.object->find(key) != m_value.object->end());
15533|       |            return m_value.object->find(key)->second;
15534|       |        }
15535|       |
15536|       |        JSON_THROW(type_error::create(305, "cannot use operator[] with a string argument with " + std::string(type_name())));
15537|       |    }
15538|       |
15539|       |    /*!
15540|       |    @brief access specified object element
15541|       |
15542|       |    Returns a reference to the element at with specified key @a key.
15543|       |
15544|       |    @note If @a key is not found in the object, then it is silently added to
15545|       |    the object and filled with a `null` value to make `key` a valid reference.
15546|       |    In case the value was `null` before, it is converted to an object.
15547|       |
15548|       |    @param[in] key  key of the element to access
15549|       |
15550|       |    @return reference to the element at key @a key
15551|       |
15552|       |    @throw type_error.305 if the JSON value is not an object or null; in that
15553|       |    cases, using the [] operator with a key makes no sense.
15554|       |
15555|       |    @complexity Logarithmic in the size of the container.
15556|       |
15557|       |    @liveexample{The example below shows how object elements can be read and
15558|       |    written using the `[]` operator.,operatorarray__key_type}
15559|       |
15560|       |    @sa @ref at(const typename object_t::key_type&) for access by reference
15561|       |    with range checking
15562|       |    @sa @ref value() for access by value with a default value
15563|       |
15564|       |    @since version 1.1.0
15565|       |    */
15566|       |    template<typename T>
15567|       |    reference operator[](T* key)
15568|  1.54k|    {
15569|  1.54k|        // implicitly convert null to object
15570|  1.54k|        if (is_null())
15571|    317|        {
15572|    317|            m_type = value_t::object;
15573|    317|            m_value = value_t::object;
15574|    317|            assert_invariant();
15575|    317|        }
15576|  1.54k|
15577|  1.54k|        // at only works for objects
15578|  1.54k|        if (JSON_LIKELY(is_object()))
15579|  1.54k|        {
15580|  1.54k|            return m_value.object->operator[](key);
15581|  1.54k|        }
15582|      0|
15583|      0|        JSON_THROW(type_error::create(305, "cannot use operator[] with a string argument with " + std::string(type_name())));
15584|      0|    }
15585|       |
15586|       |    /*!
15587|       |    @brief read-only access specified object element
15588|       |
15589|       |    Returns a const reference to the element at with specified key @a key. No
15590|       |    bounds checking is performed.
15591|       |
15592|       |    @warning If the element with key @a key does not exist, the behavior is
15593|       |    undefined.
15594|       |
15595|       |    @param[in] key  key of the element to access
15596|       |
15597|       |    @return const reference to the element at key @a key
15598|       |
15599|       |    @pre The element with key @a key must exist. **This precondition is
15600|       |         enforced with an assertion.**
15601|       |
15602|       |    @throw type_error.305 if the JSON value is not an object; in that case,
15603|       |    using the [] operator with a key makes no sense.
15604|       |
15605|       |    @complexity Logarithmic in the size of the container.
15606|       |
15607|       |    @liveexample{The example below shows how object elements can be read using
15608|       |    the `[]` operator.,operatorarray__key_type_const}
15609|       |
15610|       |    @sa @ref at(const typename object_t::key_type&) for access by reference
15611|       |    with range checking
15612|       |    @sa @ref value() for access by value with a default value
15613|       |
15614|       |    @since version 1.1.0
15615|       |    */
15616|       |    template<typename T>
15617|       |    const_reference operator[](T* key) const
15618|       |    {
15619|       |        // at only works for objects
15620|       |        if (JSON_LIKELY(is_object()))
15621|       |        {
15622|       |            assert(m_value.object->find(key) != m_value.object->end());
15623|       |            return m_value.object->find(key)->second;
15624|       |        }
15625|       |
15626|       |        JSON_THROW(type_error::create(305, "cannot use operator[] with a string argument with " + std::string(type_name())));
15627|       |    }
15628|       |
15629|       |    /*!
15630|       |    @brief access specified object element with default value
15631|       |
15632|       |    Returns either a copy of an object's element at the specified key @a key
15633|       |    or a given default value if no element with key @a key exists.
15634|       |
15635|       |    The function is basically equivalent to executing
15636|       |    @code {.cpp}
15637|       |    try {
15638|       |        return at(key);
15639|       |    } catch(out_of_range) {
15640|       |        return default_value;
15641|       |    }
15642|       |    @endcode
15643|       |
15644|       |    @note Unlike @ref at(const typename object_t::key_type&), this function
15645|       |    does not throw if the given key @a key was not found.
15646|       |
15647|       |    @note Unlike @ref operator[](const typename object_t::key_type& key), this
15648|       |    function does not implicitly add an element to the position defined by @a
15649|       |    key. This function is furthermore also applicable to const objects.
15650|       |
15651|       |    @param[in] key  key of the element to access
15652|       |    @param[in] default_value  the value to return if @a key is not found
15653|       |
15654|       |    @tparam ValueType type compatible to JSON values, for instance `int` for
15655|       |    JSON integer numbers, `bool` for JSON booleans, or `std::vector` types for
15656|       |    JSON arrays. Note the type of the expected value at @a key and the default
15657|       |    value @a default_value must be compatible.
15658|       |
15659|       |    @return copy of the element at key @a key or @a default_value if @a key
15660|       |    is not found
15661|       |
15662|       |    @throw type_error.306 if the JSON value is not an object; in that case,
15663|       |    using `value()` with a key makes no sense.
15664|       |
15665|       |    @complexity Logarithmic in the size of the container.
15666|       |
15667|       |    @liveexample{The example below shows how object elements can be queried
15668|       |    with a default value.,basic_json__value}
15669|       |
15670|       |    @sa @ref at(const typename object_t::key_type&) for access by reference
15671|       |    with range checking
15672|       |    @sa @ref operator[](const typename object_t::key_type&) for unchecked
15673|       |    access by reference
15674|       |
15675|       |    @since version 1.0.0
15676|       |    */
15677|       |    template<class ValueType, typename std::enable_if<
15678|       |                 std::is_convertible<basic_json_t, ValueType>::value, int>::type = 0>
15679|       |    ValueType value(const typename object_t::key_type& key, const ValueType& default_value) const
15680|       |    {
15681|       |        // at only works for objects
15682|       |        if (JSON_LIKELY(is_object()))
15683|       |        {
15684|       |            // if key is found, return value and given default value otherwise
15685|       |            const auto it = find(key);
15686|       |            if (it != end())
15687|       |            {
15688|       |                return *it;
15689|       |            }
15690|       |
15691|       |            return default_value;
15692|       |        }
15693|       |
15694|       |        JSON_THROW(type_error::create(306, "cannot use value() with " + std::string(type_name())));
15695|       |    }
15696|       |
15697|       |    /*!
15698|       |    @brief overload for a default value of type const char*
15699|       |    @copydoc basic_json::value(const typename object_t::key_type&, const ValueType&) const
15700|       |    */
15701|       |    string_t value(const typename object_t::key_type& key, const char* default_value) const
15702|       |    {
15703|       |        return value(key, string_t(default_value));
15704|       |    }
15705|       |
15706|       |    /*!
15707|       |    @brief access specified object element via JSON Pointer with default value
15708|       |
15709|       |    Returns either a copy of an object's element at the specified key @a key
15710|       |    or a given default value if no element with key @a key exists.
15711|       |
15712|       |    The function is basically equivalent to executing
15713|       |    @code {.cpp}
15714|       |    try {
15715|       |        return at(ptr);
15716|       |    } catch(out_of_range) {
15717|       |        return default_value;
15718|       |    }
15719|       |    @endcode
15720|       |
15721|       |    @note Unlike @ref at(const json_pointer&), this function does not throw
15722|       |    if the given key @a key was not found.
15723|       |
15724|       |    @param[in] ptr  a JSON pointer to the element to access
15725|       |    @param[in] default_value  the value to return if @a ptr found no value
15726|       |
15727|       |    @tparam ValueType type compatible to JSON values, for instance `int` for
15728|       |    JSON integer numbers, `bool` for JSON booleans, or `std::vector` types for
15729|       |    JSON arrays. Note the type of the expected value at @a key and the default
15730|       |    value @a default_value must be compatible.
15731|       |
15732|       |    @return copy of the element at key @a key or @a default_value if @a key
15733|       |    is not found
15734|       |
15735|       |    @throw type_error.306 if the JSON value is not an object; in that case,
15736|       |    using `value()` with a key makes no sense.
15737|       |
15738|       |    @complexity Logarithmic in the size of the container.
15739|       |
15740|       |    @liveexample{The example below shows how object elements can be queried
15741|       |    with a default value.,basic_json__value_ptr}
15742|       |
15743|       |    @sa @ref operator[](const json_pointer&) for unchecked access by reference
15744|       |
15745|       |    @since version 2.0.2
15746|       |    */
15747|       |    template<class ValueType, typename std::enable_if<
15748|       |                 std::is_convertible<basic_json_t, ValueType>::value, int>::type = 0>
15749|       |    ValueType value(const json_pointer& ptr, const ValueType& default_value) const
15750|       |    {
15751|       |        // at only works for objects
15752|       |        if (JSON_LIKELY(is_object()))
15753|       |        {
15754|       |            // if pointer resolves a value, return it or use default value
15755|       |            JSON_TRY
15756|       |            {
15757|       |                return ptr.get_checked(this);
15758|       |            }
15759|       |            JSON_INTERNAL_CATCH (out_of_range&)
15760|       |            {
15761|       |                return default_value;
15762|       |            }
15763|       |        }
15764|       |
15765|       |        JSON_THROW(type_error::create(306, "cannot use value() with " + std::string(type_name())));
15766|       |    }
15767|       |
15768|       |    /*!
15769|       |    @brief overload for a default value of type const char*
15770|       |    @copydoc basic_json::value(const json_pointer&, ValueType) const
15771|       |    */
15772|       |    string_t value(const json_pointer& ptr, const char* default_value) const
15773|       |    {
15774|       |        return value(ptr, string_t(default_value));
15775|       |    }
15776|       |
15777|       |    /*!
15778|       |    @brief access the first element
15779|       |
15780|       |    Returns a reference to the first element in the container. For a JSON
15781|       |    container `c`, the expression `c.front()` is equivalent to `*c.begin()`.
15782|       |
15783|       |    @return In case of a structured type (array or object), a reference to the
15784|       |    first element is returned. In case of number, string, or boolean values, a
15785|       |    reference to the value is returned.
15786|       |
15787|       |    @complexity Constant.
15788|       |
15789|       |    @pre The JSON value must not be `null` (would throw `std::out_of_range`)
15790|       |    or an empty array or object (undefined behavior, **guarded by
15791|       |    assertions**).
15792|       |    @post The JSON value remains unchanged.
15793|       |
15794|       |    @throw invalid_iterator.214 when called on `null` value
15795|       |
15796|       |    @liveexample{The following code shows an example for `front()`.,front}
15797|       |
15798|       |    @sa @ref back() -- access the last element
15799|       |
15800|       |    @since version 1.0.0
15801|       |    */
15802|       |    reference front()
15803|       |    {
15804|       |        return *begin();
15805|       |    }
15806|       |
15807|       |    /*!
15808|       |    @copydoc basic_json::front()
15809|       |    */
15810|       |    const_reference front() const
15811|       |    {
15812|       |        return *cbegin();
15813|       |    }
15814|       |
15815|       |    /*!
15816|       |    @brief access the last element
15817|       |
15818|       |    Returns a reference to the last element in the container. For a JSON
15819|       |    container `c`, the expression `c.back()` is equivalent to
15820|       |    @code {.cpp}
15821|       |    auto tmp = c.end();
15822|       |    --tmp;
15823|       |    return *tmp;
15824|       |    @endcode
15825|       |
15826|       |    @return In case of a structured type (array or object), a reference to the
15827|       |    last element is returned. In case of number, string, or boolean values, a
15828|       |    reference to the value is returned.
15829|       |
15830|       |    @complexity Constant.
15831|       |
15832|       |    @pre The JSON value must not be `null` (would throw `std::out_of_range`)
15833|       |    or an empty array or object (undefined behavior, **guarded by
15834|       |    assertions**).
15835|       |    @post The JSON value remains unchanged.
15836|       |
15837|       |    @throw invalid_iterator.214 when called on a `null` value. See example
15838|       |    below.
15839|       |
15840|       |    @liveexample{The following code shows an example for `back()`.,back}
15841|       |
15842|       |    @sa @ref front() -- access the first element
15843|       |
15844|       |    @since version 1.0.0
15845|       |    */
15846|       |    reference back()
15847|       |    {
15848|       |        auto tmp = end();
15849|       |        --tmp;
15850|       |        return *tmp;
15851|       |    }
15852|       |
15853|       |    /*!
15854|       |    @copydoc basic_json::back()
15855|       |    */
15856|       |    const_reference back() const
15857|       |    {
15858|       |        auto tmp = cend();
15859|       |        --tmp;
15860|       |        return *tmp;
15861|       |    }
15862|       |
15863|       |    /*!
15864|       |    @brief remove element given an iterator
15865|       |
15866|       |    Removes the element specified by iterator @a pos. The iterator @a pos must
15867|       |    be valid and dereferenceable. Thus the `end()` iterator (which is valid,
15868|       |    but is not dereferenceable) cannot be used as a value for @a pos.
15869|       |
15870|       |    If called on a primitive type other than `null`, the resulting JSON value
15871|       |    will be `null`.
15872|       |
15873|       |    @param[in] pos iterator to the element to remove
15874|       |    @return Iterator following the last removed element. If the iterator @a
15875|       |    pos refers to the last element, the `end()` iterator is returned.
15876|       |
15877|       |    @tparam IteratorType an @ref iterator or @ref const_iterator
15878|       |
15879|       |    @post Invalidates iterators and references at or after the point of the
15880|       |    erase, including the `end()` iterator.
15881|       |
15882|       |    @throw type_error.307 if called on a `null` value; example: `"cannot use
15883|       |    erase() with null"`
15884|       |    @throw invalid_iterator.202 if called on an iterator which does not belong
15885|       |    to the current JSON value; example: `"iterator does not fit current
15886|       |    value"`
15887|       |    @throw invalid_iterator.205 if called on a primitive type with invalid
15888|       |    iterator (i.e., any iterator which is not `begin()`); example: `"iterator
15889|       |    out of range"`
15890|       |
15891|       |    @complexity The complexity depends on the type:
15892|       |    - objects: amortized constant
15893|       |    - arrays: linear in distance between @a pos and the end of the container
15894|       |    - strings: linear in the length of the string
15895|       |    - other types: constant
15896|       |
15897|       |    @liveexample{The example shows the result of `erase()` for different JSON
15898|       |    types.,erase__IteratorType}
15899|       |
15900|       |    @sa @ref erase(IteratorType, IteratorType) -- removes the elements in
15901|       |    the given range
15902|       |    @sa @ref erase(const typename object_t::key_type&) -- removes the element
15903|       |    from an object at the given key
15904|       |    @sa @ref erase(const size_type) -- removes the element from an array at
15905|       |    the given index
15906|       |
15907|       |    @since version 1.0.0
15908|       |    */
15909|       |    template<class IteratorType, typename std::enable_if<
15910|       |                 std::is_same<IteratorType, typename basic_json_t::iterator>::value or
15911|       |                 std::is_same<IteratorType, typename basic_json_t::const_iterator>::value, int>::type
15912|       |             = 0>
15913|       |    IteratorType erase(IteratorType pos)
15914|      0|    {
15915|      0|        // make sure iterator fits the current value
15916|      0|        if (JSON_UNLIKELY(this != pos.m_object))
15917|      0|        {
15918|      0|            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value"));
15919|      0|        }
15920|      0|
15921|      0|        IteratorType result = end();
15922|      0|
15923|      0|        switch (m_type)
15924|      0|        {
15925|      0|            case value_t::boolean:
15926|      0|            case value_t::number_float:
15927|      0|            case value_t::number_integer:
15928|      0|            case value_t::number_unsigned:
15929|      0|            case value_t::string:
15930|      0|            {
15931|      0|                if (JSON_UNLIKELY(not pos.m_it.primitive_iterator.is_begin()))
15932|      0|                {
15933|      0|                    JSON_THROW(invalid_iterator::create(205, "iterator out of range"));
15934|      0|                }
15935|      0|
15936|      0|                if (is_string())
15937|      0|                {
15938|      0|                    AllocatorType<string_t> alloc;
15939|      0|                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.string);
15940|      0|                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.string, 1);
15941|      0|                    m_value.string = nullptr;
15942|      0|                }
15943|      0|
15944|      0|                m_type = value_t::null;
15945|      0|                assert_invariant();
15946|      0|                break;
15947|      0|            }
15948|      0|
15949|      0|            case value_t::object:
15950|      0|            {
15951|      0|                result.m_it.object_iterator = m_value.object->erase(pos.m_it.object_iterator);
15952|      0|                break;
15953|      0|            }
15954|      0|
15955|      0|            case value_t::array:
15956|      0|            {
15957|      0|                result.m_it.array_iterator = m_value.array->erase(pos.m_it.array_iterator);
15958|      0|                break;
15959|      0|            }
15960|      0|
15961|      0|            default:
15962|      0|                JSON_THROW(type_error::create(307, "cannot use erase() with " + std::string(type_name())));
15963|      0|        }
15964|      0|
15965|      0|        return result;
15966|      0|    }
15967|       |
15968|       |    /*!
15969|       |    @brief remove elements given an iterator range
15970|       |
15971|       |    Removes the element specified by the range `[first; last)`. The iterator
15972|       |    @a first does not need to be dereferenceable if `first == last`: erasing
15973|       |    an empty range is a no-op.
15974|       |
15975|       |    If called on a primitive type other than `null`, the resulting JSON value
15976|       |    will be `null`.
15977|       |
15978|       |    @param[in] first iterator to the beginning of the range to remove
15979|       |    @param[in] last iterator past the end of the range to remove
15980|       |    @return Iterator following the last removed element. If the iterator @a
15981|       |    second refers to the last element, the `end()` iterator is returned.
15982|       |
15983|       |    @tparam IteratorType an @ref iterator or @ref const_iterator
15984|       |
15985|       |    @post Invalidates iterators and references at or after the point of the
15986|       |    erase, including the `end()` iterator.
15987|       |
15988|       |    @throw type_error.307 if called on a `null` value; example: `"cannot use
15989|       |    erase() with null"`
15990|       |    @throw invalid_iterator.203 if called on iterators which does not belong
15991|       |    to the current JSON value; example: `"iterators do not fit current value"`
15992|       |    @throw invalid_iterator.204 if called on a primitive type with invalid
15993|       |    iterators (i.e., if `first != begin()` and `last != end()`); example:
15994|       |    `"iterators out of range"`
15995|       |
15996|       |    @complexity The complexity depends on the type:
15997|       |    - objects: `log(size()) + std::distance(first, last)`
15998|       |    - arrays: linear in the distance between @a first and @a last, plus linear
15999|       |      in the distance between @a last and end of the container
16000|       |    - strings: linear in the length of the string
16001|       |    - other types: constant
16002|       |
16003|       |    @liveexample{The example shows the result of `erase()` for different JSON
16004|       |    types.,erase__IteratorType_IteratorType}
16005|       |
16006|       |    @sa @ref erase(IteratorType) -- removes the element at a given position
16007|       |    @sa @ref erase(const typename object_t::key_type&) -- removes the element
16008|       |    from an object at the given key
16009|       |    @sa @ref erase(const size_type) -- removes the element from an array at
16010|       |    the given index
16011|       |
16012|       |    @since version 1.0.0
16013|       |    */
16014|       |    template<class IteratorType, typename std::enable_if<
16015|       |                 std::is_same<IteratorType, typename basic_json_t::iterator>::value or
16016|       |                 std::is_same<IteratorType, typename basic_json_t::const_iterator>::value, int>::type
16017|       |             = 0>
16018|       |    IteratorType erase(IteratorType first, IteratorType last)
16019|       |    {
16020|       |        // make sure iterator fits the current value
16021|       |        if (JSON_UNLIKELY(this != first.m_object or this != last.m_object))
16022|       |        {
16023|       |            JSON_THROW(invalid_iterator::create(203, "iterators do not fit current value"));
16024|       |        }
16025|       |
16026|       |        IteratorType result = end();
16027|       |
16028|       |        switch (m_type)
16029|       |        {
16030|       |            case value_t::boolean:
16031|       |            case value_t::number_float:
16032|       |            case value_t::number_integer:
16033|       |            case value_t::number_unsigned:
16034|       |            case value_t::string:
16035|       |            {
16036|       |                if (JSON_LIKELY(not first.m_it.primitive_iterator.is_begin()
16037|       |                                or not last.m_it.primitive_iterator.is_end()))
16038|       |                {
16039|       |                    JSON_THROW(invalid_iterator::create(204, "iterators out of range"));
16040|       |                }
16041|       |
16042|       |                if (is_string())
16043|       |                {
16044|       |                    AllocatorType<string_t> alloc;
16045|       |                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.string);
16046|       |                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.string, 1);
16047|       |                    m_value.string = nullptr;
16048|       |                }
16049|       |
16050|       |                m_type = value_t::null;
16051|       |                assert_invariant();
16052|       |                break;
16053|       |            }
16054|       |
16055|       |            case value_t::object:
16056|       |            {
16057|       |                result.m_it.object_iterator = m_value.object->erase(first.m_it.object_iterator,
16058|       |                                              last.m_it.object_iterator);
16059|       |                break;
16060|       |            }
16061|       |
16062|       |            case value_t::array:
16063|       |            {
16064|       |                result.m_it.array_iterator = m_value.array->erase(first.m_it.array_iterator,
16065|       |                                             last.m_it.array_iterator);
16066|       |                break;
16067|       |            }
16068|       |
16069|       |            default:
16070|       |                JSON_THROW(type_error::create(307, "cannot use erase() with " + std::string(type_name())));
16071|       |        }
16072|       |
16073|       |        return result;
16074|       |    }
16075|       |
16076|       |    /*!
16077|       |    @brief remove element from a JSON object given a key
16078|       |
16079|       |    Removes elements from a JSON object with the key value @a key.
16080|       |
16081|       |    @param[in] key value of the elements to remove
16082|       |
16083|       |    @return Number of elements removed. If @a ObjectType is the default
16084|       |    `std::map` type, the return value will always be `0` (@a key was not
16085|       |    found) or `1` (@a key was found).
16086|       |
16087|       |    @post References and iterators to the erased elements are invalidated.
16088|       |    Other references and iterators are not affected.
16089|       |
16090|       |    @throw type_error.307 when called on a type other than JSON object;
16091|       |    example: `"cannot use erase() with null"`
16092|       |
16093|       |    @complexity `log(size()) + count(key)`
16094|       |
16095|       |    @liveexample{The example shows the effect of `erase()`.,erase__key_type}
16096|       |
16097|       |    @sa @ref erase(IteratorType) -- removes the element at a given position
16098|       |    @sa @ref erase(IteratorType, IteratorType) -- removes the elements in
16099|       |    the given range
16100|       |    @sa @ref erase(const size_type) -- removes the element from an array at
16101|       |    the given index
16102|       |
16103|       |    @since version 1.0.0
16104|       |    */
16105|       |    size_type erase(const typename object_t::key_type& key)
16106|       |    {
16107|       |        // this erase only works for objects
16108|       |        if (JSON_LIKELY(is_object()))
16109|       |        {
16110|       |            return m_value.object->erase(key);
16111|       |        }
16112|       |
16113|       |        JSON_THROW(type_error::create(307, "cannot use erase() with " + std::string(type_name())));
16114|       |    }
16115|       |
16116|       |    /*!
16117|       |    @brief remove element from a JSON array given an index
16118|       |
16119|       |    Removes element from a JSON array at the index @a idx.
16120|       |
16121|       |    @param[in] idx index of the element to remove
16122|       |
16123|       |    @throw type_error.307 when called on a type other than JSON object;
16124|       |    example: `"cannot use erase() with null"`
16125|       |    @throw out_of_range.401 when `idx >= size()`; example: `"array index 17
16126|       |    is out of range"`
16127|       |
16128|       |    @complexity Linear in distance between @a idx and the end of the container.
16129|       |
16130|       |    @liveexample{The example shows the effect of `erase()`.,erase__size_type}
16131|       |
16132|       |    @sa @ref erase(IteratorType) -- removes the element at a given position
16133|       |    @sa @ref erase(IteratorType, IteratorType) -- removes the elements in
16134|       |    the given range
16135|       |    @sa @ref erase(const typename object_t::key_type&) -- removes the element
16136|       |    from an object at the given key
16137|       |
16138|       |    @since version 1.0.0
16139|       |    */
16140|       |    void erase(const size_type idx)
16141|       |    {
16142|       |        // this erase only works for arrays
16143|       |        if (JSON_LIKELY(is_array()))
16144|       |        {
16145|       |            if (JSON_UNLIKELY(idx >= size()))
16146|       |            {
16147|       |                JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
16148|       |            }
16149|       |
16150|       |            m_value.array->erase(m_value.array->begin() + static_cast<difference_type>(idx));
16151|       |        }
16152|       |        else
16153|       |        {
16154|       |            JSON_THROW(type_error::create(307, "cannot use erase() with " + std::string(type_name())));
16155|       |        }
16156|       |    }
16157|       |
16158|       |    /// @}
16159|       |
16160|       |
16161|       |    ////////////
16162|       |    // lookup //
16163|       |    ////////////
16164|       |
16165|       |    /// @name lookup
16166|       |    /// @{
16167|       |
16168|       |    /*!
16169|       |    @brief find an element in a JSON object
16170|       |
16171|       |    Finds an element in a JSON object with key equivalent to @a key. If the
16172|       |    element is not found or the JSON value is not an object, end() is
16173|       |    returned.
16174|       |
16175|       |    @note This method always returns @ref end() when executed on a JSON type
16176|       |          that is not an object.
16177|       |
16178|       |    @param[in] key key value of the element to search for.
16179|       |
16180|       |    @return Iterator to an element with key equivalent to @a key. If no such
16181|       |    element is found or the JSON value is not an object, past-the-end (see
16182|       |    @ref end()) iterator is returned.
16183|       |
16184|       |    @complexity Logarithmic in the size of the JSON object.
16185|       |
16186|       |    @liveexample{The example shows how `find()` is used.,find__key_type}
16187|       |
16188|       |    @since version 1.0.0
16189|       |    */
16190|       |    template<typename KeyT>
16191|       |    iterator find(KeyT&& key)
16192|     15|    {
16193|     15|        auto result = end();
16194|     15|
16195|     15|        if (is_object())
16196|     14|        {
16197|     14|            result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));
16198|     14|        }
16199|     15|
16200|     15|        return result;
16201|     15|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE4findIRA15_KcEENS_6detail9iter_implISA_EEOT_:
  |16192|      2|    {
  |16193|      2|        auto result = end();
  |16194|      2|
  |16195|      2|        if (is_object())
  |16196|      2|        {
  |16197|      2|            result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));
  |16198|      2|        }
  |16199|      2|
  |16200|      2|        return result;
  |16201|      2|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE4findIRA9_KcEENS_6detail9iter_implISA_EEOT_:
  |16192|     13|    {
  |16193|     13|        auto result = end();
  |16194|     13|
  |16195|     13|        if (is_object())
  |16196|     12|        {
  |16197|     12|            result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));
  |16198|     12|        }
  |16199|     13|
  |16200|     13|        return result;
  |16201|     13|    }
  ------------------
16202|       |
16203|       |    /*!
16204|       |    @brief find an element in a JSON object
16205|       |    @copydoc find(KeyT&&)
16206|       |    */
16207|       |    template<typename KeyT>
16208|       |    const_iterator find(KeyT&& key) const
16209|       |    {
16210|       |        auto result = cend();
16211|       |
16212|       |        if (is_object())
16213|       |        {
16214|       |            result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));
16215|       |        }
16216|       |
16217|       |        return result;
16218|       |    }
16219|       |
16220|       |    /*!
16221|       |    @brief returns the number of occurrences of a key in a JSON object
16222|       |
16223|       |    Returns the number of elements with key @a key. If ObjectType is the
16224|       |    default `std::map` type, the return value will always be `0` (@a key was
16225|       |    not found) or `1` (@a key was found).
16226|       |
16227|       |    @note This method always returns `0` when executed on a JSON type that is
16228|       |          not an object.
16229|       |
16230|       |    @param[in] key key value of the element to count
16231|       |
16232|       |    @return Number of elements with key @a key. If the JSON value is not an
16233|       |    object, the return value will be `0`.
16234|       |
16235|       |    @complexity Logarithmic in the size of the JSON object.
16236|       |
16237|       |    @liveexample{The example shows how `count()` is used.,count}
16238|       |
16239|       |    @since version 1.0.0
16240|       |    */
16241|       |    template<typename KeyT>
16242|       |    size_type count(KeyT&& key) const
16243|       |    {
16244|       |        // return 0 for all nonobject types
16245|       |        return is_object() ? m_value.object->count(std::forward<KeyT>(key)) : 0;
16246|       |    }
16247|       |
16248|       |    /// @}
16249|       |
16250|       |
16251|       |    ///////////////
16252|       |    // iterators //
16253|       |    ///////////////
16254|       |
16255|       |    /// @name iterators
16256|       |    /// @{
16257|       |
16258|       |    /*!
16259|       |    @brief returns an iterator to the first element
16260|       |
16261|       |    Returns an iterator to the first element.
16262|       |
16263|       |    @image html range-begin-end.svg "Illustration from cppreference.com"
16264|       |
16265|       |    @return iterator to the first element
16266|       |
16267|       |    @complexity Constant.
16268|       |
16269|       |    @requirement This function helps `basic_json` satisfying the
16270|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
16271|       |    requirements:
16272|       |    - The complexity is constant.
16273|       |
16274|       |    @liveexample{The following code shows an example for `begin()`.,begin}
16275|       |
16276|       |    @sa @ref cbegin() -- returns a const iterator to the beginning
16277|       |    @sa @ref end() -- returns an iterator to the end
16278|       |    @sa @ref cend() -- returns a const iterator to the end
16279|       |
16280|       |    @since version 1.0.0
16281|       |    */
16282|       |    iterator begin() noexcept
16283|    609|    {
16284|    609|        iterator result(this);
16285|    609|        result.set_begin();
16286|    609|        return result;
16287|    609|    }
16288|       |
16289|       |    /*!
16290|       |    @copydoc basic_json::cbegin()
16291|       |    */
16292|       |    const_iterator begin() const noexcept
16293|       |    {
16294|       |        return cbegin();
16295|       |    }
16296|       |
16297|       |    /*!
16298|       |    @brief returns a const iterator to the first element
16299|       |
16300|       |    Returns a const iterator to the first element.
16301|       |
16302|       |    @image html range-begin-end.svg "Illustration from cppreference.com"
16303|       |
16304|       |    @return const iterator to the first element
16305|       |
16306|       |    @complexity Constant.
16307|       |
16308|       |    @requirement This function helps `basic_json` satisfying the
16309|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
16310|       |    requirements:
16311|       |    - The complexity is constant.
16312|       |    - Has the semantics of `const_cast<const basic_json&>(*this).begin()`.
16313|       |
16314|       |    @liveexample{The following code shows an example for `cbegin()`.,cbegin}
16315|       |
16316|       |    @sa @ref begin() -- returns an iterator to the beginning
16317|       |    @sa @ref end() -- returns an iterator to the end
16318|       |    @sa @ref cend() -- returns a const iterator to the end
16319|       |
16320|       |    @since version 1.0.0
16321|       |    */
16322|       |    const_iterator cbegin() const noexcept
16323|       |    {
16324|       |        const_iterator result(this);
16325|       |        result.set_begin();
16326|       |        return result;
16327|       |    }
16328|       |
16329|       |    /*!
16330|       |    @brief returns an iterator to one past the last element
16331|       |
16332|       |    Returns an iterator to one past the last element.
16333|       |
16334|       |    @image html range-begin-end.svg "Illustration from cppreference.com"
16335|       |
16336|       |    @return iterator one past the last element
16337|       |
16338|       |    @complexity Constant.
16339|       |
16340|       |    @requirement This function helps `basic_json` satisfying the
16341|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
16342|       |    requirements:
16343|       |    - The complexity is constant.
16344|       |
16345|       |    @liveexample{The following code shows an example for `end()`.,end}
16346|       |
16347|       |    @sa @ref cend() -- returns a const iterator to the end
16348|       |    @sa @ref begin() -- returns an iterator to the beginning
16349|       |    @sa @ref cbegin() -- returns a const iterator to the beginning
16350|       |
16351|       |    @since version 1.0.0
16352|       |    */
16353|       |    iterator end() noexcept
16354|  2.24k|    {
16355|  2.24k|        iterator result(this);
16356|  2.24k|        result.set_end();
16357|  2.24k|        return result;
16358|  2.24k|    }
16359|       |
16360|       |    /*!
16361|       |    @copydoc basic_json::cend()
16362|       |    */
16363|       |    const_iterator end() const noexcept
16364|       |    {
16365|       |        return cend();
16366|       |    }
16367|       |
16368|       |    /*!
16369|       |    @brief returns a const iterator to one past the last element
16370|       |
16371|       |    Returns a const iterator to one past the last element.
16372|       |
16373|       |    @image html range-begin-end.svg "Illustration from cppreference.com"
16374|       |
16375|       |    @return const iterator one past the last element
16376|       |
16377|       |    @complexity Constant.
16378|       |
16379|       |    @requirement This function helps `basic_json` satisfying the
16380|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
16381|       |    requirements:
16382|       |    - The complexity is constant.
16383|       |    - Has the semantics of `const_cast<const basic_json&>(*this).end()`.
16384|       |
16385|       |    @liveexample{The following code shows an example for `cend()`.,cend}
16386|       |
16387|       |    @sa @ref end() -- returns an iterator to the end
16388|       |    @sa @ref begin() -- returns an iterator to the beginning
16389|       |    @sa @ref cbegin() -- returns a const iterator to the beginning
16390|       |
16391|       |    @since version 1.0.0
16392|       |    */
16393|       |    const_iterator cend() const noexcept
16394|       |    {
16395|       |        const_iterator result(this);
16396|       |        result.set_end();
16397|       |        return result;
16398|       |    }
16399|       |
16400|       |    /*!
16401|       |    @brief returns an iterator to the reverse-beginning
16402|       |
16403|       |    Returns an iterator to the reverse-beginning; that is, the last element.
16404|       |
16405|       |    @image html range-rbegin-rend.svg "Illustration from cppreference.com"
16406|       |
16407|       |    @complexity Constant.
16408|       |
16409|       |    @requirement This function helps `basic_json` satisfying the
16410|       |    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
16411|       |    requirements:
16412|       |    - The complexity is constant.
16413|       |    - Has the semantics of `reverse_iterator(end())`.
16414|       |
16415|       |    @liveexample{The following code shows an example for `rbegin()`.,rbegin}
16416|       |
16417|       |    @sa @ref crbegin() -- returns a const reverse iterator to the beginning
16418|       |    @sa @ref rend() -- returns a reverse iterator to the end
16419|       |    @sa @ref crend() -- returns a const reverse iterator to the end
16420|       |
16421|       |    @since version 1.0.0
16422|       |    */
16423|       |    reverse_iterator rbegin() noexcept
16424|       |    {
16425|       |        return reverse_iterator(end());
16426|       |    }
16427|       |
16428|       |    /*!
16429|       |    @copydoc basic_json::crbegin()
16430|       |    */
16431|       |    const_reverse_iterator rbegin() const noexcept
16432|       |    {
16433|       |        return crbegin();
16434|       |    }
16435|       |
16436|       |    /*!
16437|       |    @brief returns an iterator to the reverse-end
16438|       |
16439|       |    Returns an iterator to the reverse-end; that is, one before the first
16440|       |    element.
16441|       |
16442|       |    @image html range-rbegin-rend.svg "Illustration from cppreference.com"
16443|       |
16444|       |    @complexity Constant.
16445|       |
16446|       |    @requirement This function helps `basic_json` satisfying the
16447|       |    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
16448|       |    requirements:
16449|       |    - The complexity is constant.
16450|       |    - Has the semantics of `reverse_iterator(begin())`.
16451|       |
16452|       |    @liveexample{The following code shows an example for `rend()`.,rend}
16453|       |
16454|       |    @sa @ref crend() -- returns a const reverse iterator to the end
16455|       |    @sa @ref rbegin() -- returns a reverse iterator to the beginning
16456|       |    @sa @ref crbegin() -- returns a const reverse iterator to the beginning
16457|       |
16458|       |    @since version 1.0.0
16459|       |    */
16460|       |    reverse_iterator rend() noexcept
16461|       |    {
16462|       |        return reverse_iterator(begin());
16463|       |    }
16464|       |
16465|       |    /*!
16466|       |    @copydoc basic_json::crend()
16467|       |    */
16468|       |    const_reverse_iterator rend() const noexcept
16469|       |    {
16470|       |        return crend();
16471|       |    }
16472|       |
16473|       |    /*!
16474|       |    @brief returns a const reverse iterator to the last element
16475|       |
16476|       |    Returns a const iterator to the reverse-beginning; that is, the last
16477|       |    element.
16478|       |
16479|       |    @image html range-rbegin-rend.svg "Illustration from cppreference.com"
16480|       |
16481|       |    @complexity Constant.
16482|       |
16483|       |    @requirement This function helps `basic_json` satisfying the
16484|       |    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
16485|       |    requirements:
16486|       |    - The complexity is constant.
16487|       |    - Has the semantics of `const_cast<const basic_json&>(*this).rbegin()`.
16488|       |
16489|       |    @liveexample{The following code shows an example for `crbegin()`.,crbegin}
16490|       |
16491|       |    @sa @ref rbegin() -- returns a reverse iterator to the beginning
16492|       |    @sa @ref rend() -- returns a reverse iterator to the end
16493|       |    @sa @ref crend() -- returns a const reverse iterator to the end
16494|       |
16495|       |    @since version 1.0.0
16496|       |    */
16497|       |    const_reverse_iterator crbegin() const noexcept
16498|       |    {
16499|       |        return const_reverse_iterator(cend());
16500|       |    }
16501|       |
16502|       |    /*!
16503|       |    @brief returns a const reverse iterator to one before the first
16504|       |
16505|       |    Returns a const reverse iterator to the reverse-end; that is, one before
16506|       |    the first element.
16507|       |
16508|       |    @image html range-rbegin-rend.svg "Illustration from cppreference.com"
16509|       |
16510|       |    @complexity Constant.
16511|       |
16512|       |    @requirement This function helps `basic_json` satisfying the
16513|       |    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
16514|       |    requirements:
16515|       |    - The complexity is constant.
16516|       |    - Has the semantics of `const_cast<const basic_json&>(*this).rend()`.
16517|       |
16518|       |    @liveexample{The following code shows an example for `crend()`.,crend}
16519|       |
16520|       |    @sa @ref rend() -- returns a reverse iterator to the end
16521|       |    @sa @ref rbegin() -- returns a reverse iterator to the beginning
16522|       |    @sa @ref crbegin() -- returns a const reverse iterator to the beginning
16523|       |
16524|       |    @since version 1.0.0
16525|       |    */
16526|       |    const_reverse_iterator crend() const noexcept
16527|       |    {
16528|       |        return const_reverse_iterator(cbegin());
16529|       |    }
16530|       |
16531|       |  public:
16532|       |    /*!
16533|       |    @brief wrapper to access iterator member functions in range-based for
16534|       |
16535|       |    This function allows to access @ref iterator::key() and @ref
16536|       |    iterator::value() during range-based for loops. In these loops, a
16537|       |    reference to the JSON values is returned, so there is no access to the
16538|       |    underlying iterator.
16539|       |
16540|       |    For loop without iterator_wrapper:
16541|       |
16542|       |    @code{cpp}
16543|       |    for (auto it = j_object.begin(); it != j_object.end(); ++it)
16544|       |    {
16545|       |        std::cout << "key: " << it.key() << ", value:" << it.value() << '\n';
16546|       |    }
16547|       |    @endcode
16548|       |
16549|       |    Range-based for loop without iterator proxy:
16550|       |
16551|       |    @code{cpp}
16552|       |    for (auto it : j_object)
16553|       |    {
16554|       |        // "it" is of type json::reference and has no key() member
16555|       |        std::cout << "value: " << it << '\n';
16556|       |    }
16557|       |    @endcode
16558|       |
16559|       |    Range-based for loop with iterator proxy:
16560|       |
16561|       |    @code{cpp}
16562|       |    for (auto it : json::iterator_wrapper(j_object))
16563|       |    {
16564|       |        std::cout << "key: " << it.key() << ", value:" << it.value() << '\n';
16565|       |    }
16566|       |    @endcode
16567|       |
16568|       |    @note When iterating over an array, `key()` will return the index of the
16569|       |          element as string (see example).
16570|       |
16571|       |    @param[in] ref  reference to a JSON value
16572|       |    @return iteration proxy object wrapping @a ref with an interface to use in
16573|       |            range-based for loops
16574|       |
16575|       |    @liveexample{The following code shows how the wrapper is used,iterator_wrapper}
16576|       |
16577|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
16578|       |    changes in the JSON value.
16579|       |
16580|       |    @complexity Constant.
16581|       |
16582|       |    @note The name of this function is not yet final and may change in the
16583|       |    future.
16584|       |
16585|       |    @deprecated This stream operator is deprecated and will be removed in
16586|       |                future 4.0.0 of the library. Please use @ref items() instead;
16587|       |                that is, replace `json::iterator_wrapper(j)` with `j.items()`.
16588|       |    */
16589|       |    JSON_DEPRECATED
16590|       |    static iteration_proxy<iterator> iterator_wrapper(reference ref) noexcept
16591|       |    {
16592|       |        return ref.items();
16593|       |    }
16594|       |
16595|       |    /*!
16596|       |    @copydoc iterator_wrapper(reference)
16597|       |    */
16598|       |    JSON_DEPRECATED
16599|       |    static iteration_proxy<const_iterator> iterator_wrapper(const_reference ref) noexcept
16600|       |    {
16601|       |        return ref.items();
16602|       |    }
16603|       |
16604|       |    /*!
16605|       |    @brief helper to access iterator member functions in range-based for
16606|       |
16607|       |    This function allows to access @ref iterator::key() and @ref
16608|       |    iterator::value() during range-based for loops. In these loops, a
16609|       |    reference to the JSON values is returned, so there is no access to the
16610|       |    underlying iterator.
16611|       |
16612|       |    For loop without `items()` function:
16613|       |
16614|       |    @code{cpp}
16615|       |    for (auto it = j_object.begin(); it != j_object.end(); ++it)
16616|       |    {
16617|       |        std::cout << "key: " << it.key() << ", value:" << it.value() << '\n';
16618|       |    }
16619|       |    @endcode
16620|       |
16621|       |    Range-based for loop without `items()` function:
16622|       |
16623|       |    @code{cpp}
16624|       |    for (auto it : j_object)
16625|       |    {
16626|       |        // "it" is of type json::reference and has no key() member
16627|       |        std::cout << "value: " << it << '\n';
16628|       |    }
16629|       |    @endcode
16630|       |
16631|       |    Range-based for loop with `items()` function:
16632|       |
16633|       |    @code{cpp}
16634|       |    for (auto it : j_object.items())
16635|       |    {
16636|       |        std::cout << "key: " << it.key() << ", value:" << it.value() << '\n';
16637|       |    }
16638|       |    @endcode
16639|       |
16640|       |    @note When iterating over an array, `key()` will return the index of the
16641|       |          element as string (see example). For primitive types (e.g., numbers),
16642|       |          `key()` returns an empty string.
16643|       |
16644|       |    @return iteration proxy object wrapping @a ref with an interface to use in
16645|       |            range-based for loops
16646|       |
16647|       |    @liveexample{The following code shows how the function is used.,items}
16648|       |
16649|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
16650|       |    changes in the JSON value.
16651|       |
16652|       |    @complexity Constant.
16653|       |
16654|       |    @since version 3.1.0.
16655|       |    */
16656|       |    iteration_proxy<iterator> items() noexcept
16657|       |    {
16658|       |        return iteration_proxy<iterator>(*this);
16659|       |    }
16660|       |
16661|       |    /*!
16662|       |    @copydoc items()
16663|       |    */
16664|       |    iteration_proxy<const_iterator> items() const noexcept
16665|       |    {
16666|       |        return iteration_proxy<const_iterator>(*this);
16667|       |    }
16668|       |
16669|       |    /// @}
16670|       |
16671|       |
16672|       |    //////////////
16673|       |    // capacity //
16674|       |    //////////////
16675|       |
16676|       |    /// @name capacity
16677|       |    /// @{
16678|       |
16679|       |    /*!
16680|       |    @brief checks whether the container is empty.
16681|       |
16682|       |    Checks if a JSON value has no elements (i.e. whether its @ref size is `0`).
16683|       |
16684|       |    @return The return value depends on the different types and is
16685|       |            defined as follows:
16686|       |            Value type  | return value
16687|       |            ----------- | -------------
16688|       |            null        | `true`
16689|       |            boolean     | `false`
16690|       |            string      | `false`
16691|       |            number      | `false`
16692|       |            object      | result of function `object_t::empty()`
16693|       |            array       | result of function `array_t::empty()`
16694|       |
16695|       |    @liveexample{The following code uses `empty()` to check if a JSON
16696|       |    object contains any elements.,empty}
16697|       |
16698|       |    @complexity Constant, as long as @ref array_t and @ref object_t satisfy
16699|       |    the Container concept; that is, their `empty()` functions have constant
16700|       |    complexity.
16701|       |
16702|       |    @iterators No changes.
16703|       |
16704|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
16705|       |
16706|       |    @note This function does not return whether a string stored as JSON value
16707|       |    is empty - it returns whether the JSON container itself is empty which is
16708|       |    false in the case of a string.
16709|       |
16710|       |    @requirement This function helps `basic_json` satisfying the
16711|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
16712|       |    requirements:
16713|       |    - The complexity is constant.
16714|       |    - Has the semantics of `begin() == end()`.
16715|       |
16716|       |    @sa @ref size() -- returns the number of elements
16717|       |
16718|       |    @since version 1.0.0
16719|       |    */
16720|       |    bool empty() const noexcept
16721|       |    {
16722|       |        switch (m_type)
16723|       |        {
16724|       |            case value_t::null:
16725|       |            {
16726|       |                // null values are empty
16727|       |                return true;
16728|       |            }
16729|       |
16730|       |            case value_t::array:
16731|       |            {
16732|       |                // delegate call to array_t::empty()
16733|       |                return m_value.array->empty();
16734|       |            }
16735|       |
16736|       |            case value_t::object:
16737|       |            {
16738|       |                // delegate call to object_t::empty()
16739|       |                return m_value.object->empty();
16740|       |            }
16741|       |
16742|       |            default:
16743|       |            {
16744|       |                // all other types are nonempty
16745|       |                return false;
16746|       |            }
16747|       |        }
16748|       |    }
16749|       |
16750|       |    /*!
16751|       |    @brief returns the number of elements
16752|       |
16753|       |    Returns the number of elements in a JSON value.
16754|       |
16755|       |    @return The return value depends on the different types and is
16756|       |            defined as follows:
16757|       |            Value type  | return value
16758|       |            ----------- | -------------
16759|       |            null        | `0`
16760|       |            boolean     | `1`
16761|       |            string      | `1`
16762|       |            number      | `1`
16763|       |            object      | result of function object_t::size()
16764|       |            array       | result of function array_t::size()
16765|       |
16766|       |    @liveexample{The following code calls `size()` on the different value
16767|       |    types.,size}
16768|       |
16769|       |    @complexity Constant, as long as @ref array_t and @ref object_t satisfy
16770|       |    the Container concept; that is, their size() functions have constant
16771|       |    complexity.
16772|       |
16773|       |    @iterators No changes.
16774|       |
16775|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
16776|       |
16777|       |    @note This function does not return the length of a string stored as JSON
16778|       |    value - it returns the number of elements in the JSON value which is 1 in
16779|       |    the case of a string.
16780|       |
16781|       |    @requirement This function helps `basic_json` satisfying the
16782|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
16783|       |    requirements:
16784|       |    - The complexity is constant.
16785|       |    - Has the semantics of `std::distance(begin(), end())`.
16786|       |
16787|       |    @sa @ref empty() -- checks whether the container is empty
16788|       |    @sa @ref max_size() -- returns the maximal number of elements
16789|       |
16790|       |    @since version 1.0.0
16791|       |    */
16792|       |    size_type size() const noexcept
16793|     33|    {
16794|     33|        switch (m_type)
16795|     33|        {
16796|     33|            case value_t::null:
16797|     13|            {
16798|     13|                // null values are empty
16799|     13|                return 0;
16800|     33|            }
16801|     33|
16802|     33|            case value_t::array:
16803|     20|            {
16804|     20|                // delegate call to array_t::size()
16805|     20|                return m_value.array->size();
16806|     33|            }
16807|     33|
16808|     33|            case value_t::object:
16809|      0|            {
16810|      0|                // delegate call to object_t::size()
16811|      0|                return m_value.object->size();
16812|     33|            }
16813|     33|
16814|     33|            default:
16815|      0|            {
16816|      0|                // all other types have size 1
16817|      0|                return 1;
16818|      0|            }
16819|      0|        }
16820|      0|    }
16821|       |
16822|       |    /*!
16823|       |    @brief returns the maximum possible number of elements
16824|       |
16825|       |    Returns the maximum number of elements a JSON value is able to hold due to
16826|       |    system or library implementation limitations, i.e. `std::distance(begin(),
16827|       |    end())` for the JSON value.
16828|       |
16829|       |    @return The return value depends on the different types and is
16830|       |            defined as follows:
16831|       |            Value type  | return value
16832|       |            ----------- | -------------
16833|       |            null        | `0` (same as `size()`)
16834|       |            boolean     | `1` (same as `size()`)
16835|       |            string      | `1` (same as `size()`)
16836|       |            number      | `1` (same as `size()`)
16837|       |            object      | result of function `object_t::max_size()`
16838|       |            array       | result of function `array_t::max_size()`
16839|       |
16840|       |    @liveexample{The following code calls `max_size()` on the different value
16841|       |    types. Note the output is implementation specific.,max_size}
16842|       |
16843|       |    @complexity Constant, as long as @ref array_t and @ref object_t satisfy
16844|       |    the Container concept; that is, their `max_size()` functions have constant
16845|       |    complexity.
16846|       |
16847|       |    @iterators No changes.
16848|       |
16849|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
16850|       |
16851|       |    @requirement This function helps `basic_json` satisfying the
16852|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
16853|       |    requirements:
16854|       |    - The complexity is constant.
16855|       |    - Has the semantics of returning `b.size()` where `b` is the largest
16856|       |      possible JSON value.
16857|       |
16858|       |    @sa @ref size() -- returns the number of elements
16859|       |
16860|       |    @since version 1.0.0
16861|       |    */
16862|       |    size_type max_size() const noexcept
16863|      0|    {
16864|      0|        switch (m_type)
16865|      0|        {
16866|      0|            case value_t::array:
16867|      0|            {
16868|      0|                // delegate call to array_t::max_size()
16869|      0|                return m_value.array->max_size();
16870|      0|            }
16871|      0|
16872|      0|            case value_t::object:
16873|      0|            {
16874|      0|                // delegate call to object_t::max_size()
16875|      0|                return m_value.object->max_size();
16876|      0|            }
16877|      0|
16878|      0|            default:
16879|      0|            {
16880|      0|                // all other types have max_size() == size()
16881|      0|                return size();
16882|      0|            }
16883|      0|        }
16884|      0|    }
16885|       |
16886|       |    /// @}
16887|       |
16888|       |
16889|       |    ///////////////
16890|       |    // modifiers //
16891|       |    ///////////////
16892|       |
16893|       |    /// @name modifiers
16894|       |    /// @{
16895|       |
16896|       |    /*!
16897|       |    @brief clears the contents
16898|       |
16899|       |    Clears the content of a JSON value and resets it to the default value as
16900|       |    if @ref basic_json(value_t) would have been called with the current value
16901|       |    type from @ref type():
16902|       |
16903|       |    Value type  | initial value
16904|       |    ----------- | -------------
16905|       |    null        | `null`
16906|       |    boolean     | `false`
16907|       |    string      | `""`
16908|       |    number      | `0`
16909|       |    object      | `{}`
16910|       |    array       | `[]`
16911|       |
16912|       |    @post Has the same effect as calling
16913|       |    @code {.cpp}
16914|       |    *this = basic_json(type());
16915|       |    @endcode
16916|       |
16917|       |    @liveexample{The example below shows the effect of `clear()` to different
16918|       |    JSON types.,clear}
16919|       |
16920|       |    @complexity Linear in the size of the JSON value.
16921|       |
16922|       |    @iterators All iterators, pointers and references related to this container
16923|       |               are invalidated.
16924|       |
16925|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
16926|       |
16927|       |    @sa @ref basic_json(value_t) -- constructor that creates an object with the
16928|       |        same value than calling `clear()`
16929|       |
16930|       |    @since version 1.0.0
16931|       |    */
16932|       |    void clear() noexcept
16933|       |    {
16934|       |        switch (m_type)
16935|       |        {
16936|       |            case value_t::number_integer:
16937|       |            {
16938|       |                m_value.number_integer = 0;
16939|       |                break;
16940|       |            }
16941|       |
16942|       |            case value_t::number_unsigned:
16943|       |            {
16944|       |                m_value.number_unsigned = 0;
16945|       |                break;
16946|       |            }
16947|       |
16948|       |            case value_t::number_float:
16949|       |            {
16950|       |                m_value.number_float = 0.0;
16951|       |                break;
16952|       |            }
16953|       |
16954|       |            case value_t::boolean:
16955|       |            {
16956|       |                m_value.boolean = false;
16957|       |                break;
16958|       |            }
16959|       |
16960|       |            case value_t::string:
16961|       |            {
16962|       |                m_value.string->clear();
16963|       |                break;
16964|       |            }
16965|       |
16966|       |            case value_t::array:
16967|       |            {
16968|       |                m_value.array->clear();
16969|       |                break;
16970|       |            }
16971|       |
16972|       |            case value_t::object:
16973|       |            {
16974|       |                m_value.object->clear();
16975|       |                break;
16976|       |            }
16977|       |
16978|       |            default:
16979|       |                break;
16980|       |        }
16981|       |    }
16982|       |
16983|       |    /*!
16984|       |    @brief add an object to an array
16985|       |
16986|       |    Appends the given element @a val to the end of the JSON value. If the
16987|       |    function is called on a JSON null value, an empty array is created before
16988|       |    appending @a val.
16989|       |
16990|       |    @param[in] val the value to add to the JSON array
16991|       |
16992|       |    @throw type_error.308 when called on a type other than JSON array or
16993|       |    null; example: `"cannot use push_back() with number"`
16994|       |
16995|       |    @complexity Amortized constant.
16996|       |
16997|       |    @liveexample{The example shows how `push_back()` and `+=` can be used to
16998|       |    add elements to a JSON array. Note how the `null` value was silently
16999|       |    converted to a JSON array.,push_back}
17000|       |
17001|       |    @since version 1.0.0
17002|       |    */
17003|       |    void push_back(basic_json&& val)
17004|       |    {
17005|       |        // push_back only works for null objects or arrays
17006|       |        if (JSON_UNLIKELY(not(is_null() or is_array())))
17007|       |        {
17008|       |            JSON_THROW(type_error::create(308, "cannot use push_back() with " + std::string(type_name())));
17009|       |        }
17010|       |
17011|       |        // transform null object into an array
17012|       |        if (is_null())
17013|       |        {
17014|       |            m_type = value_t::array;
17015|       |            m_value = value_t::array;
17016|       |            assert_invariant();
17017|       |        }
17018|       |
17019|       |        // add element to array (move semantics)
17020|       |        m_value.array->push_back(std::move(val));
17021|       |        // invalidate object
17022|       |        val.m_type = value_t::null;
17023|       |    }
17024|       |
17025|       |    /*!
17026|       |    @brief add an object to an array
17027|       |    @copydoc push_back(basic_json&&)
17028|       |    */
17029|       |    reference operator+=(basic_json&& val)
17030|       |    {
17031|       |        push_back(std::move(val));
17032|       |        return *this;
17033|       |    }
17034|       |
17035|       |    /*!
17036|       |    @brief add an object to an array
17037|       |    @copydoc push_back(basic_json&&)
17038|       |    */
17039|       |    void push_back(const basic_json& val)
17040|       |    {
17041|       |        // push_back only works for null objects or arrays
17042|       |        if (JSON_UNLIKELY(not(is_null() or is_array())))
17043|       |        {
17044|       |            JSON_THROW(type_error::create(308, "cannot use push_back() with " + std::string(type_name())));
17045|       |        }
17046|       |
17047|       |        // transform null object into an array
17048|       |        if (is_null())
17049|       |        {
17050|       |            m_type = value_t::array;
17051|       |            m_value = value_t::array;
17052|       |            assert_invariant();
17053|       |        }
17054|       |
17055|       |        // add element to array
17056|       |        m_value.array->push_back(val);
17057|       |    }
17058|       |
17059|       |    /*!
17060|       |    @brief add an object to an array
17061|       |    @copydoc push_back(basic_json&&)
17062|       |    */
17063|       |    reference operator+=(const basic_json& val)
17064|       |    {
17065|       |        push_back(val);
17066|       |        return *this;
17067|       |    }
17068|       |
17069|       |    /*!
17070|       |    @brief add an object to an object
17071|       |
17072|       |    Inserts the given element @a val to the JSON object. If the function is
17073|       |    called on a JSON null value, an empty object is created before inserting
17074|       |    @a val.
17075|       |
17076|       |    @param[in] val the value to add to the JSON object
17077|       |
17078|       |    @throw type_error.308 when called on a type other than JSON object or
17079|       |    null; example: `"cannot use push_back() with number"`
17080|       |
17081|       |    @complexity Logarithmic in the size of the container, O(log(`size()`)).
17082|       |
17083|       |    @liveexample{The example shows how `push_back()` and `+=` can be used to
17084|       |    add elements to a JSON object. Note how the `null` value was silently
17085|       |    converted to a JSON object.,push_back__object_t__value}
17086|       |
17087|       |    @since version 1.0.0
17088|       |    */
17089|       |    void push_back(const typename object_t::value_type& val)
17090|       |    {
17091|       |        // push_back only works for null objects or objects
17092|       |        if (JSON_UNLIKELY(not(is_null() or is_object())))
17093|       |        {
17094|       |            JSON_THROW(type_error::create(308, "cannot use push_back() with " + std::string(type_name())));
17095|       |        }
17096|       |
17097|       |        // transform null object into an object
17098|       |        if (is_null())
17099|       |        {
17100|       |            m_type = value_t::object;
17101|       |            m_value = value_t::object;
17102|       |            assert_invariant();
17103|       |        }
17104|       |
17105|       |        // add element to array
17106|       |        m_value.object->insert(val);
17107|       |    }
17108|       |
17109|       |    /*!
17110|       |    @brief add an object to an object
17111|       |    @copydoc push_back(const typename object_t::value_type&)
17112|       |    */
17113|       |    reference operator+=(const typename object_t::value_type& val)
17114|       |    {
17115|       |        push_back(val);
17116|       |        return *this;
17117|       |    }
17118|       |
17119|       |    /*!
17120|       |    @brief add an object to an object
17121|       |
17122|       |    This function allows to use `push_back` with an initializer list. In case
17123|       |
17124|       |    1. the current value is an object,
17125|       |    2. the initializer list @a init contains only two elements, and
17126|       |    3. the first element of @a init is a string,
17127|       |
17128|       |    @a init is converted into an object element and added using
17129|       |    @ref push_back(const typename object_t::value_type&). Otherwise, @a init
17130|       |    is converted to a JSON value and added using @ref push_back(basic_json&&).
17131|       |
17132|       |    @param[in] init  an initializer list
17133|       |
17134|       |    @complexity Linear in the size of the initializer list @a init.
17135|       |
17136|       |    @note This function is required to resolve an ambiguous overload error,
17137|       |          because pairs like `{"key", "value"}` can be both interpreted as
17138|       |          `object_t::value_type` or `std::initializer_list<basic_json>`, see
17139|       |          https://github.com/nlohmann/json/issues/235 for more information.
17140|       |
17141|       |    @liveexample{The example shows how initializer lists are treated as
17142|       |    objects when possible.,push_back__initializer_list}
17143|       |    */
17144|       |    void push_back(initializer_list_t init)
17145|       |    {
17146|       |        if (is_object() and init.size() == 2 and (*init.begin())->is_string())
17147|       |        {
17148|       |            basic_json&& key = init.begin()->moved_or_copied();
17149|       |            push_back(typename object_t::value_type(
17150|       |                          std::move(key.get_ref<string_t&>()), (init.begin() + 1)->moved_or_copied()));
17151|       |        }
17152|       |        else
17153|       |        {
17154|       |            push_back(basic_json(init));
17155|       |        }
17156|       |    }
17157|       |
17158|       |    /*!
17159|       |    @brief add an object to an object
17160|       |    @copydoc push_back(initializer_list_t)
17161|       |    */
17162|       |    reference operator+=(initializer_list_t init)
17163|       |    {
17164|       |        push_back(init);
17165|       |        return *this;
17166|       |    }
17167|       |
17168|       |    /*!
17169|       |    @brief add an object to an array
17170|       |
17171|       |    Creates a JSON value from the passed parameters @a args to the end of the
17172|       |    JSON value. If the function is called on a JSON null value, an empty array
17173|       |    is created before appending the value created from @a args.
17174|       |
17175|       |    @param[in] args arguments to forward to a constructor of @ref basic_json
17176|       |    @tparam Args compatible types to create a @ref basic_json object
17177|       |
17178|       |    @throw type_error.311 when called on a type other than JSON array or
17179|       |    null; example: `"cannot use emplace_back() with number"`
17180|       |
17181|       |    @complexity Amortized constant.
17182|       |
17183|       |    @liveexample{The example shows how `push_back()` can be used to add
17184|       |    elements to a JSON array. Note how the `null` value was silently converted
17185|       |    to a JSON array.,emplace_back}
17186|       |
17187|       |    @since version 2.0.8
17188|       |    */
17189|       |    template<class... Args>
17190|       |    void emplace_back(Args&& ... args)
17191|       |    {
17192|       |        // emplace_back only works for null objects or arrays
17193|       |        if (JSON_UNLIKELY(not(is_null() or is_array())))
17194|       |        {
17195|       |            JSON_THROW(type_error::create(311, "cannot use emplace_back() with " + std::string(type_name())));
17196|       |        }
17197|       |
17198|       |        // transform null object into an array
17199|       |        if (is_null())
17200|       |        {
17201|       |            m_type = value_t::array;
17202|       |            m_value = value_t::array;
17203|       |            assert_invariant();
17204|       |        }
17205|       |
17206|       |        // add element to array (perfect forwarding)
17207|       |        m_value.array->emplace_back(std::forward<Args>(args)...);
17208|       |    }
17209|       |
17210|       |    /*!
17211|       |    @brief add an object to an object if key does not exist
17212|       |
17213|       |    Inserts a new element into a JSON object constructed in-place with the
17214|       |    given @a args if there is no element with the key in the container. If the
17215|       |    function is called on a JSON null value, an empty object is created before
17216|       |    appending the value created from @a args.
17217|       |
17218|       |    @param[in] args arguments to forward to a constructor of @ref basic_json
17219|       |    @tparam Args compatible types to create a @ref basic_json object
17220|       |
17221|       |    @return a pair consisting of an iterator to the inserted element, or the
17222|       |            already-existing element if no insertion happened, and a bool
17223|       |            denoting whether the insertion took place.
17224|       |
17225|       |    @throw type_error.311 when called on a type other than JSON object or
17226|       |    null; example: `"cannot use emplace() with number"`
17227|       |
17228|       |    @complexity Logarithmic in the size of the container, O(log(`size()`)).
17229|       |
17230|       |    @liveexample{The example shows how `emplace()` can be used to add elements
17231|       |    to a JSON object. Note how the `null` value was silently converted to a
17232|       |    JSON object. Further note how no value is added if there was already one
17233|       |    value stored with the same key.,emplace}
17234|       |
17235|       |    @since version 2.0.8
17236|       |    */
17237|       |    template<class... Args>
17238|       |    std::pair<iterator, bool> emplace(Args&& ... args)
17239|       |    {
17240|       |        // emplace only works for null objects or arrays
17241|       |        if (JSON_UNLIKELY(not(is_null() or is_object())))
17242|       |        {
17243|       |            JSON_THROW(type_error::create(311, "cannot use emplace() with " + std::string(type_name())));
17244|       |        }
17245|       |
17246|       |        // transform null object into an object
17247|       |        if (is_null())
17248|       |        {
17249|       |            m_type = value_t::object;
17250|       |            m_value = value_t::object;
17251|       |            assert_invariant();
17252|       |        }
17253|       |
17254|       |        // add element to array (perfect forwarding)
17255|       |        auto res = m_value.object->emplace(std::forward<Args>(args)...);
17256|       |        // create result iterator and set iterator to the result of emplace
17257|       |        auto it = begin();
17258|       |        it.m_it.object_iterator = res.first;
17259|       |
17260|       |        // return pair of iterator and boolean
17261|       |        return {it, res.second};
17262|       |    }
17263|       |
17264|       |    /// Helper for insertion of an iterator
17265|       |    /// @note: This uses std::distance to support GCC 4.8,
17266|       |    ///        see https://github.com/nlohmann/json/pull/1257
17267|       |    template<typename... Args>
17268|       |    iterator insert_iterator(const_iterator pos, Args&& ... args)
17269|       |    {
17270|       |        iterator result(this);
17271|       |        assert(m_value.array != nullptr);
17272|       |
17273|       |        auto insert_pos = std::distance(m_value.array->begin(), pos.m_it.array_iterator);
17274|       |        m_value.array->insert(pos.m_it.array_iterator, std::forward<Args>(args)...);
17275|       |        result.m_it.array_iterator = m_value.array->begin() + insert_pos;
17276|       |
17277|       |        // This could have been written as:
17278|       |        // result.m_it.array_iterator = m_value.array->insert(pos.m_it.array_iterator, cnt, val);
17279|       |        // but the return value of insert is missing in GCC 4.8, so it is written this way instead.
17280|       |
17281|       |        return result;
17282|       |    }
17283|       |
17284|       |    /*!
17285|       |    @brief inserts element
17286|       |
17287|       |    Inserts element @a val before iterator @a pos.
17288|       |
17289|       |    @param[in] pos iterator before which the content will be inserted; may be
17290|       |    the end() iterator
17291|       |    @param[in] val element to insert
17292|       |    @return iterator pointing to the inserted @a val.
17293|       |
17294|       |    @throw type_error.309 if called on JSON values other than arrays;
17295|       |    example: `"cannot use insert() with string"`
17296|       |    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
17297|       |    example: `"iterator does not fit current value"`
17298|       |
17299|       |    @complexity Constant plus linear in the distance between @a pos and end of
17300|       |    the container.
17301|       |
17302|       |    @liveexample{The example shows how `insert()` is used.,insert}
17303|       |
17304|       |    @since version 1.0.0
17305|       |    */
17306|       |    iterator insert(const_iterator pos, const basic_json& val)
17307|       |    {
17308|       |        // insert only works for arrays
17309|       |        if (JSON_LIKELY(is_array()))
17310|       |        {
17311|       |            // check if iterator pos fits to this JSON value
17312|       |            if (JSON_UNLIKELY(pos.m_object != this))
17313|       |            {
17314|       |                JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value"));
17315|       |            }
17316|       |
17317|       |            // insert to array and return iterator
17318|       |            return insert_iterator(pos, val);
17319|       |        }
17320|       |
17321|       |        JSON_THROW(type_error::create(309, "cannot use insert() with " + std::string(type_name())));
17322|       |    }
17323|       |
17324|       |    /*!
17325|       |    @brief inserts element
17326|       |    @copydoc insert(const_iterator, const basic_json&)
17327|       |    */
17328|       |    iterator insert(const_iterator pos, basic_json&& val)
17329|       |    {
17330|       |        return insert(pos, val);
17331|       |    }
17332|       |
17333|       |    /*!
17334|       |    @brief inserts elements
17335|       |
17336|       |    Inserts @a cnt copies of @a val before iterator @a pos.
17337|       |
17338|       |    @param[in] pos iterator before which the content will be inserted; may be
17339|       |    the end() iterator
17340|       |    @param[in] cnt number of copies of @a val to insert
17341|       |    @param[in] val element to insert
17342|       |    @return iterator pointing to the first element inserted, or @a pos if
17343|       |    `cnt==0`
17344|       |
17345|       |    @throw type_error.309 if called on JSON values other than arrays; example:
17346|       |    `"cannot use insert() with string"`
17347|       |    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
17348|       |    example: `"iterator does not fit current value"`
17349|       |
17350|       |    @complexity Linear in @a cnt plus linear in the distance between @a pos
17351|       |    and end of the container.
17352|       |
17353|       |    @liveexample{The example shows how `insert()` is used.,insert__count}
17354|       |
17355|       |    @since version 1.0.0
17356|       |    */
17357|       |    iterator insert(const_iterator pos, size_type cnt, const basic_json& val)
17358|       |    {
17359|       |        // insert only works for arrays
17360|       |        if (JSON_LIKELY(is_array()))
17361|       |        {
17362|       |            // check if iterator pos fits to this JSON value
17363|       |            if (JSON_UNLIKELY(pos.m_object != this))
17364|       |            {
17365|       |                JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value"));
17366|       |            }
17367|       |
17368|       |            // insert to array and return iterator
17369|       |            return insert_iterator(pos, cnt, val);
17370|       |        }
17371|       |
17372|       |        JSON_THROW(type_error::create(309, "cannot use insert() with " + std::string(type_name())));
17373|       |    }
17374|       |
17375|       |    /*!
17376|       |    @brief inserts elements
17377|       |
17378|       |    Inserts elements from range `[first, last)` before iterator @a pos.
17379|       |
17380|       |    @param[in] pos iterator before which the content will be inserted; may be
17381|       |    the end() iterator
17382|       |    @param[in] first begin of the range of elements to insert
17383|       |    @param[in] last end of the range of elements to insert
17384|       |
17385|       |    @throw type_error.309 if called on JSON values other than arrays; example:
17386|       |    `"cannot use insert() with string"`
17387|       |    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
17388|       |    example: `"iterator does not fit current value"`
17389|       |    @throw invalid_iterator.210 if @a first and @a last do not belong to the
17390|       |    same JSON value; example: `"iterators do not fit"`
17391|       |    @throw invalid_iterator.211 if @a first or @a last are iterators into
17392|       |    container for which insert is called; example: `"passed iterators may not
17393|       |    belong to container"`
17394|       |
17395|       |    @return iterator pointing to the first element inserted, or @a pos if
17396|       |    `first==last`
17397|       |
17398|       |    @complexity Linear in `std::distance(first, last)` plus linear in the
17399|       |    distance between @a pos and end of the container.
17400|       |
17401|       |    @liveexample{The example shows how `insert()` is used.,insert__range}
17402|       |
17403|       |    @since version 1.0.0
17404|       |    */
17405|       |    iterator insert(const_iterator pos, const_iterator first, const_iterator last)
17406|       |    {
17407|       |        // insert only works for arrays
17408|       |        if (JSON_UNLIKELY(not is_array()))
17409|       |        {
17410|       |            JSON_THROW(type_error::create(309, "cannot use insert() with " + std::string(type_name())));
17411|       |        }
17412|       |
17413|       |        // check if iterator pos fits to this JSON value
17414|       |        if (JSON_UNLIKELY(pos.m_object != this))
17415|       |        {
17416|       |            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value"));
17417|       |        }
17418|       |
17419|       |        // check if range iterators belong to the same JSON object
17420|       |        if (JSON_UNLIKELY(first.m_object != last.m_object))
17421|       |        {
17422|       |            JSON_THROW(invalid_iterator::create(210, "iterators do not fit"));
17423|       |        }
17424|       |
17425|       |        if (JSON_UNLIKELY(first.m_object == this))
17426|       |        {
17427|       |            JSON_THROW(invalid_iterator::create(211, "passed iterators may not belong to container"));
17428|       |        }
17429|       |
17430|       |        // insert to array and return iterator
17431|       |        return insert_iterator(pos, first.m_it.array_iterator, last.m_it.array_iterator);
17432|       |    }
17433|       |
17434|       |    /*!
17435|       |    @brief inserts elements
17436|       |
17437|       |    Inserts elements from initializer list @a ilist before iterator @a pos.
17438|       |
17439|       |    @param[in] pos iterator before which the content will be inserted; may be
17440|       |    the end() iterator
17441|       |    @param[in] ilist initializer list to insert the values from
17442|       |
17443|       |    @throw type_error.309 if called on JSON values other than arrays; example:
17444|       |    `"cannot use insert() with string"`
17445|       |    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
17446|       |    example: `"iterator does not fit current value"`
17447|       |
17448|       |    @return iterator pointing to the first element inserted, or @a pos if
17449|       |    `ilist` is empty
17450|       |
17451|       |    @complexity Linear in `ilist.size()` plus linear in the distance between
17452|       |    @a pos and end of the container.
17453|       |
17454|       |    @liveexample{The example shows how `insert()` is used.,insert__ilist}
17455|       |
17456|       |    @since version 1.0.0
17457|       |    */
17458|       |    iterator insert(const_iterator pos, initializer_list_t ilist)
17459|       |    {
17460|       |        // insert only works for arrays
17461|       |        if (JSON_UNLIKELY(not is_array()))
17462|       |        {
17463|       |            JSON_THROW(type_error::create(309, "cannot use insert() with " + std::string(type_name())));
17464|       |        }
17465|       |
17466|       |        // check if iterator pos fits to this JSON value
17467|       |        if (JSON_UNLIKELY(pos.m_object != this))
17468|       |        {
17469|       |            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value"));
17470|       |        }
17471|       |
17472|       |        // insert to array and return iterator
17473|       |        return insert_iterator(pos, ilist.begin(), ilist.end());
17474|       |    }
17475|       |
17476|       |    /*!
17477|       |    @brief inserts elements
17478|       |
17479|       |    Inserts elements from range `[first, last)`.
17480|       |
17481|       |    @param[in] first begin of the range of elements to insert
17482|       |    @param[in] last end of the range of elements to insert
17483|       |
17484|       |    @throw type_error.309 if called on JSON values other than objects; example:
17485|       |    `"cannot use insert() with string"`
17486|       |    @throw invalid_iterator.202 if iterator @a first or @a last does does not
17487|       |    point to an object; example: `"iterators first and last must point to
17488|       |    objects"`
17489|       |    @throw invalid_iterator.210 if @a first and @a last do not belong to the
17490|       |    same JSON value; example: `"iterators do not fit"`
17491|       |
17492|       |    @complexity Logarithmic: `O(N*log(size() + N))`, where `N` is the number
17493|       |    of elements to insert.
17494|       |
17495|       |    @liveexample{The example shows how `insert()` is used.,insert__range_object}
17496|       |
17497|       |    @since version 3.0.0
17498|       |    */
17499|       |    void insert(const_iterator first, const_iterator last)
17500|       |    {
17501|       |        // insert only works for objects
17502|       |        if (JSON_UNLIKELY(not is_object()))
17503|       |        {
17504|       |            JSON_THROW(type_error::create(309, "cannot use insert() with " + std::string(type_name())));
17505|       |        }
17506|       |
17507|       |        // check if range iterators belong to the same JSON object
17508|       |        if (JSON_UNLIKELY(first.m_object != last.m_object))
17509|       |        {
17510|       |            JSON_THROW(invalid_iterator::create(210, "iterators do not fit"));
17511|       |        }
17512|       |
17513|       |        // passed iterators must belong to objects
17514|       |        if (JSON_UNLIKELY(not first.m_object->is_object()))
17515|       |        {
17516|       |            JSON_THROW(invalid_iterator::create(202, "iterators first and last must point to objects"));
17517|       |        }
17518|       |
17519|       |        m_value.object->insert(first.m_it.object_iterator, last.m_it.object_iterator);
17520|       |    }
17521|       |
17522|       |    /*!
17523|       |    @brief updates a JSON object from another object, overwriting existing keys
17524|       |
17525|       |    Inserts all values from JSON object @a j and overwrites existing keys.
17526|       |
17527|       |    @param[in] j  JSON object to read values from
17528|       |
17529|       |    @throw type_error.312 if called on JSON values other than objects; example:
17530|       |    `"cannot use update() with string"`
17531|       |
17532|       |    @complexity O(N*log(size() + N)), where N is the number of elements to
17533|       |                insert.
17534|       |
17535|       |    @liveexample{The example shows how `update()` is used.,update}
17536|       |
17537|       |    @sa https://docs.python.org/3.6/library/stdtypes.html#dict.update
17538|       |
17539|       |    @since version 3.0.0
17540|       |    */
17541|       |    void update(const_reference j)
17542|       |    {
17543|       |        // implicitly convert null value to an empty object
17544|       |        if (is_null())
17545|       |        {
17546|       |            m_type = value_t::object;
17547|       |            m_value.object = create<object_t>();
17548|       |            assert_invariant();
17549|       |        }
17550|       |
17551|       |        if (JSON_UNLIKELY(not is_object()))
17552|       |        {
17553|       |            JSON_THROW(type_error::create(312, "cannot use update() with " + std::string(type_name())));
17554|       |        }
17555|       |        if (JSON_UNLIKELY(not j.is_object()))
17556|       |        {
17557|       |            JSON_THROW(type_error::create(312, "cannot use update() with " + std::string(j.type_name())));
17558|       |        }
17559|       |
17560|       |        for (auto it = j.cbegin(); it != j.cend(); ++it)
17561|       |        {
17562|       |            m_value.object->operator[](it.key()) = it.value();
17563|       |        }
17564|       |    }
17565|       |
17566|       |    /*!
17567|       |    @brief updates a JSON object from another object, overwriting existing keys
17568|       |
17569|       |    Inserts all values from from range `[first, last)` and overwrites existing
17570|       |    keys.
17571|       |
17572|       |    @param[in] first begin of the range of elements to insert
17573|       |    @param[in] last end of the range of elements to insert
17574|       |
17575|       |    @throw type_error.312 if called on JSON values other than objects; example:
17576|       |    `"cannot use update() with string"`
17577|       |    @throw invalid_iterator.202 if iterator @a first or @a last does does not
17578|       |    point to an object; example: `"iterators first and last must point to
17579|       |    objects"`
17580|       |    @throw invalid_iterator.210 if @a first and @a last do not belong to the
17581|       |    same JSON value; example: `"iterators do not fit"`
17582|       |
17583|       |    @complexity O(N*log(size() + N)), where N is the number of elements to
17584|       |                insert.
17585|       |
17586|       |    @liveexample{The example shows how `update()` is used__range.,update}
17587|       |
17588|       |    @sa https://docs.python.org/3.6/library/stdtypes.html#dict.update
17589|       |
17590|       |    @since version 3.0.0
17591|       |    */
17592|       |    void update(const_iterator first, const_iterator last)
17593|       |    {
17594|       |        // implicitly convert null value to an empty object
17595|       |        if (is_null())
17596|       |        {
17597|       |            m_type = value_t::object;
17598|       |            m_value.object = create<object_t>();
17599|       |            assert_invariant();
17600|       |        }
17601|       |
17602|       |        if (JSON_UNLIKELY(not is_object()))
17603|       |        {
17604|       |            JSON_THROW(type_error::create(312, "cannot use update() with " + std::string(type_name())));
17605|       |        }
17606|       |
17607|       |        // check if range iterators belong to the same JSON object
17608|       |        if (JSON_UNLIKELY(first.m_object != last.m_object))
17609|       |        {
17610|       |            JSON_THROW(invalid_iterator::create(210, "iterators do not fit"));
17611|       |        }
17612|       |
17613|       |        // passed iterators must belong to objects
17614|       |        if (JSON_UNLIKELY(not first.m_object->is_object()
17615|       |                          or not last.m_object->is_object()))
17616|       |        {
17617|       |            JSON_THROW(invalid_iterator::create(202, "iterators first and last must point to objects"));
17618|       |        }
17619|       |
17620|       |        for (auto it = first; it != last; ++it)
17621|       |        {
17622|       |            m_value.object->operator[](it.key()) = it.value();
17623|       |        }
17624|       |    }
17625|       |
17626|       |    /*!
17627|       |    @brief exchanges the values
17628|       |
17629|       |    Exchanges the contents of the JSON value with those of @a other. Does not
17630|       |    invoke any move, copy, or swap operations on individual elements. All
17631|       |    iterators and references remain valid. The past-the-end iterator is
17632|       |    invalidated.
17633|       |
17634|       |    @param[in,out] other JSON value to exchange the contents with
17635|       |
17636|       |    @complexity Constant.
17637|       |
17638|       |    @liveexample{The example below shows how JSON values can be swapped with
17639|       |    `swap()`.,swap__reference}
17640|       |
17641|       |    @since version 1.0.0
17642|       |    */
17643|       |    void swap(reference other) noexcept (
17644|       |        std::is_nothrow_move_constructible<value_t>::value and
17645|       |        std::is_nothrow_move_assignable<value_t>::value and
17646|       |        std::is_nothrow_move_constructible<json_value>::value and
17647|       |        std::is_nothrow_move_assignable<json_value>::value
17648|       |    )
17649|      0|    {
17650|      0|        std::swap(m_type, other.m_type);
17651|      0|        std::swap(m_value, other.m_value);
17652|      0|        assert_invariant();
17653|      0|    }
17654|       |
17655|       |    /*!
17656|       |    @brief exchanges the values
17657|       |
17658|       |    Exchanges the contents of a JSON array with those of @a other. Does not
17659|       |    invoke any move, copy, or swap operations on individual elements. All
17660|       |    iterators and references remain valid. The past-the-end iterator is
17661|       |    invalidated.
17662|       |
17663|       |    @param[in,out] other array to exchange the contents with
17664|       |
17665|       |    @throw type_error.310 when JSON value is not an array; example: `"cannot
17666|       |    use swap() with string"`
17667|       |
17668|       |    @complexity Constant.
17669|       |
17670|       |    @liveexample{The example below shows how arrays can be swapped with
17671|       |    `swap()`.,swap__array_t}
17672|       |
17673|       |    @since version 1.0.0
17674|       |    */
17675|       |    void swap(array_t& other)
17676|       |    {
17677|       |        // swap only works for arrays
17678|       |        if (JSON_LIKELY(is_array()))
17679|       |        {
17680|       |            std::swap(*(m_value.array), other);
17681|       |        }
17682|       |        else
17683|       |        {
17684|       |            JSON_THROW(type_error::create(310, "cannot use swap() with " + std::string(type_name())));
17685|       |        }
17686|       |    }
17687|       |
17688|       |    /*!
17689|       |    @brief exchanges the values
17690|       |
17691|       |    Exchanges the contents of a JSON object with those of @a other. Does not
17692|       |    invoke any move, copy, or swap operations on individual elements. All
17693|       |    iterators and references remain valid. The past-the-end iterator is
17694|       |    invalidated.
17695|       |
17696|       |    @param[in,out] other object to exchange the contents with
17697|       |
17698|       |    @throw type_error.310 when JSON value is not an object; example:
17699|       |    `"cannot use swap() with string"`
17700|       |
17701|       |    @complexity Constant.
17702|       |
17703|       |    @liveexample{The example below shows how objects can be swapped with
17704|       |    `swap()`.,swap__object_t}
17705|       |
17706|       |    @since version 1.0.0
17707|       |    */
17708|       |    void swap(object_t& other)
17709|       |    {
17710|       |        // swap only works for objects
17711|       |        if (JSON_LIKELY(is_object()))
17712|       |        {
17713|       |            std::swap(*(m_value.object), other);
17714|       |        }
17715|       |        else
17716|       |        {
17717|       |            JSON_THROW(type_error::create(310, "cannot use swap() with " + std::string(type_name())));
17718|       |        }
17719|       |    }
17720|       |
17721|       |    /*!
17722|       |    @brief exchanges the values
17723|       |
17724|       |    Exchanges the contents of a JSON string with those of @a other. Does not
17725|       |    invoke any move, copy, or swap operations on individual elements. All
17726|       |    iterators and references remain valid. The past-the-end iterator is
17727|       |    invalidated.
17728|       |
17729|       |    @param[in,out] other string to exchange the contents with
17730|       |
17731|       |    @throw type_error.310 when JSON value is not a string; example: `"cannot
17732|       |    use swap() with boolean"`
17733|       |
17734|       |    @complexity Constant.
17735|       |
17736|       |    @liveexample{The example below shows how strings can be swapped with
17737|       |    `swap()`.,swap__string_t}
17738|       |
17739|       |    @since version 1.0.0
17740|       |    */
17741|       |    void swap(string_t& other)
17742|       |    {
17743|       |        // swap only works for strings
17744|       |        if (JSON_LIKELY(is_string()))
17745|       |        {
17746|       |            std::swap(*(m_value.string), other);
17747|       |        }
17748|       |        else
17749|       |        {
17750|       |            JSON_THROW(type_error::create(310, "cannot use swap() with " + std::string(type_name())));
17751|       |        }
17752|       |    }
17753|       |
17754|       |    /// @}
17755|       |
17756|       |  public:
17757|       |    //////////////////////////////////////////
17758|       |    // lexicographical comparison operators //
17759|       |    //////////////////////////////////////////
17760|       |
17761|       |    /// @name lexicographical comparison operators
17762|       |    /// @{
17763|       |
17764|       |    /*!
17765|       |    @brief comparison: equal
17766|       |
17767|       |    Compares two JSON values for equality according to the following rules:
17768|       |    - Two JSON values are equal if (1) they are from the same type and (2)
17769|       |      their stored values are the same according to their respective
17770|       |      `operator==`.
17771|       |    - Integer and floating-point numbers are automatically converted before
17772|       |      comparison. Note than two NaN values are always treated as unequal.
17773|       |    - Two JSON null values are equal.
17774|       |
17775|       |    @note Floating-point inside JSON values numbers are compared with
17776|       |    `json::number_float_t::operator==` which is `double::operator==` by
17777|       |    default. To compare floating-point while respecting an epsilon, an alternative
17778|       |    [comparison function](https://github.com/mariokonrad/marnav/blob/master/src/marnav/math/floatingpoint.hpp#L34-#L39)
17779|       |    could be used, for instance
17780|       |    @code {.cpp}
17781|       |    template<typename T, typename = typename std::enable_if<std::is_floating_point<T>::value, T>::type>
17782|       |    inline bool is_same(T a, T b, T epsilon = std::numeric_limits<T>::epsilon()) noexcept
17783|       |    {
17784|       |        return std::abs(a - b) <= epsilon;
17785|       |    }
17786|       |    @endcode
17787|       |
17788|       |    @note NaN values never compare equal to themselves or to other NaN values.
17789|       |
17790|       |    @param[in] lhs  first JSON value to consider
17791|       |    @param[in] rhs  second JSON value to consider
17792|       |    @return whether the values @a lhs and @a rhs are equal
17793|       |
17794|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
17795|       |
17796|       |    @complexity Linear.
17797|       |
17798|       |    @liveexample{The example demonstrates comparing several JSON
17799|       |    types.,operator__equal}
17800|       |
17801|       |    @since version 1.0.0
17802|       |    */
17803|       |    friend bool operator==(const_reference lhs, const_reference rhs) noexcept
17804|     20|    {
17805|     20|        const auto lhs_type = lhs.type();
17806|     20|        const auto rhs_type = rhs.type();
17807|     20|
17808|     20|        if (lhs_type == rhs_type)
17809|     20|        {
17810|     20|            switch (lhs_type)
17811|     20|            {
17812|     20|                case value_t::array:
17813|      0|                    return (*lhs.m_value.array == *rhs.m_value.array);
17814|     20|
17815|     20|                case value_t::object:
17816|      0|                    return (*lhs.m_value.object == *rhs.m_value.object);
17817|     20|
17818|     20|                case value_t::null:
17819|      0|                    return true;
17820|     20|
17821|     20|                case value_t::string:
17822|     20|                    return (*lhs.m_value.string == *rhs.m_value.string);
17823|     20|
17824|     20|                case value_t::boolean:
17825|      0|                    return (lhs.m_value.boolean == rhs.m_value.boolean);
17826|     20|
17827|     20|                case value_t::number_integer:
17828|      0|                    return (lhs.m_value.number_integer == rhs.m_value.number_integer);
17829|     20|
17830|     20|                case value_t::number_unsigned:
17831|      0|                    return (lhs.m_value.number_unsigned == rhs.m_value.number_unsigned);
17832|     20|
17833|     20|                case value_t::number_float:
17834|      0|                    return (lhs.m_value.number_float == rhs.m_value.number_float);
17835|     20|
17836|     20|                default:
17837|      0|                    return false;
17838|      0|            }
17839|      0|        }
17840|      0|        else if (lhs_type == value_t::number_integer and rhs_type == value_t::number_float)
17841|      0|        {
17842|      0|            return (static_cast<number_float_t>(lhs.m_value.number_integer) == rhs.m_value.number_float);
17843|      0|        }
17844|      0|        else if (lhs_type == value_t::number_float and rhs_type == value_t::number_integer)
17845|      0|        {
17846|      0|            return (lhs.m_value.number_float == static_cast<number_float_t>(rhs.m_value.number_integer));
17847|      0|        }
17848|      0|        else if (lhs_type == value_t::number_unsigned and rhs_type == value_t::number_float)
17849|      0|        {
17850|      0|            return (static_cast<number_float_t>(lhs.m_value.number_unsigned) == rhs.m_value.number_float);
17851|      0|        }
17852|      0|        else if (lhs_type == value_t::number_float and rhs_type == value_t::number_unsigned)
17853|      0|        {
17854|      0|            return (lhs.m_value.number_float == static_cast<number_float_t>(rhs.m_value.number_unsigned));
17855|      0|        }
17856|      0|        else if (lhs_type == value_t::number_unsigned and rhs_type == value_t::number_integer)
17857|      0|        {
17858|      0|            return (static_cast<number_integer_t>(lhs.m_value.number_unsigned) == rhs.m_value.number_integer);
17859|      0|        }
17860|      0|        else if (lhs_type == value_t::number_integer and rhs_type == value_t::number_unsigned)
17861|      0|        {
17862|      0|            return (lhs.m_value.number_integer == static_cast<number_integer_t>(rhs.m_value.number_unsigned));
17863|      0|        }
17864|      0|
17865|      0|        return false;
17866|      0|    }
17867|       |
17868|       |    /*!
17869|       |    @brief comparison: equal
17870|       |    @copydoc operator==(const_reference, const_reference)
17871|       |    */
17872|       |    template<typename ScalarType, typename std::enable_if<
17873|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
17874|       |    friend bool operator==(const_reference lhs, const ScalarType rhs) noexcept
17875|     20|    {
17876|     20|        return (lhs == basic_json(rhs));
17877|     20|    }
17878|       |
17879|       |    /*!
17880|       |    @brief comparison: equal
17881|       |    @copydoc operator==(const_reference, const_reference)
17882|       |    */
17883|       |    template<typename ScalarType, typename std::enable_if<
17884|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
17885|       |    friend bool operator==(const ScalarType lhs, const_reference rhs) noexcept
17886|       |    {
17887|       |        return (basic_json(lhs) == rhs);
17888|       |    }
17889|       |
17890|       |    /*!
17891|       |    @brief comparison: not equal
17892|       |
17893|       |    Compares two JSON values for inequality by calculating `not (lhs == rhs)`.
17894|       |
17895|       |    @param[in] lhs  first JSON value to consider
17896|       |    @param[in] rhs  second JSON value to consider
17897|       |    @return whether the values @a lhs and @a rhs are not equal
17898|       |
17899|       |    @complexity Linear.
17900|       |
17901|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
17902|       |
17903|       |    @liveexample{The example demonstrates comparing several JSON
17904|       |    types.,operator__notequal}
17905|       |
17906|       |    @since version 1.0.0
17907|       |    */
17908|       |    friend bool operator!=(const_reference lhs, const_reference rhs) noexcept
17909|       |    {
17910|       |        return not (lhs == rhs);
17911|       |    }
17912|       |
17913|       |    /*!
17914|       |    @brief comparison: not equal
17915|       |    @copydoc operator!=(const_reference, const_reference)
17916|       |    */
17917|       |    template<typename ScalarType, typename std::enable_if<
17918|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
17919|       |    friend bool operator!=(const_reference lhs, const ScalarType rhs) noexcept
17920|       |    {
17921|       |        return (lhs != basic_json(rhs));
17922|       |    }
17923|       |
17924|       |    /*!
17925|       |    @brief comparison: not equal
17926|       |    @copydoc operator!=(const_reference, const_reference)
17927|       |    */
17928|       |    template<typename ScalarType, typename std::enable_if<
17929|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
17930|       |    friend bool operator!=(const ScalarType lhs, const_reference rhs) noexcept
17931|       |    {
17932|       |        return (basic_json(lhs) != rhs);
17933|       |    }
17934|       |
17935|       |    /*!
17936|       |    @brief comparison: less than
17937|       |
17938|       |    Compares whether one JSON value @a lhs is less than another JSON value @a
17939|       |    rhs according to the following rules:
17940|       |    - If @a lhs and @a rhs have the same type, the values are compared using
17941|       |      the default `<` operator.
17942|       |    - Integer and floating-point numbers are automatically converted before
17943|       |      comparison
17944|       |    - In case @a lhs and @a rhs have different types, the values are ignored
17945|       |      and the order of the types is considered, see
17946|       |      @ref operator<(const value_t, const value_t).
17947|       |
17948|       |    @param[in] lhs  first JSON value to consider
17949|       |    @param[in] rhs  second JSON value to consider
17950|       |    @return whether @a lhs is less than @a rhs
17951|       |
17952|       |    @complexity Linear.
17953|       |
17954|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
17955|       |
17956|       |    @liveexample{The example demonstrates comparing several JSON
17957|       |    types.,operator__less}
17958|       |
17959|       |    @since version 1.0.0
17960|       |    */
17961|       |    friend bool operator<(const_reference lhs, const_reference rhs) noexcept
17962|       |    {
17963|       |        const auto lhs_type = lhs.type();
17964|       |        const auto rhs_type = rhs.type();
17965|       |
17966|       |        if (lhs_type == rhs_type)
17967|       |        {
17968|       |            switch (lhs_type)
17969|       |            {
17970|       |                case value_t::array:
17971|       |                    return (*lhs.m_value.array) < (*rhs.m_value.array);
17972|       |
17973|       |                case value_t::object:
17974|       |                    return *lhs.m_value.object < *rhs.m_value.object;
17975|       |
17976|       |                case value_t::null:
17977|       |                    return false;
17978|       |
17979|       |                case value_t::string:
17980|       |                    return *lhs.m_value.string < *rhs.m_value.string;
17981|       |
17982|       |                case value_t::boolean:
17983|       |                    return lhs.m_value.boolean < rhs.m_value.boolean;
17984|       |
17985|       |                case value_t::number_integer:
17986|       |                    return lhs.m_value.number_integer < rhs.m_value.number_integer;
17987|       |
17988|       |                case value_t::number_unsigned:
17989|       |                    return lhs.m_value.number_unsigned < rhs.m_value.number_unsigned;
17990|       |
17991|       |                case value_t::number_float:
17992|       |                    return lhs.m_value.number_float < rhs.m_value.number_float;
17993|       |
17994|       |                default:
17995|       |                    return false;
17996|       |            }
17997|       |        }
17998|       |        else if (lhs_type == value_t::number_integer and rhs_type == value_t::number_float)
17999|       |        {
18000|       |            return static_cast<number_float_t>(lhs.m_value.number_integer) < rhs.m_value.number_float;
18001|       |        }
18002|       |        else if (lhs_type == value_t::number_float and rhs_type == value_t::number_integer)
18003|       |        {
18004|       |            return lhs.m_value.number_float < static_cast<number_float_t>(rhs.m_value.number_integer);
18005|       |        }
18006|       |        else if (lhs_type == value_t::number_unsigned and rhs_type == value_t::number_float)
18007|       |        {
18008|       |            return static_cast<number_float_t>(lhs.m_value.number_unsigned) < rhs.m_value.number_float;
18009|       |        }
18010|       |        else if (lhs_type == value_t::number_float and rhs_type == value_t::number_unsigned)
18011|       |        {
18012|       |            return lhs.m_value.number_float < static_cast<number_float_t>(rhs.m_value.number_unsigned);
18013|       |        }
18014|       |        else if (lhs_type == value_t::number_integer and rhs_type == value_t::number_unsigned)
18015|       |        {
18016|       |            return lhs.m_value.number_integer < static_cast<number_integer_t>(rhs.m_value.number_unsigned);
18017|       |        }
18018|       |        else if (lhs_type == value_t::number_unsigned and rhs_type == value_t::number_integer)
18019|       |        {
18020|       |            return static_cast<number_integer_t>(lhs.m_value.number_unsigned) < rhs.m_value.number_integer;
18021|       |        }
18022|       |
18023|       |        // We only reach this line if we cannot compare values. In that case,
18024|       |        // we compare types. Note we have to call the operator explicitly,
18025|       |        // because MSVC has problems otherwise.
18026|       |        return operator<(lhs_type, rhs_type);
18027|       |    }
18028|       |
18029|       |    /*!
18030|       |    @brief comparison: less than
18031|       |    @copydoc operator<(const_reference, const_reference)
18032|       |    */
18033|       |    template<typename ScalarType, typename std::enable_if<
18034|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
18035|       |    friend bool operator<(const_reference lhs, const ScalarType rhs) noexcept
18036|       |    {
18037|       |        return (lhs < basic_json(rhs));
18038|       |    }
18039|       |
18040|       |    /*!
18041|       |    @brief comparison: less than
18042|       |    @copydoc operator<(const_reference, const_reference)
18043|       |    */
18044|       |    template<typename ScalarType, typename std::enable_if<
18045|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
18046|       |    friend bool operator<(const ScalarType lhs, const_reference rhs) noexcept
18047|       |    {
18048|       |        return (basic_json(lhs) < rhs);
18049|       |    }
18050|       |
18051|       |    /*!
18052|       |    @brief comparison: less than or equal
18053|       |
18054|       |    Compares whether one JSON value @a lhs is less than or equal to another
18055|       |    JSON value by calculating `not (rhs < lhs)`.
18056|       |
18057|       |    @param[in] lhs  first JSON value to consider
18058|       |    @param[in] rhs  second JSON value to consider
18059|       |    @return whether @a lhs is less than or equal to @a rhs
18060|       |
18061|       |    @complexity Linear.
18062|       |
18063|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
18064|       |
18065|       |    @liveexample{The example demonstrates comparing several JSON
18066|       |    types.,operator__greater}
18067|       |
18068|       |    @since version 1.0.0
18069|       |    */
18070|       |    friend bool operator<=(const_reference lhs, const_reference rhs) noexcept
18071|       |    {
18072|       |        return not (rhs < lhs);
18073|       |    }
18074|       |
18075|       |    /*!
18076|       |    @brief comparison: less than or equal
18077|       |    @copydoc operator<=(const_reference, const_reference)
18078|       |    */
18079|       |    template<typename ScalarType, typename std::enable_if<
18080|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
18081|       |    friend bool operator<=(const_reference lhs, const ScalarType rhs) noexcept
18082|       |    {
18083|       |        return (lhs <= basic_json(rhs));
18084|       |    }
18085|       |
18086|       |    /*!
18087|       |    @brief comparison: less than or equal
18088|       |    @copydoc operator<=(const_reference, const_reference)
18089|       |    */
18090|       |    template<typename ScalarType, typename std::enable_if<
18091|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
18092|       |    friend bool operator<=(const ScalarType lhs, const_reference rhs) noexcept
18093|       |    {
18094|       |        return (basic_json(lhs) <= rhs);
18095|       |    }
18096|       |
18097|       |    /*!
18098|       |    @brief comparison: greater than
18099|       |
18100|       |    Compares whether one JSON value @a lhs is greater than another
18101|       |    JSON value by calculating `not (lhs <= rhs)`.
18102|       |
18103|       |    @param[in] lhs  first JSON value to consider
18104|       |    @param[in] rhs  second JSON value to consider
18105|       |    @return whether @a lhs is greater than to @a rhs
18106|       |
18107|       |    @complexity Linear.
18108|       |
18109|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
18110|       |
18111|       |    @liveexample{The example demonstrates comparing several JSON
18112|       |    types.,operator__lessequal}
18113|       |
18114|       |    @since version 1.0.0
18115|       |    */
18116|       |    friend bool operator>(const_reference lhs, const_reference rhs) noexcept
18117|       |    {
18118|       |        return not (lhs <= rhs);
18119|       |    }
18120|       |
18121|       |    /*!
18122|       |    @brief comparison: greater than
18123|       |    @copydoc operator>(const_reference, const_reference)
18124|       |    */
18125|       |    template<typename ScalarType, typename std::enable_if<
18126|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
18127|       |    friend bool operator>(const_reference lhs, const ScalarType rhs) noexcept
18128|       |    {
18129|       |        return (lhs > basic_json(rhs));
18130|       |    }
18131|       |
18132|       |    /*!
18133|       |    @brief comparison: greater than
18134|       |    @copydoc operator>(const_reference, const_reference)
18135|       |    */
18136|       |    template<typename ScalarType, typename std::enable_if<
18137|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
18138|       |    friend bool operator>(const ScalarType lhs, const_reference rhs) noexcept
18139|       |    {
18140|       |        return (basic_json(lhs) > rhs);
18141|       |    }
18142|       |
18143|       |    /*!
18144|       |    @brief comparison: greater than or equal
18145|       |
18146|       |    Compares whether one JSON value @a lhs is greater than or equal to another
18147|       |    JSON value by calculating `not (lhs < rhs)`.
18148|       |
18149|       |    @param[in] lhs  first JSON value to consider
18150|       |    @param[in] rhs  second JSON value to consider
18151|       |    @return whether @a lhs is greater than or equal to @a rhs
18152|       |
18153|       |    @complexity Linear.
18154|       |
18155|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
18156|       |
18157|       |    @liveexample{The example demonstrates comparing several JSON
18158|       |    types.,operator__greaterequal}
18159|       |
18160|       |    @since version 1.0.0
18161|       |    */
18162|       |    friend bool operator>=(const_reference lhs, const_reference rhs) noexcept
18163|       |    {
18164|       |        return not (lhs < rhs);
18165|       |    }
18166|       |
18167|       |    /*!
18168|       |    @brief comparison: greater than or equal
18169|       |    @copydoc operator>=(const_reference, const_reference)
18170|       |    */
18171|       |    template<typename ScalarType, typename std::enable_if<
18172|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
18173|       |    friend bool operator>=(const_reference lhs, const ScalarType rhs) noexcept
18174|       |    {
18175|       |        return (lhs >= basic_json(rhs));
18176|       |    }
18177|       |
18178|       |    /*!
18179|       |    @brief comparison: greater than or equal
18180|       |    @copydoc operator>=(const_reference, const_reference)
18181|       |    */
18182|       |    template<typename ScalarType, typename std::enable_if<
18183|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
18184|       |    friend bool operator>=(const ScalarType lhs, const_reference rhs) noexcept
18185|       |    {
18186|       |        return (basic_json(lhs) >= rhs);
18187|       |    }
18188|       |
18189|       |    /// @}
18190|       |
18191|       |    ///////////////////
18192|       |    // serialization //
18193|       |    ///////////////////
18194|       |
18195|       |    /// @name serialization
18196|       |    /// @{
18197|       |
18198|       |    /*!
18199|       |    @brief serialize to stream
18200|       |
18201|       |    Serialize the given JSON value @a j to the output stream @a o. The JSON
18202|       |    value will be serialized using the @ref dump member function.
18203|       |
18204|       |    - The indentation of the output can be controlled with the member variable
18205|       |      `width` of the output stream @a o. For instance, using the manipulator
18206|       |      `std::setw(4)` on @a o sets the indentation level to `4` and the
18207|       |      serialization result is the same as calling `dump(4)`.
18208|       |
18209|       |    - The indentation character can be controlled with the member variable
18210|       |      `fill` of the output stream @a o. For instance, the manipulator
18211|       |      `std::setfill('\\t')` sets indentation to use a tab character rather than
18212|       |      the default space character.
18213|       |
18214|       |    @param[in,out] o  stream to serialize to
18215|       |    @param[in] j  JSON value to serialize
18216|       |
18217|       |    @return the stream @a o
18218|       |
18219|       |    @throw type_error.316 if a string stored inside the JSON value is not
18220|       |                          UTF-8 encoded
18221|       |
18222|       |    @complexity Linear.
18223|       |
18224|       |    @liveexample{The example below shows the serialization with different
18225|       |    parameters to `width` to adjust the indentation level.,operator_serialize}
18226|       |
18227|       |    @since version 1.0.0; indentation character added in version 3.0.0
18228|       |    */
18229|       |    friend std::ostream& operator<<(std::ostream& o, const basic_json& j)
18230|    125|    {
18231|    125|        // read width member and use it as indentation parameter if nonzero
18232|    125|        const bool pretty_print = (o.width() > 0);
18233|    125|        const auto indentation = (pretty_print ? o.width() : 0);
18234|    125|
18235|    125|        // reset width to 0 for subsequent calls to this stream
18236|    125|        o.width(0);
18237|    125|
18238|    125|        // do the actual serialization
18239|    125|        serializer s(detail::output_adapter<char>(o), o.fill());
18240|    125|        s.dump(j, pretty_print, false, static_cast<unsigned int>(indentation));
18241|    125|        return o;
18242|    125|    }
18243|       |
18244|       |    /*!
18245|       |    @brief serialize to stream
18246|       |    @deprecated This stream operator is deprecated and will be removed in
18247|       |                future 4.0.0 of the library. Please use
18248|       |                @ref operator<<(std::ostream&, const basic_json&)
18249|       |                instead; that is, replace calls like `j >> o;` with `o << j;`.
18250|       |    @since version 1.0.0; deprecated since version 3.0.0
18251|       |    */
18252|       |    JSON_DEPRECATED
18253|       |    friend std::ostream& operator>>(const basic_json& j, std::ostream& o)
18254|       |    {
18255|       |        return o << j;
18256|       |    }
18257|       |
18258|       |    /// @}
18259|       |
18260|       |
18261|       |    /////////////////////
18262|       |    // deserialization //
18263|       |    /////////////////////
18264|       |
18265|       |    /// @name deserialization
18266|       |    /// @{
18267|       |
18268|       |    /*!
18269|       |    @brief deserialize from a compatible input
18270|       |
18271|       |    This function reads from a compatible input. Examples are:
18272|       |    - an array of 1-byte values
18273|       |    - strings with character/literal type with size of 1 byte
18274|       |    - input streams
18275|       |    - container with contiguous storage of 1-byte values. Compatible container
18276|       |      types include `std::vector`, `std::string`, `std::array`,
18277|       |      `std::valarray`, and `std::initializer_list`. Furthermore, C-style
18278|       |      arrays can be used with `std::begin()`/`std::end()`. User-defined
18279|       |      containers can be used as long as they implement random-access iterators
18280|       |      and a contiguous storage.
18281|       |
18282|       |    @pre Each element of the container has a size of 1 byte. Violating this
18283|       |    precondition yields undefined behavior. **This precondition is enforced
18284|       |    with a static assertion.**
18285|       |
18286|       |    @pre The container storage is contiguous. Violating this precondition
18287|       |    yields undefined behavior. **This precondition is enforced with an
18288|       |    assertion.**
18289|       |    @pre Each element of the container has a size of 1 byte. Violating this
18290|       |    precondition yields undefined behavior. **This precondition is enforced
18291|       |    with a static assertion.**
18292|       |
18293|       |    @warning There is no way to enforce all preconditions at compile-time. If
18294|       |             the function is called with a noncompliant container and with
18295|       |             assertions switched off, the behavior is undefined and will most
18296|       |             likely yield segmentation violation.
18297|       |
18298|       |    @param[in] i  input to read from
18299|       |    @param[in] cb  a parser callback function of type @ref parser_callback_t
18300|       |    which is used to control the deserialization by filtering unwanted values
18301|       |    (optional)
18302|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
18303|       |    parse error (optional, true by default)
18304|       |
18305|       |    @return result of the deserialization
18306|       |
18307|       |    @throw parse_error.101 if a parse error occurs; example: `""unexpected end
18308|       |    of input; expected string literal""`
18309|       |    @throw parse_error.102 if to_unicode fails or surrogate error
18310|       |    @throw parse_error.103 if to_unicode fails
18311|       |
18312|       |    @complexity Linear in the length of the input. The parser is a predictive
18313|       |    LL(1) parser. The complexity can be higher if the parser callback function
18314|       |    @a cb has a super-linear complexity.
18315|       |
18316|       |    @note A UTF-8 byte order mark is silently ignored.
18317|       |
18318|       |    @liveexample{The example below demonstrates the `parse()` function reading
18319|       |    from an array.,parse__array__parser_callback_t}
18320|       |
18321|       |    @liveexample{The example below demonstrates the `parse()` function with
18322|       |    and without callback function.,parse__string__parser_callback_t}
18323|       |
18324|       |    @liveexample{The example below demonstrates the `parse()` function with
18325|       |    and without callback function.,parse__istream__parser_callback_t}
18326|       |
18327|       |    @liveexample{The example below demonstrates the `parse()` function reading
18328|       |    from a contiguous container.,parse__contiguouscontainer__parser_callback_t}
18329|       |
18330|       |    @since version 2.0.3 (contiguous containers)
18331|       |    */
18332|       |    static basic_json parse(detail::input_adapter&& i,
18333|       |                            const parser_callback_t cb = nullptr,
18334|       |                            const bool allow_exceptions = true)
18335|    661|    {
18336|    661|        basic_json result;
18337|    661|        parser(i, cb, allow_exceptions).parse(true, result);
18338|    661|        return result;
18339|    661|    }
18340|       |
18341|       |    static bool accept(detail::input_adapter&& i)
18342|       |    {
18343|       |        return parser(i).accept(true);
18344|       |    }
18345|       |
18346|       |    /*!
18347|       |    @brief generate SAX events
18348|       |
18349|       |    The SAX event lister must follow the interface of @ref json_sax.
18350|       |
18351|       |    This function reads from a compatible input. Examples are:
18352|       |    - an array of 1-byte values
18353|       |    - strings with character/literal type with size of 1 byte
18354|       |    - input streams
18355|       |    - container with contiguous storage of 1-byte values. Compatible container
18356|       |      types include `std::vector`, `std::string`, `std::array`,
18357|       |      `std::valarray`, and `std::initializer_list`. Furthermore, C-style
18358|       |      arrays can be used with `std::begin()`/`std::end()`. User-defined
18359|       |      containers can be used as long as they implement random-access iterators
18360|       |      and a contiguous storage.
18361|       |
18362|       |    @pre Each element of the container has a size of 1 byte. Violating this
18363|       |    precondition yields undefined behavior. **This precondition is enforced
18364|       |    with a static assertion.**
18365|       |
18366|       |    @pre The container storage is contiguous. Violating this precondition
18367|       |    yields undefined behavior. **This precondition is enforced with an
18368|       |    assertion.**
18369|       |    @pre Each element of the container has a size of 1 byte. Violating this
18370|       |    precondition yields undefined behavior. **This precondition is enforced
18371|       |    with a static assertion.**
18372|       |
18373|       |    @warning There is no way to enforce all preconditions at compile-time. If
18374|       |             the function is called with a noncompliant container and with
18375|       |             assertions switched off, the behavior is undefined and will most
18376|       |             likely yield segmentation violation.
18377|       |
18378|       |    @param[in] i  input to read from
18379|       |    @param[in,out] sax  SAX event listener
18380|       |    @param[in] format  the format to parse (JSON, CBOR, MessagePack, or UBJSON)
18381|       |    @param[in] strict  whether the input has to be consumed completely
18382|       |
18383|       |    @return return value of the last processed SAX event
18384|       |
18385|       |    @throw parse_error.101 if a parse error occurs; example: `""unexpected end
18386|       |    of input; expected string literal""`
18387|       |    @throw parse_error.102 if to_unicode fails or surrogate error
18388|       |    @throw parse_error.103 if to_unicode fails
18389|       |
18390|       |    @complexity Linear in the length of the input. The parser is a predictive
18391|       |    LL(1) parser. The complexity can be higher if the SAX consumer @a sax has
18392|       |    a super-linear complexity.
18393|       |
18394|       |    @note A UTF-8 byte order mark is silently ignored.
18395|       |
18396|       |    @liveexample{The example below demonstrates the `sax_parse()` function
18397|       |    reading from string and processing the events with a user-defined SAX
18398|       |    event consumer.,sax_parse}
18399|       |
18400|       |    @since version 3.2.0
18401|       |    */
18402|       |    template <typename SAX>
18403|       |    static bool sax_parse(detail::input_adapter&& i, SAX* sax,
18404|       |                          input_format_t format = input_format_t::json,
18405|       |                          const bool strict = true)
18406|       |    {
18407|       |        assert(sax);
18408|       |        switch (format)
18409|       |        {
18410|       |            case input_format_t::json:
18411|       |                return parser(std::move(i)).sax_parse(sax, strict);
18412|       |            default:
18413|       |                return detail::binary_reader<basic_json, SAX>(std::move(i)).sax_parse(format, sax, strict);
18414|       |        }
18415|       |    }
18416|       |
18417|       |    /*!
18418|       |    @brief deserialize from an iterator range with contiguous storage
18419|       |
18420|       |    This function reads from an iterator range of a container with contiguous
18421|       |    storage of 1-byte values. Compatible container types include
18422|       |    `std::vector`, `std::string`, `std::array`, `std::valarray`, and
18423|       |    `std::initializer_list`. Furthermore, C-style arrays can be used with
18424|       |    `std::begin()`/`std::end()`. User-defined containers can be used as long
18425|       |    as they implement random-access iterators and a contiguous storage.
18426|       |
18427|       |    @pre The iterator range is contiguous. Violating this precondition yields
18428|       |    undefined behavior. **This precondition is enforced with an assertion.**
18429|       |    @pre Each element in the range has a size of 1 byte. Violating this
18430|       |    precondition yields undefined behavior. **This precondition is enforced
18431|       |    with a static assertion.**
18432|       |
18433|       |    @warning There is no way to enforce all preconditions at compile-time. If
18434|       |             the function is called with noncompliant iterators and with
18435|       |             assertions switched off, the behavior is undefined and will most
18436|       |             likely yield segmentation violation.
18437|       |
18438|       |    @tparam IteratorType iterator of container with contiguous storage
18439|       |    @param[in] first  begin of the range to parse (included)
18440|       |    @param[in] last  end of the range to parse (excluded)
18441|       |    @param[in] cb  a parser callback function of type @ref parser_callback_t
18442|       |    which is used to control the deserialization by filtering unwanted values
18443|       |    (optional)
18444|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
18445|       |    parse error (optional, true by default)
18446|       |
18447|       |    @return result of the deserialization
18448|       |
18449|       |    @throw parse_error.101 in case of an unexpected token
18450|       |    @throw parse_error.102 if to_unicode fails or surrogate error
18451|       |    @throw parse_error.103 if to_unicode fails
18452|       |
18453|       |    @complexity Linear in the length of the input. The parser is a predictive
18454|       |    LL(1) parser. The complexity can be higher if the parser callback function
18455|       |    @a cb has a super-linear complexity.
18456|       |
18457|       |    @note A UTF-8 byte order mark is silently ignored.
18458|       |
18459|       |    @liveexample{The example below demonstrates the `parse()` function reading
18460|       |    from an iterator range.,parse__iteratortype__parser_callback_t}
18461|       |
18462|       |    @since version 2.0.3
18463|       |    */
18464|       |    template<class IteratorType, typename std::enable_if<
18465|       |                 std::is_base_of<
18466|       |                     std::random_access_iterator_tag,
18467|       |                     typename std::iterator_traits<IteratorType>::iterator_category>::value, int>::type = 0>
18468|       |    static basic_json parse(IteratorType first, IteratorType last,
18469|       |                            const parser_callback_t cb = nullptr,
18470|       |                            const bool allow_exceptions = true)
18471|      0|    {
18472|      0|        basic_json result;
18473|      0|        parser(detail::input_adapter(first, last), cb, allow_exceptions).parse(true, result);
18474|      0|        return result;
18475|      0|    }
18476|       |
18477|       |    template<class IteratorType, typename std::enable_if<
18478|       |                 std::is_base_of<
18479|       |                     std::random_access_iterator_tag,
18480|       |                     typename std::iterator_traits<IteratorType>::iterator_category>::value, int>::type = 0>
18481|       |    static bool accept(IteratorType first, IteratorType last)
18482|       |    {
18483|       |        return parser(detail::input_adapter(first, last)).accept(true);
18484|       |    }
18485|       |
18486|       |    template<class IteratorType, class SAX, typename std::enable_if<
18487|       |                 std::is_base_of<
18488|       |                     std::random_access_iterator_tag,
18489|       |                     typename std::iterator_traits<IteratorType>::iterator_category>::value, int>::type = 0>
18490|       |    static bool sax_parse(IteratorType first, IteratorType last, SAX* sax)
18491|       |    {
18492|       |        return parser(detail::input_adapter(first, last)).sax_parse(sax);
18493|       |    }
18494|       |
18495|       |    /*!
18496|       |    @brief deserialize from stream
18497|       |    @deprecated This stream operator is deprecated and will be removed in
18498|       |                version 4.0.0 of the library. Please use
18499|       |                @ref operator>>(std::istream&, basic_json&)
18500|       |                instead; that is, replace calls like `j << i;` with `i >> j;`.
18501|       |    @since version 1.0.0; deprecated since version 3.0.0
18502|       |    */
18503|       |    JSON_DEPRECATED
18504|       |    friend std::istream& operator<<(basic_json& j, std::istream& i)
18505|       |    {
18506|       |        return operator>>(i, j);
18507|       |    }
18508|       |
18509|       |    /*!
18510|       |    @brief deserialize from stream
18511|       |
18512|       |    Deserializes an input stream to a JSON value.
18513|       |
18514|       |    @param[in,out] i  input stream to read a serialized JSON value from
18515|       |    @param[in,out] j  JSON value to write the deserialized input to
18516|       |
18517|       |    @throw parse_error.101 in case of an unexpected token
18518|       |    @throw parse_error.102 if to_unicode fails or surrogate error
18519|       |    @throw parse_error.103 if to_unicode fails
18520|       |
18521|       |    @complexity Linear in the length of the input. The parser is a predictive
18522|       |    LL(1) parser.
18523|       |
18524|       |    @note A UTF-8 byte order mark is silently ignored.
18525|       |
18526|       |    @liveexample{The example below shows how a JSON value is constructed by
18527|       |    reading a serialization from a stream.,operator_deserialize}
18528|       |
18529|       |    @sa parse(std::istream&, const parser_callback_t) for a variant with a
18530|       |    parser callback function to filter values while parsing
18531|       |
18532|       |    @since version 1.0.0
18533|       |    */
18534|       |    friend std::istream& operator>>(std::istream& i, basic_json& j)
18535|    205|    {
18536|    205|        parser(detail::input_adapter(i)).parse(false, j);
18537|    205|        return i;
18538|    205|    }
18539|       |
18540|       |    /// @}
18541|       |
18542|       |    ///////////////////////////
18543|       |    // convenience functions //
18544|       |    ///////////////////////////
18545|       |
18546|       |    /*!
18547|       |    @brief return the type as string
18548|       |
18549|       |    Returns the type name as string to be used in error messages - usually to
18550|       |    indicate that a function was called on a wrong JSON type.
18551|       |
18552|       |    @return a string representation of a the @a m_type member:
18553|       |            Value type  | return value
18554|       |            ----------- | -------------
18555|       |            null        | `"null"`
18556|       |            boolean     | `"boolean"`
18557|       |            string      | `"string"`
18558|       |            number      | `"number"` (for all number types)
18559|       |            object      | `"object"`
18560|       |            array       | `"array"`
18561|       |            discarded   | `"discarded"`
18562|       |
18563|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
18564|       |
18565|       |    @complexity Constant.
18566|       |
18567|       |    @liveexample{The following code exemplifies `type_name()` for all JSON
18568|       |    types.,type_name}
18569|       |
18570|       |    @sa @ref type() -- return the type of the JSON value
18571|       |    @sa @ref operator value_t() -- return the type of the JSON value (implicit)
18572|       |
18573|       |    @since version 1.0.0, public since 2.1.0, `const char*` and `noexcept`
18574|       |    since 3.0.0
18575|       |    */
18576|       |    const char* type_name() const noexcept
18577|      0|    {
18578|      0|        {
18579|      0|            switch (m_type)
18580|      0|            {
18581|      0|                case value_t::null:
18582|      0|                    return "null";
18583|      0|                case value_t::object:
18584|      0|                    return "object";
18585|      0|                case value_t::array:
18586|      0|                    return "array";
18587|      0|                case value_t::string:
18588|      0|                    return "string";
18589|      0|                case value_t::boolean:
18590|      0|                    return "boolean";
18591|      0|                case value_t::discarded:
18592|      0|                    return "discarded";
18593|      0|                default:
18594|      0|                    return "number";
18595|      0|            }
18596|      0|        }
18597|      0|    }
18598|       |
18599|       |
18600|       |  private:
18601|       |    //////////////////////
18602|       |    // member variables //
18603|       |    //////////////////////
18604|       |
18605|       |    /// the type of the current element
18606|       |    value_t m_type = value_t::null;
18607|       |
18608|       |    /// the value of the current element
18609|       |    json_value m_value = {};
18610|       |
18611|       |    //////////////////////////////////////////
18612|       |    // binary serialization/deserialization //
18613|       |    //////////////////////////////////////////
18614|       |
18615|       |    /// @name binary serialization/deserialization support
18616|       |    /// @{
18617|       |
18618|       |  public:
18619|       |    /*!
18620|       |    @brief create a CBOR serialization of a given JSON value
18621|       |
18622|       |    Serializes a given JSON value @a j to a byte vector using the CBOR (Concise
18623|       |    Binary Object Representation) serialization format. CBOR is a binary
18624|       |    serialization format which aims to be more compact than JSON itself, yet
18625|       |    more efficient to parse.
18626|       |
18627|       |    The library uses the following mapping from JSON values types to
18628|       |    CBOR types according to the CBOR specification (RFC 7049):
18629|       |
18630|       |    JSON value type | value/range                                | CBOR type                          | first byte
18631|       |    --------------- | ------------------------------------------ | ---------------------------------- | ---------------
18632|       |    null            | `null`                                     | Null                               | 0xF6
18633|       |    boolean         | `true`                                     | True                               | 0xF5
18634|       |    boolean         | `false`                                    | False                              | 0xF4
18635|       |    number_integer  | -9223372036854775808..-2147483649          | Negative integer (8 bytes follow)  | 0x3B
18636|       |    number_integer  | -2147483648..-32769                        | Negative integer (4 bytes follow)  | 0x3A
18637|       |    number_integer  | -32768..-129                               | Negative integer (2 bytes follow)  | 0x39
18638|       |    number_integer  | -128..-25                                  | Negative integer (1 byte follow)   | 0x38
18639|       |    number_integer  | -24..-1                                    | Negative integer                   | 0x20..0x37
18640|       |    number_integer  | 0..23                                      | Integer                            | 0x00..0x17
18641|       |    number_integer  | 24..255                                    | Unsigned integer (1 byte follow)   | 0x18
18642|       |    number_integer  | 256..65535                                 | Unsigned integer (2 bytes follow)  | 0x19
18643|       |    number_integer  | 65536..4294967295                          | Unsigned integer (4 bytes follow)  | 0x1A
18644|       |    number_integer  | 4294967296..18446744073709551615           | Unsigned integer (8 bytes follow)  | 0x1B
18645|       |    number_unsigned | 0..23                                      | Integer                            | 0x00..0x17
18646|       |    number_unsigned | 24..255                                    | Unsigned integer (1 byte follow)   | 0x18
18647|       |    number_unsigned | 256..65535                                 | Unsigned integer (2 bytes follow)  | 0x19
18648|       |    number_unsigned | 65536..4294967295                          | Unsigned integer (4 bytes follow)  | 0x1A
18649|       |    number_unsigned | 4294967296..18446744073709551615           | Unsigned integer (8 bytes follow)  | 0x1B
18650|       |    number_float    | *any value*                                | Double-Precision Float             | 0xFB
18651|       |    string          | *length*: 0..23                            | UTF-8 string                       | 0x60..0x77
18652|       |    string          | *length*: 23..255                          | UTF-8 string (1 byte follow)       | 0x78
18653|       |    string          | *length*: 256..65535                       | UTF-8 string (2 bytes follow)      | 0x79
18654|       |    string          | *length*: 65536..4294967295                | UTF-8 string (4 bytes follow)      | 0x7A
18655|       |    string          | *length*: 4294967296..18446744073709551615 | UTF-8 string (8 bytes follow)      | 0x7B
18656|       |    array           | *size*: 0..23                              | array                              | 0x80..0x97
18657|       |    array           | *size*: 23..255                            | array (1 byte follow)              | 0x98
18658|       |    array           | *size*: 256..65535                         | array (2 bytes follow)             | 0x99
18659|       |    array           | *size*: 65536..4294967295                  | array (4 bytes follow)             | 0x9A
18660|       |    array           | *size*: 4294967296..18446744073709551615   | array (8 bytes follow)             | 0x9B
18661|       |    object          | *size*: 0..23                              | map                                | 0xA0..0xB7
18662|       |    object          | *size*: 23..255                            | map (1 byte follow)                | 0xB8
18663|       |    object          | *size*: 256..65535                         | map (2 bytes follow)               | 0xB9
18664|       |    object          | *size*: 65536..4294967295                  | map (4 bytes follow)               | 0xBA
18665|       |    object          | *size*: 4294967296..18446744073709551615   | map (8 bytes follow)               | 0xBB
18666|       |
18667|       |    @note The mapping is **complete** in the sense that any JSON value type
18668|       |          can be converted to a CBOR value.
18669|       |
18670|       |    @note If NaN or Infinity are stored inside a JSON number, they are
18671|       |          serialized properly. This behavior differs from the @ref dump()
18672|       |          function which serializes NaN or Infinity to `null`.
18673|       |
18674|       |    @note The following CBOR types are not used in the conversion:
18675|       |          - byte strings (0x40..0x5F)
18676|       |          - UTF-8 strings terminated by "break" (0x7F)
18677|       |          - arrays terminated by "break" (0x9F)
18678|       |          - maps terminated by "break" (0xBF)
18679|       |          - date/time (0xC0..0xC1)
18680|       |          - bignum (0xC2..0xC3)
18681|       |          - decimal fraction (0xC4)
18682|       |          - bigfloat (0xC5)
18683|       |          - tagged items (0xC6..0xD4, 0xD8..0xDB)
18684|       |          - expected conversions (0xD5..0xD7)
18685|       |          - simple values (0xE0..0xF3, 0xF8)
18686|       |          - undefined (0xF7)
18687|       |          - half and single-precision floats (0xF9-0xFA)
18688|       |          - break (0xFF)
18689|       |
18690|       |    @param[in] j  JSON value to serialize
18691|       |    @return MessagePack serialization as byte vector
18692|       |
18693|       |    @complexity Linear in the size of the JSON value @a j.
18694|       |
18695|       |    @liveexample{The example shows the serialization of a JSON value to a byte
18696|       |    vector in CBOR format.,to_cbor}
18697|       |
18698|       |    @sa http://cbor.io
18699|       |    @sa @ref from_cbor(detail::input_adapter&&, const bool, const bool) for the
18700|       |        analogous deserialization
18701|       |    @sa @ref to_msgpack(const basic_json&) for the related MessagePack format
18702|       |    @sa @ref to_ubjson(const basic_json&, const bool, const bool) for the
18703|       |             related UBJSON format
18704|       |
18705|       |    @since version 2.0.9
18706|       |    */
18707|       |    static std::vector<uint8_t> to_cbor(const basic_json& j)
18708|       |    {
18709|       |        std::vector<uint8_t> result;
18710|       |        to_cbor(j, result);
18711|       |        return result;
18712|       |    }
18713|       |
18714|       |    static void to_cbor(const basic_json& j, detail::output_adapter<uint8_t> o)
18715|       |    {
18716|       |        binary_writer<uint8_t>(o).write_cbor(j);
18717|       |    }
18718|       |
18719|       |    static void to_cbor(const basic_json& j, detail::output_adapter<char> o)
18720|       |    {
18721|       |        binary_writer<char>(o).write_cbor(j);
18722|       |    }
18723|       |
18724|       |    /*!
18725|       |    @brief create a MessagePack serialization of a given JSON value
18726|       |
18727|       |    Serializes a given JSON value @a j to a byte vector using the MessagePack
18728|       |    serialization format. MessagePack is a binary serialization format which
18729|       |    aims to be more compact than JSON itself, yet more efficient to parse.
18730|       |
18731|       |    The library uses the following mapping from JSON values types to
18732|       |    MessagePack types according to the MessagePack specification:
18733|       |
18734|       |    JSON value type | value/range                       | MessagePack type | first byte
18735|       |    --------------- | --------------------------------- | ---------------- | ----------
18736|       |    null            | `null`                            | nil              | 0xC0
18737|       |    boolean         | `true`                            | true             | 0xC3
18738|       |    boolean         | `false`                           | false            | 0xC2
18739|       |    number_integer  | -9223372036854775808..-2147483649 | int64            | 0xD3
18740|       |    number_integer  | -2147483648..-32769               | int32            | 0xD2
18741|       |    number_integer  | -32768..-129                      | int16            | 0xD1
18742|       |    number_integer  | -128..-33                         | int8             | 0xD0
18743|       |    number_integer  | -32..-1                           | negative fixint  | 0xE0..0xFF
18744|       |    number_integer  | 0..127                            | positive fixint  | 0x00..0x7F
18745|       |    number_integer  | 128..255                          | uint 8           | 0xCC
18746|       |    number_integer  | 256..65535                        | uint 16          | 0xCD
18747|       |    number_integer  | 65536..4294967295                 | uint 32          | 0xCE
18748|       |    number_integer  | 4294967296..18446744073709551615  | uint 64          | 0xCF
18749|       |    number_unsigned | 0..127                            | positive fixint  | 0x00..0x7F
18750|       |    number_unsigned | 128..255                          | uint 8           | 0xCC
18751|       |    number_unsigned | 256..65535                        | uint 16          | 0xCD
18752|       |    number_unsigned | 65536..4294967295                 | uint 32          | 0xCE
18753|       |    number_unsigned | 4294967296..18446744073709551615  | uint 64          | 0xCF
18754|       |    number_float    | *any value*                       | float 64         | 0xCB
18755|       |    string          | *length*: 0..31                   | fixstr           | 0xA0..0xBF
18756|       |    string          | *length*: 32..255                 | str 8            | 0xD9
18757|       |    string          | *length*: 256..65535              | str 16           | 0xDA
18758|       |    string          | *length*: 65536..4294967295       | str 32           | 0xDB
18759|       |    array           | *size*: 0..15                     | fixarray         | 0x90..0x9F
18760|       |    array           | *size*: 16..65535                 | array 16         | 0xDC
18761|       |    array           | *size*: 65536..4294967295         | array 32         | 0xDD
18762|       |    object          | *size*: 0..15                     | fix map          | 0x80..0x8F
18763|       |    object          | *size*: 16..65535                 | map 16           | 0xDE
18764|       |    object          | *size*: 65536..4294967295         | map 32           | 0xDF
18765|       |
18766|       |    @note The mapping is **complete** in the sense that any JSON value type
18767|       |          can be converted to a MessagePack value.
18768|       |
18769|       |    @note The following values can **not** be converted to a MessagePack value:
18770|       |          - strings with more than 4294967295 bytes
18771|       |          - arrays with more than 4294967295 elements
18772|       |          - objects with more than 4294967295 elements
18773|       |
18774|       |    @note The following MessagePack types are not used in the conversion:
18775|       |          - bin 8 - bin 32 (0xC4..0xC6)
18776|       |          - ext 8 - ext 32 (0xC7..0xC9)
18777|       |          - float 32 (0xCA)
18778|       |          - fixext 1 - fixext 16 (0xD4..0xD8)
18779|       |
18780|       |    @note Any MessagePack output created @ref to_msgpack can be successfully
18781|       |          parsed by @ref from_msgpack.
18782|       |
18783|       |    @note If NaN or Infinity are stored inside a JSON number, they are
18784|       |          serialized properly. This behavior differs from the @ref dump()
18785|       |          function which serializes NaN or Infinity to `null`.
18786|       |
18787|       |    @param[in] j  JSON value to serialize
18788|       |    @return MessagePack serialization as byte vector
18789|       |
18790|       |    @complexity Linear in the size of the JSON value @a j.
18791|       |
18792|       |    @liveexample{The example shows the serialization of a JSON value to a byte
18793|       |    vector in MessagePack format.,to_msgpack}
18794|       |
18795|       |    @sa http://msgpack.org
18796|       |    @sa @ref from_msgpack for the analogous deserialization
18797|       |    @sa @ref to_cbor(const basic_json& for the related CBOR format
18798|       |    @sa @ref to_ubjson(const basic_json&, const bool, const bool) for the
18799|       |             related UBJSON format
18800|       |
18801|       |    @since version 2.0.9
18802|       |    */
18803|       |    static std::vector<uint8_t> to_msgpack(const basic_json& j)
18804|       |    {
18805|       |        std::vector<uint8_t> result;
18806|       |        to_msgpack(j, result);
18807|       |        return result;
18808|       |    }
18809|       |
18810|       |    static void to_msgpack(const basic_json& j, detail::output_adapter<uint8_t> o)
18811|       |    {
18812|       |        binary_writer<uint8_t>(o).write_msgpack(j);
18813|       |    }
18814|       |
18815|       |    static void to_msgpack(const basic_json& j, detail::output_adapter<char> o)
18816|       |    {
18817|       |        binary_writer<char>(o).write_msgpack(j);
18818|       |    }
18819|       |
18820|       |    /*!
18821|       |    @brief create a UBJSON serialization of a given JSON value
18822|       |
18823|       |    Serializes a given JSON value @a j to a byte vector using the UBJSON
18824|       |    (Universal Binary JSON) serialization format. UBJSON aims to be more compact
18825|       |    than JSON itself, yet more efficient to parse.
18826|       |
18827|       |    The library uses the following mapping from JSON values types to
18828|       |    UBJSON types according to the UBJSON specification:
18829|       |
18830|       |    JSON value type | value/range                       | UBJSON type | marker
18831|       |    --------------- | --------------------------------- | ----------- | ------
18832|       |    null            | `null`                            | null        | `Z`
18833|       |    boolean         | `true`                            | true        | `T`
18834|       |    boolean         | `false`                           | false       | `F`
18835|       |    number_integer  | -9223372036854775808..-2147483649 | int64       | `L`
18836|       |    number_integer  | -2147483648..-32769               | int32       | `l`
18837|       |    number_integer  | -32768..-129                      | int16       | `I`
18838|       |    number_integer  | -128..127                         | int8        | `i`
18839|       |    number_integer  | 128..255                          | uint8       | `U`
18840|       |    number_integer  | 256..32767                        | int16       | `I`
18841|       |    number_integer  | 32768..2147483647                 | int32       | `l`
18842|       |    number_integer  | 2147483648..9223372036854775807   | int64       | `L`
18843|       |    number_unsigned | 0..127                            | int8        | `i`
18844|       |    number_unsigned | 128..255                          | uint8       | `U`
18845|       |    number_unsigned | 256..32767                        | int16       | `I`
18846|       |    number_unsigned | 32768..2147483647                 | int32       | `l`
18847|       |    number_unsigned | 2147483648..9223372036854775807   | int64       | `L`
18848|       |    number_float    | *any value*                       | float64     | `D`
18849|       |    string          | *with shortest length indicator*  | string      | `S`
18850|       |    array           | *see notes on optimized format*   | array       | `[`
18851|       |    object          | *see notes on optimized format*   | map         | `{`
18852|       |
18853|       |    @note The mapping is **complete** in the sense that any JSON value type
18854|       |          can be converted to a UBJSON value.
18855|       |
18856|       |    @note The following values can **not** be converted to a UBJSON value:
18857|       |          - strings with more than 9223372036854775807 bytes (theoretical)
18858|       |          - unsigned integer numbers above 9223372036854775807
18859|       |
18860|       |    @note The following markers are not used in the conversion:
18861|       |          - `Z`: no-op values are not created.
18862|       |          - `C`: single-byte strings are serialized with `S` markers.
18863|       |
18864|       |    @note Any UBJSON output created @ref to_ubjson can be successfully parsed
18865|       |          by @ref from_ubjson.
18866|       |
18867|       |    @note If NaN or Infinity are stored inside a JSON number, they are
18868|       |          serialized properly. This behavior differs from the @ref dump()
18869|       |          function which serializes NaN or Infinity to `null`.
18870|       |
18871|       |    @note The optimized formats for containers are supported: Parameter
18872|       |          @a use_size adds size information to the beginning of a container and
18873|       |          removes the closing marker. Parameter @a use_type further checks
18874|       |          whether all elements of a container have the same type and adds the
18875|       |          type marker to the beginning of the container. The @a use_type
18876|       |          parameter must only be used together with @a use_size = true. Note
18877|       |          that @a use_size = true alone may result in larger representations -
18878|       |          the benefit of this parameter is that the receiving side is
18879|       |          immediately informed on the number of elements of the container.
18880|       |
18881|       |    @param[in] j  JSON value to serialize
18882|       |    @param[in] use_size  whether to add size annotations to container types
18883|       |    @param[in] use_type  whether to add type annotations to container types
18884|       |                         (must be combined with @a use_size = true)
18885|       |    @return UBJSON serialization as byte vector
18886|       |
18887|       |    @complexity Linear in the size of the JSON value @a j.
18888|       |
18889|       |    @liveexample{The example shows the serialization of a JSON value to a byte
18890|       |    vector in UBJSON format.,to_ubjson}
18891|       |
18892|       |    @sa http://ubjson.org
18893|       |    @sa @ref from_ubjson(detail::input_adapter&&, const bool, const bool) for the
18894|       |        analogous deserialization
18895|       |    @sa @ref to_cbor(const basic_json& for the related CBOR format
18896|       |    @sa @ref to_msgpack(const basic_json&) for the related MessagePack format
18897|       |
18898|       |    @since version 3.1.0
18899|       |    */
18900|       |    static std::vector<uint8_t> to_ubjson(const basic_json& j,
18901|       |                                          const bool use_size = false,
18902|       |                                          const bool use_type = false)
18903|       |    {
18904|       |        std::vector<uint8_t> result;
18905|       |        to_ubjson(j, result, use_size, use_type);
18906|       |        return result;
18907|       |    }
18908|       |
18909|       |    static void to_ubjson(const basic_json& j, detail::output_adapter<uint8_t> o,
18910|       |                          const bool use_size = false, const bool use_type = false)
18911|       |    {
18912|       |        binary_writer<uint8_t>(o).write_ubjson(j, use_size, use_type);
18913|       |    }
18914|       |
18915|       |    static void to_ubjson(const basic_json& j, detail::output_adapter<char> o,
18916|       |                          const bool use_size = false, const bool use_type = false)
18917|       |    {
18918|       |        binary_writer<char>(o).write_ubjson(j, use_size, use_type);
18919|       |    }
18920|       |
18921|       |
18922|       |    /*!
18923|       |    @brief Serializes the given JSON object `j` to BSON and returns a vector
18924|       |           containing the corresponding BSON-representation.
18925|       |
18926|       |    BSON (Binary JSON) is a binary format in which zero or more ordered key/value pairs are
18927|       |    stored as a single entity (a so-called document).
18928|       |
18929|       |    The library uses the following mapping from JSON values types to BSON types:
18930|       |
18931|       |    JSON value type | value/range                       | BSON type   | marker
18932|       |    --------------- | --------------------------------- | ----------- | ------
18933|       |    null            | `null`                            | null        | 0x0A
18934|       |    boolean         | `true`, `false`                   | boolean     | 0x08
18935|       |    number_integer  | -9223372036854775808..-2147483649 | int64       | 0x12
18936|       |    number_integer  | -2147483648..2147483647           | int32       | 0x10
18937|       |    number_integer  | 2147483648..9223372036854775807   | int64       | 0x12
18938|       |    number_unsigned | 0..2147483647                     | int32       | 0x10
18939|       |    number_unsigned | 2147483648..9223372036854775807   | int64       | 0x12
18940|       |    number_unsigned | 9223372036854775808..18446744073709551615| --   | --
18941|       |    number_float    | *any value*                       | double      | 0x01
18942|       |    string          | *any value*                       | string      | 0x02
18943|       |    array           | *any value*                       | document    | 0x04
18944|       |    object          | *any value*                       | document    | 0x03
18945|       |
18946|       |    @warning The mapping is **incomplete**, since only JSON-objects (and things
18947|       |    contained therein) can be serialized to BSON.
18948|       |    Also, integers larger than 9223372036854775807 cannot be serialized to BSON,
18949|       |    and the keys may not contain U+0000, since they are serialized a
18950|       |    zero-terminated c-strings.
18951|       |
18952|       |    @throw out_of_range.407  if `j.is_number_unsigned() && j.get<std::uint64_t>() > 9223372036854775807`
18953|       |    @throw out_of_range.409  if a key in `j` contains a NULL (U+0000)
18954|       |    @throw type_error.317    if `!j.is_object()`
18955|       |
18956|       |    @pre The input `j` is required to be an object: `j.is_object() == true`.
18957|       |
18958|       |    @note Any BSON output created via @ref to_bson can be successfully parsed
18959|       |          by @ref from_bson.
18960|       |
18961|       |    @param[in] j  JSON value to serialize
18962|       |    @return BSON serialization as byte vector
18963|       |
18964|       |    @complexity Linear in the size of the JSON value @a j.
18965|       |
18966|       |    @liveexample{The example shows the serialization of a JSON value to a byte
18967|       |    vector in BSON format.,to_bson}
18968|       |
18969|       |    @sa http://bsonspec.org/spec.html
18970|       |    @sa @ref from_bson(detail::input_adapter&&, const bool strict) for the
18971|       |        analogous deserialization
18972|       |    @sa @ref to_ubjson(const basic_json&, const bool, const bool) for the
18973|       |             related UBJSON format
18974|       |    @sa @ref to_cbor(const basic_json&) for the related CBOR format
18975|       |    @sa @ref to_msgpack(const basic_json&) for the related MessagePack format
18976|       |    */
18977|       |    static std::vector<uint8_t> to_bson(const basic_json& j)
18978|       |    {
18979|       |        std::vector<uint8_t> result;
18980|       |        to_bson(j, result);
18981|       |        return result;
18982|       |    }
18983|       |
18984|       |    /*!
18985|       |    @brief Serializes the given JSON object `j` to BSON and forwards the
18986|       |           corresponding BSON-representation to the given output_adapter `o`.
18987|       |    @param j The JSON object to convert to BSON.
18988|       |    @param o The output adapter that receives the binary BSON representation.
18989|       |    @pre The input `j` shall be an object: `j.is_object() == true`
18990|       |    @sa @ref to_bson(const basic_json&)
18991|       |    */
18992|       |    static void to_bson(const basic_json& j, detail::output_adapter<uint8_t> o)
18993|       |    {
18994|       |        binary_writer<uint8_t>(o).write_bson(j);
18995|       |    }
18996|       |
18997|       |    /*!
18998|       |    @copydoc to_bson(const basic_json&, detail::output_adapter<uint8_t>)
18999|       |    */
19000|       |    static void to_bson(const basic_json& j, detail::output_adapter<char> o)
19001|       |    {
19002|       |        binary_writer<char>(o).write_bson(j);
19003|       |    }
19004|       |
19005|       |
19006|       |    /*!
19007|       |    @brief create a JSON value from an input in CBOR format
19008|       |
19009|       |    Deserializes a given input @a i to a JSON value using the CBOR (Concise
19010|       |    Binary Object Representation) serialization format.
19011|       |
19012|       |    The library maps CBOR types to JSON value types as follows:
19013|       |
19014|       |    CBOR type              | JSON value type | first byte
19015|       |    ---------------------- | --------------- | ----------
19016|       |    Integer                | number_unsigned | 0x00..0x17
19017|       |    Unsigned integer       | number_unsigned | 0x18
19018|       |    Unsigned integer       | number_unsigned | 0x19
19019|       |    Unsigned integer       | number_unsigned | 0x1A
19020|       |    Unsigned integer       | number_unsigned | 0x1B
19021|       |    Negative integer       | number_integer  | 0x20..0x37
19022|       |    Negative integer       | number_integer  | 0x38
19023|       |    Negative integer       | number_integer  | 0x39
19024|       |    Negative integer       | number_integer  | 0x3A
19025|       |    Negative integer       | number_integer  | 0x3B
19026|       |    Negative integer       | number_integer  | 0x40..0x57
19027|       |    UTF-8 string           | string          | 0x60..0x77
19028|       |    UTF-8 string           | string          | 0x78
19029|       |    UTF-8 string           | string          | 0x79
19030|       |    UTF-8 string           | string          | 0x7A
19031|       |    UTF-8 string           | string          | 0x7B
19032|       |    UTF-8 string           | string          | 0x7F
19033|       |    array                  | array           | 0x80..0x97
19034|       |    array                  | array           | 0x98
19035|       |    array                  | array           | 0x99
19036|       |    array                  | array           | 0x9A
19037|       |    array                  | array           | 0x9B
19038|       |    array                  | array           | 0x9F
19039|       |    map                    | object          | 0xA0..0xB7
19040|       |    map                    | object          | 0xB8
19041|       |    map                    | object          | 0xB9
19042|       |    map                    | object          | 0xBA
19043|       |    map                    | object          | 0xBB
19044|       |    map                    | object          | 0xBF
19045|       |    False                  | `false`         | 0xF4
19046|       |    True                   | `true`          | 0xF5
19047|       |    Null                   | `null`          | 0xF6
19048|       |    Half-Precision Float   | number_float    | 0xF9
19049|       |    Single-Precision Float | number_float    | 0xFA
19050|       |    Double-Precision Float | number_float    | 0xFB
19051|       |
19052|       |    @warning The mapping is **incomplete** in the sense that not all CBOR
19053|       |             types can be converted to a JSON value. The following CBOR types
19054|       |             are not supported and will yield parse errors (parse_error.112):
19055|       |             - byte strings (0x40..0x5F)
19056|       |             - date/time (0xC0..0xC1)
19057|       |             - bignum (0xC2..0xC3)
19058|       |             - decimal fraction (0xC4)
19059|       |             - bigfloat (0xC5)
19060|       |             - tagged items (0xC6..0xD4, 0xD8..0xDB)
19061|       |             - expected conversions (0xD5..0xD7)
19062|       |             - simple values (0xE0..0xF3, 0xF8)
19063|       |             - undefined (0xF7)
19064|       |
19065|       |    @warning CBOR allows map keys of any type, whereas JSON only allows
19066|       |             strings as keys in object values. Therefore, CBOR maps with keys
19067|       |             other than UTF-8 strings are rejected (parse_error.113).
19068|       |
19069|       |    @note Any CBOR output created @ref to_cbor can be successfully parsed by
19070|       |          @ref from_cbor.
19071|       |
19072|       |    @param[in] i  an input in CBOR format convertible to an input adapter
19073|       |    @param[in] strict  whether to expect the input to be consumed until EOF
19074|       |                       (true by default)
19075|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
19076|       |    parse error (optional, true by default)
19077|       |
19078|       |    @return deserialized JSON value
19079|       |
19080|       |    @throw parse_error.110 if the given input ends prematurely or the end of
19081|       |    file was not reached when @a strict was set to true
19082|       |    @throw parse_error.112 if unsupported features from CBOR were
19083|       |    used in the given input @a v or if the input is not valid CBOR
19084|       |    @throw parse_error.113 if a string was expected as map key, but not found
19085|       |
19086|       |    @complexity Linear in the size of the input @a i.
19087|       |
19088|       |    @liveexample{The example shows the deserialization of a byte vector in CBOR
19089|       |    format to a JSON value.,from_cbor}
19090|       |
19091|       |    @sa http://cbor.io
19092|       |    @sa @ref to_cbor(const basic_json&) for the analogous serialization
19093|       |    @sa @ref from_msgpack(detail::input_adapter&&, const bool, const bool) for the
19094|       |        related MessagePack format
19095|       |    @sa @ref from_ubjson(detail::input_adapter&&, const bool, const bool) for the
19096|       |        related UBJSON format
19097|       |
19098|       |    @since version 2.0.9; parameter @a start_index since 2.1.1; changed to
19099|       |           consume input adapters, removed start_index parameter, and added
19100|       |           @a strict parameter since 3.0.0; added @a allow_exceptions parameter
19101|       |           since 3.2.0
19102|       |    */
19103|       |    static basic_json from_cbor(detail::input_adapter&& i,
19104|       |                                const bool strict = true,
19105|       |                                const bool allow_exceptions = true)
19106|       |    {
19107|       |        basic_json result;
19108|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
19109|       |        const bool res = binary_reader(detail::input_adapter(i)).sax_parse(input_format_t::cbor, &sdp, strict);
19110|       |        return res ? result : basic_json(value_t::discarded);
19111|       |    }
19112|       |
19113|       |    /*!
19114|       |    @copydoc from_cbor(detail::input_adapter&&, const bool, const bool)
19115|       |    */
19116|       |    template<typename A1, typename A2,
19117|       |             detail::enable_if_t<std::is_constructible<detail::input_adapter, A1, A2>::value, int> = 0>
19118|       |    static basic_json from_cbor(A1 && a1, A2 && a2,
19119|       |                                const bool strict = true,
19120|       |                                const bool allow_exceptions = true)
19121|       |    {
19122|       |        basic_json result;
19123|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
19124|       |        const bool res = binary_reader(detail::input_adapter(std::forward<A1>(a1), std::forward<A2>(a2))).sax_parse(input_format_t::cbor, &sdp, strict);
19125|       |        return res ? result : basic_json(value_t::discarded);
19126|       |    }
19127|       |
19128|       |    /*!
19129|       |    @brief create a JSON value from an input in MessagePack format
19130|       |
19131|       |    Deserializes a given input @a i to a JSON value using the MessagePack
19132|       |    serialization format.
19133|       |
19134|       |    The library maps MessagePack types to JSON value types as follows:
19135|       |
19136|       |    MessagePack type | JSON value type | first byte
19137|       |    ---------------- | --------------- | ----------
19138|       |    positive fixint  | number_unsigned | 0x00..0x7F
19139|       |    fixmap           | object          | 0x80..0x8F
19140|       |    fixarray         | array           | 0x90..0x9F
19141|       |    fixstr           | string          | 0xA0..0xBF
19142|       |    nil              | `null`          | 0xC0
19143|       |    false            | `false`         | 0xC2
19144|       |    true             | `true`          | 0xC3
19145|       |    float 32         | number_float    | 0xCA
19146|       |    float 64         | number_float    | 0xCB
19147|       |    uint 8           | number_unsigned | 0xCC
19148|       |    uint 16          | number_unsigned | 0xCD
19149|       |    uint 32          | number_unsigned | 0xCE
19150|       |    uint 64          | number_unsigned | 0xCF
19151|       |    int 8            | number_integer  | 0xD0
19152|       |    int 16           | number_integer  | 0xD1
19153|       |    int 32           | number_integer  | 0xD2
19154|       |    int 64           | number_integer  | 0xD3
19155|       |    str 8            | string          | 0xD9
19156|       |    str 16           | string          | 0xDA
19157|       |    str 32           | string          | 0xDB
19158|       |    array 16         | array           | 0xDC
19159|       |    array 32         | array           | 0xDD
19160|       |    map 16           | object          | 0xDE
19161|       |    map 32           | object          | 0xDF
19162|       |    negative fixint  | number_integer  | 0xE0-0xFF
19163|       |
19164|       |    @warning The mapping is **incomplete** in the sense that not all
19165|       |             MessagePack types can be converted to a JSON value. The following
19166|       |             MessagePack types are not supported and will yield parse errors:
19167|       |              - bin 8 - bin 32 (0xC4..0xC6)
19168|       |              - ext 8 - ext 32 (0xC7..0xC9)
19169|       |              - fixext 1 - fixext 16 (0xD4..0xD8)
19170|       |
19171|       |    @note Any MessagePack output created @ref to_msgpack can be successfully
19172|       |          parsed by @ref from_msgpack.
19173|       |
19174|       |    @param[in] i  an input in MessagePack format convertible to an input
19175|       |                  adapter
19176|       |    @param[in] strict  whether to expect the input to be consumed until EOF
19177|       |                       (true by default)
19178|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
19179|       |    parse error (optional, true by default)
19180|       |
19181|       |    @return deserialized JSON value
19182|       |
19183|       |    @throw parse_error.110 if the given input ends prematurely or the end of
19184|       |    file was not reached when @a strict was set to true
19185|       |    @throw parse_error.112 if unsupported features from MessagePack were
19186|       |    used in the given input @a i or if the input is not valid MessagePack
19187|       |    @throw parse_error.113 if a string was expected as map key, but not found
19188|       |
19189|       |    @complexity Linear in the size of the input @a i.
19190|       |
19191|       |    @liveexample{The example shows the deserialization of a byte vector in
19192|       |    MessagePack format to a JSON value.,from_msgpack}
19193|       |
19194|       |    @sa http://msgpack.org
19195|       |    @sa @ref to_msgpack(const basic_json&) for the analogous serialization
19196|       |    @sa @ref from_cbor(detail::input_adapter&&, const bool, const bool) for the
19197|       |        related CBOR format
19198|       |    @sa @ref from_ubjson(detail::input_adapter&&, const bool, const bool) for
19199|       |        the related UBJSON format
19200|       |    @sa @ref from_bson(detail::input_adapter&&, const bool, const bool) for
19201|       |        the related BSON format
19202|       |
19203|       |    @since version 2.0.9; parameter @a start_index since 2.1.1; changed to
19204|       |           consume input adapters, removed start_index parameter, and added
19205|       |           @a strict parameter since 3.0.0; added @a allow_exceptions parameter
19206|       |           since 3.2.0
19207|       |    */
19208|       |    static basic_json from_msgpack(detail::input_adapter&& i,
19209|       |                                   const bool strict = true,
19210|       |                                   const bool allow_exceptions = true)
19211|       |    {
19212|       |        basic_json result;
19213|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
19214|       |        const bool res = binary_reader(detail::input_adapter(i)).sax_parse(input_format_t::msgpack, &sdp, strict);
19215|       |        return res ? result : basic_json(value_t::discarded);
19216|       |    }
19217|       |
19218|       |    /*!
19219|       |    @copydoc from_msgpack(detail::input_adapter&&, const bool, const bool)
19220|       |    */
19221|       |    template<typename A1, typename A2,
19222|       |             detail::enable_if_t<std::is_constructible<detail::input_adapter, A1, A2>::value, int> = 0>
19223|       |    static basic_json from_msgpack(A1 && a1, A2 && a2,
19224|       |                                   const bool strict = true,
19225|       |                                   const bool allow_exceptions = true)
19226|       |    {
19227|       |        basic_json result;
19228|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
19229|       |        const bool res = binary_reader(detail::input_adapter(std::forward<A1>(a1), std::forward<A2>(a2))).sax_parse(input_format_t::msgpack, &sdp, strict);
19230|       |        return res ? result : basic_json(value_t::discarded);
19231|       |    }
19232|       |
19233|       |    /*!
19234|       |    @brief create a JSON value from an input in UBJSON format
19235|       |
19236|       |    Deserializes a given input @a i to a JSON value using the UBJSON (Universal
19237|       |    Binary JSON) serialization format.
19238|       |
19239|       |    The library maps UBJSON types to JSON value types as follows:
19240|       |
19241|       |    UBJSON type | JSON value type                         | marker
19242|       |    ----------- | --------------------------------------- | ------
19243|       |    no-op       | *no value, next value is read*          | `N`
19244|       |    null        | `null`                                  | `Z`
19245|       |    false       | `false`                                 | `F`
19246|       |    true        | `true`                                  | `T`
19247|       |    float32     | number_float                            | `d`
19248|       |    float64     | number_float                            | `D`
19249|       |    uint8       | number_unsigned                         | `U`
19250|       |    int8        | number_integer                          | `i`
19251|       |    int16       | number_integer                          | `I`
19252|       |    int32       | number_integer                          | `l`
19253|       |    int64       | number_integer                          | `L`
19254|       |    string      | string                                  | `S`
19255|       |    char        | string                                  | `C`
19256|       |    array       | array (optimized values are supported)  | `[`
19257|       |    object      | object (optimized values are supported) | `{`
19258|       |
19259|       |    @note The mapping is **complete** in the sense that any UBJSON value can
19260|       |          be converted to a JSON value.
19261|       |
19262|       |    @param[in] i  an input in UBJSON format convertible to an input adapter
19263|       |    @param[in] strict  whether to expect the input to be consumed until EOF
19264|       |                       (true by default)
19265|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
19266|       |    parse error (optional, true by default)
19267|       |
19268|       |    @return deserialized JSON value
19269|       |
19270|       |    @throw parse_error.110 if the given input ends prematurely or the end of
19271|       |    file was not reached when @a strict was set to true
19272|       |    @throw parse_error.112 if a parse error occurs
19273|       |    @throw parse_error.113 if a string could not be parsed successfully
19274|       |
19275|       |    @complexity Linear in the size of the input @a i.
19276|       |
19277|       |    @liveexample{The example shows the deserialization of a byte vector in
19278|       |    UBJSON format to a JSON value.,from_ubjson}
19279|       |
19280|       |    @sa http://ubjson.org
19281|       |    @sa @ref to_ubjson(const basic_json&, const bool, const bool) for the
19282|       |             analogous serialization
19283|       |    @sa @ref from_cbor(detail::input_adapter&&, const bool, const bool) for the
19284|       |        related CBOR format
19285|       |    @sa @ref from_msgpack(detail::input_adapter&&, const bool, const bool) for
19286|       |        the related MessagePack format
19287|       |    @sa @ref from_bson(detail::input_adapter&&, const bool, const bool) for
19288|       |        the related BSON format
19289|       |
19290|       |    @since version 3.1.0; added @a allow_exceptions parameter since 3.2.0
19291|       |    */
19292|       |    static basic_json from_ubjson(detail::input_adapter&& i,
19293|       |                                  const bool strict = true,
19294|       |                                  const bool allow_exceptions = true)
19295|       |    {
19296|       |        basic_json result;
19297|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
19298|       |        const bool res = binary_reader(detail::input_adapter(i)).sax_parse(input_format_t::ubjson, &sdp, strict);
19299|       |        return res ? result : basic_json(value_t::discarded);
19300|       |    }
19301|       |
19302|       |    /*!
19303|       |    @copydoc from_ubjson(detail::input_adapter&&, const bool, const bool)
19304|       |    */
19305|       |    template<typename A1, typename A2,
19306|       |             detail::enable_if_t<std::is_constructible<detail::input_adapter, A1, A2>::value, int> = 0>
19307|       |    static basic_json from_ubjson(A1 && a1, A2 && a2,
19308|       |                                  const bool strict = true,
19309|       |                                  const bool allow_exceptions = true)
19310|       |    {
19311|       |        basic_json result;
19312|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
19313|       |        const bool res = binary_reader(detail::input_adapter(std::forward<A1>(a1), std::forward<A2>(a2))).sax_parse(input_format_t::ubjson, &sdp, strict);
19314|       |        return res ? result : basic_json(value_t::discarded);
19315|       |    }
19316|       |
19317|       |    /*!
19318|       |    @brief Create a JSON value from an input in BSON format
19319|       |
19320|       |    Deserializes a given input @a i to a JSON value using the BSON (Binary JSON)
19321|       |    serialization format.
19322|       |
19323|       |    The library maps BSON record types to JSON value types as follows:
19324|       |
19325|       |    BSON type       | BSON marker byte | JSON value type
19326|       |    --------------- | ---------------- | ---------------------------
19327|       |    double          | 0x01             | number_float
19328|       |    string          | 0x02             | string
19329|       |    document        | 0x03             | object
19330|       |    array           | 0x04             | array
19331|       |    binary          | 0x05             | still unsupported
19332|       |    undefined       | 0x06             | still unsupported
19333|       |    ObjectId        | 0x07             | still unsupported
19334|       |    boolean         | 0x08             | boolean
19335|       |    UTC Date-Time   | 0x09             | still unsupported
19336|       |    null            | 0x0A             | null
19337|       |    Regular Expr.   | 0x0B             | still unsupported
19338|       |    DB Pointer      | 0x0C             | still unsupported
19339|       |    JavaScript Code | 0x0D             | still unsupported
19340|       |    Symbol          | 0x0E             | still unsupported
19341|       |    JavaScript Code | 0x0F             | still unsupported
19342|       |    int32           | 0x10             | number_integer
19343|       |    Timestamp       | 0x11             | still unsupported
19344|       |    128-bit decimal float | 0x13       | still unsupported
19345|       |    Max Key         | 0x7F             | still unsupported
19346|       |    Min Key         | 0xFF             | still unsupported
19347|       |
19348|       |    @warning The mapping is **incomplete**. The unsupported mappings
19349|       |             are indicated in the table above.
19350|       |
19351|       |    @param[in] i  an input in BSON format convertible to an input adapter
19352|       |    @param[in] strict  whether to expect the input to be consumed until EOF
19353|       |                       (true by default)
19354|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
19355|       |    parse error (optional, true by default)
19356|       |
19357|       |    @return deserialized JSON value
19358|       |
19359|       |    @throw parse_error.114 if an unsupported BSON record type is encountered
19360|       |
19361|       |    @complexity Linear in the size of the input @a i.
19362|       |
19363|       |    @liveexample{The example shows the deserialization of a byte vector in
19364|       |    BSON format to a JSON value.,from_bson}
19365|       |
19366|       |    @sa http://bsonspec.org/spec.html
19367|       |    @sa @ref to_bson(const basic_json&) for the analogous serialization
19368|       |    @sa @ref from_cbor(detail::input_adapter&&, const bool, const bool) for the
19369|       |        related CBOR format
19370|       |    @sa @ref from_msgpack(detail::input_adapter&&, const bool, const bool) for
19371|       |        the related MessagePack format
19372|       |    @sa @ref from_ubjson(detail::input_adapter&&, const bool, const bool) for the
19373|       |        related UBJSON format
19374|       |    */
19375|       |    static basic_json from_bson(detail::input_adapter&& i,
19376|       |                                const bool strict = true,
19377|       |                                const bool allow_exceptions = true)
19378|       |    {
19379|       |        basic_json result;
19380|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
19381|       |        const bool res = binary_reader(detail::input_adapter(i)).sax_parse(input_format_t::bson, &sdp, strict);
19382|       |        return res ? result : basic_json(value_t::discarded);
19383|       |    }
19384|       |
19385|       |    /*!
19386|       |    @copydoc from_bson(detail::input_adapter&&, const bool, const bool)
19387|       |    */
19388|       |    template<typename A1, typename A2,
19389|       |             detail::enable_if_t<std::is_constructible<detail::input_adapter, A1, A2>::value, int> = 0>
19390|       |    static basic_json from_bson(A1 && a1, A2 && a2,
19391|       |                                const bool strict = true,
19392|       |                                const bool allow_exceptions = true)
19393|       |    {
19394|       |        basic_json result;
19395|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
19396|       |        const bool res = binary_reader(detail::input_adapter(std::forward<A1>(a1), std::forward<A2>(a2))).sax_parse(input_format_t::bson, &sdp, strict);
19397|       |        return res ? result : basic_json(value_t::discarded);
19398|       |    }
19399|       |
19400|       |
19401|       |
19402|       |    /// @}
19403|       |
19404|       |    //////////////////////////
19405|       |    // JSON Pointer support //
19406|       |    //////////////////////////
19407|       |
19408|       |    /// @name JSON Pointer functions
19409|       |    /// @{
19410|       |
19411|       |    /*!
19412|       |    @brief access specified element via JSON Pointer
19413|       |
19414|       |    Uses a JSON pointer to retrieve a reference to the respective JSON value.
19415|       |    No bound checking is performed. Similar to @ref operator[](const typename
19416|       |    object_t::key_type&), `null` values are created in arrays and objects if
19417|       |    necessary.
19418|       |
19419|       |    In particular:
19420|       |    - If the JSON pointer points to an object key that does not exist, it
19421|       |      is created an filled with a `null` value before a reference to it
19422|       |      is returned.
19423|       |    - If the JSON pointer points to an array index that does not exist, it
19424|       |      is created an filled with a `null` value before a reference to it
19425|       |      is returned. All indices between the current maximum and the given
19426|       |      index are also filled with `null`.
19427|       |    - The special value `-` is treated as a synonym for the index past the
19428|       |      end.
19429|       |
19430|       |    @param[in] ptr  a JSON pointer
19431|       |
19432|       |    @return reference to the element pointed to by @a ptr
19433|       |
19434|       |    @complexity Constant.
19435|       |
19436|       |    @throw parse_error.106   if an array index begins with '0'
19437|       |    @throw parse_error.109   if an array index was not a number
19438|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
19439|       |
19440|       |    @liveexample{The behavior is shown in the example.,operatorjson_pointer}
19441|       |
19442|       |    @since version 2.0.0
19443|       |    */
19444|       |    reference operator[](const json_pointer& ptr)
19445|       |    {
19446|       |        return ptr.get_unchecked(this);
19447|       |    }
19448|       |
19449|       |    /*!
19450|       |    @brief access specified element via JSON Pointer
19451|       |
19452|       |    Uses a JSON pointer to retrieve a reference to the respective JSON value.
19453|       |    No bound checking is performed. The function does not change the JSON
19454|       |    value; no `null` values are created. In particular, the the special value
19455|       |    `-` yields an exception.
19456|       |
19457|       |    @param[in] ptr  JSON pointer to the desired element
19458|       |
19459|       |    @return const reference to the element pointed to by @a ptr
19460|       |
19461|       |    @complexity Constant.
19462|       |
19463|       |    @throw parse_error.106   if an array index begins with '0'
19464|       |    @throw parse_error.109   if an array index was not a number
19465|       |    @throw out_of_range.402  if the array index '-' is used
19466|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
19467|       |
19468|       |    @liveexample{The behavior is shown in the example.,operatorjson_pointer_const}
19469|       |
19470|       |    @since version 2.0.0
19471|       |    */
19472|       |    const_reference operator[](const json_pointer& ptr) const
19473|       |    {
19474|       |        return ptr.get_unchecked(this);
19475|       |    }
19476|       |
19477|       |    /*!
19478|       |    @brief access specified element via JSON Pointer
19479|       |
19480|       |    Returns a reference to the element at with specified JSON pointer @a ptr,
19481|       |    with bounds checking.
19482|       |
19483|       |    @param[in] ptr  JSON pointer to the desired element
19484|       |
19485|       |    @return reference to the element pointed to by @a ptr
19486|       |
19487|       |    @throw parse_error.106 if an array index in the passed JSON pointer @a ptr
19488|       |    begins with '0'. See example below.
19489|       |
19490|       |    @throw parse_error.109 if an array index in the passed JSON pointer @a ptr
19491|       |    is not a number. See example below.
19492|       |
19493|       |    @throw out_of_range.401 if an array index in the passed JSON pointer @a ptr
19494|       |    is out of range. See example below.
19495|       |
19496|       |    @throw out_of_range.402 if the array index '-' is used in the passed JSON
19497|       |    pointer @a ptr. As `at` provides checked access (and no elements are
19498|       |    implicitly inserted), the index '-' is always invalid. See example below.
19499|       |
19500|       |    @throw out_of_range.403 if the JSON pointer describes a key of an object
19501|       |    which cannot be found. See example below.
19502|       |
19503|       |    @throw out_of_range.404 if the JSON pointer @a ptr can not be resolved.
19504|       |    See example below.
19505|       |
19506|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
19507|       |    changes in the JSON value.
19508|       |
19509|       |    @complexity Constant.
19510|       |
19511|       |    @since version 2.0.0
19512|       |
19513|       |    @liveexample{The behavior is shown in the example.,at_json_pointer}
19514|       |    */
19515|       |    reference at(const json_pointer& ptr)
19516|       |    {
19517|       |        return ptr.get_checked(this);
19518|       |    }
19519|       |
19520|       |    /*!
19521|       |    @brief access specified element via JSON Pointer
19522|       |
19523|       |    Returns a const reference to the element at with specified JSON pointer @a
19524|       |    ptr, with bounds checking.
19525|       |
19526|       |    @param[in] ptr  JSON pointer to the desired element
19527|       |
19528|       |    @return reference to the element pointed to by @a ptr
19529|       |
19530|       |    @throw parse_error.106 if an array index in the passed JSON pointer @a ptr
19531|       |    begins with '0'. See example below.
19532|       |
19533|       |    @throw parse_error.109 if an array index in the passed JSON pointer @a ptr
19534|       |    is not a number. See example below.
19535|       |
19536|       |    @throw out_of_range.401 if an array index in the passed JSON pointer @a ptr
19537|       |    is out of range. See example below.
19538|       |
19539|       |    @throw out_of_range.402 if the array index '-' is used in the passed JSON
19540|       |    pointer @a ptr. As `at` provides checked access (and no elements are
19541|       |    implicitly inserted), the index '-' is always invalid. See example below.
19542|       |
19543|       |    @throw out_of_range.403 if the JSON pointer describes a key of an object
19544|       |    which cannot be found. See example below.
19545|       |
19546|       |    @throw out_of_range.404 if the JSON pointer @a ptr can not be resolved.
19547|       |    See example below.
19548|       |
19549|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
19550|       |    changes in the JSON value.
19551|       |
19552|       |    @complexity Constant.
19553|       |
19554|       |    @since version 2.0.0
19555|       |
19556|       |    @liveexample{The behavior is shown in the example.,at_json_pointer_const}
19557|       |    */
19558|       |    const_reference at(const json_pointer& ptr) const
19559|       |    {
19560|       |        return ptr.get_checked(this);
19561|       |    }
19562|       |
19563|       |    /*!
19564|       |    @brief return flattened JSON value
19565|       |
19566|       |    The function creates a JSON object whose keys are JSON pointers (see [RFC
19567|       |    6901](https://tools.ietf.org/html/rfc6901)) and whose values are all
19568|       |    primitive. The original JSON value can be restored using the @ref
19569|       |    unflatten() function.
19570|       |
19571|       |    @return an object that maps JSON pointers to primitive values
19572|       |
19573|       |    @note Empty objects and arrays are flattened to `null` and will not be
19574|       |          reconstructed correctly by the @ref unflatten() function.
19575|       |
19576|       |    @complexity Linear in the size the JSON value.
19577|       |
19578|       |    @liveexample{The following code shows how a JSON object is flattened to an
19579|       |    object whose keys consist of JSON pointers.,flatten}
19580|       |
19581|       |    @sa @ref unflatten() for the reverse function
19582|       |
19583|       |    @since version 2.0.0
19584|       |    */
19585|       |    basic_json flatten() const
19586|       |    {
19587|       |        basic_json result(value_t::object);
19588|       |        json_pointer::flatten("", *this, result);
19589|       |        return result;
19590|       |    }
19591|       |
19592|       |    /*!
19593|       |    @brief unflatten a previously flattened JSON value
19594|       |
19595|       |    The function restores the arbitrary nesting of a JSON value that has been
19596|       |    flattened before using the @ref flatten() function. The JSON value must
19597|       |    meet certain constraints:
19598|       |    1. The value must be an object.
19599|       |    2. The keys must be JSON pointers (see
19600|       |       [RFC 6901](https://tools.ietf.org/html/rfc6901))
19601|       |    3. The mapped values must be primitive JSON types.
19602|       |
19603|       |    @return the original JSON from a flattened version
19604|       |
19605|       |    @note Empty objects and arrays are flattened by @ref flatten() to `null`
19606|       |          values and can not unflattened to their original type. Apart from
19607|       |          this example, for a JSON value `j`, the following is always true:
19608|       |          `j == j.flatten().unflatten()`.
19609|       |
19610|       |    @complexity Linear in the size the JSON value.
19611|       |
19612|       |    @throw type_error.314  if value is not an object
19613|       |    @throw type_error.315  if object values are not primitive
19614|       |
19615|       |    @liveexample{The following code shows how a flattened JSON object is
19616|       |    unflattened into the original nested JSON object.,unflatten}
19617|       |
19618|       |    @sa @ref flatten() for the reverse function
19619|       |
19620|       |    @since version 2.0.0
19621|       |    */
19622|       |    basic_json unflatten() const
19623|       |    {
19624|       |        return json_pointer::unflatten(*this);
19625|       |    }
19626|       |
19627|       |    /// @}
19628|       |
19629|       |    //////////////////////////
19630|       |    // JSON Patch functions //
19631|       |    //////////////////////////
19632|       |
19633|       |    /// @name JSON Patch functions
19634|       |    /// @{
19635|       |
19636|       |    /*!
19637|       |    @brief applies a JSON patch
19638|       |
19639|       |    [JSON Patch](http://jsonpatch.com) defines a JSON document structure for
19640|       |    expressing a sequence of operations to apply to a JSON) document. With
19641|       |    this function, a JSON Patch is applied to the current JSON value by
19642|       |    executing all operations from the patch.
19643|       |
19644|       |    @param[in] json_patch  JSON patch document
19645|       |    @return patched document
19646|       |
19647|       |    @note The application of a patch is atomic: Either all operations succeed
19648|       |          and the patched document is returned or an exception is thrown. In
19649|       |          any case, the original value is not changed: the patch is applied
19650|       |          to a copy of the value.
19651|       |
19652|       |    @throw parse_error.104 if the JSON patch does not consist of an array of
19653|       |    objects
19654|       |
19655|       |    @throw parse_error.105 if the JSON patch is malformed (e.g., mandatory
19656|       |    attributes are missing); example: `"operation add must have member path"`
19657|       |
19658|       |    @throw out_of_range.401 if an array index is out of range.
19659|       |
19660|       |    @throw out_of_range.403 if a JSON pointer inside the patch could not be
19661|       |    resolved successfully in the current JSON value; example: `"key baz not
19662|       |    found"`
19663|       |
19664|       |    @throw out_of_range.405 if JSON pointer has no parent ("add", "remove",
19665|       |    "move")
19666|       |
19667|       |    @throw other_error.501 if "test" operation was unsuccessful
19668|       |
19669|       |    @complexity Linear in the size of the JSON value and the length of the
19670|       |    JSON patch. As usually only a fraction of the JSON value is affected by
19671|       |    the patch, the complexity can usually be neglected.
19672|       |
19673|       |    @liveexample{The following code shows how a JSON patch is applied to a
19674|       |    value.,patch}
19675|       |
19676|       |    @sa @ref diff -- create a JSON patch by comparing two JSON values
19677|       |
19678|       |    @sa [RFC 6902 (JSON Patch)](https://tools.ietf.org/html/rfc6902)
19679|       |    @sa [RFC 6901 (JSON Pointer)](https://tools.ietf.org/html/rfc6901)
19680|       |
19681|       |    @since version 2.0.0
19682|       |    */
19683|       |    basic_json patch(const basic_json& json_patch) const
19684|       |    {
19685|       |        // make a working copy to apply the patch to
19686|       |        basic_json result = *this;
19687|       |
19688|       |        // the valid JSON Patch operations
19689|       |        enum class patch_operations {add, remove, replace, move, copy, test, invalid};
19690|       |
19691|       |        const auto get_op = [](const std::string & op)
19692|       |        {
19693|       |            if (op == "add")
19694|       |            {
19695|       |                return patch_operations::add;
19696|       |            }
19697|       |            if (op == "remove")
19698|       |            {
19699|       |                return patch_operations::remove;
19700|       |            }
19701|       |            if (op == "replace")
19702|       |            {
19703|       |                return patch_operations::replace;
19704|       |            }
19705|       |            if (op == "move")
19706|       |            {
19707|       |                return patch_operations::move;
19708|       |            }
19709|       |            if (op == "copy")
19710|       |            {
19711|       |                return patch_operations::copy;
19712|       |            }
19713|       |            if (op == "test")
19714|       |            {
19715|       |                return patch_operations::test;
19716|       |            }
19717|       |
19718|       |            return patch_operations::invalid;
19719|       |        };
19720|       |
19721|       |        // wrapper for "add" operation; add value at ptr
19722|       |        const auto operation_add = [&result](json_pointer & ptr, basic_json val)
19723|       |        {
19724|       |            // adding to the root of the target document means replacing it
19725|       |            if (ptr.is_root())
19726|       |            {
19727|       |                result = val;
19728|       |            }
19729|       |            else
19730|       |            {
19731|       |                // make sure the top element of the pointer exists
19732|       |                json_pointer top_pointer = ptr.top();
19733|       |                if (top_pointer != ptr)
19734|       |                {
19735|       |                    result.at(top_pointer);
19736|       |                }
19737|       |
19738|       |                // get reference to parent of JSON pointer ptr
19739|       |                const auto last_path = ptr.pop_back();
19740|       |                basic_json& parent = result[ptr];
19741|       |
19742|       |                switch (parent.m_type)
19743|       |                {
19744|       |                    case value_t::null:
19745|       |                    case value_t::object:
19746|       |                    {
19747|       |                        // use operator[] to add value
19748|       |                        parent[last_path] = val;
19749|       |                        break;
19750|       |                    }
19751|       |
19752|       |                    case value_t::array:
19753|       |                    {
19754|       |                        if (last_path == "-")
19755|       |                        {
19756|       |                            // special case: append to back
19757|       |                            parent.push_back(val);
19758|       |                        }
19759|       |                        else
19760|       |                        {
19761|       |                            const auto idx = json_pointer::array_index(last_path);
19762|       |                            if (JSON_UNLIKELY(static_cast<size_type>(idx) > parent.size()))
19763|       |                            {
19764|       |                                // avoid undefined behavior
19765|       |                                JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
19766|       |                            }
19767|       |
19768|       |                            // default case: insert add offset
19769|       |                            parent.insert(parent.begin() + static_cast<difference_type>(idx), val);
19770|       |                        }
19771|       |                        break;
19772|       |                    }
19773|       |
19774|       |                    // LCOV_EXCL_START
19775|       |                    default:
19776|       |                    {
19777|       |                        // if there exists a parent it cannot be primitive
19778|       |                        assert(false);
19779|       |                    }
19780|       |                        // LCOV_EXCL_STOP
19781|       |                }
19782|       |            }
19783|       |        };
19784|       |
19785|       |        // wrapper for "remove" operation; remove value at ptr
19786|       |        const auto operation_remove = [&result](json_pointer & ptr)
19787|       |        {
19788|       |            // get reference to parent of JSON pointer ptr
19789|       |            const auto last_path = ptr.pop_back();
19790|       |            basic_json& parent = result.at(ptr);
19791|       |
19792|       |            // remove child
19793|       |            if (parent.is_object())
19794|       |            {
19795|       |                // perform range check
19796|       |                auto it = parent.find(last_path);
19797|       |                if (JSON_LIKELY(it != parent.end()))
19798|       |                {
19799|       |                    parent.erase(it);
19800|       |                }
19801|       |                else
19802|       |                {
19803|       |                    JSON_THROW(out_of_range::create(403, "key '" + last_path + "' not found"));
19804|       |                }
19805|       |            }
19806|       |            else if (parent.is_array())
19807|       |            {
19808|       |                // note erase performs range check
19809|       |                parent.erase(static_cast<size_type>(json_pointer::array_index(last_path)));
19810|       |            }
19811|       |        };
19812|       |
19813|       |        // type check: top level value must be an array
19814|       |        if (JSON_UNLIKELY(not json_patch.is_array()))
19815|       |        {
19816|       |            JSON_THROW(parse_error::create(104, 0, "JSON patch must be an array of objects"));
19817|       |        }
19818|       |
19819|       |        // iterate and apply the operations
19820|       |        for (const auto& val : json_patch)
19821|       |        {
19822|       |            // wrapper to get a value for an operation
19823|       |            const auto get_value = [&val](const std::string & op,
19824|       |                                          const std::string & member,
19825|       |                                          bool string_type) -> basic_json &
19826|       |            {
19827|       |                // find value
19828|       |                auto it = val.m_value.object->find(member);
19829|       |
19830|       |                // context-sensitive error message
19831|       |                const auto error_msg = (op == "op") ? "operation" : "operation '" + op + "'";
19832|       |
19833|       |                // check if desired value is present
19834|       |                if (JSON_UNLIKELY(it == val.m_value.object->end()))
19835|       |                {
19836|       |                    JSON_THROW(parse_error::create(105, 0, error_msg + " must have member '" + member + "'"));
19837|       |                }
19838|       |
19839|       |                // check if result is of type string
19840|       |                if (JSON_UNLIKELY(string_type and not it->second.is_string()))
19841|       |                {
19842|       |                    JSON_THROW(parse_error::create(105, 0, error_msg + " must have string member '" + member + "'"));
19843|       |                }
19844|       |
19845|       |                // no error: return value
19846|       |                return it->second;
19847|       |            };
19848|       |
19849|       |            // type check: every element of the array must be an object
19850|       |            if (JSON_UNLIKELY(not val.is_object()))
19851|       |            {
19852|       |                JSON_THROW(parse_error::create(104, 0, "JSON patch must be an array of objects"));
19853|       |            }
19854|       |
19855|       |            // collect mandatory members
19856|       |            const std::string op = get_value("op", "op", true);
19857|       |            const std::string path = get_value(op, "path", true);
19858|       |            json_pointer ptr(path);
19859|       |
19860|       |            switch (get_op(op))
19861|       |            {
19862|       |                case patch_operations::add:
19863|       |                {
19864|       |                    operation_add(ptr, get_value("add", "value", false));
19865|       |                    break;
19866|       |                }
19867|       |
19868|       |                case patch_operations::remove:
19869|       |                {
19870|       |                    operation_remove(ptr);
19871|       |                    break;
19872|       |                }
19873|       |
19874|       |                case patch_operations::replace:
19875|       |                {
19876|       |                    // the "path" location must exist - use at()
19877|       |                    result.at(ptr) = get_value("replace", "value", false);
19878|       |                    break;
19879|       |                }
19880|       |
19881|       |                case patch_operations::move:
19882|       |                {
19883|       |                    const std::string from_path = get_value("move", "from", true);
19884|       |                    json_pointer from_ptr(from_path);
19885|       |
19886|       |                    // the "from" location must exist - use at()
19887|       |                    basic_json v = result.at(from_ptr);
19888|       |
19889|       |                    // The move operation is functionally identical to a
19890|       |                    // "remove" operation on the "from" location, followed
19891|       |                    // immediately by an "add" operation at the target
19892|       |                    // location with the value that was just removed.
19893|       |                    operation_remove(from_ptr);
19894|       |                    operation_add(ptr, v);
19895|       |                    break;
19896|       |                }
19897|       |
19898|       |                case patch_operations::copy:
19899|       |                {
19900|       |                    const std::string from_path = get_value("copy", "from", true);
19901|       |                    const json_pointer from_ptr(from_path);
19902|       |
19903|       |                    // the "from" location must exist - use at()
19904|       |                    basic_json v = result.at(from_ptr);
19905|       |
19906|       |                    // The copy is functionally identical to an "add"
19907|       |                    // operation at the target location using the value
19908|       |                    // specified in the "from" member.
19909|       |                    operation_add(ptr, v);
19910|       |                    break;
19911|       |                }
19912|       |
19913|       |                case patch_operations::test:
19914|       |                {
19915|       |                    bool success = false;
19916|       |                    JSON_TRY
19917|       |                    {
19918|       |                        // check if "value" matches the one at "path"
19919|       |                        // the "path" location must exist - use at()
19920|       |                        success = (result.at(ptr) == get_value("test", "value", false));
19921|       |                    }
19922|       |                    JSON_INTERNAL_CATCH (out_of_range&)
19923|       |                    {
19924|       |                        // ignore out of range errors: success remains false
19925|       |                    }
19926|       |
19927|       |                    // throw an exception if test fails
19928|       |                    if (JSON_UNLIKELY(not success))
19929|       |                    {
19930|       |                        JSON_THROW(other_error::create(501, "unsuccessful: " + val.dump()));
19931|       |                    }
19932|       |
19933|       |                    break;
19934|       |                }
19935|       |
19936|       |                case patch_operations::invalid:
19937|       |                {
19938|       |                    // op must be "add", "remove", "replace", "move", "copy", or
19939|       |                    // "test"
19940|       |                    JSON_THROW(parse_error::create(105, 0, "operation value '" + op + "' is invalid"));
19941|       |                }
19942|       |            }
19943|       |        }
19944|       |
19945|       |        return result;
19946|       |    }
19947|       |
19948|       |    /*!
19949|       |    @brief creates a diff as a JSON patch
19950|       |
19951|       |    Creates a [JSON Patch](http://jsonpatch.com) so that value @a source can
19952|       |    be changed into the value @a target by calling @ref patch function.
19953|       |
19954|       |    @invariant For two JSON values @a source and @a target, the following code
19955|       |    yields always `true`:
19956|       |    @code {.cpp}
19957|       |    source.patch(diff(source, target)) == target;
19958|       |    @endcode
19959|       |
19960|       |    @note Currently, only `remove`, `add`, and `replace` operations are
19961|       |          generated.
19962|       |
19963|       |    @param[in] source  JSON value to compare from
19964|       |    @param[in] target  JSON value to compare against
19965|       |    @param[in] path    helper value to create JSON pointers
19966|       |
19967|       |    @return a JSON patch to convert the @a source to @a target
19968|       |
19969|       |    @complexity Linear in the lengths of @a source and @a target.
19970|       |
19971|       |    @liveexample{The following code shows how a JSON patch is created as a
19972|       |    diff for two JSON values.,diff}
19973|       |
19974|       |    @sa @ref patch -- apply a JSON patch
19975|       |    @sa @ref merge_patch -- apply a JSON Merge Patch
19976|       |
19977|       |    @sa [RFC 6902 (JSON Patch)](https://tools.ietf.org/html/rfc6902)
19978|       |
19979|       |    @since version 2.0.0
19980|       |    */
19981|       |    static basic_json diff(const basic_json& source, const basic_json& target,
19982|       |                           const std::string& path = "")
19983|       |    {
19984|       |        // the patch
19985|       |        basic_json result(value_t::array);
19986|       |
19987|       |        // if the values are the same, return empty patch
19988|       |        if (source == target)
19989|       |        {
19990|       |            return result;
19991|       |        }
19992|       |
19993|       |        if (source.type() != target.type())
19994|       |        {
19995|       |            // different types: replace value
19996|       |            result.push_back(
19997|       |            {
19998|       |                {"op", "replace"}, {"path", path}, {"value", target}
19999|       |            });
20000|       |        }
20001|       |        else
20002|       |        {
20003|       |            switch (source.type())
20004|       |            {
20005|       |                case value_t::array:
20006|       |                {
20007|       |                    // first pass: traverse common elements
20008|       |                    std::size_t i = 0;
20009|       |                    while (i < source.size() and i < target.size())
20010|       |                    {
20011|       |                        // recursive call to compare array values at index i
20012|       |                        auto temp_diff = diff(source[i], target[i], path + "/" + std::to_string(i));
20013|       |                        result.insert(result.end(), temp_diff.begin(), temp_diff.end());
20014|       |                        ++i;
20015|       |                    }
20016|       |
20017|       |                    // i now reached the end of at least one array
20018|       |                    // in a second pass, traverse the remaining elements
20019|       |
20020|       |                    // remove my remaining elements
20021|       |                    const auto end_index = static_cast<difference_type>(result.size());
20022|       |                    while (i < source.size())
20023|       |                    {
20024|       |                        // add operations in reverse order to avoid invalid
20025|       |                        // indices
20026|       |                        result.insert(result.begin() + end_index, object(
20027|       |                        {
20028|       |                            {"op", "remove"},
20029|       |                            {"path", path + "/" + std::to_string(i)}
20030|       |                        }));
20031|       |                        ++i;
20032|       |                    }
20033|       |
20034|       |                    // add other remaining elements
20035|       |                    while (i < target.size())
20036|       |                    {
20037|       |                        result.push_back(
20038|       |                        {
20039|       |                            {"op", "add"},
20040|       |                            {"path", path + "/" + std::to_string(i)},
20041|       |                            {"value", target[i]}
20042|       |                        });
20043|       |                        ++i;
20044|       |                    }
20045|       |
20046|       |                    break;
20047|       |                }
20048|       |
20049|       |                case value_t::object:
20050|       |                {
20051|       |                    // first pass: traverse this object's elements
20052|       |                    for (auto it = source.cbegin(); it != source.cend(); ++it)
20053|       |                    {
20054|       |                        // escape the key name to be used in a JSON patch
20055|       |                        const auto key = json_pointer::escape(it.key());
20056|       |
20057|       |                        if (target.find(it.key()) != target.end())
20058|       |                        {
20059|       |                            // recursive call to compare object values at key it
20060|       |                            auto temp_diff = diff(it.value(), target[it.key()], path + "/" + key);
20061|       |                            result.insert(result.end(), temp_diff.begin(), temp_diff.end());
20062|       |                        }
20063|       |                        else
20064|       |                        {
20065|       |                            // found a key that is not in o -> remove it
20066|       |                            result.push_back(object(
20067|       |                            {
20068|       |                                {"op", "remove"}, {"path", path + "/" + key}
20069|       |                            }));
20070|       |                        }
20071|       |                    }
20072|       |
20073|       |                    // second pass: traverse other object's elements
20074|       |                    for (auto it = target.cbegin(); it != target.cend(); ++it)
20075|       |                    {
20076|       |                        if (source.find(it.key()) == source.end())
20077|       |                        {
20078|       |                            // found a key that is not in this -> add it
20079|       |                            const auto key = json_pointer::escape(it.key());
20080|       |                            result.push_back(
20081|       |                            {
20082|       |                                {"op", "add"}, {"path", path + "/" + key},
20083|       |                                {"value", it.value()}
20084|       |                            });
20085|       |                        }
20086|       |                    }
20087|       |
20088|       |                    break;
20089|       |                }
20090|       |
20091|       |                default:
20092|       |                {
20093|       |                    // both primitive type: replace value
20094|       |                    result.push_back(
20095|       |                    {
20096|       |                        {"op", "replace"}, {"path", path}, {"value", target}
20097|       |                    });
20098|       |                    break;
20099|       |                }
20100|       |            }
20101|       |        }
20102|       |
20103|       |        return result;
20104|       |    }
20105|       |
20106|       |    /// @}
20107|       |
20108|       |    ////////////////////////////////
20109|       |    // JSON Merge Patch functions //
20110|       |    ////////////////////////////////
20111|       |
20112|       |    /// @name JSON Merge Patch functions
20113|       |    /// @{
20114|       |
20115|       |    /*!
20116|       |    @brief applies a JSON Merge Patch
20117|       |
20118|       |    The merge patch format is primarily intended for use with the HTTP PATCH
20119|       |    method as a means of describing a set of modifications to a target
20120|       |    resource's content. This function applies a merge patch to the current
20121|       |    JSON value.
20122|       |
20123|       |    The function implements the following algorithm from Section 2 of
20124|       |    [RFC 7396 (JSON Merge Patch)](https://tools.ietf.org/html/rfc7396):
20125|       |
20126|       |    ```
20127|       |    define MergePatch(Target, Patch):
20128|       |      if Patch is an Object:
20129|       |        if Target is not an Object:
20130|       |          Target = {} // Ignore the contents and set it to an empty Object
20131|       |        for each Name/Value pair in Patch:
20132|       |          if Value is null:
20133|       |            if Name exists in Target:
20134|       |              remove the Name/Value pair from Target
20135|       |          else:
20136|       |            Target[Name] = MergePatch(Target[Name], Value)
20137|       |        return Target
20138|       |      else:
20139|       |        return Patch
20140|       |    ```
20141|       |
20142|       |    Thereby, `Target` is the current object; that is, the patch is applied to
20143|       |    the current value.
20144|       |
20145|       |    @param[in] apply_patch  the patch to apply
20146|       |
20147|       |    @complexity Linear in the lengths of @a patch.
20148|       |
20149|       |    @liveexample{The following code shows how a JSON Merge Patch is applied to
20150|       |    a JSON document.,merge_patch}
20151|       |
20152|       |    @sa @ref patch -- apply a JSON patch
20153|       |    @sa [RFC 7396 (JSON Merge Patch)](https://tools.ietf.org/html/rfc7396)
20154|       |
20155|       |    @since version 3.0.0
20156|       |    */
20157|       |    void merge_patch(const basic_json& apply_patch)
20158|       |    {
20159|       |        if (apply_patch.is_object())
20160|       |        {
20161|       |            if (not is_object())
20162|       |            {
20163|       |                *this = object();
20164|       |            }
20165|       |            for (auto it = apply_patch.begin(); it != apply_patch.end(); ++it)
20166|       |            {
20167|       |                if (it.value().is_null())
20168|       |                {
20169|       |                    erase(it.key());
20170|       |                }
20171|       |                else
20172|       |                {
20173|       |                    operator[](it.key()).merge_patch(it.value());
20174|       |                }
20175|       |            }
20176|       |        }
20177|       |        else
20178|       |        {
20179|       |            *this = apply_patch;
20180|       |        }
20181|       |    }
20182|       |
20183|       |    /// @}
20184|       |};
20185|       |} // namespace nlohmann
20186|       |
20187|       |///////////////////////
20188|       |// nonmember support //
20189|       |///////////////////////
20190|       |
20191|       |// specialization of std::swap, and std::hash
20192|       |namespace std
20193|       |{
20194|       |
20195|       |/// hash value for JSON objects
20196|       |template<>
20197|       |struct hash<nlohmann::json>
20198|       |{
20199|       |    /*!
20200|       |    @brief return a hash value for a JSON object
20201|       |
20202|       |    @since version 1.0.0
20203|       |    */
20204|       |    std::size_t operator()(const nlohmann::json& j) const
20205|      0|    {
20206|      0|        // a naive hashing via the string representation
20207|      0|        const auto& h = hash<nlohmann::json::string_t>();
20208|      0|        return h(j.dump());
20209|      0|    }
20210|       |};
20211|       |
20212|       |/// specialization for std::less<value_t>
20213|       |/// @note: do not remove the space after '<',
20214|       |///        see https://github.com/nlohmann/json/pull/679
20215|       |template<>
20216|       |struct less< ::nlohmann::detail::value_t>
20217|       |{
20218|       |    /*!
20219|       |    @brief compare two value_t enum values
20220|       |    @since version 3.0.0
20221|       |    */
20222|       |    bool operator()(nlohmann::detail::value_t lhs,
20223|       |                    nlohmann::detail::value_t rhs) const noexcept
20224|      0|    {
20225|      0|        return nlohmann::detail::operator<(lhs, rhs);
20226|      0|    }
20227|       |};
20228|       |
20229|       |/*!
20230|       |@brief exchanges the values of two JSON objects
20231|       |
20232|       |@since version 1.0.0
20233|       |*/
20234|       |template<>
20235|       |inline void swap<nlohmann::json>(nlohmann::json& j1, nlohmann::json& j2) noexcept(
20236|       |    is_nothrow_move_constructible<nlohmann::json>::value and
20237|       |    is_nothrow_move_assignable<nlohmann::json>::value
20238|       |)
20239|      0|{
20240|      0|    j1.swap(j2);
20241|      0|}
20242|       |
20243|       |} // namespace std
20244|       |
20245|       |/*!
20246|       |@brief user-defined string literal for JSON values
20247|       |
20248|       |This operator implements a user-defined string literal for JSON objects. It
20249|       |can be used by adding `"_json"` to a string literal and returns a JSON object
20250|       |if no parse error occurred.
20251|       |
20252|       |@param[in] s  a string representation of a JSON object
20253|       |@param[in] n  the length of string @a s
20254|       |@return a JSON object
20255|       |
20256|       |@since version 1.0.0
20257|       |*/
20258|       |inline nlohmann::json operator "" _json(const char* s, std::size_t n)
20259|      0|{
20260|      0|    return nlohmann::json::parse(s, s + n);
20261|      0|}
20262|       |
20263|       |/*!
20264|       |@brief user-defined string literal for JSON pointer
20265|       |
20266|       |This operator implements a user-defined string literal for JSON Pointers. It
20267|       |can be used by adding `"_json_pointer"` to a string literal and returns a JSON pointer
20268|       |object if no parse error occurred.
20269|       |
20270|       |@param[in] s  a string representation of a JSON Pointer
20271|       |@param[in] n  the length of string @a s
20272|       |@return a JSON pointer object
20273|       |
20274|       |@since version 2.0.0
20275|       |*/
20276|       |inline nlohmann::json::json_pointer operator "" _json_pointer(const char* s, std::size_t n)
20277|      0|{
20278|      0|    return nlohmann::json::json_pointer(std::string(s, n));
20279|      0|}
20280|       |
20281|       |// #include <nlohmann/detail/macro_unscope.hpp>
20282|       |
20283|       |
20284|       |// restore GCC/clang diagnostic settings
20285|       |#if defined(__clang__) || defined(__GNUC__) || defined(__GNUG__)
20286|       |    #pragma GCC diagnostic pop
20287|       |#endif
20288|       |#if defined(__clang__)
20289|       |    #pragma GCC diagnostic pop
20290|       |#endif
20291|       |
20292|       |// clean up
20293|       |#undef JSON_INTERNAL_CATCH
20294|       |#undef JSON_CATCH
20295|       |#undef JSON_THROW
20296|       |#undef JSON_TRY
20297|       |#undef JSON_LIKELY
20298|       |#undef JSON_UNLIKELY
20299|       |#undef JSON_DEPRECATED
20300|       |#undef JSON_HAS_CPP_14
20301|       |#undef JSON_HAS_CPP_17
20302|       |#undef NLOHMANN_BASIC_JSON_TPL_DECLARATION
20303|       |#undef NLOHMANN_BASIC_JSON_TPL
20304|       |
20305|       |
20306|       |#endif

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/Statistic/statistic.h:
    1|       |#ifndef STATISTIC_H
    2|       |#define STATISTIC_H
    3|       |#include <iostream>
    4|       |#include <deque>
    5|       |#include <numeric>
    6|       |#include <algorithm>
    7|       |#include <sstream>
    8|       |#include <cmath>
    9|       |#include <vector>
   10|       |
   11|       |template <class T>
   12|       |class STATISTIC
   13|       |{
   14|       |public:
   15|       |    STATISTIC(unsigned int size): m_size(size)
   16|    841|    {
   17|    841|
   18|    841|    }
  ------------------
  | _ZN9STATISTICIdEC2Ej:
  |   16|    825|    {
  |   17|    825|
  |   18|    825|    }
  ------------------
  | _ZN9STATISTICIiEC2Ej:
  |   16|     16|    {
  |   17|     16|
  |   18|     16|    }
  ------------------
   19|      3|    void resize(unsigned int i){
   20|      3|        if (i < m_size){
   21|     24|            while(m_dequeue.size()> i){
   22|     21|                pop_front();
   23|     21|            }
   24|      3|        }
   25|      3|        m_size = i;
   26|      3|    }
   27|     79|    T size(){
   28|     79|        return  static_cast<T>(m_dequeue.size());
   29|     79|    }
   30|     10|    void push_front(T v){
   31|     10|        if (m_dequeue.size() >= m_size){
   32|      1|            pop_back();
   33|      1|        }
   34|     10|        m_dequeue.push_front(v);
   35|     10|    }
   36|    599|    void push_back(T v){
   37|    599|        if (m_dequeue.size() >= m_size){
   38|      2|            pop_front();
   39|      2|        }
   40|    599|        m_dequeue.push_back(v);
   41|    599|    }
  ------------------
  | _ZN9STATISTICIdE9push_backEd:
  |   36|    307|    void push_back(T v){
  |   37|    307|        if (m_dequeue.size() >= m_size){
  |   38|      2|            pop_front();
  |   39|      2|        }
  |   40|    307|        m_dequeue.push_back(v);
  |   41|    307|    }
  ------------------
  | _ZN9STATISTICIiE9push_backEi:
  |   36|    292|    void push_back(T v){
  |   37|    292|        if (m_dequeue.size() >= m_size){
  |   38|      0|            pop_front();
  |   39|      0|        }
  |   40|    292|        m_dequeue.push_back(v);
  |   41|    292|    }
  ------------------
   42|      3|    void pop_back(){
   43|      3|        m_dequeue.pop_back();
   44|      3|        // std::cout <<"pop_back"<<std::endl;
   45|      3|    }
   46|     23|    void pop_front(){
   47|     23|        m_dequeue.pop_front();
   48|     23|        // std::cout <<"pop_front"<<std::endl;
   49|     23|    }
  ------------------
  | _ZN9STATISTICIdE9pop_frontEv:
  |   46|     23|    void pop_front(){
  |   47|     23|        m_dequeue.pop_front();
  |   48|     23|        // std::cout <<"pop_front"<<std::endl;
  |   49|     23|    }
  ------------------
  | Unexecuted instantiation: _ZN9STATISTICIiE9pop_frontEv
  ------------------
   50|       |    ///////////////////////////////////////////// statistic /////////////////////////////
   51|     13|    T median(){
   52|     13|        auto backup = m_dequeue;
   53|     13|        std::sort(backup.begin(), backup.end());
   54|     13|        if (backup.size() % 2 != 0){
   55|      5|            return backup[backup.size() / 2];
   56|      5|        }
   57|      8|        else{
   58|      8|            T m = backup[backup.size() / 2] + backup[(backup.size() / 2)-1];
   59|      8|            return m /2;
   60|      8|        }
   61|     13|    }
  ------------------
  | _ZN9STATISTICIdE6medianEv:
  |   51|      5|    T median(){
  |   52|      5|        auto backup = m_dequeue;
  |   53|      5|        std::sort(backup.begin(), backup.end());
  |   54|      5|        if (backup.size() % 2 != 0){
  |   55|      3|            return backup[backup.size() / 2];
  |   56|      3|        }
  |   57|      2|        else{
  |   58|      2|            T m = backup[backup.size() / 2] + backup[(backup.size() / 2)-1];
  |   59|      2|            return m /2;
  |   60|      2|        }
  |   61|      5|    }
  ------------------
  | _ZN9STATISTICIiE6medianEv:
  |   51|      8|    T median(){
  |   52|      8|        auto backup = m_dequeue;
  |   53|      8|        std::sort(backup.begin(), backup.end());
  |   54|      8|        if (backup.size() % 2 != 0){
  |   55|      2|            return backup[backup.size() / 2];
  |   56|      2|        }
  |   57|      6|        else{
  |   58|      6|            T m = backup[backup.size() / 2] + backup[(backup.size() / 2)-1];
  |   59|      6|            return m /2;
  |   60|      6|        }
  |   61|      8|    }
  ------------------
   62|     23|    T sum(){
   63|     23|        return std::accumulate(m_dequeue.begin(), m_dequeue.end(), static_cast<T>(0));
   64|     23|    }
   65|       |
   66|     23|    T average(){
   67|     23|        T av  = sum() /size();
   68|     23|        return av;
   69|     23|    }
   70|       |
   71|      5|    T max(){
   72|      5|        T max = m_dequeue[0];
   73|     40|        for (auto v : m_dequeue){
   74|     40|            if (v > max){
   75|     13|                max = v;
   76|     13|            }
   77|     40|        }
   78|      5|        return max;
   79|      5|    }
   80|       |
   81|      5|    T min(){
   82|      5|        T min = m_dequeue[0];
   83|     40|        for (auto v : m_dequeue){
   84|     40|            if (v < min){
   85|      3|                min = v;
   86|      3|            }
   87|     40|        }
   88|      5|        return min;
   89|      5|    }
   90|       |
   91|      1|    T range(){
   92|      1|        return max() - min();
   93|      1|    }
   94|       |
   95|      6|    T standardDeviation(){
   96|      6|        double standardDeviation = 0.0;
   97|      6|        T _av = average();
   98|      6|
   99|     38|        for(int i = 0; i < size(); ++i){
  100|     32|            standardDeviation += pow(m_dequeue.at(i) - _av, 2);
  101|     32|        }
  102|      6|        return sqrt(standardDeviation / size());
  103|      6|    }
  104|       |
  105|      3|    T coefficientOfVariation(){
  106|      3|
  107|      3|        return (standardDeviation()/average()) /** 100*/;
  108|      3|    }
  109|       |
  110|     21|    T mode(){
  111|     21|
  112|     21|        T _mode = 0;
  113|     21|        T _modeTemp = 0;
  114|     21|        int counter = 1;
  115|     21|        int modeCounter = 1;
  116|     21|        auto backup = m_dequeue;
  117|     21|        if(m_dequeue.size() == 1)
  118|      5|        {
  119|      5|            return m_dequeue.at(0);
  120|      5|        }
  121|     16|        std::sort(backup.begin(), backup.end());
  122|     16|#ifdef BT_TEST
  123|     16|        std::cout << " " << std::endl;
  124|     16|        for (auto i : backup)
  125|    233|        {
  126|    233|            std::cout << i << " ";
  127|    233|        }
  128|     16|        std::cout << " " << std::endl;
  129|     16|#endif
  130|     16|        _mode = _modeTemp = backup.at(0);
  131|     16|        backup.pop_front();
  132|     16|        for (auto b : backup)
  133|    217|        {
  134|    217|            if (_modeTemp == b)
  135|    135|            {
  136|    135|                modeCounter++;
  137|    135|            }
  138|     82|            else
  139|     82|            {
  140|     82|                _modeTemp = b;
  141|     82|                modeCounter = 1;
  142|     82|            }
  143|    217|
  144|    217|            if(counter < modeCounter)
  145|     80|            {
  146|     80|                counter = modeCounter;
  147|     80|                _mode = _modeTemp;
  148|     80|            }
  149|    217|        }
  150|     16|#ifdef BT_TEST
  151|     16|        std::cout << " moda: " << _mode << " wystepuje razy " << counter << std::endl;
  152|     16|#endif
  153|     16|        return _mode;
  154|     16|    }
  ------------------
  | _ZN9STATISTICIdE4modeEv:
  |  110|     13|    T mode(){
  |  111|     13|
  |  112|     13|        T _mode = 0;
  |  113|     13|        T _modeTemp = 0;
  |  114|     13|        int counter = 1;
  |  115|     13|        int modeCounter = 1;
  |  116|     13|        auto backup = m_dequeue;
  |  117|     13|        if(m_dequeue.size() == 1)
  |  118|      3|        {
  |  119|      3|            return m_dequeue.at(0);
  |  120|      3|        }
  |  121|     10|        std::sort(backup.begin(), backup.end());
  |  122|     10|#ifdef BT_TEST
  |  123|     10|        std::cout << " " << std::endl;
  |  124|     10|        for (auto i : backup)
  |  125|     89|        {
  |  126|     89|            std::cout << i << " ";
  |  127|     89|        }
  |  128|     10|        std::cout << " " << std::endl;
  |  129|     10|#endif
  |  130|     10|        _mode = _modeTemp = backup.at(0);
  |  131|     10|        backup.pop_front();
  |  132|     10|        for (auto b : backup)
  |  133|     79|        {
  |  134|     79|            if (_modeTemp == b)
  |  135|     15|            {
  |  136|     15|                modeCounter++;
  |  137|     15|            }
  |  138|     64|            else
  |  139|     64|            {
  |  140|     64|                _modeTemp = b;
  |  141|     64|                modeCounter = 1;
  |  142|     64|            }
  |  143|     79|
  |  144|     79|            if(counter < modeCounter)
  |  145|      8|            {
  |  146|      8|                counter = modeCounter;
  |  147|      8|                _mode = _modeTemp;
  |  148|      8|            }
  |  149|     79|        }
  |  150|     10|#ifdef BT_TEST
  |  151|     10|        std::cout << " moda: " << _mode << " wystepuje razy " << counter << std::endl;
  |  152|     10|#endif
  |  153|     10|        return _mode;
  |  154|     10|    }
  ------------------
  | _ZN9STATISTICIiE4modeEv:
  |  110|      8|    T mode(){
  |  111|      8|
  |  112|      8|        T _mode = 0;
  |  113|      8|        T _modeTemp = 0;
  |  114|      8|        int counter = 1;
  |  115|      8|        int modeCounter = 1;
  |  116|      8|        auto backup = m_dequeue;
  |  117|      8|        if(m_dequeue.size() == 1)
  |  118|      2|        {
  |  119|      2|            return m_dequeue.at(0);
  |  120|      2|        }
  |  121|      6|        std::sort(backup.begin(), backup.end());
  |  122|      6|#ifdef BT_TEST
  |  123|      6|        std::cout << " " << std::endl;
  |  124|      6|        for (auto i : backup)
  |  125|    144|        {
  |  126|    144|            std::cout << i << " ";
  |  127|    144|        }
  |  128|      6|        std::cout << " " << std::endl;
  |  129|      6|#endif
  |  130|      6|        _mode = _modeTemp = backup.at(0);
  |  131|      6|        backup.pop_front();
  |  132|      6|        for (auto b : backup)
  |  133|    138|        {
  |  134|    138|            if (_modeTemp == b)
  |  135|    120|            {
  |  136|    120|                modeCounter++;
  |  137|    120|            }
  |  138|     18|            else
  |  139|     18|            {
  |  140|     18|                _modeTemp = b;
  |  141|     18|                modeCounter = 1;
  |  142|     18|            }
  |  143|    138|
  |  144|    138|            if(counter < modeCounter)
  |  145|     72|            {
  |  146|     72|                counter = modeCounter;
  |  147|     72|                _mode = _modeTemp;
  |  148|     72|            }
  |  149|    138|        }
  |  150|      6|#ifdef BT_TEST
  |  151|      6|        std::cout << " moda: " << _mode << " wystepuje razy " << counter << std::endl;
  |  152|      6|#endif
  |  153|      6|        return _mode;
  |  154|      6|    }
  ------------------
  155|       |
  156|       |    float trend(){
  157|       |        int down = 0;
  158|       |        int eq = 0;
  159|       |        int up = 0;
  160|       |        int lp = 0;
  161|       |        T diff = 0;
  162|       |        T first = m_dequeue[0];
  163|       |
  164|       |        for (auto i = 1; i < m_dequeue.size(); ++i){
  165|       |            if (first < m_dequeue[i]){
  166|       |                up++;
  167|       |                if (m_dequeue[i] - first > diff){
  168|       |                    diff = m_dequeue[i] - first;
  169|       |                    lp = i;
  170|       |                }
  171|       |            }
  172|       |            if (first == m_dequeue[i]){ eq++;}
  173|       |            if (first > m_dequeue[i]){
  174|       |                if (diff < first - m_dequeue[i] ){
  175|       |                    diff = first - m_dequeue[i];
  176|       |                    lp = i;
  177|       |                }
  178|       |                down++;
  179|       |            }
  180|       |            first = m_dequeue[i];
  181|       |        }
  182|       |        std::cout <<"up "<<up<<" eq "<< eq << " down "<< down <<" max diff "<< diff<<" lp "<<lp << std::endl;
  183|       |        return 2.2;
  184|       |    }
  185|       |
  186|     20|    bool isMoreDiff(T diff){
  187|     20|        if (m_dequeue.size()>2){
  188|     14|            T d = m_dequeue.at( m_dequeue.size()-2)
  189|     14|                    - m_dequeue.at( m_dequeue.size() - 1);
  190|     14|            d = fabs(d);
  191|     14|            if (d > diff && m_alarm == false){
  192|      6|                m_alarm = true;
  193|      6|                return true;
  194|      6|            }
  195|      8|            if (d <= diff){
  196|      8|                m_alarm = false;
  197|      8|                return false;
  198|      8|            }
  199|      6|        }
  200|      6|        return false;
  201|      6|    }
  202|      7|    std::pair<double,double> getLast2(){
  203|      7|        if (m_dequeue.size()>2){
  204|      6|            return std::make_pair(static_cast<double>(m_dequeue.at( m_dequeue.size()-2)),
  205|      6|                                  static_cast<double>(m_dequeue.at( m_dequeue.size()-1))    );
  206|      6|        }
  207|      1|#ifdef BT_TEST
  208|      1|        puts("no data - return 0.0 0.0");
  209|      1|#endif
  210|      1|        return std::make_pair(0.0,0.0);
  211|      1|    }
  212|       |
  213|       |    /////////////////////////////////////////////////////////////////////////////////////
  214|     14|    void print(){
  215|     71|        for(auto n : m_dequeue){
  216|     71|            std::cout << ","<< n;
  217|     71|        }
  218|     14|        std::cout << " " <<std::endl;
  219|     14|    }
  220|       |
  221|       |
  222|      4|    std::string stats(){
  223|      4|
  224|      4|        std::stringstream ss(" brak danych =(");
  225|      4|        if(size()>0)
  226|      3|        {
  227|      3|            ss.str("");
  228|      3|            ss <<"rozmiar tablicy: "<< size() <<std::endl
  229|      3|              << "min: "<< min() <<std::endl
  230|      3|              << "max: "<< max()<<std::endl
  231|      3|              << "srednia " << average() <<std::endl
  232|      3|              << "mediana " << median()  <<std::endl
  233|      3|              << "odchylenie st "<< standardDeviation() << std::endl
  234|      3|              << "wspolczynnik zmiennosci " << coefficientOfVariation() <<"%"<< std::endl
  235|      3|              << "Dominanta " << mode();
  236|      3|
  237|      3|
  238|      3|            ss << std::endl
  239|      3|               << "data " <<  std::endl;
  240|     16|            for(auto n : m_dequeue){
  241|     16|                ss << "|"<< n;
  242|     16|            }
  243|      3|        }
  244|      4|        ss <<  std::endl;
  245|      4|        return ss.str();
  246|      4|    }
  247|       |
  248|       |private:
  249|       |    unsigned int m_size;
  250|       |    std::deque <T> m_dequeue;
  251|       |    bool m_alarm = false;
  252|       |};
  253|       |
  254|       |#endif // STATISTIC_H

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/Statistic/statistic_test/statistic_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "../statistic.h"
    4|       |
    5|       |class StatisticClass_fixture : public ::testing::Test
    6|       |{
    7|       |public:
    8|       |    STATISTIC<double> average;
    9|       |    StatisticClass_fixture(): average(12)
   10|      7|    {
   11|      7|    }
   12|       |    void SetUp() final
   13|      7|    {
   14|      7|        average.push_back(1);
   15|      7|        average.push_back(1);
   16|      7|        average.push_back(2);
   17|      7|        average.push_back(2);
   18|      7|        average.push_back(3);
   19|      7|        average.push_back(3);
   20|      7|        average.push_back(4);
   21|      7|        average.push_back(4);
   22|      7|        average.push_back(-5);
   23|      7|        average.push_back(-5);
   24|      7|        average.push_back(6);
   25|      7|        average.push_back(6);
   26|      7|    }
   27|       |    void TearDown() final
   28|      7|    {
   29|      7|
   30|      7|    }
   31|       |};
   32|       |
   33|       |TEST_F(StatisticClass_fixture, range)
   34|      1|{
   35|      1|    EXPECT_DOUBLE_EQ(average.average() , 1.8333333333333333);
   36|      1|    EXPECT_EQ(average.range(), 11);
   37|      1|}
   38|       |
   39|       |TEST_F(StatisticClass_fixture, average)
   40|      1|{
   41|      1|    EXPECT_DOUBLE_EQ(average.average() , 1.8333333333333333);
   42|      1|    std::string ret = average.stats();
   43|      1|    EXPECT_THAT(ret, testing::HasSubstr("max"));
   44|      1|}
   45|       |
   46|       |TEST_F(StatisticClass_fixture, averageOne)
   47|      1|{
   48|      1|    average.resize(1);
   49|      1|    average.push_back(1);
   50|      1|    EXPECT_DOUBLE_EQ(average.average() , 1.0);
   51|      1|}
   52|       |TEST_F(StatisticClass_fixture, median)
   53|      1|{
   54|      1|    EXPECT_EQ(average.median(),2.5f);
   55|      1|}
   56|       |TEST(StatisticClass, medianOne)
   57|      1|{
   58|      1|    STATISTIC<double> average(1);
   59|      1|    average.push_back(1);
   60|      1|    EXPECT_EQ(average.median(), 1.0f);
   61|      1|}
   62|       |TEST_F(StatisticClass_fixture, min)
   63|      1|{
   64|      1|    EXPECT_EQ(average.min(),-5.0f);
   65|      1|}
   66|       |TEST_F(StatisticClass_fixture, max)
   67|      1|{
   68|      1|    EXPECT_EQ(average.max(),6);
   69|      1|}
   70|       |TEST_F(StatisticClass_fixture, push_and_pop)
   71|      1|{
   72|      1|    average.pop_back();
   73|      1|    EXPECT_EQ(average.size(),11);
   74|      1|    average.push_front(3.9);
   75|      1|    EXPECT_EQ(average.size(),12);
   76|      1|    average.pop_back();
   77|      1|    EXPECT_EQ(average.size(),11);
   78|      1|}
   79|       |
   80|       |TEST(StatisticClass, resize)
   81|      1|{
   82|      1|    unsigned int s = 3;
   83|      1|    STATISTIC<double> average(12);
   84|      1|    average.push_back(1);
   85|      1|    average.push_back(2);
   86|      1|    average.push_back(3);
   87|      1|    average.push_back(4);
   88|      1|    average.push_back(5);
   89|      1|    average.push_front(44);
   90|      1|    average.push_front(45);
   91|      1|    average.print();
   92|      1|    average.resize(s);
   93|      1|
   94|      1|    EXPECT_EQ(average.size(),static_cast<double>(s));
   95|      1|
   96|      1|    auto data = average.getLast2();
   97|      1|    average.print();
   98|      1|
   99|      1|    EXPECT_EQ(data.first,4.0);
  100|      1|    EXPECT_EQ(data.second,5.0);
  101|      1|}
  102|       |
  103|       |TEST(StatisticClass, getLast2_empty)
  104|      1|{
  105|      1|    unsigned int s = 1;
  106|      1|    STATISTIC<double> average(12);
  107|      1|    average.push_back(1);
  108|      1|    average.push_back(2);
  109|      1|    average.push_back(3);
  110|      1|    average.push_back(4);
  111|      1|    average.push_back(5);
  112|      1|    average.push_front(44);
  113|      1|    average.push_front(45);
  114|      1|    average.print();
  115|      1|    average.resize(s);
  116|      1|    average.push_front(33);
  117|      1|
  118|      1|    EXPECT_EQ(average.size(),static_cast<double>(s));
  119|      1|
  120|      1|    auto data = average.getLast2();
  121|      1|    average.print();
  122|      1|
  123|      1|    EXPECT_EQ(data.first,0.0);
  124|      1|    EXPECT_EQ(data.second,0.0);
  125|      1|}
  126|       |
  127|       |TEST(StatisticClass, moreDiff)
  128|      1|{
  129|      1|    STATISTIC<double> average(12);
  130|      1|    average.push_back(1);
  131|      1|    average.push_back(2);
  132|      1|    average.push_back(30);
  133|      1|    average.push_back(4);
  134|      1|    average.push_back(5);
  135|      1|    average.push_front(44);
  136|      1|    average.push_front(45);
  137|      1|    average.print();
  138|      1|
  139|      1|    EXPECT_FALSE(average.isMoreDiff(2.2));
  140|      1|
  141|      1|    average.push_back(7.3);
  142|      1|    average.print();
  143|      1|
  144|      1|    EXPECT_TRUE(average.isMoreDiff(2.2));
  145|      1|}
  146|       |
  147|       |TEST(StatisticClass, moreDiff_wrong)
  148|      1|{
  149|      1|    STATISTIC<double> average(1);
  150|      1|    average.push_back(1);
  151|      1|
  152|      1|    average.print();
  153|      1|
  154|      1|    EXPECT_FALSE(average.isMoreDiff(2.2));
  155|      1|
  156|      1|    average.push_back(7.3);
  157|      1|    average.print();
  158|      1|
  159|      1|    EXPECT_FALSE(average.isMoreDiff(2.2));
  160|      1|}
  161|       |
  162|       |TEST(StatisticClass, noMoreDiff)
  163|      1|{
  164|      1|    STATISTIC<double> average(12);
  165|      1|    average.push_back(1);
  166|      1|    average.push_back(2);
  167|      1|    average.push_back(30);
  168|      1|    average.push_back(4);
  169|      1|    average.push_back(5);
  170|      1|    average.push_front(44);
  171|      1|    average.push_front(45);
  172|      1|    average.print();
  173|      1|
  174|      1|    EXPECT_FALSE(average.isMoreDiff(6.2));
  175|      1|
  176|      1|    average.push_back(7.3);
  177|      1|    average.print();
  178|      1|
  179|      1|    EXPECT_FALSE(average.isMoreDiff(9.2));
  180|      1|}
  181|       |
  182|       |TEST(StatisticClass, mode)
  183|      1|{
  184|      1|    STATISTIC<double> average(22);
  185|      1|    average.push_back(29.62);
  186|      1|    average.push_back(29.71);
  187|      1|    average.push_back(30.19);
  188|      1|    average.push_back(33.5);
  189|      1|    average.push_back(30.31);
  190|      1|    average.push_back(30.81);
  191|      1|    average.push_back(30.87);
  192|      1|    average.push_back(31.25);
  193|      1|    average.push_back(31.31);
  194|      1|    average.push_back(31.56);
  195|      1|    average.push_back(31.87);
  196|      1|    average.push_back(31.94);
  197|      1|    average.push_back(32.13);
  198|      1|    average.push_back(32.13);  //to
  199|      1|    average.push_back(32.63);
  200|      1|
  201|      1|    average.print();
  202|      1|    std::cout << "1 MODE: " << average.mode() << std::endl;
  203|      2|    EXPECT_DOUBLE_EQ(32.13,average.mode()) << "ZLA DOMINANTA 32.13";
  204|      1|    average.push_back(33.5);
  205|      1|    average.push_back(33.5);
  206|      1|    std::cout << "2 MODE: " << average.mode() << std::endl;
  207|      2|    EXPECT_DOUBLE_EQ(33.5,average.mode()) << "ZLA DOMINANTA 33.5";
  208|      1|}
  209|       |TEST(StatisticClass, modeOne)
  210|      1|{
  211|      1|    STATISTIC<double> average(1);
  212|      1|    average.push_back(29.62);
  213|      1|    average.print();
  214|      1|    std::cout << "1 MODE: " << average.mode() << std::endl;
  215|      2|    EXPECT_DOUBLE_EQ(29.62,average.mode()) << "ZLA DOMINANTA 32.13";
  216|      1|}
  217|       |TEST(StatisticClass, modeTwo)
  218|      1|{
  219|      1|    STATISTIC<double> average(10);
  220|      1|    average.push_back(29.62);
  221|      1|    average.push_back(28.62);
  222|      1|    average.print();
  223|      1|    std::cout << "1 MODE: " << average.mode() << std::endl;
  224|      2|    EXPECT_DOUBLE_EQ(28.62,average.mode()) << "ZLA DOMINANTA 32.13";
  225|      1|}
  226|       |TEST(StatisticClass, modeThree)
  227|      1|{
  228|      1|    STATISTIC<double> average(10);
  229|      1|    average.push_back(29.62);
  230|      1|    average.push_back(28.62);
  231|      1|    average.push_back(29.63);
  232|      1|    average.print();
  233|      1|    std::cout << "1 MODE: " << average.mode() << std::endl;
  234|      2|    EXPECT_DOUBLE_EQ(28.62,average.mode()) << "ZLA DOMINANTA 32.13";
  235|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/emoji/emoji.cpp:
    1|       |#include <sstream>
    2|       |#include "emoji.h"
    3|       |
    4|       |EMOJI::EMOJI()
    5|      0|{
    6|      0|
    7|      0|}
    8|       |
    9|       |std::string EMOJI::emoji(E_emoji e)
   10|     26|{
   11|     26|    switch (e) {
   12|     26|    case E_emoji::NORTH_EAST_ARROW:
   13|     16|        return HEX_STR::hexToStr("E28697");
   14|     26|    case E_emoji::SOUTH_EAST_ARROW:
   15|      3|        return HEX_STR::hexToStr("E28698");
   16|     26|    case E_emoji::NORTH_WEST_ARROW:
   17|      0|        return HEX_STR::hexToStr("E28696");
   18|     26|    case E_emoji::SOUTH_WEST_ARROW:
   19|      0|        return HEX_STR::hexToStr("E28699");
   20|     26|    case E_emoji::LEFT_RIGHT_ARROW:
   21|      0|        return HEX_STR::hexToStr("E28694");
   22|     26|    case E_emoji::UP_DOWN_ARROW:
   23|      0|        return HEX_STR::hexToStr("E28695");
   24|     26|    case E_emoji::ALARM_CLOCK:
   25|      0|        return HEX_STR::hexToStr("E28FB0");
   26|     26|    case E_emoji::SUN_WITH_FACE:
   27|      0|        return HEX_STR::hexToStr("F09F8C9E");
   28|     26|    case E_emoji::SNOWFLAKE:
   29|      0|        return HEX_STR::hexToStr("E29D84");
   30|     26|    case E_emoji::HEAVY_BLACK_HEART:
   31|      0|        return HEX_STR::hexToStr("E29DA4");
   32|     26|    case E_emoji::WARNING_SIGN:
   33|      1|        return HEX_STR::hexToStr("E29AA0");
   34|     26|    case E_emoji::CHART_WITH_DOWNWARDS_TREND:
   35|      2|        return HEX_STR::hexToStr("F09F9389");
   36|     26|    case E_emoji::CHART_WITH_UPWARDS_TREND:
   37|      2|        return HEX_STR::hexToStr("F09F9388");
   38|     26|    case E_emoji::THUNDER_CLOUD_AND_RAIN:
   39|      2|        return HEX_STR::hexToStr("E29B88");
   40|      0|
   41|      0|    }
   42|      0|    return"ok";
   43|      0|}
   44|       |
   45|       |std::string HEX_STR::hexToStr(const std::string& hex)
   46|     26|{
   47|     26|    std::string res;
   48|     26|    res.reserve(hex.size() / 2);
   49|    108|    for (unsigned int i = 0; i < hex.size(); i += 2)
   50|     82|    {
   51|     82|        std::istringstream iss(hex.substr(i, 2));
   52|     82|        int temp;
   53|     82|        iss >> std::hex >> temp;
   54|     82|        res += static_cast<char>(temp);
   55|     82|    }
   56|     26|    return res;
   57|     26|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event/event_command.cpp:
    1|       |#include "event_command.h"
    2|       |
    3|       |event_command::event_command(const std::string& name):  event_counters(name)
    4|    214|{
    5|    214|
    6|    214|}
    7|       |
    8|       |std::string event_command::help()
    9|      3|{
   10|      3|    return "event command";
   11|      3|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event/event_mpd.cpp:
    1|       |#include "event_mpd.h"
    2|       |
    3|       |event_mpd::event_mpd(const std::string& name): event_counters(name)
    4|    214|{
    5|    214|
    6|    214|}
    7|       |
    8|       |std::string event_mpd::help()
    9|      2|{
   10|      2|    return "event from MPD";
   11|      2|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event/event_pilot.cpp:
    1|       |#include "event_pilot.h"
    2|       |
    3|       |event_pilot::event_pilot(const std::string& name): event_counters(name)
    4|    214|{
    5|    214|
    6|    214|}
    7|       |
    8|       |std::string event_pilot::help()
    9|      3|{
   10|      3|    return "pilot events";
   11|      3|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event/event_unknown.cpp:
    1|       |#include "event_unknown.h"
    2|       |
    3|       |event_unknown::event_unknown(const std::string& name) : event_counters(name), name(name)
    4|    269|{
    5|    269|
    6|    269|}
    7|       |
    8|       |std::string event_unknown::help()
    9|     38|{
   10|     38|    return  name+" event";
   11|     38|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event/new_connect_event.cpp:
    1|       |#include "new_connect_event.h"
    2|       |#include <iostream>
    3|       |new_Connect_Event::new_Connect_Event(const std::string& name) : event_counters(name)
    4|    214|{
    5|    214|
    6|    214|}
    7|       |
    8|       |new_Connect_Event::~new_Connect_Event()
    9|    214|{
   10|    214|    std::cout << " kasujemy obiekt" << std::endl;
   11|    214|}
   12|       |
   13|       |std::string new_Connect_Event::help()
   14|      3|{
   15|      3|    return "connection start event";
   16|      3|}
   17|       |
   18|       |
   19|       |
   20|       |
   21|       |
   22|       |

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event_counters.cpp:
    1|       |#include "event_counters.h"
    2|       |#include <iostream>
    3|       |#include <iomanip>
    4|       |#include <ctime>
    5|       |#include <sstream>
    6|       |#include <string>
    7|       |#include <algorithm>
    8|       |
    9|       |event_counters::event_counters(std::string name) : eventName(std::move(name))
   10|  1.12k|{
   11|  1.12k|
   12|  1.12k|}
   13|       |
   14|       |int event_counters::howManyEvent()
   15|     42|{
   16|     42|    std::lock_guard < std::mutex > lock ( eventMutex);
   17|     42|    return static_cast<int>( eventList.size() );
   18|     42|}
   19|       |
   20|       |void event_counters::addEvent(const std::string& note)
   21|  5.12k|{
   22|  5.12k|    eventStruct d;
   23|  5.12k|    std::ostringstream oss;
   24|  5.12k|
   25|  5.12k|    auto t = std::time(nullptr);
   26|  5.12k|    auto tm = *std::localtime(&t);
   27|  5.12k|    //BUG oss << std::put_time(&tm, "%d-%m-%Y %H:%M:%S");
   28|  5.12k|
   29|  5.12k|    d.date = oss.str();
   30|  5.12k|    d.note = note;
   31|  5.12k|    d.posixTime = static_cast<unsigned int> (std::time(nullptr));
   32|  5.12k|    std::lock_guard < std::mutex > lock ( eventMutex);
   33|  5.12k|    eventList.push_back(d);
   34|  5.12k|}
   35|       |
   36|       |std::string event_counters::getEvent()
   37|     37|{
   38|     37|    std::stringstream ret;
   39|     37|    ret << "Event: " << help() << "\n";
   40|     37|    std::lock_guard <std::mutex> lock(eventMutex);
   41|     37|    int k =0;
   42|  8.27k|    for (auto i : eventList){
   43|  8.27k|        ret << ++k << "\t" << i.date << "     " <<  i.note << "\n";
   44|  8.27k|    }
   45|     37|    ret << "\n event per last minute: " << getLast1minNumberEvent_NO_Mutex() << "\n------------------------------";
   46|     37|    return ret.str();
   47|     37|}
   48|       |
   49|       |void event_counters::clearEvent()
   50|      3|{
   51|      3|    std::lock_guard <std::mutex> lock(eventMutex);
   52|      3|    eventList.clear();
   53|      3|}
   54|       |
   55|       |void event_counters::clearEvent(unsigned int from, unsigned int to)
   56|      5|{
   57|      5|    if (to < from){
   58|      1|        return;
   59|      1|    }
   60|      4|    auto max = static_cast<unsigned int>( eventList.size() );
   61|      4|
   62|      4|    if (max < to){
   63|      2|        to = max;
   64|      2|    }
   65|      4|    if(max<from){
   66|      1|        from = max;
   67|      1|        to = max;
   68|      1|    }
   69|      4|    std::lock_guard <std::mutex> lock(eventMutex);
   70|      4|    eventList.erase(eventList.begin() + from, eventList.begin() + to);
   71|      4|}
   72|       |
   73|       |unsigned int event_counters::getLast1minNumberEvent()
   74|     13|{
   75|     13|    std::lock_guard <std::mutex> lock(eventMutex);
   76|     13|    return getLast1minNumberEvent_NO_Mutex();
   77|     13|}
   78|       |
   79|       |std::string event_counters::getEventName()
   80|  1.12k|{
   81|  1.12k|    return eventName;
   82|  1.12k|}
   83|       |
   84|       |unsigned int event_counters::getLast1minNumberEvent_NO_Mutex()
   85|     50|{
   86|     50|    unsigned int k = 0;
   87|     50|    if (eventList.empty())
   88|      3|        return k;
   89|     47|    unsigned int lastPosix = static_cast<unsigned int> (std::time(nullptr));
   90|     47|
   91|  8.87k|    for (int i = static_cast<int>(eventList.size())-1; i != -1; i--)
   92|  8.82k|    {
   93|  8.82k|        if(eventList.at(static_cast<std::size_t>(i)).posixTime + 60 > lastPosix)
   94|  8.82k|            k++;
   95|      1|        else
   96|      1|            break;
   97|  8.82k|    }
   98|     47|    return k;
   99|     47|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event_counters_handler.cpp:
    1|       |#include "event_counters_handler.h"
    2|       |#include "event/new_connect_event.h"
    3|       |#include "event/event_unknown.h"
    4|       |#include "event/event_mpd.h"
    5|       |#include "event/event_pilot.h"
    6|       |#include "event/event_command.h"
    7|       |
    8|       |
    9|       |event_counters_handler::event_counters_handler()
   10|    214|{
   11|    214|    std::shared_ptr <event_counters> newConnectEvent (new new_Connect_Event("connections") );
   12|    214|    eventCountersMap.insert( std::make_pair( newConnectEvent->getEventName(), newConnectEvent ) );
   13|    214|
   14|    214|    std::shared_ptr <event_counters> newUnknownEvent (new event_unknown("unknown") );
   15|    214|    eventCountersMap.insert( std::make_pair( newUnknownEvent->getEventName(), newUnknownEvent ) );
   16|    214|
   17|    214|    std::shared_ptr <event_counters> eventMPD (new event_mpd("mpd") );
   18|    214|    eventCountersMap.insert( std::make_pair( eventMPD->getEventName(), eventMPD ) );
   19|    214|
   20|    214|    std::shared_ptr <event_counters> eventPilot (new event_pilot("pilot") );
   21|    214|    eventCountersMap.insert( std::make_pair( eventPilot->getEventName(), eventPilot ) );
   22|    214|
   23|    214|    std::shared_ptr <event_counters> eventCommand (new event_command("command") );
   24|    214|    eventCountersMap.insert( std::make_pair( eventCommand->getEventName(), eventCommand ) );
   25|    214|}
   26|       |
   27|       |std::shared_ptr<event_counters> event_counters_handler::run(const std::string& name)
   28|  5.22k|{
   29|  5.22k|
   30|  5.22k|    if (eventCountersMap.find(name) == eventCountersMap.end()){
   31|     55|        addEvent(name);
   32|     55|    }
   33|  5.22k|    return eventCountersMap[name];
   34|  5.22k|}
   35|       |
   36|       |std::string event_counters_handler::getListPossibleEvents()
   37|      2|{
   38|      2|    std::string result;
   39|      2|
   40|     13|    for( auto iter= eventCountersMap.begin();iter != eventCountersMap.end(); ++iter ) {
   41|     11|        result+= iter->first;
   42|     11|        result+= "\n";
   43|     11|    }
   44|      2|    return result;
   45|      2|}
   46|       |
   47|       |std::string event_counters_handler::help(const std::string& name)
   48|      3|{
   49|      3|    std::string result;
   50|      3|
   51|      3|    if (name.empty()){
   52|     13|        for( auto iter= eventCountersMap.begin();iter != eventCountersMap.end(); ++iter ) {
   53|     11|            result+= iter->second->help();
   54|     11|            result+= "\n------------------------------\n";
   55|     11|        }
   56|      2|    }
   57|      1|    else{
   58|      1|        result = eventCountersMap[name]->help();
   59|      1|    }
   60|      3|
   61|      3|    return result;
   62|      3|}
   63|       |std::mutex event_counters_handler::echMutex;
   64|       |
   65|       |void event_counters_handler::addEvent(const std::string& name)
   66|     55|{
   67|     55|    std::lock_guard <std::mutex> lock(event_counters_handler::echMutex);
   68|     55|    std::shared_ptr <event_counters> newUnknownEvent (new event_unknown(name) );
   69|     55|    eventCountersMap.insert( std::make_pair( newUnknownEvent->getEventName(), newUnknownEvent ) );
   70|     55|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/test/event_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include "test_data.h"
    3|       |#include "../../../iDom_server_OOP/src/iDomTools/test/iDomTools_fixture.h"
    4|       |#include "../event_counters_handler.h"
    5|       |
    6|       |class event_counter_fixture : public iDomTOOLS_ClassTest
    7|       |{
    8|       |public:
    9|       |     event_counters_handler mainEvent;
   10|       |     std::string msg = "info";
   11|       |     std::string testEvent = "testEvent";
   12|      5|     void preper1001Event(){
   13|      5|         int counter = 1000;
   14|      5|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),0);
   15|      5|         mainEvent.run(testEvent)->addEvent(msg);
   16|      5|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1);
   17|      5|         std::string returnedString = mainEvent.run(testEvent)->getEvent();
   18|      5|         EXPECT_THAT(returnedString, testing::HasSubstr(msg));
   19|      5|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1);
   20|      5|
   21|  5.00k|         for (int i = 1; i!= counter; counter--)
   22|  4.99k|         {
   23|  4.99k|             mainEvent.run(testEvent)->addEvent(msg);
   24|  4.99k|             if(counter == 500)
   25|      5|                 mainEvent.run(testEvent)->addEvent("cyniu");
   26|  4.99k|         }
   27|      5|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1001);
   28|      5|         returnedString = mainEvent.run(testEvent)->getEvent();
   29|      5|         EXPECT_THAT(returnedString, testing::HasSubstr("cyniu"));
   30|      5|     }
   31|       |};
   32|       |
   33|       |TEST_F(event_counter_fixture, add_get_clear_event)
   34|      1|{
   35|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),0);
   36|      1|    mainEvent.run(testEvent)->addEvent(msg);
   37|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1);
   38|      1|    std::string returnedString = mainEvent.run(testEvent)->getEvent();
   39|      1|    EXPECT_THAT(returnedString, testing::HasSubstr(msg));
   40|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1);
   41|      1|    mainEvent.run(testEvent)->clearEvent();
   42|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),0);
   43|      1|}
   44|       |
   45|       |TEST_F(event_counter_fixture, clear_middle_part_of_event_small_big)
   46|      1|{
   47|      1|    preper1001Event();
   48|      1|    mainEvent.run(testEvent)->clearEvent(400,600);
   49|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),801);
   50|      1|    std::string returnedString = mainEvent.run(testEvent)->getEvent();
   51|      1|    EXPECT_THAT(returnedString, testing::Not(testing::HasSubstr("cyniu")));
   52|      1|}
   53|       |
   54|       |TEST_F(event_counter_fixture, clear_middle_part_of_event_big_small)
   55|      1|{
   56|      1|    preper1001Event();
   57|      1|    mainEvent.run(testEvent)->clearEvent(600,400);
   58|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1001);
   59|      1|    std::string returnedString = mainEvent.run(testEvent)->getEvent();
   60|      1|    EXPECT_THAT(returnedString,testing::HasSubstr("cyniu"));
   61|      1|}
   62|       |
   63|       |TEST_F(event_counter_fixture, clear_middle_part_of_event_to_max)
   64|      1|{
   65|      1|    preper1001Event();
   66|      1|    mainEvent.run(testEvent)->clearEvent(400,1600);
   67|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),400);
   68|      1|    std::string returnedString = mainEvent.run(testEvent)->getEvent();
   69|      1|    EXPECT_THAT(returnedString, testing::Not(testing::HasSubstr("cyniu")));
   70|      1|}
   71|       |
   72|       |TEST_F(event_counter_fixture, clear_middle_part_of_event_from_max)
   73|      1|{
   74|      1|    preper1001Event();
   75|      1|    mainEvent.run(testEvent)->clearEvent(1400,1600);
   76|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1001);
   77|      1|    std::string returnedString = mainEvent.run(testEvent)->getEvent();
   78|      1|    EXPECT_THAT(returnedString, testing::HasSubstr("cyniu") );
   79|      1|}
   80|       |
   81|       |TEST_F(event_counter_fixture, getListPossibleEvents)
   82|      1|{
   83|      1|    mainEvent.run("INFO")->addEvent("kokolino");
   84|      1|   std::string returnedString = mainEvent.getListPossibleEvents();
   85|      1|   std::cout << "wynik: " << returnedString << std::endl;
   86|      1|   EXPECT_THAT(returnedString, testing::HasSubstr("INFO") );
   87|      1|}
   88|       |
   89|       |TEST_F(event_counter_fixture, getHelp)
   90|      1|{
   91|      1|   mainEvent.run("INFO")->addEvent("kokolino");
   92|      1|   std::string returnedString = mainEvent.help("connections");
   93|      1|   std::cout << "wynik: " << returnedString << std::endl;
   94|      1|   EXPECT_THAT(returnedString, testing::HasSubstr("start") );
   95|      1|   returnedString = mainEvent.help("");
   96|      1|   std::cout << "wynik: " << returnedString << std::endl;
   97|      1|   EXPECT_THAT(returnedString, testing::HasSubstr("pilot") );
   98|      1|}
   99|       |
  100|       |TEST_F(event_counter_fixture, getLast1minNumberEvent)
  101|      1|{
  102|      1|    preper1001Event();
  103|      1|    mainEvent.run(testEvent)->eventList.at(500).posixTime -= 65;
  104|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1001);
  105|      1|    EXPECT_EQ(mainEvent.run(testEvent)->getLast1minNumberEvent(),500);
  106|      1|}
  107|       |TEST_F(event_counter_fixture, getLast1minNumberEventWhenEmpty)
  108|      1|{
  109|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),0);
  110|      1|    EXPECT_EQ(mainEvent.run(testEvent)->getLast1minNumberEvent(),0);
  111|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/sunrise-sunset/sunriseset.cpp:
    1|       |#include "sunriseset.h"
    2|       |
    3|       |double SunRiseSet::FNday(int y, int m, int d, float h)
    4|     46|{
    5|     46|    long int luku = - 7 * (y + (m + 9)/12)/4 + 275*m/9 + d;
    6|     46|
    7|     46|    // Typecasting needed for TClite on PC DOS at least, to avoid product overflow
    8|     46|    luku+= (long int)y*367;
    9|     46|
   10|     46|    return (double)luku - 730531.5 + h/24.0;
   11|     46|}
   12|       |double SunRiseSet::FNrange(double x)
   13|    138|{
   14|    138|    double b = x / tpi;
   15|    138|    double a = tpi * (b - (long)(b));
   16|    138|    if (a < 0) a = tpi + a;
   17|    138|    return a;
   18|    138|}
   19|       |
   20|       |double SunRiseSet::f0(double lat, double declin)
   21|     46|{
   22|     46|    double fo,dfo;
   23|     46|    // Correction: different sign at S HS
   24|     46|    dfo = rads*(0.5*SunDia + AirRefr); if (lat < 0.0) dfo = -dfo;
   25|     46|    fo = tan(declin + dfo) * tan(lat*rads);
   26|     46|
   27|     46|    if (fo > 0.99999) fo=1.0; // to avoid overflow //
   28|     46|    fo = asin(fo) + pi/2.0;
   29|     46|    return fo;
   30|     46|}
   31|       |
   32|       |double SunRiseSet::f1(double lat, double declin)
   33|      1|{
   34|      1|    double fi,df1;
   35|      1|    // Correction: different sign at S HS
   36|      1|    df1 = rads * 6.0; if (lat < 0.0) df1 = -df1;
   37|      1|    fi = tan(declin + df1) * tan(lat*rads);
   38|      1|
   39|      1|    if (fi > 0.99999) fi=1.0; // to avoid overflow //
   40|      1|    fi = asin(fi) + pi/2.0;
   41|      1|    return fi;
   42|      1|}
   43|       |
   44|       |double SunRiseSet::FNsun(double d)
   45|     46|{
   46|     46|    // mean longitude of the Sun
   47|     46|    L = FNrange(280.461 * rads + .9856474 * rads * d);
   48|     46|
   49|     46|    // mean anomaly of the Sun
   50|     46|    g = FNrange(357.528 * rads + .9856003 * rads * d);
   51|     46|
   52|     46|    // Ecliptic longitude of the Sun
   53|     46|    return FNrange(L + 1.915 * rads * sin(g) + .02 * rads * sin(2 * g));
   54|     46|}
   55|       |
   56|       |Clock SunRiseSet::gethrmn(double dhr)
   57|     55|{
   58|     55|
   59|     55|    int hr,mn;
   60|     55|
   61|     55|    hr=(int) dhr;
   62|     55|    mn = (dhr - (double) hr)*60;
   63|     55|
   64|     55|    Clock ret(hr,mn);
   65|     55|
   66|     55|    return ret;
   67|     55|}
   68|       |
   69|       |SunRiseSet::SunRiseSet()
   70|    201|{
   71|    201|
   72|    201|}
   73|       |
   74|       |std::string SunRiseSet::getAllData()
   75|      1|{
   76|      1|    double y,m,day,h,latit,longit;
   77|      1|
   78|      1|    time_t sekunnit;
   79|      1|    struct tm *p;
   80|      1|
   81|      1|    // get the date and time from the user
   82|      1|    // read system date and extract the year
   83|      1|
   84|      1|    /** First get current time **/
   85|      1|    time(&sekunnit);
   86|      1|
   87|      1|    /** Next get localtime **/
   88|      1|
   89|      1|    p=localtime(&sekunnit);
   90|      1|    // this is Y2K compliant algorithm
   91|      1|    y = 1900 + p->tm_year;
   92|      1|
   93|      1|    m = p->tm_mon + 1;
   94|      1|    day = p->tm_mday;
   95|      1|    h = 12;
   96|      1|
   97|      1|    std::cout << "Input latitude, longitude and timezone\n";
   98|      1|    latit = LATITUDE;
   99|      1|    longit = LONGITUDE;
  100|      1|    // Timezone hours
  101|      1|    double tzone= TIMEZONE;
  102|      1|    double d = FNday(y, m, day, h);
  103|      1|
  104|      1|    // Use FNsun to find the ecliptic longitude of the
  105|      1|    // Sun
  106|      1|    double lambda = FNsun(d);
  107|      1|
  108|      1|    // Obliquity of the ecliptic
  109|      1|    double obliq = 23.439 * rads - .0000004 * rads * d;
  110|      1|
  111|      1|    // Find the RA and DEC of the Sun
  112|      1|    double alpha = atan2(cos(obliq) * sin(lambda), cos(lambda));
  113|      1|    double delta = asin(sin(obliq) * sin(lambda));
  114|      1|
  115|      1|    // Find the Equation of Time in minutes
  116|      1|    // Correction suggested by David Smith
  117|      1|    double LL = L - alpha;
  118|      1|    if (L < pi) LL += tpi;
  119|      1|    double equation = 1440.0 * (1.0 - LL / tpi);
  120|      1|    double ha = f0(latit,delta);
  121|      1|    double hb = f1(latit,delta);
  122|      1|    double twx = hb - ha;   // length of twilight in radians
  123|      1|    twx = 12.0*twx/pi;      // length of twilight in degrees
  124|      1|
  125|      1|    // Conversion of angle to hours and minutes //
  126|      1|    daylen = degs * ha / 7.5;
  127|      1|    if (daylen<0.0001) {daylen = 0.0;}
  128|      1|    // arctic winter   //
  129|      1|
  130|      1|    double riset = 12.0 - 12.0 * ha/pi + tzone - longit/15.0 + equation/60.0;
  131|      1|    double settm = 12.0 + 12.0 * ha/pi + tzone - longit/15.0 + equation/60.0;
  132|      1|    //double noont = riset + 12.0 * ha/pi;
  133|      1|    //double altmax = 90.0 + delta * degs - latit;
  134|      1|    // Correction suggested by David Smith
  135|      1|    // to express as degrees from the N horizon
  136|      1|
  137|      1|    //if (delta * degs > latit ) altmax = 90.0 + latit - delta * degs;
  138|      1|
  139|      1|    double twam = riset - twx;    // morning twilight begin
  140|      1|    double twpm = settm + twx;      // evening twilight end
  141|      1|
  142|      1|    if (riset > 24.0) riset-= 24.0;
  143|      1|    if (settm > 24.0) settm-= 24.0;
  144|      1|
  145|      1|    std::stringstream ss;
  146|      1|    ss << "\n Sunrise and set\n";
  147|      1|    ss << "===============\n";
  148|      1|    ss << "  year  : " << y << '\n';
  149|      1|    ss << "  month : " << m << '\n';
  150|      1|    ss << "  day   : " << day << "\n\n";
  151|      1|    ss << "Days until Y2K :  " << d << '\n';
  152|      1|    ss << "Latitude :  " << latit << ", longitude:  " << longit << '\n';
  153|      1|    ss << "Timezone :  " << tzone << "\n\n";
  154|      1|    ss << "Declination : " << delta * degs << '\n';
  155|      1|    ss << "Daylength   : "<< gethrmn(daylen).m_h<<":"<<gethrmn(daylen).m_min<< " hours \n";
  156|      1|    ss << "Begin civil twilight: "<<
  157|      1|                 gethrmn(twam).m_h<<":"<<gethrmn(twam).m_min; std::cout << '\n';
  158|      1|
  159|      1|    ss << "Sunrise     : "<< gethrmn(riset).m_h<<":"<<gethrmn(riset).m_min; std::cout << '\n';
  160|      1|    ss << "Sun altitude at noontime ";
  161|      1|
  162|      1|
  163|      1|    ss << "Sunset      : "<<
  164|      1|                 gethrmn(settm).m_h<<":"<<gethrmn(settm).m_min; std::cout << '\n';
  165|      1|    ss << "Civil twilight: "<<
  166|      1|                 gethrmn(twpm).m_h<<":"<<gethrmn(twpm).m_min; std::cout << '\n';
  167|      1|    return ss.str();
  168|      1|}
  169|       |
  170|       |void SunRiseSet::setPosition(double LATITUDE, double LONGITUDE, int TIMEZONE)
  171|      0|{
  172|      0|    this->LATITUDE = LATITUDE;
  173|      0|    this->LONGITUDE = LONGITUDE;
  174|      0|    this->TIMEZONE = TIMEZONE;
  175|      0|}
  176|       |
  177|       |Clock SunRiseSet::getSunRise()
  178|     27|{
  179|     27|    double y,m,day,h,latit,longit;
  180|     27|    time_t sekunnit;
  181|     27|    struct tm *p;
  182|     27|    // get the date and time from the user
  183|     27|    // read system date and extract the year
  184|     27|
  185|     27|    /** First get current time **/
  186|     27|    time(&sekunnit);
  187|     27|
  188|     27|    /** Next get localtime **/
  189|     27|    p=localtime(&sekunnit);
  190|     27|    // this is Y2K compliant algorithm
  191|     27|    y = 1900 + p->tm_year;
  192|     27|    m = p->tm_mon + 1;
  193|     27|    day = p->tm_mday;
  194|     27|    h = 12;
  195|     27|    latit = LATITUDE;
  196|     27|    longit = LONGITUDE;
  197|     27|    // Timezone hours
  198|     27|    double tzone = TIMEZONE;
  199|     27|    double d = FNday(y, m, day, h);
  200|     27|    // Use FNsun to find the ecliptic longitude of the
  201|     27|    // Sun
  202|     27|    double lambda = FNsun(d);
  203|     27|    // Obliquity of the ecliptic
  204|     27|    double obliq = 23.439 * rads - .0000004 * rads * d;
  205|     27|    // Find the RA and DEC of the Sun
  206|     27|    double alpha = atan2(cos(obliq) * sin(lambda), cos(lambda));
  207|     27|    double delta = asin(sin(obliq) * sin(lambda));
  208|     27|    double LL = L - alpha;
  209|     27|    if (L < pi) LL += tpi;
  210|     27|    double equation = 1440.0 * (1.0 - LL / tpi);
  211|     27|    double ha = f0(latit,delta);
  212|     27|    // Conversion of angle to hours and minutes //
  213|     27|    daylen = degs * ha / 7.5;
  214|     27|    if (daylen<0.0001) {daylen = 0.0;}
  215|     27|    // arctic winter   //
  216|     27|    double riset = 12.0 - 12.0 * ha/pi + tzone - longit/15.0 + equation/60.0;
  217|     27|
  218|     27|    if (riset > 24.0) riset-= 24.0;
  219|     27|    return  gethrmn(riset);
  220|     27|}
  221|       |
  222|       |Clock SunRiseSet::getDayLength()
  223|      7|{
  224|      7|    double y,m,day,h,latit;
  225|      7|    time_t sekunnit;
  226|      7|    struct tm *p;
  227|      7|
  228|      7|    // get the date and time from the user
  229|      7|    // read system date and extract the year
  230|      7|
  231|      7|    /** First get current time **/
  232|      7|    time(&sekunnit);
  233|      7|
  234|      7|    /** Next get localtime **/
  235|      7|    p=localtime(&sekunnit);
  236|      7|    // this is Y2K compliant algorithm
  237|      7|    y = 1900 + p->tm_year;
  238|      7|    m = p->tm_mon + 1;
  239|      7|    day = p->tm_mday;
  240|      7|    h = 12;
  241|      7|    latit = LATITUDE;
  242|      7|    double d = FNday(y, m, day, h);
  243|      7|
  244|      7|    // Use FNsun to find the ecliptic longitude of the
  245|      7|    // Sun
  246|      7|    double lambda = FNsun(d);
  247|      7|    // Obliquity of the ecliptic
  248|      7|    double obliq = 23.439 * rads - .0000004 * rads * d;
  249|      7|    double delta = asin(sin(obliq) * sin(lambda));
  250|      7|    // Find the Equation of Time in minutes
  251|      7|    // Correction suggested by David Smith
  252|      7|    double ha = f0(latit,delta);
  253|      7|    // Conversion of angle to hours and minutes //
  254|      7|    daylen = degs * ha / 7.5;
  255|      7|    if (daylen<0.0001) {daylen = 0.0;}
  256|      7|    // arctic winter   //
  257|      7|
  258|      7|    return  gethrmn(daylen);
  259|      7|}
  260|       |
  261|       |Clock SunRiseSet::getSunSet()
  262|     11|{
  263|     11|    double y,m,day,h,latit,longit;
  264|     11|
  265|     11|    time_t sekunnit;
  266|     11|    struct tm *p;
  267|     11|
  268|     11|    // get the date and time from the user
  269|     11|    // read system date and extract the year
  270|     11|
  271|     11|    /** First get current time **/
  272|     11|    time(&sekunnit);
  273|     11|
  274|     11|    /** Next get localtime **/
  275|     11|
  276|     11|    p=localtime(&sekunnit);
  277|     11|    // this is Y2K compliant algorithm
  278|     11|    y = 1900 + p->tm_year;
  279|     11|
  280|     11|    m = p->tm_mon + 1;
  281|     11|    day = p->tm_mday;
  282|     11|    h = 12;
  283|     11|
  284|     11|    latit = LATITUDE;
  285|     11|    longit = LONGITUDE;
  286|     11|    // Timezone hours
  287|     11|    double tzone = TIMEZONE;
  288|     11|
  289|     11|    double d = FNday(y, m, day, h);
  290|     11|
  291|     11|    // Use FNsun to find the ecliptic longitude of the
  292|     11|    // Sun
  293|     11|
  294|     11|    double lambda = FNsun(d);
  295|     11|
  296|     11|    // Obliquity of the ecliptic
  297|     11|
  298|     11|    double obliq = 23.439 * rads - .0000004 * rads * d;
  299|     11|
  300|     11|    // Find the RA and DEC of the Sun
  301|     11|
  302|     11|    double alpha = atan2(cos(obliq) * sin(lambda), cos(lambda));
  303|     11|    double delta = asin(sin(obliq) * sin(lambda));
  304|     11|
  305|     11|
  306|     11|    // Find the Equation of Time in minutes
  307|     11|    // Correction suggested by David Smith
  308|     11|
  309|     11|    double LL = L - alpha;
  310|     11|    if (L < pi) LL += tpi;
  311|     11|    double equation = 1440.0 * (1.0 - LL / tpi);
  312|     11|
  313|     11|
  314|     11|    double ha = f0(latit,delta);
  315|     11|
  316|     11|    // Conversion of angle to hours and minutes //
  317|     11|    daylen = degs * ha / 7.5;
  318|     11|    if (daylen<0.0001) {daylen = 0.0;}
  319|     11|    // arctic winter   //
  320|     11|
  321|     11|    //double riset = 12.0 - 12.0 * ha/pi + tzone - longit/15.0 + equation/60.0;
  322|     11|    double settm = 12.0 + 12.0 * ha/pi + tzone - longit/15.0 + equation/60.0;
  323|     11|
  324|     11|    //if (riset > 24.0) riset-= 24.0;
  325|     11|    if (settm > 24.0) settm-= 24.0;
  326|     11|    return  gethrmn(settm);
  327|     11|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/useful/test/useful_bt.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <sys/types.h>
    3|       |#include <sys/stat.h>
    4|       |#include <stdio.h>
    5|       |#include <string.h>
    6|       |#include <fcntl.h>
    7|       |#include <unistd.h>
    8|       |#include "../useful.h"
    9|       |///////////////////////////////////////////////////// TEST ///////////////////////////////////////////////////////\
   10|       |
   11|       |TEST(ClockClass, AddTwoHours)
   12|      1|{
   13|      1|    Clock f(13,57);
   14|      1|    Clock g(23,59);
   15|      1|    Clock r = f+g;
   16|      1|    EXPECT_EQ(r.getString(), "13:56");
   17|      1|}
   18|       |
   19|       |TEST(ClockClass, lessThen_Hours)
   20|      1|{
   21|      1|    Clock f(13,57);
   22|      1|    Clock g(23,59);
   23|      1|    EXPECT_EQ(f<g, true);
   24|      1|}
   25|       |
   26|       |TEST(ClockClass, plus_operator)
   27|      1|{
   28|      1|    Clock f(13,57);
   29|      1|    f+=Clock("04:04");
   30|      1|    EXPECT_EQ(f.getString(),"18:01");
   31|      1|}
   32|       |
   33|       |TEST(ClockClass, _operator)
   34|      1|{
   35|      1|    EXPECT_FALSE(Clock("04:04") == Clock("04:05"));
   36|      1|    EXPECT_FALSE(Clock("05:05") == Clock("04:05"));
   37|      1|    EXPECT_TRUE(Clock("05:05") == Clock("05:05"));
   38|      1|    EXPECT_FALSE(Clock("05:05") != Clock("05:05"));
   39|      1|    EXPECT_TRUE(Clock("04:05") != Clock("05:05"));
   40|      1|    EXPECT_TRUE(Clock("04:05") != Clock("04:04"));
   41|      1|    EXPECT_TRUE(Clock("04:05") > Clock("04:04"));
   42|      1|    EXPECT_FALSE(Clock("03:05") > Clock("04:04"));
   43|      1|    EXPECT_TRUE(Clock("04:05") >= Clock("04:04"));
   44|      1|    EXPECT_FALSE(Clock("04:05") <= Clock("04:04"));
   45|      1|    EXPECT_FALSE(Clock("05:05") <= Clock("04:05"));
   46|      1|    EXPECT_TRUE(Clock("03:05") <= Clock("04:05"));
   47|      1|    EXPECT_TRUE(Clock("04:05") <= Clock("04:06"));
   48|      1|    EXPECT_FALSE(Clock("05:05") < Clock("04:06"));
   49|      1|    EXPECT_TRUE(Clock("04:05") < Clock("04:06"));
   50|      1|    EXPECT_TRUE(Clock("08:05") > Clock("04:06"));
   51|      1|
   52|      1|    std::stringstream s;
   53|      1|    Clock f("00:00");
   54|      1|    s << f;
   55|      1|    EXPECT_STREQ("00:00", s.str().c_str());
   56|      1|
   57|      1|    Clock g("20:00");
   58|      1|    f = g.getTime();
   59|      1|    g += Clock("23:43");
   60|      1|    EXPECT_STREQ("19:43", g.getString().c_str());
   61|      1|}
   62|       |
   63|       |TEST(ClockClass, periodOfTime)
   64|      1|{
   65|      1|    Clock f(13,57);
   66|      1|    Clock g(22,22);
   67|      1|    Clock r = Clock::periodOfTime(f,g);
   68|      1|    EXPECT_EQ(r.getString(),"08:25");
   69|      1|    r = Clock::periodOfTime(g,f);
   70|      1|    EXPECT_EQ(r.getString(),"15:35");
   71|      1|}
   72|       |
   73|       |TEST(ClockClass, from_to_second)
   74|      1|{
   75|      1|    Clock f;
   76|      1|    f.set(13,57);
   77|      1|    unsigned int sec = f.toSeconds();
   78|      1|    Clock g = Clock::fromSeconds(sec);
   79|      1|    EXPECT_EQ(f.getString(),g.getString());
   80|      1|}
   81|       |
   82|       |TEST(ClockClass, stopwatch)
   83|      1|{
   84|      1|    Clock f;
   85|      1|    f.stopwatchStart();
   86|      1|    sleep(1);
   87|      1|    EXPECT_EQ(1,f.stopwatchStopAndGetResult());
   88|      1|}
   89|       |
   90|       |TEST(ClockClass, wrongSet)
   91|      1|{
   92|      1|    Clock f;
   93|      1|    EXPECT_ANY_THROW(f.set(99,99));
   94|      1|}
   95|       |
   96|       |TEST(ClockClass, to_string_with_precision_TC)
   97|      1|{
   98|      1|    double d = 1.0/3.0;
   99|      1|    EXPECT_STREQ("0.33", to_string_with_precision(d,2).c_str() );
  100|      1|}
  101|       |
  102|       |TEST(JSON, getJSON)
  103|      1|{
  104|      1|    nlohmann::json test_JSON = useful_F_libs::getJson("http://cyniu88.no-ip.pl/test/json/on_lightning.json");
  105|      1|    auto testKey = test_JSON["success"].get<bool>();
  106|      1|
  107|      1|    std::cout << " JSON JEST" << std::endl << test_JSON.dump(4) << std::endl;
  108|      1|
  109|      1|    EXPECT_TRUE(testKey);
  110|      1|}
  111|       |
  112|       |//TEST(mkfifo_test, mkfifoFile)
  113|       |//{
  114|       |//    std::string path = "/mnt/ramdisk/FifoFile";
  115|       |//    std::string msg = "p";
  116|       |//    std::string returnString = "NULL";
  117|       |//    int temp = mkfifo(path.c_str(),0666);
  118|       |
  119|       |//    if ( temp == -1)
  120|       |//        std::cout << "plik istnieje "<<strerror(errno)<< std::endl;
  121|       |//    else if (temp == 0)
  122|       |//        std::cout << "plik stworzony"<< std::endl;
  123|       |//    else
  124|       |//        FAIL();
  125|       |
  126|       |//    useful_F_libs::write_to_mkfifo(path,msg);
  127|       |//}
  128|       |
  129|       |//TEST(mkfifo_test, mkfifoFile2)
  130|       |//{
  131|       |//    std::string msg = "p";
  132|       |//    std::string path = "/mnt/ramdisk/FifoFile";
  133|       |//    std::string returnString = useful_F_libs::read_from_mkfifo(path);
  134|       |//    //unlink(path.c_str());
  135|       |
  136|       |//    EXPECT_STREQ(returnString.c_str(), msg.c_str()) << "odczytano smieci";
  137|       |//    //TODO not
  138|       |
  139|       |//}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/useful/useful.h:
    1|       |#ifndef Iusefull_H
    2|       |#define Iusefull_H
    3|       |
    4|       |#include <iostream>
    5|       |#include <string>
    6|       |#include <vector>
    7|       |#include <ostream>
    8|       |#include <chrono>
    9|       |#include <sstream>
   10|       |#include <stdio.h>
   11|       |#include <stdlib.h>
   12|       |#include <iomanip>
   13|       |#ifndef ANDROID
   14|       |#include "json.hpp"
   15|       |#endif
   16|       |
   17|       |std::vector<std::string> split_string(const std::string& s, char separator );
   18|       |
   19|       |class useful_F_libs {
   20|       |public:
   21|       |
   22|       |    ///////////////////// string ////////////////////////////////////////////////
   23|       |    static bool hasSubstring(const std::string& _str, const std::string& _substring);
   24|       |    static void write_to_mkfifo(const std::string& path, const std::string &msg);
   25|       |    static std::string read_from_mkfifo(const std::string &path);
   26|       |    static size_t  WriteCallback(void *contents, size_t size, size_t nmemb, void *userp);
   27|       |    static std::string find_tag (const std::string &temp);
   28|       |    //////////////////// HTTP req //////////////////////////
   29|       |    static std::string httpPost(const std::string &url, int timeoutSeconds);
   30|       |    static std::string httpPost(const std::string &url);
   31|       |    static void downloadFile(const std::string &url, const std::string &path, int timeoutSeconds);
   32|       |    static std::string replaceAll(std::string str, const std::string& from, const std::string& to);
   33|       |    static std::string removeHtmlTag(std::string &data);
   34|       |    /////////////////////  JSON ////////////////////////////
   35|       |
   36|       |#ifndef ANDROID
   37|       |    static nlohmann::json getJson(const std::string &url);
   38|       |#endif
   39|       |};
   40|       |namespace std
   41|       |{
   42|       |
   43|       |#ifdef ANDROID
   44|       |template <typename T>
   45|       |int stoi(T s){
   46|       |    return atoi(s.c_str());
   47|       |}
   48|       |#endif
   49|       |
   50|       |template <typename T>
   51|       |std::string to_string(T value)
   52|      2|{
   53|      2|    std::ostringstream os;
   54|      2|    os << value;
   55|      2|    return os.str();
   56|      2|}
   57|       |} // namespace std
   58|       |
   59|       |template <typename T>
   60|       |std::string to_string_with_precision(const T a_value, const int n = 4)
   61|     78|{
   62|     78|    std::ostringstream out;
   63|     78|    out << std::setprecision(n) << a_value;
   64|     78|    return out.str();
   65|     78|}
  ------------------
  | _Z24to_string_with_precisionIdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEET_i:
  |   61|     59|{
  |   62|     59|    std::ostringstream out;
  |   63|     59|    out << std::setprecision(n) << a_value;
  |   64|     59|    return out.str();
  |   65|     59|}
  ------------------
  | _Z24to_string_with_precisionIiENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEET_i:
  |   61|     19|{
  |   62|     19|    std::ostringstream out;
  |   63|     19|    out << std::setprecision(n) << a_value;
  |   64|     19|    return out.str();
  |   65|     19|}
  ------------------
   66|       |
   67|       |struct Clock{
   68|       |private:
   69|       |    std::time_t m_time;
   70|       |#ifdef BT_TEST
   71|       |    static unsigned int m_BT_H;
   72|       |    static unsigned int m_BT_M;
   73|       |#endif
   74|       |public:
   75|       |    unsigned int m_h = 0;
   76|       |    unsigned int m_min = 0;
   77|  1.01k|    Clock () {}
   78|     38|    Clock(std::string t){
   79|     38|        std::vector<std::string> vt = split_string(t,':');
   80|     38|        int h = std::stoi(vt.at(0));
   81|     38|        int m = std::stoi(vt.at(1));
   82|     38|        set(static_cast <unsigned int>(h),static_cast <unsigned int>(m));
   83|     38|    }
   84|       |
   85|    730|    Clock(unsigned int h, unsigned int m) {
   86|    730|        set(h,m);
   87|    730|    }
   88|       |    /////////////////////////////////////////////////////////////////////////////////////
   89|    770|    void set(unsigned int h, unsigned int m){
   90|    770|        if (h<24 && m <60){
   91|    769|            this->m_h = h;
   92|    769|            this->m_min = m;
   93|    769|        }
   94|      1|        else {
   95|      1|            throw 0;
   96|      1|        }
   97|    769|    }
   98|       |
   99|       |    /////////////////////////////////////////////////////////////////////////////////////
  100|     91|    const std::string getString(){
  101|     91|        std::stringstream ret;
  102|     91|        if (m_h < 10) {
  103|     76|            ret << "0";
  104|     76|        }
  105|     91|        ret << m_h;
  106|     91|        ret << ":";
  107|     91|        if (m_min < 10) {
  108|     68|            ret << "0";
  109|     68|        }
  110|     91|        ret << m_min;
  111|     91|        return ret.str();
  112|     91|    }
  113|       |    /////////////////////////////////////////////////////////////////////////////////////
  114|     13|    bool operator == (const Clock & c){
  115|     13|        if ((this->m_h == c.m_h) && (this->m_min == c.m_min)){
  116|     11|            return true;
  117|     11|        }
  118|      2|        else{
  119|      2|            return false;
  120|      2|        }
  121|     13|    }
  122|       |    /////////////////////////////////////////////////////////////////////////////////////
  123|     19|    bool operator != (const Clock & c){
  124|     19|        if ((this->m_h != c.m_h) || (this->m_min != c.m_min)){
  125|     10|            return true;
  126|     10|        }
  127|      9|        else{
  128|      9|            return false;
  129|      9|        }
  130|     19|    }
  131|       |    /////////////////////////////////////////////////////////////////////////////////////
  132|      1|    friend std::ostream & operator<< (std::ostream &w ,  Clock &c) {
  133|      1|        return w << c.getString();
  134|      1|    }
  135|       |    /////////////////////////////////////////////////////////////////////////////////////
  136|     20|    bool operator < (const Clock& c){
  137|     20|        if (this->m_h < c.m_h){
  138|     17|            return true;
  139|     17|        }
  140|      3|        else{
  141|      3|            if (this->m_h == c.m_h && this->m_min < c.m_min){
  142|      1|                return true;
  143|      1|            }
  144|      2|        }
  145|      2|        return false;
  146|      2|    }
  147|       |    /////////////////////////////////////////////////////////////////////////////////////
  148|      4|    bool operator > (const Clock& c){
  149|      4|        if (this->m_h > c.m_h){
  150|      1|            return true;
  151|      1|        }
  152|      3|        else{
  153|      3|            if (this->m_h == c.m_h && this->m_min > c.m_min){
  154|      1|                return true;
  155|      1|            }
  156|      2|        }
  157|      2|        return false;
  158|      2|    }
  159|       |    /////////////////////////////////////////////////////////////////////////////////////
  160|      5|    bool operator >= (const Clock& c){
  161|      5|        if (this->m_h > c.m_h){
  162|      2|            return true;
  163|      2|        }
  164|      3|        else if (this->m_h == c.m_h){
  165|      1|
  166|      1|            if (this->m_min >= c.m_min){
  167|      1|                return true;
  168|      1|            }
  169|      2|        }
  170|      2|        return false;
  171|      2|    }
  172|       |    /////////////////////////////////////////////////////////////////////////////////////
  173|      7|    bool operator <= (const Clock& c){
  174|      7|        if (this->m_h < c.m_h){
  175|      2|            return true;
  176|      2|        }
  177|      5|        else if (this->m_h == c.m_h){
  178|      2|
  179|      2|            if (this->m_min <= c.m_min){
  180|      1|                return true;
  181|      1|            }
  182|      4|        }
  183|      4|        return false;
  184|      4|    }
  185|       |    /////////////////////////////////////////////////////////////////////////////////////
  186|    199|    Clock  operator + (const Clock& c){
  187|    199|        unsigned int minutes, hours;
  188|    199|        minutes = m_min+ c.m_min;
  189|    199|        hours = m_h + c.m_h;
  190|    199|        if (minutes >59){
  191|    147|            minutes =  minutes % 60;
  192|    147|            hours+=1;
  193|    147|        }
  194|    199|        if (hours >= 24){
  195|    147|            hours-=24;
  196|    147|        }
  197|    199|        return  Clock(hours, minutes);
  198|    199|
  199|    199|    }
  200|       |    /////////////////////////////////////////////////////////////////////////////////////
  201|      5|    Clock&  operator += (const Clock& c){
  202|      5|        unsigned int minutes, hours;
  203|      5|        minutes = m_min+ c.m_min;
  204|      5|        hours = m_h + c.m_h;
  205|      5|        if (minutes >59){
  206|      4|            minutes =  minutes % 60;
  207|      4|            hours+=1;
  208|      4|        }
  209|      5|        if (hours >= 24){
  210|      4|            hours-=24;
  211|      4|        }
  212|      5|        this->m_h = hours;
  213|      5|        this->m_min = minutes;
  214|      5|        return *this;
  215|      5|
  216|      5|    }
  217|       |    /////////////////////////////////////////////////////////////////////////////////////
  218|       |
  219|      5|    unsigned int toSeconds(){
  220|      5|        return toSeconds(Clock(this->m_h, this->m_min) );
  221|      5|    }
  222|       |    /////////////////////////////////////////////////////////////////////////////////////
  223|       |
  224|      6|    static unsigned int toSeconds(Clock t){
  225|      6|        return ((t.m_h*60) + t.m_min)*60;
  226|      6|    }
  227|       |    /////////////////////////////////////////////////////////////////////////////////////
  228|       |
  229|      3|    static Clock fromSeconds(unsigned int sec){
  230|      3|        unsigned int h = sec/3600;
  231|      3|        unsigned int min = sec%3600;
  232|      3|        min = min/60;
  233|      3|        return Clock(h,min);
  234|      3|    }
  235|       |    /////////////////////////////////////////////////////////////////////////////////////
  236|       |
  237|       |    static Clock periodOfTime(Clock start, Clock end)
  238|      2|    {
  239|      2|        if (end >= start){
  240|      1|            return Clock::fromSeconds(end.toSeconds() - start.toSeconds()  );
  241|      1|        }
  242|      1|        else{
  243|      1|            return Clock::fromSeconds(end.toSeconds() + ( Clock::toSeconds(Clock(23,59))+ 60 - start.toSeconds() ) );
  244|      1|        }
  245|      2|        //return diff;
  246|      2|    }
  247|       |    ////////////////////////////////////////////////////////////////////////////////////
  248|       |    static unsigned int getUnixTime()
  249|      4|    {
  250|      4|        return static_cast<unsigned int> (std::time(nullptr));
  251|      4|    }
  252|       |    /////////////////////////////////////////////////////////////////////////////////////
  253|       |#ifdef BT_TEST
  254|       |    static void setTime_forBT_usage(int h, int m)
  255|      6|    {
  256|      6|        m_BT_H = h;
  257|      6|        m_BT_M = m;
  258|      6|    }
  259|       |#endif
  260|       |    /////////////////////////////////////////////////////////////////////////////////////
  261|       |    static Clock getTime()
  262|    259|    {
  263|    259|#ifdef BT_TEST
  264|    259|        return Clock(m_BT_H,m_BT_M);
  265|       |#else
  266|       |        time_t now = time(0);
  267|       |        tm *ltm = localtime(&now);
  268|       |        return Clock( static_cast <unsigned int>(ltm->tm_hour),static_cast <unsigned int>(ltm->tm_min) );
  269|       |#endif
  270|       |    }
  271|       |    /////////////////////////////////////////////////////////////////////////////////////
  272|       |    void stopwatchStart()
  273|      1|    {
  274|      1|        m_time = std::time(nullptr);
  275|      1|    }
  276|       |    /////////////////////////////////////////////////////////////////////////////////////
  277|       |    unsigned int  stopwatchStopAndGetResult()
  278|      1|    {
  279|      1|        return static_cast<unsigned int>(std::time(nullptr) - m_time);
  280|      1|    }
  281|       |};
  282|       |
  283|       |enum class STATE {
  284|       |    OFF,
  285|       |    ON,
  286|       |    UNKNOWN,
  287|       |    PLAY,
  288|       |    PAUSE,
  289|       |    STOP,
  290|       |    ACTIVE,
  291|       |    DEACTIVE,
  292|       |    WORKING,
  293|       |    DEFINE,
  294|       |    UNDEFINE,
  295|       |    LOCK,
  296|       |    UNLOCK,
  297|       |    EMPTY,
  298|       |    FULL,
  299|       |    SEND_OK,
  300|       |    SEND_NOK,
  301|       |    TEMPORARY
  302|       |    //WARNING remember add new state to stateToString() usefull.cpp
  303|       |};
  304|       |
  305|       |
  306|       |std::string stateToString(STATE s);
  307|       |STATE stringToState(const std::string& s);
  308|       |
  309|       |#endif

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/libs/useful/usefull.cpp:
    1|       |#include "useful.h"
    2|       |#include <sys/fcntl.h>
    3|       |#include <unistd.h>
    4|       |#include <sys/types.h>
    5|       |#include <sys/stat.h>
    6|       |#include <fcntl.h>
    7|       |#include <fstream>
    8|       |
    9|       |#ifndef IDOM
   10|       |#include <curl/curl.h>
   11|       |#endif
   12|     38|std::vector<std::string> split_string(const std::string& s, char separator ){
   13|     38|    std::vector<std::string> output;
   14|     38|    std::string::size_type prev_pos = 0, pos = 0;
   15|     38|
   16|     76|    while((pos = s.find(separator, pos)) != std::string::npos)
   17|     38|    {
   18|     38|        std::string substring( s.substr(prev_pos, pos-prev_pos) );
   19|     38|        output.push_back(substring);
   20|     38|        prev_pos = ++pos;
   21|     38|    }
   22|     38|    try {
   23|     38|        output.push_back(s.substr(prev_pos, pos-prev_pos)); // Last word
   24|     38|    }
   25|     38|    catch (...){
   26|      0|
   27|      0|    }
   28|     38|    return output;
   29|     38|}
   30|       |
   31|    790|std::string stateToString(STATE s){
   32|    790|    switch (s) {
   33|    790|    case STATE::OFF:        return "OFF";
   34|    790|    case STATE::ON:         return "ON";
   35|    790|    case STATE::PLAY:       return "PLAY";
   36|    790|    case STATE::PAUSE:      return "PAUSE";
   37|    790|    case STATE::STOP:       return "STOP";
   38|    790|    case STATE::ACTIVE:     return "ACTIVE";
   39|    790|    case STATE::DEACTIVE:   return "DEACTIVE";
   40|    790|    case STATE::WORKING:    return "WORKING";
   41|    790|    case STATE::DEFINE:     return "DEFINE";
   42|    790|    case STATE::UNDEFINE:   return "UNDEFINE";
   43|    790|    case STATE::LOCK:       return "LOCK";
   44|    790|    case STATE::UNLOCK:     return "UNLOCK";
   45|    790|    case STATE::EMPTY:      return "EMPTY";
   46|    790|    case STATE::FULL:       return "FULL";
   47|    790|    case STATE::SEND_OK:    return "SEND_OK";
   48|    790|    case STATE::SEND_NOK:   return "SEND_NOK";
   49|    790|    default:
   50|     51|        return "UNKNOWN";
   51|      0|    }
   52|      0|}
   53|       |
   54|  2.00k|STATE stringToState(const std::string& s){
   55|  2.00k|    if(s == "OFF")
   56|    398|        return STATE::OFF;
   57|  1.60k|    else if (s == "ON")
   58|    398|        return STATE::ON;
   59|  1.21k|    else if (s == "PLAY")
   60|      0|        return STATE::PLAY;
   61|  1.21k|    else if (s == "PAUSE")
   62|      0|        return STATE::PAUSE;
   63|  1.21k|    else if (s == "STOP")
   64|      0|        return STATE::STOP;
   65|  1.21k|    else if (s == "ACTIVE")
   66|      0|        return STATE::ACTIVE;
   67|  1.21k|    else if (s == "DEACTIVE")
   68|      0|        return STATE::DEACTIVE;
   69|  1.21k|    else if (s == "WORKING")
   70|      0|        return STATE::WORKING;
   71|  1.21k|    else if (s == "DEFINE")
   72|      0|        return STATE::DEFINE;
   73|  1.21k|    else if (s == "UNDEFINE")
   74|      0|        return STATE::UNDEFINE;
   75|  1.21k|    else if (s == "LOCK")
   76|      0|        return STATE::LOCK;
   77|  1.21k|    else if (s == "UNLOCK")
   78|      0|        return STATE::UNLOCK;
   79|  1.21k|    else if (s == "EMPTY")
   80|      0|        return STATE::EMPTY;
   81|  1.21k|    else if (s == "FULL")
   82|      0|        return STATE::FULL;
   83|  1.21k|    else if (s == "SEND_OK")
   84|      0|        return STATE::SEND_OK;
   85|  1.21k|    else if (s == "SEND_NOK")
   86|      0|        return STATE::SEND_NOK;
   87|  1.21k|    else
   88|  1.21k|        return STATE::UNKNOWN;
   89|      0|}
   90|       |
   91|       |bool useful_F_libs::hasSubstring(const std::string& _str, const std::string& _substring)
   92|      6|{
   93|      6|    if(_str.find(_substring) != std::string::npos)
   94|      6|        return true;
   95|      0|    return false;
   96|      0|}
   97|       |
   98|       |#ifndef IDOM
   99|       |
  100|       |void useful_F_libs::write_to_mkfifo(const std::string &path, const std::string& msg)
  101|      6|{
  102|      6|    errno = 0;
  103|      6|    int fd = open(path.c_str(), O_RDWR| O_NONBLOCK );
  104|      6|    std::cout << "write open file: " << fd << " path " << path.c_str() << " msg: " << msg <<std::endl;
  105|      6|    std::cout << "write_to_mkfifo( error - " << strerror(  errno ) <<   std::endl;
  106|      6|    write(fd, msg.c_str(), msg.size());
  107|      6|    close(fd);
  108|      6|}
  109|       |
  110|       |std::string useful_F_libs::read_from_mkfifo(const std::string& path)
  111|     11|{
  112|     11|    /* char buf[10];
  113|     11|    //open, read, and display the message from the FIFO
  114|     11|    int fd = open(path.c_str(), O_RDONLY | O_NONBLOCK);
  115|     11|    std::cout <<"read open file: " << fd <<std::endl;
  116|     11|    read(fd, buf, sizeof (buf));
  117|     11|    std::cout << "buf: " << buf << std::endl;
  118|     11|    close(fd);
  119|     11|    return (std::string(buf));
  120|     11|*/    std::string buf = "NULL";
  121|     11|    std::fstream fd;
  122|     11|    fd.open(path.c_str(), std::fstream::in | std::fstream::out | std::fstream::app);
  123|     11|
  124|     11|    std::getline(fd,buf);
  125|     11|    return buf;
  126|     11|}
  127|       |
  128|       |size_t useful_F_libs::WriteCallback(void *contents, size_t size, size_t nmemb, void *userp)
  129|     19|{
  130|     19|    ((std::string*)userp)->append((char*)contents, size * nmemb);
  131|     19|    return size * nmemb;
  132|     19|}
  133|       |
  134|       |std::string useful_F_libs::find_tag(const std::string& temp)
  135|     14|{
  136|     14|    std::string value = "";
  137|    294|    for (unsigned int i = 0; i<temp.size();++i){
  138|    294|
  139|    294|        if (temp.at(i) =='>')
  140|     14|        {  int z = i+1;
  141|     42|            while (temp.at(z)!='<')
  142|     28|            {
  143|     28|                value+= temp.at(z);
  144|     28|                ++z;
  145|     28|            }
  146|     14|            break;
  147|     14|        }
  148|    294|    }
  149|     14|    return value;
  150|     14|}
  151|       |
  152|       |#ifndef BT_TEST
  153|       |std::string useful_F_libs::httpPost(const std::string& url, int timeoutSeconds)
  154|       |{
  155|       |    CURL *curl;
  156|       |    CURLcode res;
  157|       |    std::string readBuffer;
  158|       |    curl = curl_easy_init();
  159|       |
  160|       |    if(curl) {
  161|       |        curl_easy_setopt(curl, CURLOPT_TIMEOUT, timeoutSeconds);
  162|       |        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
  163|       |        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, useful_F_libs::WriteCallback);
  164|       |        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);
  165|       |        res = curl_easy_perform(curl);
  166|       |        /* Check for errors */
  167|       |        if(res != CURLE_OK)
  168|       |            fprintf(stderr, "curl_easy_perform() failed: %s\n",
  169|       |                    curl_easy_strerror(res));
  170|       |
  171|       |        /* always cleanup */
  172|       |        curl_easy_cleanup(curl);
  173|       |    }
  174|       |    curl_global_cleanup();
  175|       |
  176|       |    return readBuffer;
  177|       |}
  178|       |
  179|       |std::string useful_F_libs::httpPost(const std::string& url)
  180|       |{
  181|       |    return useful_F_libs::httpPost(url, 10);
  182|       |}
  183|       |#endif
  184|       |
  185|       |void useful_F_libs::downloadFile(const std::string& url, const std::string& path, int timeoutSeconds)
  186|      0|{
  187|      0|    CURL *curl;
  188|      0|    //CURLcode res;
  189|      0|
  190|      0|    curl = curl_easy_init();
  191|      0|    if (curl) {
  192|      0|        FILE *fp = fopen(path.c_str(),"wb");
  193|      0|        curl_easy_setopt(curl, CURLOPT_TIMEOUT, timeoutSeconds);
  194|      0|        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
  195|      0|        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, NULL);
  196|      0|        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);
  197|      0|        //res = curl_easy_perform(curl);
  198|      0|        /* always cleanup */
  199|      0|        curl_easy_cleanup(curl);
  200|      0|        fclose(fp);
  201|      0|    }
  202|      0|}
  203|       |
  204|      3|std::string useful_F_libs::replaceAll(std::string str, const std::string& from, const std::string& to) {
  205|      3|    size_t start_pos = 0;
  206|     11|    while((start_pos = str.find(from, start_pos)) != std::string::npos) {
  207|      8|        str.replace(start_pos, from.length(), to);
  208|      8|        start_pos += to.length(); // Handles case where 'to' is a substring of 'from'
  209|      8|    }
  210|      3|    return str;
  211|      3|}
  212|       |std::string useful_F_libs::removeHtmlTag(std::string &data)
  213|      2|{
  214|      2|    data = useful_F_libs::replaceAll(data,"</dl>","\n");
  215|      2|
  216|      2|    //data = useful_F::replaceAll(data,"    "," ");
  217|      2|    bool copy = true;
  218|      2|    std::string plainString = "";
  219|      2|    std::stringstream convertStream;
  220|      2|
  221|      2|    // remove all xml tags
  222|  1.56k|    for (unsigned int i=0; i < data.length(); i++)
  223|  1.56k|    {
  224|  1.56k|        convertStream << data[i];
  225|  1.56k|
  226|  1.56k|        if(convertStream.str().compare("<") == 0) copy = false;
  227|  1.54k|        else if(convertStream.str().compare(">") == 0)
  228|     19|        {
  229|     19|            copy = true;
  230|     19|            convertStream.str(std::string());
  231|     19|            continue;
  232|     19|        }
  233|  1.54k|
  234|  1.54k|        if(copy) plainString.append(convertStream.str());
  235|  1.54k|
  236|  1.54k|        convertStream.str(std::string());
  237|  1.54k|    }
  238|      2|
  239|      2|    return plainString;
  240|      2|}
  241|       |
  242|       |nlohmann::json useful_F_libs::getJson(const std::string& url)
  243|      4|{
  244|      4|    std::string str = useful_F_libs::httpPost(url);
  245|      4|    nlohmann::json jj = nlohmann::json::parse( str);
  246|      4|
  247|      4|    return jj;
  248|      4|}
  249|       |#endif

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/433MHz/RFLink/TEST/rflinkhandler_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../rflinkhandler.h"
    4|       |#include "test_data.h"
    5|       |
    6|       |class RFLinkHandler_Class_fixture : public ::testing::Test
    7|       |{
    8|       |public:
    9|       |    thread_data test_my_data;
   10|       |    config test_server_set;
   11|       |    iDomSTATUS test_status;
   12|       |    std::unique_ptr<RFLinkHandler> test_RFLink;
   13|       |
   14|       |    void SetUp() final
   15|      5|    {
   16|      5|        test_server_set.TS_KEY = "key test";
   17|      5|        test_server_set.RFLinkBaudRate = "57600";
   18|      5|        test_server_set.RFLinkPort = "/dev/fakePortRS232";
   19|      5|        test_my_data.server_settings = &test_server_set;
   20|      5|        test_my_data.main_iDomStatus = &test_status;
   21|      5|        test_RFLink = std::make_unique<RFLinkHandler>(&test_my_data);
   22|      5|    }
   23|       |    void TearDown() final
   24|      5|    {
   25|      5|    }
   26|       |};
   27|       |
   28|       |TEST_F(RFLinkHandler_Class_fixture, sendCommandAndWaitForReceive)
   29|      1|{
   30|      1|    test_RFLink->init();
   31|      1|    std::string k("msg_test;\n a=4:b=10;\n");
   32|      1|    SerialPi_set_recv_msg(k);
   33|      1|    std::string r = test_RFLink->sendCommandAndWaitForReceive("test command");
   34|      1|
   35|      1|    EXPECT_STREQ(r.c_str(),"msg_test;");
   36|      1|    r = test_RFLink->sendCommandAndWaitForReceive("ok");
   37|      1|    EXPECT_STREQ(r.c_str()," a=4:b=10;");
   38|      1|}
   39|       |
   40|       |TEST_F(RFLinkHandler_Class_fixture, port_does_not_exist)
   41|      1|{
   42|      1|    bool result =  test_RFLink->init();
   43|      1|    EXPECT_FALSE(result);
   44|      1|}
   45|       |
   46|       |TEST_F(RFLinkHandler_Class_fixture, port_exist)
   47|      1|{
   48|      1|    test_server_set.RFLinkPort = "/dev/tty0";
   49|      1|    bool result =  test_RFLink->init();
   50|      1|    EXPECT_TRUE(result);
   51|      1|}
   52|       |
   53|       |TEST_F(RFLinkHandler_Class_fixture, getValue)
   54|      1|{
   55|      1|    std::string m  = "20;90;Alecto V4;ID=557a;TEMP=0057;HUM=25;";
   56|      1|    EXPECT_STREQ(test_RFLink->getArgumentValueFromRFLinkMSG(m,"ID").c_str(),"557a");
   57|      1|    EXPECT_STREQ(test_RFLink->getArgumentValueFromRFLinkMSG(m,"TEMP").c_str(),"0057");
   58|      1|    EXPECT_THROW(test_RFLink->getArgumentValueFromRFLinkMSG(m,"test"),std::string);
   59|      1|}
   60|       |
   61|       |TEST_F(RFLinkHandler_Class_fixture, readAndFlush)
   62|      1|{
   63|      1|    SerialPi_set_recv_msg("doTest;\n");
   64|      1|    std::string retStr = test_RFLink->readFromRS232();
   65|      1|    EXPECT_STREQ(retStr.c_str(), "doTest;");
   66|      1|
   67|      1|    SerialPi_set_recv_msg("doTest2;\n");
   68|      1|    test_RFLink->flush();
   69|      1|    retStr = test_RFLink->readFromRS232();
   70|      1|    EXPECT_EQ(retStr.size(), 0);
   71|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/433MHz/RFLink/rflinkhandler.cpp:
    1|       |#include <unistd.h>
    2|       |
    3|       |#include "rflinkhandler.h"
    4|       |#include "../../functions/functions.h"
    5|       |
    6|       |std::mutex RFLinkHandler::sm_RFLink_MUTEX;
    7|       |std::string RFLinkHandler::sm_RFLink_BUFOR;
    8|       |
    9|       |
   10|       |RFLinkHandler::RFLinkHandler(thread_data *my_data):
   11|       |    serial_RFLink(my_data->server_settings->RFLinkPort)
   12|     53|{
   13|     53|    this->my_data = my_data;
   14|     53|#ifdef BT_TEST
   15|     53|    std::cout << "RFLinkHandler::RFLinkHandler()"<<std::endl;
   16|     53|#endif
   17|     53|}
   18|       |
   19|       |bool RFLinkHandler::init()
   20|      3|{
   21|      3|    if( access( my_data->server_settings->RFLinkPort.c_str(), F_OK ) != -1 )
   22|      1|    {
   23|      1|        serial_RFLink.begin( std::stoi(my_data->server_settings->RFLinkBaudRate));
   24|      1|        log_file_mutex.mutex_lock();
   25|      1|        log_file_cout << INFO <<"otwarcie portu RS232 RFLink " << my_data->server_settings->RFLinkPort << "  "
   26|      1|                      <<my_data->server_settings->RFLinkBaudRate<<std::endl;
   27|      1|        log_file_mutex.mutex_unlock();
   28|      1|        return true;
   29|      1|    }
   30|      2|    else
   31|      2|    {
   32|      2|        log_file_mutex.mutex_lock();
   33|      2|        log_file_cout << ERROR <<"brak portu RS232 RFLink " << my_data->server_settings->RFLinkPort<<std::endl;
   34|      2|        log_file_mutex.mutex_unlock();
   35|      2|        return false;
   36|      2|    }
   37|      3|}
   38|       |
   39|       |void RFLinkHandler::flush()
   40|      1|{
   41|      1|    serial_RFLink.flush();
   42|      1|}
   43|       |
   44|       |void RFLinkHandler::sendCommand(std::string cmd)
   45|      1|{
   46|      1|    std::lock_guard<std::mutex> m_lock(sm_RFLink_MUTEX);
   47|      1|    cmd.append("\n\r"); // add NL & CR
   48|      1|    serial_RFLink.print(cmd.c_str());
   49|      1|}
   50|       |
   51|       |std::string RFLinkHandler::sendCommandAndWaitForReceive(std::string cmd)
   52|      2|{
   53|      2|    std::lock_guard<std::mutex> m_lock(sm_RFLink_MUTEX);
   54|      2|    cmd.append("\n\r"); // add NL & CR
   55|      2|    serial_RFLink.print(cmd.c_str());
   56|      2|    return internalReadFromRS232();
   57|      2|}
   58|       |
   59|       |std::string RFLinkHandler::readFromRS232()
   60|      2|{
   61|      2|    std::lock_guard<std::mutex> m_lock(sm_RFLink_MUTEX);
   62|      2|    return internalReadFromRS232();
   63|      2|}
   64|       |
   65|       |std::string RFLinkHandler::internalReadFromRS232()
   66|      4|{
   67|      4|    std::string buf;
   68|      4|
   69|      4|    if(serial_RFLink.available() > 0){
   70|     29|        while (true){
   71|     29|
   72|     29|            char b = serial_RFLink.read();
   73|     29|            if (b == '\n'){
   74|      3|                break;
   75|      3|            }
   76|     26|            buf += b;
   77|     26|        }
   78|      3|    }
   79|      4|    return buf;
   80|      4|}
   81|       |
   82|       |std::string RFLinkHandler::getArgumentValueFromRFLinkMSG(const std::string& msg, const std::string& var)
   83|     93|{
   84|     93|    std::string id;
   85|     93|
   86|     93|    int pos = msg.find(var+"=");
   87|     93|    if (pos == -1 ){
   88|     19|        throw "argument \""+var+"\" not found";
   89|     19|    }
   90|     74|    if (msg.at(0) != '2' || msg.at(1) != '0'){
   91|      1|        throw WRONG_FORMAT();
   92|      1|    }
   93|     73|#ifdef BT_TEST
   94|     73|    std::cout << "znaleziono " << var <<" na pozycji " << pos <<std::endl;
   95|     73|#endif
   96|     73|
   97|    462|    for (int i = 1+pos+var.size();;++i ){
   98|    462|        char t = msg.at(i);
   99|    462|        if (t ==';'){
  100|     73|            break;
  101|     73|        }
  102|    389|        id += t;
  103|    389|    }
  104|     73|    return id;
  105|     73|
  106|     73|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/433MHz/RFLink/rflinkhandler.h:
    1|       |#ifndef RFLINKHANDLER_H
    2|       |#define RFLINKHANDLER_H
    3|       |
    4|       |#include <map>
    5|       |#include <exception>
    6|       |#include "../../SerialPi/serialpi.h"
    7|       |#include "../../iDom_server_OOP.h"
    8|       |
    9|       |class WRONG_FORMAT : public std::exception{
   10|       |
   11|       |};
   12|       |
   13|       |struct RFLink_DEV{
   14|       |    int m_counter = 0;
   15|       |    std::string msg;
   16|     13|    void counter(){
   17|     13|        ++m_counter;
   18|     13|    }
   19|       |
   20|      2|    std::string read(){
   21|      2|        return std::to_string(m_counter) + " \t"+ msg;
   22|      2|    }
   23|       |};
   24|       |
   25|       |class RFLinkHandler
   26|       |{
   27|       |    thread_data *my_data;
   28|       |    SerialPi serial_RFLink;
   29|       |
   30|       |public:
   31|       |
   32|       |    static std::mutex sm_RFLink_MUTEX;
   33|       |    static std::string sm_RFLink_BUFOR;
   34|       |
   35|       |    unsigned int okTime = 0;
   36|       |    unsigned int pingTime = 0;
   37|       |    ////// temporarnie //////
   38|       |    std::map<std::string, RFLink_DEV> rflinkMAP;
   39|       |    /////////////////////////////
   40|       |    RFLinkHandler(thread_data *my_data);
   41|       |
   42|       |    bool init();
   43|       |    // void run();
   44|       |    void flush();
   45|       |    void sendCommand(std::string cmd);
   46|       |    std::string sendCommandAndWaitForReceive(std::string cmd);
   47|       |    std::string readFromRS232();
   48|       |private:
   49|       |    std::string internalReadFromRS232();
   50|       |//#ifdef BT_TEST
   51|       |public:
   52|       |//#endif
   53|       |    static std::string getArgumentValueFromRFLinkMSG(const std::string &msg, const std::string &var);
   54|       |};
   55|       |
   56|       |#endif // RFLINKHANDLER_H

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/KEY/TEST/key_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../key.h"
    4|       |
    5|       |TEST(keyBT, main)
    6|      1|{
    7|      1|    std::map <std::string, std::unique_ptr <KEY> > key_map;
    8|      1|    EXPECT_EQ (key_map.size(), 0);
    9|      1|    std::unique_ptr <pilot> pilotPTR(new pilot(&key_map));
   10|      1|    pilotPTR->setup();
   11|      1|    EXPECT_EQ (key_map.size(), 32);
   12|      1|
   13|      1|    EXPECT_EQ(PILOT_KEY::KEY_POWER, key_map["KEY_POWER"]->getValue());
   14|      1|    EXPECT_EQ(PILOT_KEY::KEY_0, key_map["KEY_0"]->getValue());
   15|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/KEY/key.cpp:
    1|       |#include "key.h"
    2|       |#include "../iDom_server_OOP.h"
    3|       |
    4|       |KEY::KEY(PILOT_KEY value, const std::string& name) : _value{value},key_name{name}
    5|     32|{
    6|     32|    //std::cout << "konstruktor KEY" << std::endl;
    7|     32|}
    8|       |
    9|       |KEY::~KEY()
   10|     32|{
   11|     32|    //printf("destruktor KEY\n");
   12|     32|}
   13|       |
   14|       |std::string KEY::getName() const
   15|     32|{
   16|     32|    return key_name;
   17|     32|}
   18|       |
   19|       |PILOT_KEY KEY::getValue() const
   20|      1|{
   21|      1|    return _value;
   22|      1|}
   23|       |
   24|      1|void pilot::setup(){
   25|      1|    std::unique_ptr <KEY> KEY_POWER 		(new SuperKEY(PILOT_KEY::KEY_POWER, "KEY_POWER","wcisnieto POWER"));
   26|      1|    std::unique_ptr <KEY> KEY_AUDIO		(new SuperKEY(PILOT_KEY::KEY_AUDIO, "KEY_AUDIO","wcisnieto PAUSE"));
   27|      1|    std::unique_ptr <KEY> KEY_EPG     		(new SuperKEY(PILOT_KEY::KEY_EPG, "KEY_EPG","przegladanie katalogu z filmami"));
   28|      1|    std::unique_ptr <KEY> KEY_OK      		(new SuperKEY(PILOT_KEY::KEY_OK, "KEY_OK", "wcisnieto OK"));
   29|      1|    std::unique_ptr <KEY> KEY_RADIO   		(new SuperKEY(PILOT_KEY::KEY_RADIO, "KEY_RADIO","sterowanie projektorem"));
   30|      1|    std::unique_ptr <KEY> KEY_TV      		(new SuperKEY(PILOT_KEY::KEY_TV, "KEY_TV", "wcisnieto PLAY"));
   31|      1|    std::unique_ptr <KEY> KEY_0   		(new KEY(PILOT_KEY::KEY_0, "KEY_0"));
   32|      1|    std::unique_ptr <KEY> KEY_1  		(new KEY(PILOT_KEY::KEY_1, "KEY_1"));
   33|      1|    std::unique_ptr <KEY> KEY_2   		(new KEY(PILOT_KEY::KEY_2, "KEY_2"));
   34|      1|    std::unique_ptr <KEY> KEY_3   		(new KEY(PILOT_KEY::KEY_3, "KEY_3"));
   35|      1|    std::unique_ptr <KEY> KEY_4   		(new KEY(PILOT_KEY::KEY_4, "KEY_4"));
   36|      1|    std::unique_ptr <KEY> KEY_5   		(new KEY(PILOT_KEY::KEY_5, "KEY_5"));
   37|      1|    std::unique_ptr <KEY> KEY_6   		(new KEY(PILOT_KEY::KEY_6, "KEY_6"));
   38|      1|    std::unique_ptr <KEY> KEY_7   		(new KEY(PILOT_KEY::KEY_7, "KEY_7"));
   39|      1|    std::unique_ptr <KEY> KEY_8   		(new KEY(PILOT_KEY::KEY_8, "KEY_8"));
   40|      1|    std::unique_ptr <KEY> KEY_9   		(new KEY(PILOT_KEY::KEY_9, "KEY_9"));
   41|      1|    std::unique_ptr <KEY> KEY_CHANNELDOWN	(new KEY(PILOT_KEY::KEY_CHANNELDOWN, "KEY_CHANNELDOWN"));
   42|      1|    std::unique_ptr <KEY> KEY_CHANNELUP		(new KEY(PILOT_KEY::KEY_CHANNELUP, "KEY_CHANNELUP"));
   43|      1|    std::unique_ptr <KEY> KEY_DOWN    		(new KEY(PILOT_KEY::KEY_DOWN, "KEY_DOWN"));
   44|      1|    std::unique_ptr <KEY> KEY_EXIT    		(new KEY(PILOT_KEY::KEY_EXIT, "KEY_EXIT"));
   45|      1|    std::unique_ptr <KEY> KEY_FAVORITES		(new KEY(PILOT_KEY::KEY_FAVORITES, "KEY_FAVORITES"));
   46|      1|    std::unique_ptr <KEY> KEY_INFO    		(new KEY(PILOT_KEY::KEY_INFO, "KEY_INFO"));
   47|      1|    std::unique_ptr <KEY> KEY_LANGUAGE		(new KEY(PILOT_KEY::KEY_LANGUAGE, "KEY_LANGUAGE"));
   48|      1|    std::unique_ptr <KEY> KEY_MENU    		(new KEY(PILOT_KEY::KEY_MENU, "KEY_MENU"));
   49|      1|    std::unique_ptr <KEY> KEY_MUTE    		(new KEY(PILOT_KEY::KEY_MUTE, "KEY_MUTE"));
   50|      1|    std::unique_ptr <KEY> KEY_REFRESH 		(new KEY(PILOT_KEY::KEY_REFRESH, "KEY_REFRESH"));
   51|      1|    std::unique_ptr <KEY> KEY_SAT     		(new KEY(PILOT_KEY::KEY_SAT, "KEY_SAT"));
   52|      1|    std::unique_ptr <KEY> KEY_SUBTITLE		(new KEY(PILOT_KEY::KEY_SUBTITLE, "KEY_SUBTITLE"));
   53|      1|    std::unique_ptr <KEY> KEY_TEXT    		(new KEY(PILOT_KEY::KEY_TEXT, "KEY_TEXT"));
   54|      1|    std::unique_ptr <KEY> KEY_UP      		(new KEY(PILOT_KEY::KEY_UP, "KEY_UP"));
   55|      1|    std::unique_ptr <KEY> KEY_VOLUMEDOWN	(new KEY(PILOT_KEY::KEY_VOLUMEDOWN, "KEY_VOLUMEDOWN"));
   56|      1|    std::unique_ptr <KEY> KEY_VOLUMEUP          (new KEY(PILOT_KEY::KEY_VOLUMEUP, "KEY_VOLUMEUP"));
   57|      1|
   58|      1|    key_map->insert(std::make_pair(KEY_POWER->getName(), 	 std::move(KEY_POWER)));
   59|      1|    key_map->insert(std::make_pair(KEY_0->getName(), 	 std::move(KEY_0)));
   60|      1|    key_map->insert(std::make_pair(KEY_1->getName(), 	 std::move(KEY_1)));
   61|      1|    key_map->insert(std::make_pair(KEY_2->getName(), 	 std::move(KEY_2)));
   62|      1|    key_map->insert(std::make_pair(KEY_3->getName(), 	 std::move(KEY_3)));
   63|      1|    key_map->insert(std::make_pair(KEY_4->getName(), 	 std::move(KEY_4)));
   64|      1|    key_map->insert(std::make_pair(KEY_5->getName(), 	 std::move(KEY_5)));
   65|      1|    key_map->insert(std::make_pair(KEY_6->getName(), 	 std::move(KEY_6)));
   66|      1|    key_map->insert(std::make_pair(KEY_7->getName(), 	 std::move(KEY_7)));
   67|      1|    key_map->insert(std::make_pair(KEY_8->getName(), 	 std::move(KEY_8)));
   68|      1|    key_map->insert(std::make_pair(KEY_9->getName(), 	 std::move(KEY_9)));
   69|      1|    key_map->insert(std::make_pair(KEY_AUDIO->getName(),         std::move(KEY_AUDIO)));
   70|      1|    key_map->insert(std::make_pair(KEY_CHANNELDOWN->getName(),   std::move(KEY_CHANNELDOWN)));
   71|      1|    key_map->insert(std::make_pair(KEY_CHANNELUP->getName(), 	 std::move(KEY_CHANNELUP)));
   72|      1|    key_map->insert(std::make_pair(KEY_DOWN->getName(),          std::move(KEY_DOWN)));
   73|      1|    key_map->insert(std::make_pair(KEY_EPG->getName(),           std::move(KEY_EPG)));
   74|      1|    key_map->insert(std::make_pair(KEY_EXIT->getName(),          std::move(KEY_EXIT)));
   75|      1|    key_map->insert(std::make_pair(KEY_FAVORITES->getName(), 	 std::move(KEY_FAVORITES)));
   76|      1|    key_map->insert(std::make_pair(KEY_INFO->getName(),          std::move(KEY_INFO)));
   77|      1|    key_map->insert(std::make_pair(KEY_LANGUAGE->getName(), 	 std::move(KEY_LANGUAGE)));
   78|      1|    key_map->insert(std::make_pair(KEY_MENU->getName(),          std::move(KEY_MENU)));
   79|      1|    key_map->insert(std::make_pair(KEY_MUTE->getName(),          std::move(KEY_MUTE)));
   80|      1|    key_map->insert(std::make_pair(KEY_OK->getName(),            std::move(KEY_OK)));
   81|      1|    key_map->insert(std::make_pair(KEY_RADIO->getName(),         std::move(KEY_RADIO)));
   82|      1|    key_map->insert(std::make_pair(KEY_REFRESH->getName(),       std::move(KEY_REFRESH)));
   83|      1|    key_map->insert(std::make_pair(KEY_SAT->getName(),           std::move(KEY_SAT)));
   84|      1|    key_map->insert(std::make_pair(KEY_SUBTITLE->getName(), 	 std::move(KEY_SUBTITLE)));
   85|      1|    key_map->insert(std::make_pair(KEY_TEXT->getName(),          std::move(KEY_TEXT)));
   86|      1|    key_map->insert(std::make_pair(KEY_TV->getName(),            std::move(KEY_TV)));
   87|      1|    key_map->insert(std::make_pair(KEY_UP->getName(),            std::move(KEY_UP)));
   88|      1|    key_map->insert(std::make_pair(KEY_VOLUMEDOWN->getName(), 	 std::move(KEY_VOLUMEDOWN)));
   89|      1|    key_map->insert(std::make_pair(KEY_VOLUMEUP->getName(), 	 std::move(KEY_VOLUMEUP)));
   90|      1|}
   91|       |
   92|       |pilot::pilot(std::map <std::string , std::unique_ptr <KEY> > *key_map) : key_map (key_map)
   93|      1|{
   94|      1|   // puts("konstruktor pilot");
   95|      1|}
   96|       |pilot::~pilot()
   97|      1|{
   98|      1|    //delete key_map->find("KEY_UP");
   99|      1|   // puts("destruktor pilot\n");
  100|      1|}
  101|       |
  102|       |PILOT_KEY SuperKEY::getValue() const
  103|      1|{
  104|      1|    log_file_mutex.mutex_lock();
  105|      1|    log_file_cout << INFO<< " " << LogName << std::endl;
  106|      1|    log_file_mutex.mutex_unlock();
  107|      1|    return _value;
  108|      1|}
  109|       |
  110|       |SuperKEY::SuperKEY (PILOT_KEY v, const std::string& n, const std::string& LogName) : KEY(v,n) , LogName(LogName)
  111|      6|{
  112|      6|    //puts("konstruktos SuperKEY =)");
  113|      6|}
  114|      6|SuperKEY::~SuperKEY() {
  115|      6|   // puts("destruktor SuperKEY \n");
  116|      6|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/LCD_c/test/lcd_c_stub.cpp:
    1|       |#include <iostream>
    2|       |#include "../lcd_c.h"
    3|       |
    4|     55|void LCD_c::set_print_song_state(int i){
    5|     55|    std::cout << "LCD_c::set_print_song_state(int i)" << i <<std::endl;
    6|     55|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/RADIO_433_eq/radio_433_eq.cpp:
    1|       |#include <iostream>
    2|       |#include <fstream>
    3|       |#include <sstream>
    4|       |#include "radio_433_eq.h"
    5|       |
    6|       |RADIO_SWITCH::RADIO_SWITCH(thread_data *my_data, const RADIO_EQ_CONFIG &cfg, RADIO_EQ_TYPE type):
    7|       |    main433MHz(my_data)
    8|  1.00k|{
    9|  1.00k|    //puts("RADIO_SWITCH::RADIO_SWITCH()");
   10|  1.00k|    RADIO_EQ::m_my_data = my_data;
   11|  1.00k|    RADIO_EQ::m_type = type;
   12|  1.00k|    RADIO_EQ::m_config = cfg;
   13|  1.00k|    m_sunrise = stringToState(cfg.sunrise);
   14|  1.00k|    m_sunset  = stringToState(cfg.sunset);
   15|  1.00k|}
   16|       |
   17|       |RADIO_SWITCH::~RADIO_SWITCH()
   18|  1.00k|{
   19|  1.00k|    //puts("RADIO_SWITCH::~RADIO_SWITCH()");
   20|  1.00k|}
   21|       |
   22|       |void RADIO_SWITCH::on()
   23|     14|{
   24|     14|    if(RADIO_EQ::m_config.onCode != "null")
   25|     11|    {
   26|     11|        main433MHz.sendCode(RADIO_EQ::m_config.onCode);
   27|     11|        m_state = STATE::ON;
   28|     11|        RADIO_EQ::m_my_data->main_iDomStatus->setObjectState(RADIO_EQ::m_config.name, STATE::ON);
   29|     11|    }
   30|      3|    else {
   31|      3|        log_file_mutex.mutex_lock();
   32|      3|        log_file_cout << ERROR << RADIO_EQ::m_config.name << " switch - zla konfiguracja kodu ON" << std::endl;
   33|      3|        log_file_mutex.mutex_unlock();
   34|      3|    }
   35|     14|}
   36|       |
   37|       |void RADIO_SWITCH::off()
   38|     16|{
   39|     16|    if(RADIO_EQ::m_config.offCode != "null")
   40|     13|    {
   41|     13|        main433MHz.sendCode(RADIO_EQ::m_config.offCode);
   42|     13|        m_state = STATE::OFF;
   43|     13|        RADIO_EQ::m_my_data->main_iDomStatus->setObjectState(RADIO_EQ::m_config.name,STATE::OFF);
   44|     13|    }
   45|      3|    else {
   46|      3|        log_file_mutex.mutex_lock();
   47|      3|        log_file_cout << ERROR << RADIO_EQ::m_config.name << " switch - zla konfiguracja kodu OFF" << std::endl;
   48|      3|        log_file_mutex.mutex_unlock();
   49|      3|    }
   50|     16|}
   51|       |
   52|       |void RADIO_SWITCH::onFor15sec()
   53|      2|{
   54|      2|    if(RADIO_EQ::m_config.on15sec != "null")
   55|      1|    {
   56|      1|        main433MHz.sendCode(RADIO_EQ::m_config.on15sec);
   57|      1|        m_state = STATE::TEMPORARY;
   58|      1|        RADIO_EQ::m_my_data->main_iDomStatus->setObjectState(RADIO_EQ::m_config.name,STATE::TEMPORARY);
   59|      1|    }
   60|      1|    else {
   61|      1|        log_file_mutex.mutex_lock();
   62|      1|        log_file_cout << ERROR << RADIO_EQ::m_config.name << " switch - zla konfiguracja kodu ON for 15s" << std::endl;
   63|      1|        log_file_mutex.mutex_unlock();
   64|      1|    }
   65|      2|}
   66|       |
   67|       |void RADIO_SWITCH::onSunrise()
   68|     10|{
   69|     10|    if(m_sunrise == STATE::ON ){
   70|      1|        on();
   71|      1|        m_my_data->myEventHandler.run("iDom")->addEvent("radio switch "+RADIO_EQ::m_config.name + " ON due to sunrise");
   72|      1|    }
   73|      9|    else if(m_sunrise == STATE::OFF){
   74|      3|        off();
   75|      3|        m_my_data->myEventHandler.run("iDom")->addEvent("radio switch "+RADIO_EQ::m_config.name + " OFF due to sunrise");
   76|      3|    }
   77|     10|}
   78|       |
   79|       |void RADIO_SWITCH::onSunset()
   80|     11|{
   81|     11|    if(m_sunset == STATE::ON ){
   82|      3|        on();
   83|      3|        m_my_data->myEventHandler.run("iDom")->addEvent("radio switch "+RADIO_EQ::m_config.name + " ON due to sunset");
   84|      3|    }
   85|      8|    else if(m_sunset == STATE::OFF){
   86|      1|        off();
   87|      1|        m_my_data->myEventHandler.run("iDom")->addEvent("radio switch "+RADIO_EQ::m_config.name + " OFF due to sunset");
   88|      1|    }
   89|     11|}
   90|       |
   91|       |void RADIO_SWITCH::onLockHome()
   92|      7|{
   93|      7|    if (m_config.lock == "ON")
   94|      1|    {
   95|      1|        on();
   96|      1|        m_my_data->myEventHandler.run("iDom")->addEvent("radio switch "+RADIO_EQ::m_config.name + " ON due to 433MHz button pressed");
   97|      1|    }
   98|      6|    else if(m_config.lock == "OFF")
   99|      2|    {
  100|      2|        off();
  101|      2|        m_my_data->myEventHandler.run("iDom")->addEvent("radio switch "+RADIO_EQ::m_config.name + " OFF due to 433MHz button pressed");
  102|      2|    }
  103|      7|}
  104|       |
  105|       |void RADIO_SWITCH::onUnlockHome()
  106|      7|{
  107|      7|    if (m_config.unlock == "ON")
  108|      2|    {
  109|      2|        on();
  110|      2|        m_my_data->myEventHandler.run("iDom")->addEvent("radio switch "+RADIO_EQ::m_config.name + " ON due to 433MHz button pressed");
  111|      2|    }
  112|      5|    else if (m_config.unlock == "OFF")
  113|      1|    {
  114|      1|        off();
  115|      1|        m_my_data->myEventHandler.run("iDom")->addEvent("radio switch "+RADIO_EQ::m_config.name + " OFF due to 433MHz button pressed");
  116|      1|    }
  117|      7|}
  118|       |
  119|       |STATE RADIO_SWITCH::getState()
  120|    424|{
  121|    424|    return m_state;
  122|    424|}
  123|       |
  124|       |std::string RADIO_SWITCH::getName()
  125|    621|{
  126|    621|    return RADIO_EQ::m_config.name;
  127|    621|}
  128|       |
  129|       |std::string RADIO_SWITCH::getID()
  130|    115|{
  131|    115|    return RADIO_EQ::m_config.ID;
  132|    115|}
  133|       |
  134|       |void RADIO_SWITCH::setCode(RADIO_EQ_CONFIG cfg)
  135|  1.00k|{
  136|  1.00k|    RADIO_EQ::m_config.onCode = cfg.onCode;
  137|  1.00k|    RADIO_EQ::m_config.offCode = cfg.offCode;
  138|  1.00k|    RADIO_EQ::m_config.on15sec = cfg.on15sec;
  139|  1.00k|    RADIO_EQ::m_config.type = cfg.type;
  140|  1.00k|    RADIO_EQ::m_config.lock = cfg.lock;
  141|  1.00k|    RADIO_EQ::m_config.unlock = cfg.unlock;
  142|  1.00k|    RADIO_EQ::m_config.name = cfg.name;
  143|  1.00k|
  144|  1.00k|    if(cfg.sunset == "on"){
  145|      2|        m_sunset = STATE::ON;
  146|      2|    }
  147|  1.00k|    if(cfg.sunset == "off"){
  148|      1|        m_sunset = STATE::OFF;
  149|      1|    }
  150|  1.00k|    if(cfg.sunrise == "on"){
  151|      1|        m_sunrise = STATE::ON;
  152|      1|    }
  153|  1.00k|    if(cfg.sunrise == "off"){
  154|      2|        m_sunrise = STATE::OFF;
  155|      2|    }
  156|  1.00k|}
  157|       |
  158|       |RADIO_EQ_CONTAINER::RADIO_EQ_CONTAINER(thread_data *my_data)
  159|    200|{
  160|    200|    //puts("RADIO_EQ_CONTAINER::RADIO_EQ_CONTAINER()");
  161|    200|    this->my_data = my_data;
  162|    200|}
  163|       |
  164|       |RADIO_EQ_CONTAINER::~RADIO_EQ_CONTAINER()
  165|    200|{
  166|  1.79k|    for(auto it = m_radioEqMap.begin(); it != m_radioEqMap.end(); ++it) {
  167|  1.59k|        delete it->second;
  168|  1.59k|    }
  169|    200|    //puts("RADIO_EQ_CONTAINER::~RADIO_EQ_CONTAINER()");
  170|    200|}
  171|       |
  172|       |void RADIO_EQ_CONTAINER::addRadioEq( RADIO_EQ_CONFIG cfg, RADIO_EQ_TYPE type)
  173|  1.60k|{
  174|  1.60k|    switch (type) {
  175|  1.60k|    case RADIO_EQ_TYPE::SWITCH:
  176|  1.00k|        m_radioEqMap.insert(std::make_pair(cfg.name, new RADIO_SWITCH(my_data, cfg, RADIO_EQ_TYPE::SWITCH) ) );
  177|  1.00k|        break;
  178|  1.60k|    case RADIO_EQ_TYPE::BUTTON:
  179|    400|        m_radioEqMap.insert(std::make_pair(cfg.name, new RADIO_BUTTON(my_data, cfg, RADIO_EQ_TYPE::BUTTON) ) );
  180|    400|        break;
  181|  1.60k|    case RADIO_EQ_TYPE::WEATHER_S:
  182|    199|        m_radioEqMap.insert(std::make_pair(cfg.name, new RADIO_WEATHER_STATION(my_data, cfg, RADIO_EQ_TYPE::WEATHER_S) ) );
  183|    199|        break;
  184|  1.60k|    default:
  185|      1|        break;
  186|  1.60k|    }
  187|  1.60k|}
  188|       |
  189|       |void RADIO_EQ_CONTAINER::addRadioEq(RADIO_EQ_CONFIG cfg, const std::string& type)
  190|      6|{
  191|      6|    RADIO_EQ_TYPE ret = RADIO_EQ_TYPE::NONE;
  192|      6|    if(type == "SWITCH") ret = RADIO_EQ_TYPE::SWITCH;
  193|      3|    else if(type == "BUTTON") ret = RADIO_EQ_TYPE::BUTTON;
  194|      2|    else if(type == "WEATHER") ret = RADIO_EQ_TYPE::WEATHER_S;
  195|      2|    else if(type == "PIR") ret = RADIO_EQ_TYPE::PIR;
  196|      1|    else if(type == "GATE") ret = RADIO_EQ_TYPE::GATE;
  197|      1|    else throw WRONG_FORMAT();
  198|      5|    std::cout << " id ma : " << cfg.ID << std::endl;
  199|      5|    std::stoi(cfg.ID); //check ID is number
  200|      5|    addRadioEq(cfg,ret);
  201|      5|}
  202|       |
  203|       |void RADIO_EQ_CONTAINER::deleteRadioEq(const std::string& name)
  204|      4|{
  205|      4|    delete m_radioEqMap[name];
  206|      4|    m_radioEqMap.erase(name);
  207|      4|    saveConfig(my_data->server_settings->radio433MHzConfigFile);
  208|      4|}
  209|       |
  210|       |RADIO_EQ* RADIO_EQ_CONTAINER::getEqPointer(std::string name)
  211|  1.06k|{
  212|  1.06k|    auto m = m_radioEqMap.find(name);
  213|  1.06k|    if (m != m_radioEqMap.end()){
  214|  1.05k|        return (m->second);
  215|  1.05k|    }
  216|      6|    else
  217|      6|    {
  218|      6|        throw std::string("433MHz equipment not found "+name);
  219|      6|    }
  220|      0|}
  221|       |
  222|       |std::vector<RADIO_SWITCH*> RADIO_EQ_CONTAINER::getSwitchPointerVector()
  223|    103|{
  224|    103|    std::vector<RADIO_SWITCH*> switchVector;
  225|    103|
  226|    828|    for (auto it : m_radioEqMap){
  227|    828|        if (it.second->getType() == RADIO_EQ_TYPE::SWITCH){
  228|    518|            switchVector.push_back(static_cast<RADIO_SWITCH*>(it.second));
  229|    518|        }
  230|    828|    }
  231|    103|    return switchVector;
  232|    103|}
  233|       |
  234|       |std::vector<RADIO_BUTTON *> RADIO_EQ_CONTAINER::getButtonPointerVector()
  235|    233|{
  236|    233|    std::vector<RADIO_BUTTON*> buttonVector;
  237|    233|
  238|  1.86k|    for (auto it : m_radioEqMap){
  239|  1.86k|        if (it.second->getType() == RADIO_EQ_TYPE::BUTTON){
  240|    468|            buttonVector.push_back(static_cast<RADIO_BUTTON*>(it.second));
  241|    468|        }
  242|  1.86k|    }
  243|    233|    return buttonVector;
  244|    233|}
  245|       |
  246|       |std::vector<RADIO_WEATHER_STATION *> RADIO_EQ_CONTAINER::getWeather_StationPtrVector()
  247|     31|{
  248|     31|    std::vector<RADIO_WEATHER_STATION*> weatherStVe;
  249|    250|    for (auto it : m_radioEqMap){
  250|    250|        if (it.second->getType() == RADIO_EQ_TYPE::WEATHER_S){
  251|     31|            weatherStVe.push_back(static_cast<RADIO_WEATHER_STATION*>(it.second));
  252|     31|        }
  253|    250|    }
  254|     31|    return weatherStVe;
  255|     31|}
  256|       |
  257|       |std::string RADIO_EQ_CONTAINER::listAllName()
  258|     23|{
  259|     23|    std::string allName;
  260|     23|
  261|    208|    for(auto it = m_radioEqMap.begin(); it != m_radioEqMap.end(); ++it) {
  262|    185|        allName.append(it->first);
  263|    185|        allName.append("\t ID: ");
  264|    185|        allName.append( it->second->getID() );
  265|    185|        allName.append("\t state: ");
  266|    185|        allName.append(stateToString(it->second->getState() ));
  267|    185|        allName.append("\n");
  268|    185|    }
  269|     23|
  270|     23|    return allName;
  271|     23|}
  272|       |
  273|       |bool RADIO_EQ_CONTAINER::nameExist(const std::string& name)
  274|     14|{
  275|     14|    bool exist = false;
  276|     14|    if(m_radioEqMap.find(name) != m_radioEqMap.end())
  277|      5|    {
  278|      5|        exist = true;
  279|      5|    }
  280|     14|    return exist;
  281|     14|}
  282|       |
  283|       |void RADIO_EQ_CONTAINER::loadConfig(const std::string& filePath)
  284|    200|{
  285|    200|    std::ifstream myfile (filePath);
  286|    200|    if (myfile.is_open())
  287|    200|    {
  288|    200|        m_radioEqMap.clear();
  289|    200|        nlohmann::json j;
  290|    200|        myfile >> j;
  291|    200|
  292|    200|        RADIO_EQ_CONFIG cfg;
  293|    200|
  294|    200|        try
  295|    200|        {
  296|    200|            nlohmann::json switchJson = j.at("SWITCH");
  297|  1.20k|            for (nlohmann::json::iterator it = switchJson.begin(); it != switchJson.end(); ++it)
  298|  1.00k|            {
  299|  1.00k|                nlohmann::json switchJson = it.value();
  300|  1.00k|                cfg.name = switchJson.at("name").get<std::string>();
  301|  1.00k|                cfg.ID   = switchJson.at("id").get<std::string>();
  302|  1.00k|                cfg.offCode = switchJson.at("OFF").get<std::string>();
  303|  1.00k|                cfg.onCode  = switchJson.at("ON").get<std::string>();
  304|  1.00k|                cfg.on15sec = switchJson.at("on15sec").get<std::string>();
  305|  1.00k|                cfg.sunrise = switchJson.at("sunrise").get<std::string>();
  306|  1.00k|                cfg.sunset  = switchJson.at("sunset").get<std::string>();
  307|  1.00k|                cfg.lock    = switchJson.at("lock").get<std::string>();
  308|  1.00k|                cfg.unlock  = switchJson.at("unlock").get<std::string>();
  309|  1.00k|                cfg.type    = switchJson.at("type").get<std::string>();
  310|  1.00k|                addRadioEq(cfg,RADIO_EQ_TYPE::SWITCH);
  311|  1.00k|                dynamic_cast<RADIO_SWITCH*>(getEqPointer(cfg.name))->setCode(cfg);
  312|  1.00k|            }
  313|    200|        }
  314|    200|        catch(...)
  315|    200|        {
  316|      0|            log_file_mutex.mutex_lock();
  317|      0|            log_file_cout << DEBUG << "no SWITCH equipment in config" << std::endl;
  318|      0|            log_file_mutex.mutex_unlock();
  319|      0|        }
  320|    200|        try
  321|    200|        {
  322|    200|            nlohmann::json buttonJson = j.at("BUTTON");
  323|    599|            for (nlohmann::json::iterator it = buttonJson.begin(); it != buttonJson.end(); ++it)
  324|    399|            {
  325|    399|                nlohmann::json buttonJson = it.value();
  326|    399|                cfg.name = buttonJson.at("name").get<std::string>();
  327|    399|                cfg.ID   = buttonJson.at("id").get<std::string>();
  328|    399|                cfg.offCode = buttonJson.at("OFF").get<std::string>();
  329|    399|                cfg.onCode  = buttonJson.at("ON").get<std::string>();
  330|    399|                cfg.type    = buttonJson.at("type").get<std::string>();
  331|    399|                addRadioEq(cfg,RADIO_EQ_TYPE::BUTTON);
  332|    399|            }
  333|    200|        }
  334|    200|        catch(...)
  335|    200|        {
  336|      0|            log_file_mutex.mutex_lock();
  337|      0|            log_file_cout << DEBUG << "no BUTTONs equipment in config" << std::endl;
  338|      0|            log_file_mutex.mutex_unlock();
  339|      0|#ifdef BT_TEST
  340|      0|            std::cout << "no BUTTONs equipment in config" <<std::endl;
  341|      0|#endif
  342|      0|        }
  343|    200|
  344|    200|        try
  345|    200|        {
  346|    200|            nlohmann::json weatherJson= j.at("WEATHER");
  347|    399|            for (nlohmann::json::iterator it = weatherJson.begin(); it != weatherJson.end(); ++it)
  348|    199|            {
  349|    199|                nlohmann::json weatherJson = it.value();
  350|    199|                cfg.name = weatherJson.at("name").get<std::string>();
  351|    199|                cfg.ID   = weatherJson.at("id").get<std::string>();
  352|    199|                cfg.type = weatherJson.at("type").get<std::string>();
  353|    199|                addRadioEq(cfg,RADIO_EQ_TYPE::WEATHER_S);
  354|    199|            }
  355|    200|        }
  356|    200|        catch(...)
  357|    200|        {
  358|      1|            log_file_mutex.mutex_lock();
  359|      1|            log_file_cout << DEBUG << "no WEATHER STAIONs equipment in config" << std::endl;
  360|      1|            log_file_mutex.mutex_unlock();
  361|      1|#ifdef BT_TEST
  362|      1|            std::cout << "no WEATHER STAIONs equipment in config" <<std::endl;
  363|      1|#endif
  364|      1|        }
  365|    200|
  366|    200|        myfile.close();
  367|    200|    }
  368|      0|    else std::cout << "Unable to open file";
  369|    200|}
  370|       |
  371|       |void RADIO_EQ_CONTAINER::saveConfig(const std::string& filePath)
  372|     10|{
  373|     10|    nlohmann::json switchJson;
  374|     10|    nlohmann::json buttonJson;
  375|     10|    nlohmann::json weatherJson;
  376|     10|
  377|     10|    std::vector<RADIO_SWITCH*> vSwitch = getSwitchPointerVector();
  378|     10|    for(auto s : vSwitch)
  379|     51|    {
  380|     51|        switchJson[s->getName()] = s->m_config.getJson();
  381|     51|    }
  382|     10|
  383|     10|    std::vector<RADIO_BUTTON*> vButton = getButtonPointerVector();
  384|     10|    for (auto s : vButton)
  385|     21|    {
  386|     21|        buttonJson[s->getName()] = s->m_config.getJson();
  387|     21|    }
  388|     10|
  389|     10|    std::vector<RADIO_WEATHER_STATION *> vWeather = getWeather_StationPtrVector();
  390|     10|    for(auto s : vWeather)
  391|     10|    {
  392|     10|        weatherJson[s->getName()] = s->m_config.getJson();
  393|     10|    }
  394|     10|
  395|     10|    m_configJson["SWITCH"] = switchJson;
  396|     10|    m_configJson["BUTTON"] = buttonJson;
  397|     10|    m_configJson["WEATHER"] = weatherJson;
  398|     10|    // write prettified JSON to another file
  399|     10|    std::ofstream o(filePath);
  400|     10|    o << std::setw(4) << m_configJson << std::endl;
  401|     10|}
  402|       |
  403|       |std::string RADIO_EQ_CONTAINER::showConfig(const std::string &filePath)
  404|      1|{
  405|      1|    std::string ret = "can not open file ";
  406|      1|    ret.append(filePath);
  407|      1|
  408|      1|    std::ifstream myfile (filePath);
  409|      1|    if (myfile.is_open())
  410|      1|    {
  411|      1|        nlohmann::json j;
  412|      1|        myfile >> j;
  413|      1|
  414|      1|        ret = j.dump(4);
  415|      1|    }
  416|      1|    return ret;
  417|      1|}
  418|       |
  419|       |RADIO_EQ::RADIO_EQ()
  420|  1.60k|{
  421|  1.60k|    this->m_my_data = std::nullptr_t();
  422|  1.60k|    //puts("RADIO_EQ::RADIO_EQ()");
  423|  1.60k|}
  424|       |
  425|       |RADIO_EQ::~RADIO_EQ()
  426|  1.60k|{
  427|  1.60k|    //puts("RADIO_EQ::~RADIO_EQ()");
  428|  1.60k|}
  429|       |
  430|       |RADIO_EQ_TYPE RADIO_EQ::getType()
  431|  2.94k|{
  432|  2.94k|    return m_type;
  433|  2.94k|}
  434|       |
  435|       |RADIO_WEATHER_STATION::RADIO_WEATHER_STATION(thread_data *my_data, const RADIO_EQ_CONFIG& cfg, RADIO_EQ_TYPE type)
  436|    199|{
  437|    199|    //puts("RADIO_WEATHER_STATION::RADIO_WEATHER_STATION()");
  438|    199|    RADIO_EQ::m_my_data = my_data;
  439|    199|    RADIO_EQ::m_type = type;
  440|    199|    RADIO_EQ::m_config = cfg;
  441|    199|}
  442|       |
  443|       |RADIO_WEATHER_STATION::~RADIO_WEATHER_STATION()
  444|       |{
  445|       |    //puts("RADIO_WEATHER_STATION::~RADIO_WEATHER_STATION()");
  446|       |}
  447|       |
  448|       |STATE RADIO_WEATHER_STATION::getState()
  449|     23|{
  450|     23|    return m_state;
  451|     23|}
  452|       |
  453|       |std::string RADIO_WEATHER_STATION::getName()
  454|     10|{
  455|     10|    return RADIO_EQ::m_config.name;
  456|     10|}
  457|       |
  458|       |std::string RADIO_WEATHER_STATION::getID()
  459|     39|{
  460|     39|    return RADIO_EQ::m_config.ID;
  461|     39|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/RADIO_433_eq/radio_433_eq.h:
    1|       |#ifndef RADIO_SWITCH_H
    2|       |#define RADIO_SWITCH_H
    3|       |#include <map>
    4|       |#include "../iDomStatus/idomstatus.h"
    5|       |#include "../433MHz/RFLink/rflinkhandler.h"
    6|       |
    7|       |#include "../433MHz/rc_433mhz.h"
    8|       |#include "json.hpp"
    9|       |
   10|       |struct WEATHER_STRUCT{
   11|       |private:
   12|       |    unsigned long int m_counter = 0;
   13|       |protected:
   14|       |    unsigned int m_humidity = 0;
   15|       |    double m_temperature = 0.0;
   16|       |    unsigned int m_barometricPressure = 0;
   17|       |public:
   18|      4|    unsigned int getHumidity(){ return m_humidity; }
   19|      7|    double getTemperature(){ return m_temperature; }
   20|      3|    unsigned int getBarometricPressure(){ return m_barometricPressure; }
   21|      2|    std::string getDataString(){
   22|      2|        return "data: "+std::to_string(m_counter)+"\n"+"Humidity=" + std::to_string(getHumidity()) +"%\n"+
   23|      2|                "temperature= " + to_string_with_precision(getTemperature()) + "c\n"+
   24|      2|                "Pressure= " + std::to_string(getBarometricPressure())+ "kPa\n";
   25|      2|    }
   26|       |
   27|      5|    void putData(std::string data){
   28|      5|        std::string tempStr;
   29|      5|        int t = 0;
   30|      5|        ++m_counter;
   31|      5|        try{
   32|      5|            m_humidity = std::stoi( RFLinkHandler::getArgumentValueFromRFLinkMSG(data, "HUM") );
   33|      5|        }
   34|      5|        catch (...){ }
   35|      5|        try{
   36|      5|            m_barometricPressure = std::stoi( RFLinkHandler::getArgumentValueFromRFLinkMSG(data, "BARO") );
   37|      5|        }
   38|      5|        catch (...){ }
   39|      5|        try{
   40|      5|            tempStr = RFLinkHandler::getArgumentValueFromRFLinkMSG(data, "TEMP");
   41|      5|            std::stringstream ss;
   42|      5|            ss << std::hex << tempStr.substr(tempStr.size()-3,tempStr.size());
   43|      5|            ss >> t;
   44|      5|            m_temperature = t / 10.0;
   45|      5|            if(tempStr.at(0) == '8'){
   46|      2|                m_temperature *= -1.0;
   47|      2|            }
   48|      5|        }
   49|      5|        catch (...){ }
   50|      5|        //std::cout << "DUPA: "<<data<<" temp=" << m_temperature<< " hum="<<m_humidity<< std::endl;
   51|      5|    }
   52|       |};
   53|       |
   54|       |enum class RADIO_EQ_TYPE{
   55|       |    SWITCH = 1,
   56|       |    PIR,
   57|       |    GATE,
   58|       |    BUTTON,
   59|       |    WEATHER_S,
   60|       |    NONE
   61|       |};
   62|       |struct RADIO_EQ_CONFIG{
   63|       |    std::string name = "NULL";
   64|       |    std::string ID   = "NULL";
   65|       |    std::string type = "NULL";
   66|       |    std::string onCode  = "NULL";
   67|       |    std::string offCode = "NULL";
   68|       |    std::string on15sec = "NULL";
   69|       |    std::string sunrise = "NULL";
   70|       |    std::string sunset  = "NULL";
   71|       |    std::string lock   = "NULL";
   72|       |    std::string unlock = "NULL";
   73|       |    void set(std::string type,
   74|       |             std::string name,
   75|       |             std::string ID,
   76|       |             std::string onCode = "null",
   77|       |             std::string offCode = "null",
   78|       |             std::string on15sec = "null",
   79|       |             std::string sunrise = "null",
   80|       |             std::string sunset = "null",
   81|       |             std::string lock = "null",
   82|      6|             std::string unlock = "null"){
   83|      6|        this->name = name;
   84|      6|        this->ID   = ID;
   85|      6|        this->type = type;
   86|      6|        this->onCode  = onCode;
   87|      6|        this->offCode = offCode;
   88|      6|        this->on15sec = on15sec;
   89|      6|        this->sunrise = sunrise;
   90|      6|        this->sunset  = sunset;
   91|      6|        this->lock   = lock;
   92|      6|        this->unlock = unlock;
   93|      6|    }
   94|       |
   95|     82|    nlohmann::json getJson(){
   96|     82|        nlohmann::json jj;
   97|     82|        jj["name"]  = name;
   98|     82|        jj["id"]    = ID;
   99|     82|        jj["type"]  = type;
  100|     82|        jj["ON"]    = onCode;
  101|     82|        jj["OFF"]   = offCode;
  102|     82|        jj["on15sec"] = on15sec;
  103|     82|        jj["sunrise"] = sunrise;
  104|     82|        jj["sunset"]  = sunset;
  105|     82|        jj["lock"]   = lock;
  106|     82|        jj["unlock"] = unlock;
  107|     82|        return jj;
  108|     82|    }
  109|       |};
  110|       |
  111|       |class RADIO_EQ{
  112|       |public:
  113|       |    RADIO_EQ();
  114|       |    virtual ~RADIO_EQ();
  115|       |    virtual STATE getState() = 0;
  116|       |    virtual std::string getName() = 0;
  117|       |    virtual std::string getID() = 0;
  118|       |    virtual RADIO_EQ_TYPE getType();
  119|       |protected:
  120|       |    thread_data *m_my_data;
  121|       |    RADIO_EQ_TYPE m_type;
  122|       |public:
  123|       |    RADIO_EQ_CONFIG m_config;
  124|       |};
  125|       |class RADIO_WEATHER_STATION: public RADIO_EQ
  126|       |{
  127|       |    STATE m_state = STATE::UNDEFINE;
  128|       |
  129|       |public:
  130|       |    RADIO_WEATHER_STATION(thread_data * my_data, const RADIO_EQ_CONFIG& cfg, RADIO_EQ_TYPE type);
  131|       |    ~RADIO_WEATHER_STATION();
  132|       |    STATE getState();
  133|       |    std::string getName();
  134|       |    std::string getID();
  135|       |    // data
  136|       |    WEATHER_STRUCT data;
  137|       |};
  138|       |class RADIO_BUTTON: public RADIO_EQ
  139|       |{
  140|       |    STATE m_state = STATE::UNDEFINE;
  141|       |
  142|       |public:
  143|       |    RADIO_BUTTON(thread_data * my_data, const RADIO_EQ_CONFIG& cfg, RADIO_EQ_TYPE type);
  144|       |    ~RADIO_BUTTON();
  145|       |    STATE getState();
  146|       |    void setState(STATE s);
  147|       |    std::string getName();
  148|       |    std::string getID();
  149|       |};
  150|       |
  151|       |class RADIO_SWITCH: public RADIO_EQ
  152|       |{
  153|       |#ifdef BT_TEST
  154|       |public:
  155|       |#endif
  156|       |    RC_433MHz main433MHz;
  157|       |    STATE m_state = STATE::UNDEFINE;
  158|       |public:
  159|       |    RADIO_SWITCH(thread_data * my_data, const RADIO_EQ_CONFIG& cfg, RADIO_EQ_TYPE type);
  160|       |    ~RADIO_SWITCH();
  161|       |    void on();
  162|       |    void off();
  163|       |    void onFor15sec();
  164|       |    void onSunrise();
  165|       |    void onSunset();
  166|       |    void onLockHome();
  167|       |    void onUnlockHome();
  168|       |    STATE getState();
  169|       |    std::string getName();
  170|       |    std::string getID();
  171|       |    void setCode(RADIO_EQ_CONFIG cfg);
  172|       |    STATE m_sunrise = STATE::UNDEFINE;
  173|       |    STATE m_sunset  = STATE::UNDEFINE;
  174|       |};
  175|       |
  176|       |class RADIO_EQ_CONTAINER
  177|       |{
  178|       |    std::map <std::string, RADIO_EQ* > m_radioEqMap;
  179|       |    thread_data * my_data;
  180|       |    nlohmann::json m_configJson;
  181|       |public:
  182|       |    RADIO_EQ_CONTAINER(thread_data * my_data);
  183|       |    virtual ~RADIO_EQ_CONTAINER();
  184|       |    void addRadioEq(RADIO_EQ_CONFIG cfg, RADIO_EQ_TYPE type);
  185|       |    void addRadioEq(RADIO_EQ_CONFIG cfg, const std::string& type);
  186|       |    void deleteRadioEq(const std::string &name);
  187|       |    virtual RADIO_EQ* getEqPointer(std::string name);
  188|       |    std::vector<RADIO_SWITCH*> getSwitchPointerVector();
  189|       |    std::vector<RADIO_BUTTON*> getButtonPointerVector();
  190|       |    std::vector<RADIO_WEATHER_STATION *> getWeather_StationPtrVector();
  191|       |    std::string listAllName();
  192|       |    bool nameExist(const std::string &name);
  193|       |    void loadConfig(const std::string &filePath);
  194|       |    void saveConfig(const std::string &filePath);
  195|       |    std::string showConfig(const std::string &filePath);
  196|       |};
  197|       |
  198|       |#endif // RADIO_SWITCH_H

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/RADIO_433_eq/radio_button.cpp:
    1|       |#include "radio_433_eq.h"
    2|       |/*
    3|       | * Najpierw możliwe do uzyskania funkcje załączania
    4|       |
    5|       |    Załączenie chwilowe (momentary) - przekaźnik jest załączony tak długo jak długo naciskany jest klawisz pilota - nadawany kod
    6|       |    Przełącznik (toggle) - przekaźnik jest załączany /wyłączany przy kolejnych naciśnięciach tego samego klawisza - nadajemy ten sam kod
    7|       |    Włącz/wyłącz (latched) - przekaźnik jest załączany jednym kodem a wyłączany innym
    8|       |    Włącznik czasowy 5 sek - po naciśnięciu pilota następuje załączenie przekaźnika na czas 5 sek
    9|       |    Włącznik czasowy 10 sek - załączenie na czas 10 sek
   10|       |    Włącznik czasowy 15 sek - załączenie na czas 15 sek
   11|       |
   12|       |Programowanie
   13|       |Niby opisane jest to na stronach dostawców - ale nie do końca - więc pełen opis programowania. Zalecane rozpoczęcie od punktu 8 - KASOWANIE
   14|       |
   15|       |    Załączenie chwilowe (momentary) - naciskamy 1x przycisk programowania (potwierdzenie naciśnięcia krótkim błyskiem LED). LED po chwili włącza się na stałe na 8-10 sek. W tym czasie układ gotowy jest na przyjęcie nowego kodu. Wysłany kod zapamiętany jest w pamięci a potwierdzeniem tego jest podwójne "mrugnięcie" LEDa. LED gaśnie . Koniec procedury.
   16|       |    Przełącznik (toggle) - naciskamy 2 x przycisk programowania. Dalej jak w pkt. 1
   17|       |    Włącz/wyłącz (latched) - naciskamy 3 x przycisk programowania (potwierdzenie naciśnięcia krótkim błyskiem LED). LED po chwili włącza się na stałe na 8-10 sek. W tym czasie układ gotowy jest na przyjęcie nowego kodu. Wysłany kod zapamiętany jest w pamięci a potwierdzeniem tego jest podwójne "mrugnięcie" LEDa. LED pozostaje włączony Układ czeka na odbiór drugiego kodu. Po jego wysłaniu jest znowu podwójne "mrugnięcie" LEDa. LED gaśnie. Koniec procedury.
   18|       |    Włącznik czasowy 5 sek - naciskamy 4 x przycisk programowania. Dalej jak w pkt. 1
   19|       |    Włącznik czasowy 10 sek - naciskamy 5 x przycisk programowania. Dalej jak w pkt. 1
   20|       |    Włącznik czasowy 15 sek - naciskamy 6 x przycisk programowania. Dalej jak w pkt. 1
   21|       |    Włącznik czasowy 15 sek - naciskamy 7 x przycisk programowania. Dalej jak w pkt. 1
   22|       |     KASOWANIE - usuwanie z pamięci wszystkich kodów. Nacisnąć 8 x przycisk. Każde naciśniecie sygnalizowane jest błyśnięciem. Po 8 naciśnięciu następują trzy mignięcia i pamięć kodów jest wyzerowana. Można też skasować pamięć naciskając przycisk raz przez ok 8 sek . Po puszczeniu przycisku LED zapali się na ok 3-4 sek i zgaśnie. Efekt działania ten sam.
   23|       |
   24|       |Wszystkie te funkcje działają równolegle bo układ może zapamiętać do 50 kodów! Dodatkowo w trybie włącznika czasowego można skrócić czas załączenia poprzez wysłanie kodu WYŁĄCZ z wcześniej ustawionej funkcji latched.
   25|       | */
   26|       |RADIO_BUTTON::RADIO_BUTTON(thread_data *my_data, const RADIO_EQ_CONFIG& cfg, RADIO_EQ_TYPE type)
   27|    400|{
   28|    400|    //puts("RADIO_BUTTON::RADIO_BUTTON()");
   29|    400|    RADIO_EQ::m_my_data = my_data;
   30|    400|    RADIO_EQ::m_type = type;
   31|    400|    RADIO_EQ::m_config = cfg;
   32|    400|}
   33|       |
   34|       |RADIO_BUTTON::~RADIO_BUTTON()
   35|    400|{
   36|    400|    //puts("RADIO_BUTTON::~RADIO_BUTTON()");
   37|    400|}
   38|       |
   39|       |STATE RADIO_BUTTON::getState()
   40|     47|{
   41|     47|    return m_state;
   42|     47|}
   43|       |
   44|       |void RADIO_BUTTON::setState(STATE s)
   45|     10|{
   46|     10|    m_state = s;
   47|     10|}
   48|       |
   49|       |std::string RADIO_BUTTON::getName()
   50|     22|{
   51|     22|    return RADIO_EQ::m_config.name;
   52|     22|}
   53|       |
   54|       |std::string RADIO_BUTTON::getID()
   55|     81|{
   56|     81|    return RADIO_EQ::m_config.ID;
   57|     81|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/RADIO_433_eq/test/radio_433_test.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "../radio_433_eq.h"
    4|       |#include "../../iDomTools/test/iDomTools_fixture.h"
    5|       |
    6|       |RC_433MHz::RC_433MHz(thread_data *test_my_data)
    7|  1.00k|{
    8|  1.00k|    this->m_my_data = test_my_data;
    9|  1.00k|}
   10|       |void RC_433MHz::sendCode(const std::string& code)
   11|     25|{
   12|     25|    std::cout << "sendCode(): " << code << std::endl;
   13|     25|}
   14|       |
   15|       |class Switch_Class_fixture : public iDomTOOLS_ClassTest
   16|       |{
   17|       |
   18|       |};
   19|       |TEST_F(Switch_Class_fixture, getSwitchPointerVector)
   20|      1|{
   21|      1|    auto v = test_rec->getSwitchPointerVector();
   22|      1|    EXPECT_EQ(v.size(),5);
   23|      1|}
   24|       |
   25|       |TEST_F(Switch_Class_fixture, getButtonPointerVector)
   26|      1|{
   27|      1|    auto v = test_rec->getButtonPointerVector();
   28|      1|    EXPECT_EQ(v.size(),2);
   29|      1|}
   30|       |
   31|       |TEST_F(Switch_Class_fixture, switch_alarm_on)
   32|      1|{
   33|      1|    RADIO_SWITCH* ptr = dynamic_cast<RADIO_SWITCH*>(test_rec->getEqPointer("ALARM"));
   34|      1|
   35|      1|    EXPECT_EQ(ptr->getType(),RADIO_EQ_TYPE::SWITCH);
   36|      1|    puts("radio switch type");
   37|      1|    EXPECT_EQ(ptr->getState(),STATE::UNDEFINE);
   38|      1|    puts("radio switch state");
   39|      1|    ptr->on();
   40|      1|    EXPECT_EQ(ptr->getState(),STATE::ON);
   41|      1|    ptr->off();
   42|      1|    EXPECT_EQ(ptr->getState(),STATE::OFF);
   43|      1|    ptr->onSunset();
   44|      1|    EXPECT_EQ(ptr->getState(),STATE::OFF);
   45|      1|}
   46|       |
   47|       |TEST_F(Switch_Class_fixture, weatherStruct)
   48|      1|{
   49|      1|    WEATHER_STRUCT test_WS;
   50|      2|    EXPECT_DOUBLE_EQ(0.0, test_WS.getTemperature()) << "Tempertura zla";
   51|      1|
   52|      1|    test_WS.putData("20;03;LaCrosse;ID=0506;TEMP=0137;");
   53|      2|    EXPECT_DOUBLE_EQ(31.1, test_WS.getTemperature()) << "Tempertura zla";
   54|      1|
   55|      1|    test_WS.putData("20;03;LaCrosse;ID=0506;TEMP=8130;BARO=999;");
   56|      2|    EXPECT_DOUBLE_EQ(-30.4, test_WS.getTemperature()) << "Tempertura zla";
   57|      1|
   58|      2|    EXPECT_EQ(999, test_WS.getBarometricPressure()) << "zle cisneinie";
   59|      1|
   60|      1|    std::string retString = test_WS.getDataString();
   61|      1|    EXPECT_THAT(retString, testing::HasSubstr("Pressure= 999kPa"));
   62|      1|}
   63|       |
   64|       |TEST_F(Switch_Class_fixture, read_write_config_json)
   65|      1|{
   66|      1|    auto v = test_rec->getSwitchPointerVector();
   67|      1|    EXPECT_EQ(v.size(),5);
   68|      1|    test_rec->saveConfig(test_server_set.radio433MHzConfigFile);
   69|      1|    v = test_rec->getSwitchPointerVector();
   70|      1|    EXPECT_EQ(v.size(),5);
   71|      1|}
   72|       |
   73|       |TEST_F(Switch_Class_fixture, addUnexistsRadioEq)
   74|      1|{
   75|      1|    RADIO_EQ_CONFIG tCfg;
   76|      1|    tCfg.name = "cyniu";
   77|      1|    tCfg.ID = "8899";
   78|      1|    std::string _name = tCfg.name;
   79|      1|    EXPECT_FALSE(test_rec->nameExist(_name));
   80|      1|    test_rec->addRadioEq(tCfg, "PIR");
   81|      1|    EXPECT_FALSE(test_rec->nameExist(_name));
   82|      1|}
   83|       |
   84|       |TEST_F(Switch_Class_fixture, add_and_erase_switch)
   85|      1|{
   86|      1|    RADIO_EQ_CONFIG tCfg;
   87|      1|    tCfg.name = "test";
   88|      1|    test_rec->addRadioEq(tCfg, RADIO_EQ_TYPE::SWITCH);
   89|      1|    auto v = test_rec->getSwitchPointerVector();
   90|      1|    EXPECT_EQ(v.size(),6);
   91|      1|    test_rec->saveConfig(test_server_set.radio433MHzConfigFile);
   92|      1|    v = test_rec->getSwitchPointerVector();
   93|      1|    EXPECT_EQ(v.size(),6);
   94|      1|
   95|      1|    ///////delete
   96|      1|    test_rec->deleteRadioEq(tCfg.name);
   97|      1|    v = test_rec->getSwitchPointerVector();
   98|      1|    EXPECT_EQ(v.size(),5);
   99|      1|    test_rec->saveConfig(test_server_set.radio433MHzConfigFile);
  100|      1|    v = test_rec->getSwitchPointerVector();
  101|      1|    EXPECT_EQ(v.size(),5);
  102|      1|}
  103|       |
  104|       |TEST_F(Switch_Class_fixture, loadConfig)
  105|      1|{
  106|      1|    RADIO_EQ_CONTAINER test_rec(&test_my_data);
  107|      1|    test_rec.loadConfig("/mnt/ramdisk/433_eq_conf_fake.json");
  108|      1|
  109|      1|    EXPECT_FALSE(test_my_data.main_REC->nameExist("firstt"));
  110|      1|    EXPECT_TRUE(test_my_data.main_REC->nameExist("locker-main"));
  111|      1|
  112|      1|    //test_rec.loadConfig("/mnt/ramdisk/433_eq_conf_fake.json");
  113|      1|}
  114|       |
  115|       |TEST_F(Switch_Class_fixture, getUnexistPtr)
  116|      1|{
  117|      1|    EXPECT_THROW(test_my_data.main_REC->getEqPointer("kokos"),std::string);
  118|      1|}
  119|       |
  120|       |TEST_F(Switch_Class_fixture, onLock_onUnlock_HOME)
  121|      1|{
  122|      1|    RADIO_EQ_CONFIG tCfg;
  123|      1|    tCfg.name = "cyniu";
  124|      1|    tCfg.ID = "8899";
  125|      1|    tCfg.lock = "ON";
  126|      1|
  127|      1|    auto testRadioS = static_cast<RADIO_SWITCH*>(test_rec->getEqPointer("C"));
  128|      1|    testRadioS->setCode(tCfg);
  129|      1|    testRadioS->onLockHome();
  130|      1|    std::string eventStr = test_my_data.myEventHandler.run("iDom")->getEvent();
  131|      1|    EXPECT_THAT(eventStr, testing::HasSubstr("cyniu ON due to 433MHz button pressed"));
  132|      1|
  133|      1|    tCfg.lock = "OFF";
  134|      1|    testRadioS->setCode(tCfg);
  135|      1|    testRadioS->onLockHome();
  136|      1|    eventStr = test_my_data.myEventHandler.run("iDom")->getEvent();
  137|      1|    EXPECT_THAT(eventStr, testing::HasSubstr("cyniu OFF due to 433MHz button pressed"));
  138|      1|
  139|      1|    ////////////////////// unlock
  140|      1|    tCfg.unlock = "ON";
  141|      1|
  142|      1|    testRadioS->setCode(tCfg);
  143|      1|    testRadioS->onUnlockHome();
  144|      1|     eventStr = test_my_data.myEventHandler.run("iDom")->getEvent();
  145|      1|    EXPECT_THAT(eventStr, testing::HasSubstr("cyniu ON due to 433MHz button pressed"));
  146|      1|
  147|      1|    tCfg.unlock = "OFF";
  148|      1|    testRadioS->setCode(tCfg);
  149|      1|    testRadioS->onUnlockHome();
  150|      1|    eventStr = test_my_data.myEventHandler.run("iDom")->getEvent();
  151|      1|    EXPECT_THAT(eventStr, testing::HasSubstr("cyniu OFF due to 433MHz button pressed"));
  152|      1|}
  153|       |
  154|       |TEST_F(Switch_Class_fixture, us_wrong_configurated_switch)
  155|      1|{
  156|      1|    auto testRadioS = static_cast<RADIO_SWITCH*>(test_rec->getEqPointer("C"));
  157|      1|    EXPECT_EQ(testRadioS->getState(), STATE::UNDEFINE);
  158|      1|    testRadioS->on();
  159|      1|    EXPECT_EQ(testRadioS->getState(), STATE::UNDEFINE);
  160|      1|    testRadioS->off();
  161|      1|    EXPECT_EQ(testRadioS->getState(), STATE::UNDEFINE);
  162|      1|    testRadioS->onFor15sec();
  163|      1|    EXPECT_EQ(testRadioS->getState(), STATE::UNDEFINE);
  164|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/THERMOMETER_CONTAINER/test/thermometer_container_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "../../iDomTools/test/iDomTools_fixture.h"
    4|       |#include "../thermometer_container.h"
    5|       |
    6|       |class Thermometer_container_fixture :  public ::testing::Test //public iDomTOOLS_ClassTest
    7|       |{
    8|       |public:
    9|       |    THERMOMETER_CONTAINER testThermo;
   10|       |    std::string termoName = "test_thermometer";
   11|       |    std::vector<std::string> v;
   12|       |
   13|       |    void SetUp() final
   14|      4|    {
   15|      4|        std::vector<std::string> v = {"10.2","11.22"};
   16|      4|        testThermo.add("inside");
   17|      4|        testThermo.add("outside");
   18|      4|        testThermo.updateAll(&v);
   19|      4|        v = {"20.2","21.22"};
   20|      4|        testThermo.updateAll(&v);
   21|      4|        std::cout << "temepratura inside" << testThermo.getTemp("inside") << std::endl;
   22|      4|        std::cout << "temepratura outside" << testThermo.getTemp("outside") << std::endl;
   23|      4|        testThermo.updateStats("inside");
   24|      4|        testThermo.updateStats("outside");
   25|      4|        std::cout << "rozmiar mapy termoetrow: " << testThermo.sizeOf() << std::endl;
   26|      4|        testThermo.showAll();
   27|      4|        puts("SetUp() Thermometer_container_fixture");
   28|      4|        puts("--------------------------------------");
   29|      4|    }
   30|       |};
   31|       |TEST_F(Thermometer_container_fixture, returnUnexistPTR)
   32|      1|{
   33|      1|    EXPECT_THROW(testThermo.returnThermometerPtr("fake"),std::string);
   34|      1|}
   35|       |
   36|       |TEST_F(Thermometer_container_fixture, getStatsByName)
   37|      1|{
   38|      1|    std::string returnedStr = testThermo.getStatsByName("inside");
   39|      1|    std::cout << "zwrocono " << returnedStr << std::endl;
   40|      1|    EXPECT_THAT(returnedStr, testing::HasSubstr("min: 20.2"));
   41|      1|    EXPECT_THAT(returnedStr, testing::HasSubstr("max: 20.2"));
   42|      1|}
   43|       |
   44|       |TEST_F(Thermometer_container_fixture, getLast2)
   45|      1|{
   46|      1|    std::cout << "rozmiar mapy termoetrow: " << testThermo.sizeOf() << std::endl;
   47|      1|    testThermo.updateStats("inside");
   48|      1|    testThermo.updateStats("outside");
   49|      1|    testThermo.showAll();
   50|      1|    v = {"44.4","45.45"};
   51|      1|    testThermo.updateAll(&v);
   52|      1|    testThermo.updateStats("inside");
   53|      1|    testThermo.updateStats("outside");
   54|      1|    std::string returnedStr = testThermo.getStatsByName("inside");
   55|      1|    std::cout << "zwrocono " << returnedStr <<"||"<< std::endl;
   56|      1|    auto v = testThermo.getLast2("inside");
   57|      1|    EXPECT_EQ(v.first, 20.2);
   58|      1|    EXPECT_EQ(v.second, 44.4);
   59|      1|}
   60|       |
   61|       |TEST_F(Thermometer_container_fixture, isMoreDiff)
   62|      1|{
   63|      1|    std::cout << "rozmiar mapy termoetrow: " << testThermo.sizeOf() << std::endl;
   64|      1|    testThermo.updateStats("inside");
   65|      1|    testThermo.updateStats("outside");
   66|      1|    testThermo.showAll();
   67|      1|    v = {"24.4","45.45"};
   68|      1|    testThermo.updateAll(&v);
   69|      1|    testThermo.updateStats("inside");
   70|      1|    testThermo.updateStats("outside");
   71|      1|    EXPECT_FALSE(testThermo.isMoreDiff("inside",15.5));
   72|      1|    EXPECT_TRUE(testThermo.isMoreDiff("outside",15.5));
   73|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/THERMOMETER_CONTAINER/thermometer_container.cpp:
    1|       |#include "thermometer_container.h"
    2|       |
    3|       |THERMOMETER *THERMOMETER_CONTAINER::returnThermometerPtr(const std::string& name)
    4|    308|{
    5|    308|    auto m = thermoMap.find(name);
    6|    308|    if (m != thermoMap.end())
    7|    306|        return &(m->second);
    8|      2|    else
    9|      2|    {
   10|      2|      throw std::string("thermometer not found!");
   11|      2|    }
   12|      0|}
   13|       |
   14|       |THERMOMETER_CONTAINER::THERMOMETER_CONTAINER()
   15|    400|{
   16|    400|}
   17|       |
   18|       |THERMOMETER::THERMOMETER(int iter):m_stats(iter)
   19|    800|{
   20|    800|}
   21|       |
   22|       |void THERMOMETER_CONTAINER::add(const std::string &name)
   23|    800|{
   24|    800|    auto pair = std::make_pair(name, THERMOMETER(15));
   25|    800|    thermoMap.insert(pair);
   26|    800|}
   27|       |
   28|       |void THERMOMETER_CONTAINER::setTemp(const std::string &name, double value)
   29|     48|{
   30|     48|    returnThermometerPtr(name)->m_thermometer.oldTemp = returnThermometerPtr(name)->m_thermometer.newTemp;
   31|     48|    returnThermometerPtr(name)->m_thermometer.newTemp = value;
   32|     48|}
   33|       |
   34|       |double THERMOMETER_CONTAINER::getTemp(const std::string &name)
   35|     24|{
   36|     24|    return returnThermometerPtr(name)->m_thermometer.newTemp;
   37|     24|}
   38|       |
   39|       |double THERMOMETER_CONTAINER::getOldTemp(const std::string &name)
   40|     16|{
   41|     16|    return returnThermometerPtr(name)->m_thermometer.oldTemp;
   42|     16|}
   43|       |
   44|       |TEMPERATURE_STATE THERMOMETER_CONTAINER::getLastState(const std::string &name)
   45|     28|{
   46|     28|    return returnThermometerPtr(name)->m_thermometer.lastState;
   47|     28|}
   48|       |
   49|       |void THERMOMETER_CONTAINER::setState(const std::string &name, TEMPERATURE_STATE state)
   50|     16|{
   51|     16|    returnThermometerPtr(name)->m_thermometer.lastState = state;
   52|     16|}
   53|       |
   54|       |void THERMOMETER_CONTAINER::updateAll(std::vector<std::string> *vectorThermo)
   55|     24|{
   56|     24|    std::string in  = vectorThermo->at(0);
   57|     24|    std::string out = vectorThermo->at(1);
   58|     24|    setTemp("inside", std::stod(in));
   59|     24|    setTemp("outside",std::stod(out));
   60|     24|}
   61|       |
   62|       |void THERMOMETER_CONTAINER::updateStats(const std::string &name)
   63|     28|{
   64|     28|    returnThermometerPtr(name)->m_stats.push_back(returnThermometerPtr(name)->m_thermometer.newTemp);
   65|     28|}
   66|       |
   67|       |std::string THERMOMETER_CONTAINER::getStatsByName(const std::string &name)
   68|      4|{
   69|      4|    return returnThermometerPtr(name)->m_stats.stats();
   70|      4|}
   71|       |
   72|       |bool THERMOMETER_CONTAINER::isMoreDiff(const std::string &name, double diff)
   73|     14|{
   74|     14|    return returnThermometerPtr(name)->m_stats.isMoreDiff(diff);
   75|     14|}
   76|       |
   77|       |std::pair<double, double> THERMOMETER_CONTAINER::getLast2(const std::string &name)
   78|      5|{
   79|      5|    return returnThermometerPtr(name)->m_stats.getLast2();
   80|      5|}
   81|       |
   82|       |int THERMOMETER_CONTAINER::sizeOf()
   83|      6|{
   84|      6|    return static_cast<int>(thermoMap.size());
   85|      6|}
   86|       |
   87|       |void THERMOMETER_CONTAINER::showAll()
   88|      6|{
   89|      6|    for(auto n : thermoMap)
   90|     12|    {
   91|     12|        std::cout << n.first << " ";
   92|     12|    }
   93|      6|    std::cout << std::endl << "koniec prointowania w " << std::endl;
   94|      6|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/blockQueue/blockqueue.cpp:
    1|       |#include "blockqueue.h"
    2|       |#include "../iDom_server_OOP.h"
    3|       |
    4|       |blockQueue::blockQueue()
    5|    138|{
    6|    138|}
    7|       |std::mutex blockQueue::mutex_queue_char;
    8|       |std::queue <MPD_COMMAND> blockQueue::_MPD_CommandQ;
    9|       |void blockQueue::_add(MPD_COMMAND X)
   10|     73|{
   11|     73|    std::lock_guard <std::mutex> lock (mutex_queue_char);
   12|     73|    if(_MPD_CommandQ.size() < 10)
   13|     72|    {
   14|     72|        _MPD_CommandQ.push(X);
   15|     72|    }
   16|      1|    else
   17|      1|    {
   18|      1|        log_file_mutex.mutex_lock();
   19|      1|        log_file_cout << DEBUG << "za dużo danych w kolejce- nie dodaje "<< std::endl;
   20|      1|        log_file_mutex.mutex_unlock();
   21|      1|
   22|      1|#ifdef BT_TEST
   23|      1|        std::string e = "za duzo w kolejce";
   24|      1|        throw e;
   25|      1|#endif
   26|      1|    }
   27|     72|}
   28|       |
   29|       |MPD_COMMAND blockQueue::_get( )
   30|     54|{
   31|     54|    MPD_COMMAND temp = MPD_COMMAND::NULL_;
   32|     54|    std::lock_guard <std::mutex> lock (mutex_queue_char);
   33|     54|    if (_MPD_CommandQ.empty() == false){
   34|     51|        temp = _MPD_CommandQ.front();
   35|     51|        _MPD_CommandQ.pop();
   36|     51|    }
   37|     54|    return temp;
   38|     54|}
   39|       |
   40|       |int blockQueue::_size()
   41|  28.6M|{
   42|  28.6M|    std::lock_guard <std::mutex> lock (mutex_queue_char);
   43|  28.6M|    return static_cast<int>(_MPD_CommandQ.size());
   44|  28.6M|}
   45|       |
   46|       |void blockQueue::_clearAll()
   47|     69|{
   48|     69|     std::lock_guard <std::mutex> lock (mutex_queue_char);
   49|     86|     while (_MPD_CommandQ.empty() == false){
   50|     17|         _MPD_CommandQ.pop();
   51|     17|     }
   52|     69|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/blockQueue/test/blockqueue_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include "../blockqueue.h"
    3|       |#include <thread>
    4|       |#include <iostream>
    5|       |
    6|       |class blockQueue_Class_fixture : public ::testing::Test
    7|       |{
    8|       |public:
    9|      4|    blockQueue_Class_fixture() { }
   10|       |
   11|       |protected:
   12|       |    blockQueue test_q;
   13|       |
   14|       |    void SetUp() final
   15|      4|    {
   16|      4|        test_q._clearAll();
   17|      4|        std::cout << "blockQueue_Class_fixture SetUp" << std::endl;
   18|      4|    }
   19|       |
   20|       |    void TearDown() final
   21|      4|    {
   22|      4|        std::cout << "blockQueue_Class_fixture TearDown" << std::endl;
   23|      4|    }
   24|       |    static void getFromQ_thread()
   25|      1|    {
   26|      1|        blockQueue q;
   27|  1.81k|        while(q._size() == 0 )
   28|  1.81k|        {
   29|  1.81k|        }
   30|      1|        EXPECT_EQ(q._get(), MPD_COMMAND::STOP);
   31|  28.6M|        while(q._size() == 0 )
   32|  28.6M|        {
   33|  28.6M|        }
   34|      1|        EXPECT_EQ(q._get(), MPD_COMMAND::STOP);
   35|      1|    }
   36|       |
   37|       |    static void putToQ_thread(MPD_COMMAND c)
   38|      1|    {
   39|      1|        blockQueue q;
   40|      1|        q._add(c);
   41|      1|        sleep(1);
   42|      1|        q._add(c);
   43|      1|    }
   44|       |};
   45|       |
   46|       |TEST_F(blockQueue_Class_fixture, main)
   47|      1|{
   48|      1|    test_q._clearAll();
   49|      1|    EXPECT_EQ(test_q._size(), 0);
   50|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::NULL_);
   51|      1|    test_q._add(MPD_COMMAND::PLAY);
   52|      1|    EXPECT_EQ(test_q._size(), 1);
   53|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
   54|      1|    EXPECT_EQ(test_q._size(), 0);
   55|      1|}
   56|       |
   57|       |TEST_F(blockQueue_Class_fixture, inThread)
   58|      1|{
   59|      1|    std::thread get(blockQueue_Class_fixture::getFromQ_thread);
   60|      1|    std::thread put(blockQueue_Class_fixture::putToQ_thread,MPD_COMMAND::STOP);
   61|      1|    get.join();
   62|      1|    put.join();
   63|      1|}
   64|       |
   65|       |TEST_F(blockQueue_Class_fixture, allClear)
   66|      1|{
   67|      1|    EXPECT_EQ(test_q._size(), 0);
   68|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::NULL_);
   69|      1|    test_q._add(MPD_COMMAND::PLAY);
   70|      1|    EXPECT_EQ(test_q._size(), 1);
   71|      1|    test_q._add(MPD_COMMAND::PLAY);
   72|      1|    EXPECT_EQ(test_q._size(), 2);
   73|      1|    test_q._clearAll();
   74|      1|    EXPECT_EQ(test_q._size(), 0);
   75|      1|}
   76|       |
   77|       |TEST_F(blockQueue_Class_fixture, capacityExceeded)
   78|      1|{
   79|      1|    EXPECT_EQ(test_q._size(), 0);
   80|      1|
   81|     11|    for (auto i = 0 ; i <10 ; ++i)
   82|     10|    {
   83|     10|      test_q._add(MPD_COMMAND::PLAY);
   84|     10|    }
   85|      1|
   86|      1|    EXPECT_THROW(test_q._add(MPD_COMMAND::PLAY), std::string );
   87|      1|    test_q._clearAll();
   88|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_connection/c_connection.cpp:
    1|       |#include <iostream>
    2|       |#include "c_connection.h"
    3|       |#include "../thread_functions/iDom_thread.h"
    4|       |
    5|       |C_connection::C_connection (thread_data *my_data):c_socket(my_data->s_client_sock),
    6|       |    c_from(my_data->from),recv_size(0)
    7|      8|{
    8|      8|    this -> pointer = &my_data->pointer;
    9|      8|    this -> my_data = my_data;
   10|      8|    this->m_encrypted = my_data->server_settings->encrypted;
   11|      8|    std::fill(std::begin(c_buffer),std::end(c_buffer),',');
   12|      8|    onStartConnection();
   13|      8|}
   14|       |
   15|       |C_connection::~C_connection()
   16|      8|{
   17|      8|    if( mainCommandHandler != std::nullptr_t())
   18|      3|    {
   19|      3|        my_data->mainLCD->set_print_song_state(0);
   20|      3|        my_data->mainLCD->set_lcd_STATE(2);
   21|      3|        delete mainCommandHandler;
   22|      3|    }
   23|      8|    my_data->mainLCD->set_print_song_state(0);
   24|      8|    my_data->mainLCD->set_lcd_STATE(2);
   25|      8|
   26|      8|    useful_F::sleep(3);
   27|      8|
   28|      8|    shutdown(c_socket, SHUT_RDWR );
   29|      8|    puts("C_connection::~C_connection()");
   30|      8|}
   31|       |
   32|       |int C_connection::c_send(int para)
   33|      1|{
   34|      1|    crypto(str_buf,m_encriptionKey,m_encrypted); //BUG - naprawic czytanie flagi z parametru klasy
   35|      1|    std::string len = std::to_string( str_buf.size());
   36|      1|    crypto(len,m_encriptionKey,m_encrypted);
   37|      1|    if(( send( c_socket, len.c_str() ,len.length(), para ) ) <= 0 )
   38|      1|    {
   39|      1|        return -1;
   40|      1|    }
   41|      0|    recv_size = recv( c_socket, c_buffer , MAX_buf, para );
   42|      0|
   43|      0|    if(recv_size < 0 )
   44|      0|    {
   45|      0|        log_file_mutex.mutex_lock();
   46|      0|        log_file_cout << ERROR << "C_connection::c_send(int para) recv() error - " << strerror( errno ) << std::endl;
   47|      0|        log_file_mutex.mutex_unlock();
   48|      0|        return -1;
   49|      0|    }
   50|      0|    else if (recv_size == 0)
   51|      0|    {
   52|      0|        return -1;
   53|      0|    }
   54|      0|
   55|      0|    auto len_send = str_buf.length();
   56|      0|
   57|      0|    while (len_send > 0)
   58|      0|    {
   59|      0|        auto len_temp = send( c_socket, str_buf.c_str() ,str_buf.length(), para );
   60|      0|        if(len_temp <= 0 )
   61|      0|        {
   62|      0|            return -1;
   63|      0|        }
   64|      0|        len_send -= len_temp;
   65|      0|        str_buf.erase(0,len_temp);
   66|      0|    }
   67|      0|    return 0;
   68|      0|}
   69|       |
   70|       |int C_connection::c_send(const std::string &command )
   71|      1|{
   72|      1|    str_buf = command;
   73|      1|    return c_send(0);
   74|      1|}
   75|       |
   76|       |int C_connection::c_recv(int para)
   77|      1|{
   78|      1|    struct timeval tv;
   79|      1|    tv.tv_sec = 90;
   80|      1|    tv.tv_usec = 0;
   81|      1|    setsockopt(c_socket,SOL_SOCKET,SO_RCVTIMEO,(char*)&tv , sizeof(struct timeval));
   82|      1|
   83|      1|    recv_size = recv(c_socket, c_buffer, MAX_buf, para);
   84|      1|
   85|      1|    if(recv_size < 0)
   86|      1|    {
   87|      1|        log_file_mutex.mutex_lock();
   88|      1|        log_file_cout << ERROR << "C_connection::c_recv(int para) recv() error - " << strerror( errno ) << std::endl;
   89|      1|        log_file_mutex.mutex_unlock();
   90|      1|        return -1;
   91|      1|    }
   92|      0|    else if (recv_size == 0)
   93|      0|    {
   94|      0|        return -1;
   95|      0|    }
   96|      0|    return recv_size;
   97|      0|}
   98|       |
   99|       |void C_connection::c_analyse(int recvSize)
  100|      3|{
  101|      3|    std::string buf;
  102|      3|
  103|      3|    buf = c_read_buf(recvSize);
  104|      3|    my_data->myEventHandler.run("command")->addEvent(buf);
  105|      3|    std::vector <std::string> command;
  106|      3|    try{
  107|      3|    useful_F::tokenizer(command," \n,", buf);
  108|      3|    }
  109|      3|    catch (std::string& k){
  110|      1|        log_file_mutex.mutex_lock();
  111|      1|        log_file_cout << DEBUG << "brak komendy - " << k << std::endl;
  112|      1|        log_file_mutex.mutex_unlock();
  113|      1|        str_buf = "empty command";
  114|      1|        return;
  115|      1|    }
  116|      2|
  117|      2|#ifdef BT_TEST
  118|      2|    std::cout << "komenda: " << str_buf << " command.size() " << command.size() << std::endl;
  119|      2|#endif
  120|      2|    str_buf = "unknown command\n";
  121|      2|
  122|      2|    for(std::string t : command)
  123|      5|    {
  124|      5|        str_buf += t+" ";
  125|      5|    }
  126|      2|
  127|      2|    str_buf = mainCommandHandler->run(command,my_data);
  128|      2|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_connection/c_connection.h:
    1|       |#ifndef C_CONNECTION_H
    2|       |#define C_CONNECTION_H
    3|       |#include <mutex>
    4|       |#include <unistd.h>
    5|       |#include <iostream>
    6|       |#include "../functions/functions.h"
    7|       |#include "../CRON/cron.hpp"
    8|       |#include "../functions/mpd_cli.h"
    9|       |#include "../command/commandhandlerroot.h"
   10|       |#include "../iDom_server_OOP.h"
   11|       |
   12|       |constexpr int MAX_buf = 32768;
   13|       |
   14|       |class C_connection
   15|       |{
   16|       |#ifdef BT_TEST
   17|       |   friend class c_connection_fixture;
   18|       |#endif
   19|       |public:
   20|       |    C_connection(thread_data *my_data);
   21|       |    ~C_connection();
   22|       |
   23|       |    thread_data *my_data;
   24|       |    int c_socket;
   25|       |    sockaddr_in c_from;
   26|       |
   27|       |    char c_buffer[MAX_buf];
   28|       |    int recv_size;
   29|       |    struct s_pointer *pointer;
   30|       |
   31|       |    int c_send(int para);
   32|       |    int c_send(const std::string& command);
   33|       |    int c_recv(int para);
   34|       |    std::string c_read_buf(int recvSize);
   35|       |    void c_analyse(int recvSize);
   36|       |    void setEncriptionKey(const std::string& key);
   37|       |    void setEncrypted(bool flag);
   38|       |    commandHandler *mainCommandHandler = NULL;
   39|       |    void onStartConnection();
   40|       |    void onStopConnection();
   41|       |    void cryptoLog(std::string &toEncrypt);
   42|       |#ifdef BT_TEST
   43|      1|    std::string getStr_buf(){
   44|      1|        return str_buf;
   45|      1|    }
   46|       |#endif
   47|       |private:
   48|       |    std::string str_buf;
   49|       |    blockQueue char_queue;
   50|       |    int counter = 0;
   51|       |    std::string m_encriptionKey;
   52|       |    bool m_encrypted;
   53|       |    void crypto(std::string &toEncrypt, std::string key, bool encrypted);
   54|       |};
   55|       |
   56|       |#endif // C_CONNECTION_H

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_connection/c_connection2.cpp:
    1|       |#include "c_connection.h"
    2|       |#include <iostream>
    3|       |
    4|       |std::string C_connection::c_read_buf (int recvSize)
    5|      3|{
    6|      3|    std::string str_buf;
    7|     34|    for (int i = 0; i < recvSize; ++i)
    8|     31|    {
    9|     31|        str_buf.push_back( c_buffer[i]);
   10|     31|    }
   11|      3|    crypto(str_buf,m_encriptionKey,m_encrypted);
   12|      3|    return str_buf;
   13|      3|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_connection/c_connection_node.cpp:
    1|       |
    2|       |#include "c_connection.h"
    3|       |#include <iostream>
    4|       |
    5|       |//////// not used now
    6|       |//void C_connection::c_start_master ()
    7|       |//{
    8|       |//    std::cout << " w pamieci jest " <<my_data->server_settings->AAS.size() <<" nodow\n";
    9|       |//    for (unsigned int i =0; i<my_data->server_settings->AAS.size(); ++i )
   10|       |//    {
   11|       |//        std::cout << " jest ustawien id " << my_data->server_settings->AAS[i].id << std::endl;
   12|       |//        std::cout << " jest ustawien ip " << my_data->server_settings->AAS[i].SERVER_IP << std::endl;
   13|       |//    }
   14|       |//        while (1)
   15|       |//        {
   16|       |//             //c_recv_master_to();
   17|       |//             c_recv_send_master();
   18|       |//             std::cout << " odebralem w masterze \n";
   19|       |//             //c_send_master_to(c_bufor_tmp[16]);
   20|       |//        }
   21|       |//}
   22|       |
   23|       |
   24|       |//void C_connection::c_recv_send_master()
   25|       |//{
   26|       |//    while (1)
   27|       |//    {
   28|       |//        std::this_thread::sleep_for( std::chrono::milliseconds(50) );
   29|       |
   30|       |//        mutex_who.lock();
   31|       |//        if (pointer->ptr_who[0] == my_data->server_settings->ID_server)
   32|       |//        {
   33|       |//            mutex_buf.lock();
   34|       |
   35|       |//            for (int i =0; i < MAX_MSG_LEN; ++i )
   36|       |//            {
   37|       |//                 pointer->ptr_buf[i]-=1;
   38|       |//            }
   39|       |//            pointer->ptr_who[0] = pointer->ptr_who[1];
   40|       |//            pointer->ptr_who[1] = my_data->server_settings->ID_server;
   41|       |//            mutex_buf.unlock();
   42|       |//        }
   43|       |//         mutex_who.unlock();
   44|       |//    } // end while
   45|       |//}
   46|       |
   47|       |void C_connection::setEncriptionKey(const std::string& key)
   48|      1|{
   49|      1|    m_encriptionKey = key;
   50|      1|}
   51|       |
   52|       |void C_connection::setEncrypted(bool flag)
   53|      4|{
   54|      4|    m_encrypted = flag;
   55|      4|}
   56|       |
   57|       |void C_connection::crypto(std::string &toEncrypt, std::string key, bool encrypted)
   58|      9|{
   59|      9|    if (!encrypted){
   60|      5|          return;
   61|      5|      }
   62|      4|    unsigned int keySize = key.size()-1;
   63|      4|#ifdef BT_TEST
   64|      4|    std::cout << "key: " << key << " size: " << key.size() << std::endl;
   65|      4|#endif
   66|     74|    for (unsigned int i = 0; i < toEncrypt.size (); i++)
   67|     70|    {
   68|     70|        if (keySize == 0)
   69|      6|            keySize = key.size()-1;
   70|     64|        else
   71|     64|            --keySize;
   72|     70|        toEncrypt[i] ^= key[keySize];
   73|     70|    }
   74|      4|}
   75|       |
   76|       |void C_connection::onStartConnection()
   77|      8|{
   78|      8|//    log_file_mutex.mutex_lock();
   79|      8|//    log_file_cout << INFO<< "konstruuje nowy obiekt do komunikacj na gniezdzie " << c_socket << std::endl;
   80|      8|//    log_file_mutex.mutex_unlock();
   81|      8|}
   82|       |
   83|       |void C_connection::onStopConnection()
   84|      1|{
   85|      1|    my_data->main_iDomTools->cameraLedOFF(my_data->server_settings->cameraLedOFF);
   86|      1|}
   87|       |
   88|       |void C_connection::cryptoLog(std::string &toEncrypt)
   89|      2|{
   90|      2|    crypto(toEncrypt,m_encriptionKey,m_encrypted);
   91|      2|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_connection/test/c_connection_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "../../iDomTools/test/iDomTools_fixture.h"
    4|       |
    5|       |#include "../c_connection.h"
    6|       |
    7|       |class c_connection_fixture : public iDomTOOLS_ClassTest
    8|       |{
    9|       |public:
   10|      8|    c_connection_fixture():test_connection(std::nullptr_t()) {
   11|      8|    }
   12|       |
   13|       |protected:
   14|       |
   15|       |    std::unique_ptr<C_connection> test_connection;
   16|       |    void SetUp() final
   17|      8|    {
   18|      8|        std::cout << "c_connection_fixture SetUp()" << std::endl;
   19|      8|        iDomTOOLS_ClassTest::SetUp();
   20|      8|        test_connection = std::make_unique<C_connection>(&test_my_data);
   21|      8|        test_connection->m_encriptionKey = "key";
   22|      8|        test_connection->m_encrypted = false;
   23|      8|        test_connection->c_socket = 0;
   24|      8|    }
   25|       |    void TearDown() final
   26|      8|    {
   27|      8|        iDomTOOLS_ClassTest::TearDown();
   28|      8|        std::cout << "c_connection_fixture TearDown()" << std::endl;
   29|      8|    }
   30|       |    void crypto_fixture(std::string &toEncrypt, std::string key)
   31|      2|    {
   32|      2|        test_connection->crypto(toEncrypt, std::move(key), true);
   33|      2|    }
   34|       |};
   35|       |
   36|       |TEST_F(c_connection_fixture, crypto)
   37|      1|{
   38|      1|    std::string key = "210116556";
   39|      1|    std::string test_msg = "kokosowa ksiezniczka";
   40|      1|    std::string toEncrypt = test_msg;
   41|      1|    crypto_fixture(toEncrypt, key);
   42|      1|
   43|     21|    for(int i = 0; i < toEncrypt.size(); ++i)
   44|     20|    {
   45|     40|        EXPECT_NE(test_msg[i],toEncrypt[i]) << " niestety równe: " << toEncrypt[i]
   46|     40|                                            << " na indeksie: " << i;
   47|     20|    }
   48|      1|    std::cout << "wiadomość: " << test_msg << " zakodowane: "<< toEncrypt << std::endl;
   49|      1|    crypto_fixture(toEncrypt, key);
   50|      1|    std::cout << "wiadomość: " << test_msg << " odkodowane: "<< toEncrypt << std::endl;
   51|      2|    EXPECT_STREQ(toEncrypt.c_str(), test_msg.c_str()) << "wiadomosci nie są równe";
   52|      1|}
   53|       |
   54|       |TEST_F(c_connection_fixture, c_analyse)
   55|      1|{
   56|      1|    commandHandlerRoot* chr = new commandHandlerRoot(&test_my_data);
   57|      1|    test_connection->mainCommandHandler = chr;
   58|      1|    int i = 0;
   59|      1|    std::string strMsg = "fake command";
   60|      1|    for (char n : strMsg)
   61|     12|        test_connection->c_buffer[i++] = n;
   62|      1|    test_connection->setEncrypted(false);
   63|      1|    test_connection->c_analyse(strMsg.size());
   64|      1|    EXPECT_THAT(test_my_data.myEventHandler.run("command")->getEvent()
   65|      1|                ,testing::HasSubstr(strMsg));
   66|      1|}
   67|       |
   68|       |TEST_F(c_connection_fixture, c_recv)
   69|      1|{
   70|      1|    EXPECT_EQ(-1, test_connection->c_recv(1));
   71|      1|}
   72|       |
   73|       |TEST_F(c_connection_fixture, c_send)
   74|      1|{
   75|      1|    EXPECT_EQ(-1, test_connection->c_send("test"));
   76|      1|}
   77|       |
   78|       |TEST_F(c_connection_fixture, cryptoLog)
   79|      1|{
   80|      1|    std::string msg("tajna wiadomosc");
   81|      1|    std::string msgBackup(msg);
   82|      1|    test_connection->setEncriptionKey("key_test");
   83|      1|    test_connection->setEncrypted(true);
   84|      1|    ///////szyfrowanie
   85|      1|    test_connection->cryptoLog(msg);
   86|      1|    EXPECT_STRNE(msgBackup.c_str(), msg.c_str());
   87|      1|    std::cout << "ZASZUFROWANY: " << msg << std::endl;
   88|      1|    ////// deszyfracja
   89|      1|    test_connection->cryptoLog(msg);
   90|      1|    EXPECT_STREQ(msgBackup.c_str(), msg.c_str());
   91|      1|}
   92|       |
   93|       |TEST_F(c_connection_fixture, onStopConnection)
   94|      1|{
   95|      1|    TEST_DATA::return_httpPost = "ok.\n";
   96|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("cameraLED"),STATE::UNKNOWN);
   97|      1|    test_connection->onStopConnection();
   98|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("cameraLED"),STATE::OFF);
   99|      1|}
  100|       |
  101|       |TEST_F(c_connection_fixture, exitFlow)
  102|      1|{
  103|      1|    commandHandlerRoot* chr = new commandHandlerRoot(&test_my_data);
  104|      1|    test_connection->mainCommandHandler = chr;
  105|      1|
  106|      1|    int i = 0;
  107|      1|    std::string strMsg = "program stop server";
  108|      1|    for (char n : strMsg)
  109|     19|        test_connection->c_buffer[i++] = n;
  110|      1|    test_connection->setEncrypted(false);
  111|      1|    EXPECT_THROW(test_connection->c_analyse(strMsg.size()),std::string );
  112|      1|}
  113|       |
  114|       |TEST_F(c_connection_fixture, emptyCommand)
  115|      1|{
  116|      1|
  117|      1|    std::array<Thread_array_struc,iDomConst::MAX_CONNECTION >test_ThreadArrayStruc;
  118|      1|    test_my_data.main_THREAD_arr = &test_ThreadArrayStruc; //TODO
  119|      1|    test_my_data.main_THREAD_arr->at(3).thread_socket = 1;
  120|      1|    test_my_data.main_THREAD_arr->at(3).thread_ID = std::this_thread::get_id();
  121|      1|
  122|      1|    commandHandlerRoot* chr = new commandHandlerRoot(&test_my_data);
  123|      1|    test_connection->mainCommandHandler = chr;
  124|      1|
  125|      1|    int i = 0;
  126|      1|    std::string strMsg = "";
  127|      1|    for (char n : strMsg)
  128|      0|        test_connection->c_buffer[i++] = n;
  129|      1|    test_connection->setEncrypted(false);
  130|      1|    test_connection->c_analyse(static_cast<int>(strMsg.size()));
  131|      1|    EXPECT_STREQ(test_connection->getStr_buf().c_str(), "empty command");
  132|      1|}
  133|       |

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_irda_logic/c_irda_logic.cpp:
    1|       |#include "c_irda_logic.h"
    2|       |#include "../iDom_server_OOP.h"
    3|       |#include "../thread_functions/iDom_thread.h"
    4|       |
    5|       |void c_irda_logic::irdaMPD(PILOT_KEY X)
    6|     10|{
    7|     10|    switch (X){
    8|     10|    case PILOT_KEY::KEY_POWER:
    9|      1|        mpd_queue._add(MPD_COMMAND::STOP);
   10|      1|        break;
   11|     10|    case PILOT_KEY::KEY_TV:
   12|      1|        mpd_queue._add(MPD_COMMAND::PLAY);
   13|      1|        break;
   14|     10|    case PILOT_KEY::KEY_VOLUMEDOWN:
   15|      1|        mpd_queue._add(MPD_COMMAND::VOLDOWN);
   16|      1|        break;
   17|     10|    case PILOT_KEY::KEY_VOLUMEUP:
   18|      1|        mpd_queue._add(MPD_COMMAND::VOLUP);
   19|      1|        break;
   20|     10|    case PILOT_KEY::KEY_AUDIO:
   21|      1|        mpd_queue._add(MPD_COMMAND::PAUSE);
   22|      1|        break;
   23|     10|    case PILOT_KEY::KEY_UP:
   24|      1|        mpd_queue._add(MPD_COMMAND::NEXT);
   25|      1|        break;
   26|     10|    case PILOT_KEY::KEY_DOWN:
   27|      1|        mpd_queue._add(MPD_COMMAND::PREV);
   28|      1|        break;
   29|     10|    default:
   30|      3|        log_file_mutex.mutex_lock();
   31|      3|        log_file_cout << CRITICAL << "nieznana komenda MPD z pilota "<< std::endl;
   32|      3|        log_file_mutex.mutex_unlock();
   33|      3|        break;
   34|     10|    }
   35|     10|}
   36|       |
   37|       |void c_irda_logic::sleeperLogic(PILOT_KEY X)
   38|     10|{
   39|     10|    my_data->mainLCD->set_print_song_state(100);
   40|     10|    my_data->mainLCD->printString(true,0,0,std::to_string(my_data->sleeper)+" minut");
   41|     10|
   42|     10|    switch (X){
   43|     10|    case PILOT_KEY::KEY_EXIT:
   44|      1|    {
   45|      1|        my_data->sleeper=0;
   46|      1|        my_data->mainLCD->set_print_song_state(0);
   47|      1|        who = PILOT_STATE::MPD;
   48|      1|        break;
   49|     10|    }
   50|     10|    case PILOT_KEY::KEY_UP:
   51|      4|    {
   52|      4|        ++my_data->sleeper;
   53|      4|        my_data->mainLCD->printString(true,0,0,std::to_string(my_data->sleeper)+" minut");
   54|      4|        break;
   55|     10|    }
   56|     10|    case PILOT_KEY::KEY_DOWN:
   57|      1|    {
   58|      1|        --my_data->sleeper;
   59|      1|        my_data->mainLCD->printString(true,0,0,std::to_string(my_data->sleeper)+" minut");
   60|      1|        break;
   61|     10|    }
   62|     10|    case PILOT_KEY::KEY_CHANNELUP:
   63|      1|    {
   64|      1|        my_data->sleeper+=10;
   65|      1|        my_data->mainLCD->printString(true,0,0,std::to_string(my_data->sleeper)+" minut");
   66|      1|        break;
   67|     10|    }
   68|     10|    case PILOT_KEY::KEY_CHANNELDOWN:
   69|      1|    {
   70|      1|        my_data->sleeper-=10;
   71|      1|        my_data->mainLCD->printString(true,0,0,std::to_string(my_data->sleeper)+" minut");
   72|      1|        break;
   73|     10|    }
   74|     10|    case PILOT_KEY::KEY_OK:
   75|      1|    {
   76|      1|        iDOM_THREAD::start_thread("Sleeper MPD",useful_F::sleeper_mpd,my_data);
   77|      1|        my_data->mainLCD->printString(true,1,0,"SLEEPer START");
   78|      1|        my_data->mainLCD->set_print_song_state(0);
   79|      1|        who = PILOT_STATE::MPD;
   80|      1|        break;
   81|     10|    }
   82|     10|    default:
   83|      1|        log_file_mutex.mutex_lock();
   84|      1|        log_file_cout << CRITICAL << "nieznany case w sleeperLogic"<< std::endl;
   85|      1|        log_file_mutex.mutex_unlock();
   86|      1|        break;
   87|     10|    }
   88|     10|}
   89|       |
   90|       |void c_irda_logic::projectorLogic(PILOT_KEY X)
   91|     12|{
   92|     12|    my_data->mainLCD->set_print_song_state(100);
   93|     12|    my_data->mainLCD->printString(false,2,1,"  PROJEKTOR   ");
   94|     12|
   95|     12|    switch (X)
   96|     12|    {
   97|     12|    case PILOT_KEY::KEY_EXIT:
   98|      2|    {
   99|      2|        my_data->mainLCD->set_print_song_state(0);
  100|      2|        who = PILOT_STATE::MPD;
  101|      2|
  102|      2|        if(my_data->ptr_MPD_info->isPlay == true){
  103|      1|            iDomTOOLS::MPD_play(my_data);
  104|      1|        }
  105|      1|        else {
  106|      1|            iDomTOOLS::turnOffSpeakers();
  107|      1|            my_data->mainLCD->set_print_song_state(0); // off display
  108|      1|            my_data->mainLCD->set_lcd_STATE(0);
  109|      1|        }
  110|      2|        break;
  111|     12|    }
  112|     12|    case PILOT_KEY::DUMMY:
  113|      1|    {
  114|      1|        break;
  115|     12|    }
  116|     12|    case PILOT_KEY::KEY_VOLUMEUP:
  117|      1|    {
  118|      1|        useful_F_libs::write_to_mkfifo(my_data->server_settings->omxplayerFile, "+");
  119|      1|        break;
  120|     12|    }
  121|     12|    case PILOT_KEY::KEY_VOLUMEDOWN:
  122|      1|    {
  123|      1|        useful_F_libs::write_to_mkfifo(my_data->server_settings->omxplayerFile, "-");
  124|      1|        break;
  125|     12|    }
  126|     12|    case PILOT_KEY::KEY_OK:
  127|      1|    {
  128|      1|        my_data->mainLCD->set_print_song_state(1000);
  129|      1|        my_data->mainLCD->printString(false,0,0,"ODTWARZAM VIDEO");
  130|      1|        useful_F_libs::write_to_mkfifo(my_data->server_settings->omxplayerFile, "p");
  131|      1|        break;
  132|     12|    }
  133|     12|    case PILOT_KEY::KEY_POWER:
  134|      1|    {
  135|      1|        //system("echo -n q > /mnt/ramdisk/cmd &"); // zamykanie omxplayera
  136|      1|        useful_F_libs::write_to_mkfifo(my_data->server_settings->omxplayerFile, "q");
  137|      1|        break;
  138|     12|    }
  139|     12|    case PILOT_KEY::KEY_DOWN:
  140|      1|    {
  141|      1|        useful_F::runLinuxCommand("echo -n $'\x1b\x5b\x43' > /mnt/ramdisk/cmd"); // do przodu
  142|      1|        //write_to_mkfifo("$'\x1b\x5b\x43'");
  143|      1|        break;
  144|     12|    }
  145|     12|    case PILOT_KEY::KEY_UP:
  146|      1|    {
  147|      1|        useful_F::runLinuxCommand("echo -n $'\x1b\x5b\x44' > /mnt/ramdisk/cmd"); // do tylu
  148|      1|        // write_to_mkfifo("$'\x1b\x5b\x44'");
  149|      1|        break;
  150|     12|    }
  151|     12|    case PILOT_KEY::KEY_CHANNELUP:
  152|      1|    {
  153|      1|        //system("echo -n o > /mnt/ramdisk/cmd"); // do przodu
  154|      1|        useful_F_libs::write_to_mkfifo(my_data->server_settings->omxplayerFile, "o");
  155|      1|        break;
  156|     12|    }
  157|     12|    case PILOT_KEY::KEY_CHANNELDOWN:
  158|      1|    {
  159|      1|        //system("echo -n i > /mnt/ramdisk/cmd"); // do tylu
  160|      1|        useful_F_libs::write_to_mkfifo(my_data->server_settings->omxplayerFile, "i");
  161|      1|        break;
  162|     12|    }
  163|     12|    default:
  164|      1|        log_file_mutex.mutex_lock();
  165|      1|        log_file_cout << CRITICAL << "nieznany case w projector"<< std::endl;
  166|      1|        log_file_mutex.mutex_unlock();
  167|      1|        break;
  168|     12|    }
  169|     12|}
  170|       |
  171|       |void c_irda_logic::movieLogic(PILOT_KEY X)
  172|     14|{
  173|     14|    switch (X)
  174|     14|    {
  175|     14|    case PILOT_KEY::KEY_EXIT:
  176|      1|    {
  177|      1|        my_data->mainLCD->set_print_song_state(0);
  178|      1|        my_data->mainLCD->set_lcd_STATE(2);
  179|      1|        who = PILOT_STATE::MPD; // koniec przegladania katalogow
  180|      1|        break;
  181|     14|    }
  182|     14|    case PILOT_KEY::KEY_VOLUMEUP:
  183|      3|    {
  184|      3|        my_data->main_tree->next(); // naspteny katalog
  185|      3|        break;
  186|     14|    }
  187|     14|    case PILOT_KEY::KEY_VOLUMEDOWN:
  188|      5|    {
  189|      5|        my_data->main_tree->previous(); //poprzedni katalog
  190|      5|        break;
  191|     14|    }
  192|     14|    case PILOT_KEY::KEY_OK:
  193|      3|    {
  194|      3|        // whodze w katalog lub odtwarzma plik
  195|      3|
  196|      3|        if (my_data->main_tree->is_file() == false)
  197|      1|        {
  198|      1|            my_data->main_tree->enter_dir();
  199|      1|            my_data->main_tree->show_list();
  200|      1|        }
  201|      2|        else
  202|      2|        {
  203|      2|            std::cout << " URUCHAMIAM PLIK! " <<my_data->main_tree->show_list() <<std::endl;
  204|      2|
  205|      2|            std::string command = "/home/pi/programowanie/iDom_server_OOP/script/PYTHON/iDom_movie.py ";
  206|      2|            command+=my_data->main_tree->show_list();
  207|      2|            useful_F::runLinuxCommand(command);
  208|      2|            std::cout << " WYSTARTOWALEM!!";
  209|      2|            my_data->mainLCD->set_lcd_STATE(-1);
  210|      2|            my_data->mainLCD->printString(true,0,0,"odtwarzam film");
  211|      2|            my_data->mainLCD->printString(false,0,1,my_data->main_tree->show_list());
  212|      2|            who = PILOT_STATE::PROJECTOR;
  213|      2|
  214|      2|            log_file_mutex.mutex_lock();
  215|      2|            log_file_cout << INFO << "odtwarzam film "<< my_data->ptr_MPD_info->isPlay << std::endl;
  216|      2|            log_file_mutex.mutex_unlock();
  217|      2|
  218|      2|            if (my_data->ptr_MPD_info->isPlay == true){
  219|      1|                iDomTOOLS::MPD_pause(); // projektor wlaczony wiec pauzuje radio
  220|      1|            }
  221|      1|            else{
  222|      1|                iDomTOOLS::turnOnSpeakers();
  223|      1|                puts("wlaczam glosnik do filmu");
  224|      1|            }
  225|      2|        }
  226|      3|        break;
  227|     14|    }
  228|     14|    case PILOT_KEY::KEY_UP:
  229|      1|    {
  230|      1|        my_data->main_tree->back_dir();
  231|      1|        break;
  232|     14|    }
  233|     14|    default:
  234|      1|        log_file_mutex.mutex_lock();
  235|      1|        log_file_cout << CRITICAL << "nieznany case w moveLogic"<< std::endl;
  236|      1|        log_file_mutex.mutex_unlock();
  237|      1|        break;
  238|     14|    }
  239|     14|
  240|     14|    my_data->main_tree->show_list();
  241|     14|}
  242|       |
  243|       |void c_irda_logic::menuLogic(PILOT_KEY X)
  244|     39|{
  245|     39|    switch (X)
  246|     39|    {
  247|     39|    case PILOT_KEY::KEY_EXIT:
  248|      1|    {
  249|      1|        my_data->mainLCD->set_print_song_state(0);
  250|      1|        my_data->mainLCD->set_lcd_STATE(2);
  251|      1|        who = PILOT_STATE::MPD; // koniec przegladania katalogow
  252|      1|        break;
  253|     39|    }
  254|     39|    case PILOT_KEY::KEY_VOLUMEUP:
  255|     23|    {
  256|     23|        my_data->main_MENU->next(); // naspteny katalog
  257|     23|        break;
  258|     39|    }
  259|     39|    case PILOT_KEY::KEY_VOLUMEDOWN:
  260|      6|    {
  261|      6|        my_data->main_MENU->previous(); //poprzedni katalog
  262|      6|        break;
  263|     39|    }
  264|     39|    case PILOT_KEY::KEY_OK:
  265|      7|    {
  266|      7|        // whodze w katalog lub odtwarzma plik
  267|      7|
  268|      7|        if (my_data->main_MENU->is_file() == false)
  269|      1|        {
  270|      1|            my_data->main_MENU->enter_dir();
  271|      1|            my_data->main_MENU->show_list();
  272|      1|        }
  273|      6|        else
  274|      6|        {
  275|      6|            // menu start
  276|      6|            if (my_data->main_MENU->show_list() == "5.SLEEPer"){
  277|      2|                std::cout << " POBUDKA!!!!" << std::endl;
  278|      2|                who=PILOT_STATE::SLEEPER;
  279|      2|            }
  280|      4|            else if (my_data->main_MENU->show_list() == "2.TEMPERATURA"){
  281|      1|                std::cout << " temperatura !!!!" << std::endl;
  282|      1|                who=PILOT_STATE::MPD;
  283|      1|                _add(PILOT_KEY::KEY_SAT);
  284|      1|            }
  285|      3|            else if (my_data->main_MENU->show_list() == "4.PLIKI"){
  286|      3|                std::cout << " do filmow" << std::endl;
  287|      3|                who=PILOT_STATE::MPD;
  288|      3|                _add(PILOT_KEY::KEY_EPG);
  289|      3|                _add(PILOT_KEY::KEY_VOLUMEUP);
  290|      3|            }
  291|      6|        }
  292|      7|        break;
  293|     39|    }
  294|     39|    case PILOT_KEY::KEY_UP:
  295|      1|    {
  296|      1|        my_data->main_MENU->back_dir();
  297|      1|        break;
  298|     39|    }
  299|     39|    default:
  300|      1|        log_file_mutex.mutex_lock();
  301|      1|        log_file_cout << CRITICAL << "nieznany case w menuLogic"<< std::endl;
  302|      1|        log_file_mutex.mutex_unlock();
  303|      1|        break;
  304|     39|
  305|     39|    }
  306|     39|    my_data->main_MENU->show_list();
  307|     39|}
  308|       |
  309|       |void c_irda_logic::mainPilotHandler(PILOT_KEY X)
  310|     36|{
  311|     36|    switch (X){
  312|     36|
  313|     36|    case PILOT_KEY::KEY_RADIO:
  314|      1|    {
  315|      1|        who = PILOT_STATE::PROJECTOR;
  316|      1|        _add(PILOT_KEY::DUMMY);
  317|      1|        break;
  318|     36|    }
  319|     36|
  320|     36|    case PILOT_KEY::KEY_SUBTITLE:
  321|      1|    {
  322|      1|        my_data->mainLCD->set_lcd_STATE(10);
  323|      1|        my_data->mainLCD->printString(true,0,0,"GASZE LEDy");
  324|      1|        std::string temp_str="";
  325|      1|        temp_str.erase();
  326|      1|        temp_str += my_data->main_iDomTools->ledOFF();
  327|      1|        my_data->mainLCD->printString(false,0,1,temp_str);
  328|      1|        who=PILOT_STATE::MPD;
  329|      1|        break;
  330|     36|    }
  331|     36|
  332|     36|    case PILOT_KEY::KEY_LANGUAGE:
  333|      9|    {
  334|      9|        my_data->mainLCD->set_lcd_STATE(10);
  335|      9|        my_data->mainLCD->printString(true,0,0,"ZAPALAM LEDy");
  336|      9|        std::string temp_str = my_data->ptr_pilot_led->colorLED[my_data->ptr_pilot_led->counter].getColorName();
  337|      9|        my_data->main_iDomTools->ledOn(my_data->ptr_pilot_led->colorLED[my_data->ptr_pilot_led->counter]);
  338|      9|
  339|      9|        if (++my_data->ptr_pilot_led->counter > my_data->ptr_pilot_led->colorLED.size()-1 )
  340|      1|        {
  341|      1|            my_data->ptr_pilot_led->counter=0;
  342|      1|        }
  343|      9|
  344|      9|        my_data->mainLCD->printString(false,0,1,temp_str);
  345|      9|        who = PILOT_STATE::MPD;
  346|      9|        break;
  347|     36|    }
  348|     36|
  349|     36|    case PILOT_KEY::KEY_SAT:
  350|      1|    {
  351|      1|        my_data->mainLCD->set_lcd_STATE(10);
  352|      1|        my_data->mainLCD->printString(true,0,0,"SMOG: "+my_data->main_iDomTools->getSmog()+" mg/m^3");
  353|      1|        std::string temp_str = "I:";
  354|      1|        std::vector<std::string> temper = my_data->main_iDomTools->getTemperature();
  355|      1|        //temp_str += my_data_logic->main_iDomTools->getTemperatureString();// send_to_arduino(my_data_logic,"temperature:2;");
  356|      1|        temp_str += temper.at(0);
  357|      1|        temp_str += " O:"+ temper.at(1);
  358|      1|        my_data->mainLCD->printString(false,0,1,temp_str+" c");
  359|      1|        who = PILOT_STATE::MPD;
  360|      1|        break;
  361|     36|    }
  362|     36|
  363|     36|    case PILOT_KEY::KEY_EPG:
  364|      3|        who = PILOT_STATE::MOVIE;
  365|      3|        my_data->main_tree->show_list(); //printuje pierwszy element
  366|      3|        my_data->mainLCD->set_print_song_state(100);
  367|      3|        break;
  368|     36|
  369|     36|    case PILOT_KEY::KEY_MENU:
  370|      7|        who = PILOT_STATE::MENU;
  371|      7|        my_data->main_MENU->show_list();
  372|      7|        my_data->mainLCD->set_print_song_state(100);
  373|      7|        break;
  374|     36|    case PILOT_KEY::KEY_FAVORITES:
  375|      1|        my_data->main_iDomTools->turnOnOffPrinter();
  376|      1|        break;
  377|     36|    case PILOT_KEY::KEY_TEXT:
  378|      2|        my_data->main_iDomTools->turnOnOff433MHzSwitch("listwa");
  379|      2|        break;
  380|     36|    case PILOT_KEY::KEY_REFRESH:
  381|      1|        my_data->main_iDomTools->startKodi_Thread();
  382|      1|        break;
  383|     36|    default:
  384|     10|        irdaMPD(X);
  385|     36|    }
  386|     36|}
  387|       |
  388|       |c_irda_logic::c_irda_logic(thread_data *my_data):my_data(my_data)
  389|     12|{
  390|     12|    // my_data = my_data;
  391|     12|    who = PILOT_STATE::MPD;
  392|     12|}
  393|       |
  394|       |void c_irda_logic::_add(PILOT_KEY X)
  395|    111|{
  396|    111|    switch (who){
  397|    111|    case PILOT_STATE::MPD:
  398|     35|        mainPilotHandler(X);
  399|     35|        break;
  400|    111|    case PILOT_STATE::SLEEPER:
  401|     10|        sleeperLogic(X);
  402|     10|        break;
  403|    111|    case PILOT_STATE::PROJECTOR:
  404|     12|        projectorLogic(X);
  405|     12|        break;
  406|    111|    case PILOT_STATE::MOVIE:
  407|     14|        movieLogic(X);
  408|     14|        break;
  409|    111|    case PILOT_STATE::MENU:
  410|     39|        menuLogic(X);
  411|     39|        break;
  412|    111|    default:
  413|      1|        log_file_mutex.mutex_lock();
  414|      1|        log_file_cout << CRITICAL << "nieznany pilotState"<< std::endl;
  415|      1|        log_file_mutex.mutex_unlock();
  416|      1|        break;
  417|    111|    }
  418|    111|}
  419|       |
  420|       |//PILOT_KEY c_irda_logic::_get( )
  421|       |//{
  422|       |//    PILOT_KEY temp = PILOT_KEY::DUMMY;
  423|       |//    if (irda_queue.empty() == false){
  424|       |//        temp = irda_queue.front();
  425|       |//        irda_queue.pop();
  426|       |//    }
  427|       |//    return temp;
  428|       |//}
  429|       |
  430|       |//int c_irda_logic::_size() const
  431|       |//{
  432|       |//    return irda_queue.size();
  433|       |//}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_irda_logic/test/c_irda_logic_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include "../../iDom_server_OOP.h"
    3|       |#include "test_data.h"
    4|       |#include "../../../iDom_server_OOP/src/iDomTools/test/iDomTools_fixture.h"
    5|       |#include "../c_irda_logic.h"
    6|       |
    7|       |
    8|       |class c_irda_logic_fixture : public iDomTOOLS_ClassTest
    9|       |{
   10|       |public:
   11|       |    std::unique_ptr<c_irda_logic> test_irda;
   12|       |    menu_tree* test_menuTree;
   13|       |    files_tree* test_filesTree;
   14|       |    std::string test_omxplayerFile = "../config/cmd_test";
   15|       |    void SetUp()
   16|     12|    {
   17|     12|        iDomTOOLS_ClassTest::SetUp();
   18|     12|        test_irda = std::make_unique<c_irda_logic>(&test_my_data);
   19|     12|        test_menuTree = new menu_tree("../config/MENU/", test_my_data.mainLCD);
   20|     12|        test_my_data.main_MENU = test_menuTree;
   21|     12|
   22|     12|        test_filesTree = new files_tree("../config/MOVIE/", test_my_data.mainLCD);
   23|     12|        test_my_data.main_tree = test_filesTree;
   24|     12|
   25|     12|        test_my_data.server_settings->omxplayerFile =  test_omxplayerFile;
   26|     12|
   27|     12|        std::cout << "c_irda_logic_fixture SetUp()"<<std::endl;
   28|     12|    }
   29|       |
   30|       |    void TearDown()
   31|     12|    {
   32|     12|        delete test_menuTree;
   33|     12|        delete test_filesTree;
   34|     12|        iDomTOOLS_ClassTest::TearDown();
   35|     12|        std::cout << "c_irda_logic_fixture TearDown()"<<std::endl;
   36|     12|    }
   37|       |};
   38|       |
   39|       |TEST_F(c_irda_logic_fixture, kodi)
   40|      1|{
   41|      1|    std::array<Thread_array_struc,iDomConst::MAX_CONNECTION >test_ThreadArrayStruc;
   42|      1|
   43|     11|    for (int i = 0 ; i < iDomConst::MAX_CONNECTION; i++)
   44|     10|        test_ThreadArrayStruc.at(i).thread_socket = i+1;
   45|      1|    test_ThreadArrayStruc.at(3).thread_socket = 0;
   46|      1|    test_ThreadArrayStruc.at(3).thread_ID = std::this_thread::get_id();
   47|      1|    test_my_data.main_THREAD_arr = &test_ThreadArrayStruc;
   48|      1|
   49|      1|    test_my_data.main_iDomTools->unlockHome();
   50|      1|    test_my_data.main_iDomStatus->setObjectState("music",STATE::PAUSE);
   51|      1|    test_my_data.main_iDomStatus->setObjectState("speakers",STATE::OFF);
   52|      1|    test_irda->_add(PILOT_KEY::KEY_REFRESH);
   53|      1|    sleep(1);
   54|      1|}
   55|       |
   56|       |TEST_F(c_irda_logic_fixture, turnOnOffListwa)
   57|      1|{
   58|      1|    test_my_data.main_iDomTools->unlockHome();
   59|      1|    test_my_data.main_iDomStatus->setObjectState("listwa",STATE::OFF);
   60|      1|
   61|      1|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("listwa")->getState(), STATE::UNDEFINE);
   62|      1|    test_irda->_add(PILOT_KEY::KEY_TEXT);
   63|      1|
   64|      2|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("listwa")->getState(),
   65|      2|              STATE::ON) << "wrong state: "
   66|      2|                         << stateToString(test_my_data.main_REC->getEqPointer("listwa")->getState());
   67|      1|    test_irda->_add(PILOT_KEY::KEY_TEXT);
   68|      1|
   69|      2|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("listwa")->getState(),
   70|      2|              STATE::OFF) << "wrong state: "
   71|      2|                          << stateToString(test_my_data.main_REC->getEqPointer("listwa")->getState());
   72|      1|}
   73|       |
   74|       |TEST_F(c_irda_logic_fixture, turnOnOffPrinter)
   75|      1|{
   76|      1|    setReturnPinState(0);
   77|      1|    test_my_data.main_iDomTools->unlockHome();
   78|      1|    test_my_data.main_iDomStatus->setObjectState("printer", STATE::OFF);
   79|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("printer"),
   80|      1|              STATE::OFF);
   81|      1|
   82|      1|    test_irda->mainPilotHandler(PILOT_KEY::KEY_FAVORITES);
   83|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("printer"),
   84|      1|              STATE::ON);
   85|      1|    std::cout <<"event: " << test_my_data.myEventHandler.run("230V")->getEvent() <<std::endl;
   86|      1|}
   87|       |
   88|       |TEST_F(c_irda_logic_fixture, irdaMPD)
   89|      1|{
   90|      1|    blockQueue test_Q;
   91|      1|    test_Q._clearAll();
   92|      1|
   93|      1|    test_irda->_add(PILOT_KEY::KEY_POWER);
   94|      1|    EXPECT_EQ(test_Q._get(), MPD_COMMAND::STOP);
   95|      1|
   96|      1|    test_irda->_add(PILOT_KEY::KEY_TV);
   97|      1|    EXPECT_EQ(test_Q._get(), MPD_COMMAND::PLAY);
   98|      1|
   99|      1|    test_irda->_add(PILOT_KEY::KEY_VOLUMEDOWN);
  100|      1|    EXPECT_EQ(test_Q._get(), MPD_COMMAND::VOLDOWN);
  101|      1|
  102|      1|    test_irda->_add(PILOT_KEY::KEY_VOLUMEUP);
  103|      1|    EXPECT_EQ(test_Q._get(), MPD_COMMAND::VOLUP);
  104|      1|
  105|      1|    test_irda->_add(PILOT_KEY::KEY_AUDIO);
  106|      1|    EXPECT_EQ(test_Q._get(), MPD_COMMAND::PAUSE);
  107|      1|
  108|      1|    test_irda->_add(PILOT_KEY::KEY_UP);
  109|      1|    EXPECT_EQ(test_Q._get(), MPD_COMMAND::NEXT);
  110|      1|
  111|      1|    test_irda->_add(PILOT_KEY::KEY_DOWN);
  112|      1|    EXPECT_EQ(test_Q._get(), MPD_COMMAND::PREV);
  113|      1|
  114|      1|    test_irda->_add(PILOT_KEY::KEY_2); //default
  115|      1|    EXPECT_EQ(test_Q._size(), 0);
  116|      1|}
  117|       |
  118|       |TEST_F(c_irda_logic_fixture, sleeper_Logic_EXIT)
  119|      1|{
  120|      1|    test_my_data.sleeper = 0;
  121|      1|    EXPECT_EQ(test_my_data.sleeper, 0);
  122|      1|    test_irda->_add(PILOT_KEY::KEY_MENU);
  123|      4|    do {
  124|      4|        test_irda->_add(PILOT_KEY::KEY_VOLUMEUP);
  125|      4|    } while(TEST_DATA::LCD_print != "5.SLEEPer");
  126|      5|    do {
  127|      5|        test_irda->_add(PILOT_KEY::KEY_VOLUMEDOWN);
  128|      5|    } while(TEST_DATA::LCD_print != "5.SLEEPer");
  129|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  130|      1|    test_irda->_add(PILOT_KEY::KEY_UP);
  131|      1|    EXPECT_EQ(test_my_data.sleeper, 1);
  132|      1|    test_irda->_add(PILOT_KEY::KEY_UP);
  133|      1|    EXPECT_EQ(test_my_data.sleeper, 2);
  134|      1|    test_irda->_add(PILOT_KEY::KEY_EXIT);
  135|      1|    EXPECT_EQ(test_my_data.sleeper, 0);
  136|      1|}
  137|       |
  138|       |TEST_F(c_irda_logic_fixture, sleeper_Logic_OK)
  139|      1|{
  140|      1|    std::cout << test_my_data.main_REC->listAllName() << std::endl;
  141|      1|
  142|      1|    std::array<Thread_array_struc,iDomConst::MAX_CONNECTION> test_ThreadArrayStruc;
  143|      1|
  144|     11|    for (int i = 0 ; i < iDomConst::MAX_CONNECTION; i++)
  145|     10|        test_ThreadArrayStruc.at(i).thread_socket = i+1;
  146|      1|    test_ThreadArrayStruc.at(3).thread_socket = 0;
  147|      1|    test_ThreadArrayStruc.at(3).thread_ID = std::this_thread::get_id();
  148|      1|    test_my_data.main_THREAD_arr = &test_ThreadArrayStruc;
  149|      1|    test_my_data.sleeper = 0;
  150|      1|    EXPECT_EQ(test_my_data.sleeper, 0);
  151|      1|    test_irda->_add(PILOT_KEY::KEY_MENU);
  152|      4|    do {
  153|      4|        test_irda->_add(PILOT_KEY::KEY_VOLUMEUP);
  154|      4|    } while(TEST_DATA::LCD_print != "5.SLEEPer");
  155|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  156|      1|    test_irda->_add(PILOT_KEY::KEY_UP);
  157|      1|    EXPECT_EQ(test_my_data.sleeper, 1);
  158|      1|    test_irda->_add(PILOT_KEY::KEY_UP);
  159|      1|    EXPECT_EQ(test_my_data.sleeper, 2);
  160|      1|    test_irda->_add(PILOT_KEY::KEY_CHANNELUP);
  161|      1|    EXPECT_EQ(test_my_data.sleeper, 12);
  162|      1|    test_irda->_add(PILOT_KEY::KEY_CHANNELDOWN);
  163|      1|    EXPECT_EQ(test_my_data.sleeper, 2);
  164|      1|    test_irda->_add(PILOT_KEY::KEY_DOWN);
  165|      1|    EXPECT_EQ(test_my_data.sleeper, 1);
  166|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  167|      1|    sleep(2);
  168|      1|    EXPECT_EQ(test_my_data.sleeper, 0);
  169|      1|    test_irda->_add(PILOT_KEY::KEY_EXIT);
  170|      1|    EXPECT_EQ(test_my_data.sleeper, 0);\
  171|      1|
  172|      1|    //////////////default
  173|      1|    test_irda->who = PILOT_STATE::SLEEPER;
  174|      1|    test_irda->_add(PILOT_KEY::KEY_0); //default
  175|      1|}
  176|       |
  177|       |TEST_F(c_irda_logic_fixture, LED_ON_OFF)
  178|      1|{
  179|      1|    EXPECT_EQ( test_my_data.myEventHandler.run("LED")->getLast1minNumberEvent(),0);
  180|     10|    for (int i = 1 ; i < test_my_data.ptr_pilot_led->colorLED.size()+2; ++i)
  181|      9|    {
  182|      9|        test_irda->_add(PILOT_KEY::KEY_LANGUAGE);
  183|      9|        EXPECT_EQ( test_my_data.myEventHandler.run("LED")->getLast1minNumberEvent(),i);
  184|      9|        EXPECT_THAT(test_my_data.myEventHandler.run("LED")->getEvent(),
  185|      9|                    testing::HasSubstr("LED can not start due to home state: UNDEFINE"));
  186|      9|    }
  187|      1|    test_irda->_add(PILOT_KEY::KEY_SUBTITLE);
  188|      1|}
  189|       |
  190|       |TEST_F(c_irda_logic_fixture, temp_smogINFO)
  191|      1|{
  192|      1|    TEST_DATA::return_httpPost = "ok.\n";
  193|      1|    TEST_DATA::return_send_to_arduino = "12:12";
  194|      1|    test_irda->_add(PILOT_KEY::KEY_MENU);
  195|      1|    do {
  196|      1|        test_irda->_add(PILOT_KEY::KEY_VOLUMEUP);
  197|      1|    } while(TEST_DATA::LCD_print != "2.TEMPERATURA");
  198|      1|
  199|      1|    test_irda->_add(PILOT_KEY::KEY_VOLUMEUP);
  200|      1|    test_irda->_add(PILOT_KEY::KEY_VOLUMEDOWN);
  201|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  202|      1|    EXPECT_THAT(TEST_DATA::LCD_print, testing::HasSubstr("TEMPERATURA"));
  203|      1|}
  204|       |
  205|       |TEST_F(c_irda_logic_fixture, menu_enter_dir)
  206|      1|{
  207|      1|    test_irda->_add(PILOT_KEY::KEY_MENU);
  208|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  209|      1|
  210|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::MENU);
  211|      1|    test_irda->_add(PILOT_KEY::KEY_UP);
  212|      1|    test_irda->_add(PILOT_KEY::KEY_0); //default
  213|      1|    test_irda->_add(PILOT_KEY::KEY_EXIT);
  214|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::MPD);
  215|      1|}
  216|       |TEST_F(c_irda_logic_fixture, menu_files)
  217|      1|{
  218|      1|    blockQueue  test_q;
  219|      1|    test_q._clearAll();
  220|      1|    test_my_data.idom_all_state.houseState = STATE::UNLOCK;
  221|      1|    int timeout = 10;
  222|      1|    test_irda->_add(PILOT_KEY::KEY_MENU);
  223|      3|    do {
  224|      3|        if (--timeout == 0)
  225|      3|            FAIL()<<"cannot find";
  226|      3|        test_irda->_add(PILOT_KEY::KEY_VOLUMEUP);
  227|      3|    } while(TEST_DATA::LCD_print != "4.PLIKI");
  228|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  229|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::MOVIE);
  230|      1|    timeout = 10;
  231|      2|    do {
  232|      2|        if (--timeout == 0)
  233|      2|            FAIL()<<"cannot find";
  234|      2|        test_irda->_add(PILOT_KEY::KEY_VOLUMEDOWN);
  235|      2|    } while(TEST_DATA::LCD_print != "GAME_OF_THRONES/");
  236|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  237|      1|    test_irda->_add(PILOT_KEY::KEY_UP);
  238|      1|    EXPECT_STREQ(TEST_DATA::LCD_print.c_str(),"GAME_OF_THRONES/");
  239|      1|    test_irda->_add(PILOT_KEY::KEY_EXIT);
  240|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::MPD);
  241|      1|    ///////////////// play - no MPD
  242|      1|
  243|      1|    test_my_data.ptr_MPD_info->isPlay  = false;
  244|      1|    test_irda->_add(PILOT_KEY::KEY_MENU);
  245|      1|    timeout = 10;
  246|      5|    do {
  247|      5|        if (--timeout == 0)
  248|      5|            FAIL()<<"cannot find";
  249|      5|        test_irda->_add(PILOT_KEY::KEY_VOLUMEUP);
  250|      5|    } while(TEST_DATA::LCD_print != "4.PLIKI");
  251|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  252|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::MOVIE);
  253|      1|    timeout = 10;
  254|      2|    do {
  255|      2|        if (--timeout == 0)
  256|      0|            break;
  257|      2|        test_irda->_add(PILOT_KEY::KEY_VOLUMEDOWN);
  258|      2|    } while(TEST_DATA::LCD_print != "s01e02");
  259|      1|    test_irda->_add(PILOT_KEY::KEY_0); //default
  260|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  261|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::PROJECTOR);
  262|      1|    test_irda->_add(PILOT_KEY::KEY_EXIT);
  263|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::MPD);
  264|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("speakers"),STATE::OFF);
  265|      1|    ///////////////// play -  MPD
  266|      1|    test_my_data.ptr_MPD_info->isPlay  = true;
  267|      1|    EXPECT_TRUE(test_my_data.ptr_MPD_info->isPlay);
  268|      1|    test_irda->_add(PILOT_KEY::KEY_MENU);
  269|      1|    timeout = 10;
  270|      5|    do {
  271|      5|        if (--timeout == 0)
  272|      5|            FAIL()<<"cannot find";
  273|      5|        test_irda->_add(PILOT_KEY::KEY_VOLUMEUP);
  274|      5|    } while(TEST_DATA::LCD_print != "4.PLIKI");
  275|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  276|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::MOVIE);
  277|      1|    timeout = 10;
  278|      1|    do {
  279|      1|        if (--timeout == 0)
  280|      1|            FAIL()<<"cannot find";
  281|      1|        test_irda->_add(PILOT_KEY::KEY_VOLUMEDOWN);
  282|      1|    } while(TEST_DATA::LCD_print != "s01e02");
  283|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  284|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::PROJECTOR);
  285|      1|
  286|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PAUSE);
  287|      1|}
  288|       |
  289|       |TEST_F(c_irda_logic_fixture, dummy_KEY_RADIO_and_add )
  290|      1|{
  291|      1|    test_irda->_add(PILOT_KEY::KEY_RADIO);
  292|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::PROJECTOR);
  293|      1|
  294|      1|    test_irda->who = PILOT_STATE::LED; //not set
  295|      1|    test_irda->_add(PILOT_KEY::KEY_RADIO);
  296|      1|}
  297|       |
  298|       |TEST_F(c_irda_logic_fixture, projektor)
  299|      1|{
  300|      1|    std::string retString;
  301|      1|    test_irda->who = PILOT_STATE::PROJECTOR;
  302|      1|    test_irda->_add(PILOT_KEY::KEY_VOLUMEUP);
  303|      1|    retString = useful_F_libs::read_from_mkfifo(test_omxplayerFile.c_str());
  304|      1|    std::cout << "retString.size() : " << retString.size() << std::endl;
  305|      1|   // EXPECT_EQ(retString,"+");
  306|      1|
  307|      1|    test_irda->_add(PILOT_KEY::KEY_VOLUMEDOWN);
  308|      1|    retString = useful_F_libs::read_from_mkfifo(test_omxplayerFile.c_str());
  309|      1|    std::cout << "retString.size() : " << retString.size() << std::endl;
  310|      1|   // EXPECT_EQ(retString,"+");
  311|      1|
  312|      1|    test_irda->_add(PILOT_KEY::KEY_OK);
  313|      1|    retString = useful_F_libs::read_from_mkfifo(test_omxplayerFile.c_str());
  314|      1|    std::cout << "retString.size() : " << retString.size() << std::endl;
  315|      1|   // EXPECT_EQ(retString,"-");
  316|      1|
  317|      1|    test_irda->_add(PILOT_KEY::KEY_POWER);
  318|      1|    retString = useful_F_libs::read_from_mkfifo(test_omxplayerFile.c_str());
  319|      1|    std::cout << "retString.size() : " << retString.size() << std::endl;
  320|      1|   // EXPECT_EQ(retString,"q");
  321|      1|
  322|      1|    test_irda->_add(PILOT_KEY::KEY_DOWN);
  323|      1|    retString = useful_F_libs::read_from_mkfifo(test_omxplayerFile.c_str());
  324|      1|    std::cout << "retString.size() : " << retString.size() << std::endl;
  325|      1|   // EXPECT_EQ(retString,"+");
  326|      1|
  327|      1|    test_irda->_add(PILOT_KEY::KEY_UP);
  328|      1|    retString = useful_F_libs::read_from_mkfifo(test_omxplayerFile.c_str());
  329|      1|    std::cout << "retString.size() : " << retString.size() << std::endl;
  330|      1|   // EXPECT_EQ(retString,"+");
  331|      1|
  332|      1|    test_irda->_add(PILOT_KEY::KEY_CHANNELUP);
  333|      1|    retString = useful_F_libs::read_from_mkfifo(test_omxplayerFile.c_str());
  334|      1|    std::cout << "retString.size() : " << retString.size() << std::endl;
  335|      1|   // EXPECT_EQ(retString,"o");
  336|      1|
  337|      1|    test_irda->_add(PILOT_KEY::KEY_CHANNELDOWN);
  338|      1|    retString = useful_F_libs::read_from_mkfifo(test_omxplayerFile.c_str());
  339|      1|    std::cout << "retString.size() : " << retString.size() << std::endl;
  340|      1|   // EXPECT_EQ(retString,"i");
  341|      1|
  342|      1|    test_my_data.ptr_MPD_info->isPlay = true;
  343|      1|    test_irda->_add(PILOT_KEY::KEY_EXIT);
  344|      1|    retString = useful_F_libs::read_from_mkfifo(test_omxplayerFile.c_str());
  345|      1|    std::cout << "retString.size() : " << retString.size() << std::endl;
  346|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::MPD);
  347|      1|
  348|      1|    test_my_data.ptr_MPD_info->isPlay = false;
  349|      1|    test_irda->_add(PILOT_KEY::KEY_EXIT);
  350|      1|    retString = useful_F_libs::read_from_mkfifo(test_omxplayerFile.c_str());
  351|      1|    std::cout << "retString.size() : " << retString.size() << std::endl;
  352|      1|    EXPECT_EQ(test_irda->who, PILOT_STATE::MPD);
  353|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("speakers"),STATE::OFF);
  354|      1|
  355|      1|    //// dummy
  356|      1|    test_irda->who = PILOT_STATE::PROJECTOR;
  357|      1|    test_irda->_add(PILOT_KEY::KEY_0);
  358|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/command.cpp:
    1|       |#include "command.h"
    2|       |
    3|       |command::command(const std::string &commandName ) : commandName(commandName)
    4|    269|{
    5|    269|   // std::cout << "konstruktor command"<<std::endl;
    6|    269|}
    7|       |
    8|       |command::~command()
    9|    269|{
   10|    269|  // puts("command::~command()");
   11|    269|}
   12|       |
   13|       |std::string command::getCommandName()
   14|    156|{
   15|    156|    return commandName;
   16|    156|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_433mhz_BT.cpp:
    1|       |#include "../command_433mhz.h"
    2|       |#include "../../../functions/functions.h"
    3|       |#include "../../../RADIO_433_eq/radio_433_eq.h"
    4|       |#include "../../../433MHz/RFLink/rflinkhandler.h"
    5|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    6|       |
    7|       |class command433MHz_Class_fixture : public iDomTOOLS_ClassTest
    8|       |{
    9|       |public:
   10|       |    command433MHz_Class_fixture()
   11|     15|    {
   12|     15|        this->test_command_433MHz = std::nullptr_t();
   13|     15|        this->test_RFLink = std::nullptr_t();
   14|     15|    }
   15|       |
   16|       |protected:
   17|       |    std::vector<std::string> test_v= {"433MHz"};
   18|       |    RFLinkHandler* test_RFLink;
   19|       |    blockQueue test_q;
   20|       |    command_433MHz* test_command_433MHz;
   21|       |
   22|       |    void SetUp() final
   23|     15|    {
   24|     15|        iDomTOOLS_ClassTest::SetUp();
   25|     15|
   26|     15|        test_q._clearAll();
   27|     15|
   28|     15|        test_RFLink = new RFLinkHandler(&test_my_data);
   29|     15|        test_command_433MHz = new command_433MHz("433MHz");
   30|     15|        test_my_data.main_RFLink = test_RFLink;
   31|     15|        std::cout << "command433MHz_Class_fixture SetUp" << std::endl;
   32|     15|    }
   33|       |
   34|       |    void TearDown() final
   35|     15|    {
   36|     15|        iDomTOOLS_ClassTest::TearDown();
   37|     15|        delete test_RFLink;
   38|     15|        delete test_command_433MHz;
   39|     15|        std::cout << "command433MHz_Class_fixture TearDown" << std::endl;
   40|     15|    }
   41|       |
   42|       |    void addSwitch(const std::string& name)
   43|      1|    {
   44|      1|        test_v.clear();
   45|      1|        test_v.push_back("433MHz");
   46|      1|        test_v.push_back("add");
   47|      1|        test_v.push_back("SWITCH");
   48|      1|        test_v.push_back(name);
   49|      1|        test_v.push_back("1234");
   50|      1|        test_v.push_back("onCode_A");
   51|      1|        test_v.push_back("ofCode_A");
   52|      1|        test_v.push_back("on15sec_A");
   53|      1|        test_v.push_back("sunrise_A");
   54|      1|        test_v.push_back("sunset_A");
   55|      1|        test_v.push_back("lock_A");
   56|      1|        test_v.push_back("unlock_A");
   57|      1|        std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
   58|      1|    }
   59|       |    void deleteSwitch(const std::string& name)
   60|      2|    {
   61|      2|        test_v.clear();
   62|      2|        test_v.push_back("433MHz");
   63|      2|        test_v.push_back("delete");
   64|      2|        test_v.push_back(name);
   65|      2|        std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
   66|      2|    }
   67|       |};
   68|       |TEST_F(command433MHz_Class_fixture, getCommandName)
   69|      1|{
   70|      1|    EXPECT_THAT(test_command_433MHz->getCommandName(),testing::HasSubstr("433MHz"));
   71|      1|}
   72|       |
   73|       |TEST_F(command433MHz_Class_fixture, deleteSwitch)
   74|      1|{
   75|      1|    test_v.push_back("show");
   76|      1|    test_v.push_back("all");
   77|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
   78|      1|    auto v = test_rec->getSwitchPointerVector();
   79|      1|    EXPECT_EQ(v.size(),5);
   80|      1|    test_v.clear();
   81|      1|    test_v.push_back("433MHz");
   82|      1|    test_v.push_back("delete");
   83|      1|    test_v.push_back("A");
   84|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
   85|      1|    v = test_rec->getSwitchPointerVector();
   86|      1|    EXPECT_EQ(v.size(),4);
   87|      1|    test_v.clear();
   88|      1|    test_v.push_back("433MHz");
   89|      1|    test_v.push_back("show");
   90|      1|    test_v.push_back("all");
   91|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
   92|      1|    addSwitch("A");
   93|      1|
   94|      1|}
   95|       |TEST_F(command433MHz_Class_fixture, deleteFakeSwitch)
   96|      1|{
   97|      1|    auto actualSize = test_rec->getSwitchPointerVector().size();
   98|      1|    test_v.push_back("show");
   99|      1|    test_v.push_back("all");
  100|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  101|      1|    auto v = test_rec->getSwitchPointerVector();
  102|      1|    EXPECT_EQ(v.size(),actualSize);
  103|      1|    test_v.clear();
  104|      1|    test_v.push_back("433MHz");
  105|      1|    test_v.push_back("delete");
  106|      1|    test_v.push_back("fake");
  107|      1|    std::string result = test_command_433MHz->execute(test_v,&test_my_data);
  108|      1|    EXPECT_THAT(result, testing::HasSubstr("not exist"));
  109|      1|    v = test_rec->getSwitchPointerVector();
  110|      1|    EXPECT_EQ(v.size(),actualSize);
  111|      1|    test_v.clear();
  112|      1|    test_v.push_back("433MHz");
  113|      1|    test_v.push_back("show");
  114|      1|    test_v.push_back("all");
  115|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  116|      1|}
  117|       |TEST_F(command433MHz_Class_fixture, addButton)
  118|      1|{
  119|      1|    auto actualSize = test_rec->getButtonPointerVector().size();
  120|      1|    test_v.push_back("show");
  121|      1|    test_v.push_back("all");
  122|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  123|      1|    auto v = test_rec->getButtonPointerVector();
  124|      1|    EXPECT_EQ(v.size(),actualSize);
  125|      1|    test_v.clear();
  126|      1|    test_v.push_back("433MHz");
  127|      1|    test_v.push_back("add");
  128|      1|    test_v.push_back("BUTTON");
  129|      1|    test_v.push_back("glowny");
  130|      1|    test_v.push_back("4321");
  131|      1|    test_v.push_back("onCode");
  132|      1|    test_v.push_back("offCode");
  133|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  134|      1|    v = test_rec->getButtonPointerVector();
  135|      1|    EXPECT_EQ(v.size(),actualSize+1);
  136|      1|    test_v.clear();
  137|      1|    test_v.push_back("433MHz");
  138|      1|    test_v.push_back("show");
  139|      1|    test_v.push_back("all");
  140|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  141|      1|    deleteSwitch("glowny");
  142|      1|}
  143|       |
  144|       |TEST_F(command433MHz_Class_fixture, addSwitch)
  145|      1|{
  146|      1|    auto actualSize = test_rec->getSwitchPointerVector().size();
  147|      1|    test_v.push_back("show");
  148|      1|    test_v.push_back("all");
  149|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  150|      1|    auto v = test_rec->getSwitchPointerVector();
  151|      1|    EXPECT_EQ(v.size(),actualSize);
  152|      1|    test_v.clear();
  153|      1|    test_v.push_back("433MHz");
  154|      1|    test_v.push_back("add");
  155|      1|    test_v.push_back("SWITCH");
  156|      1|    test_v.push_back("Aaa");
  157|      1|    test_v.push_back("1234");
  158|      1|    test_v.push_back("onCode_A");
  159|      1|    test_v.push_back("ofCode_A");
  160|      1|    test_v.push_back("on15sec_A");
  161|      1|    test_v.push_back("sunrise_A");
  162|      1|    test_v.push_back("sunset_A");
  163|      1|    test_v.push_back("lock_A");
  164|      1|    test_v.push_back("unlock_A");
  165|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  166|      1|    v = test_rec->getSwitchPointerVector();
  167|      1|    EXPECT_EQ(v.size(),actualSize+1);
  168|      1|    test_v.clear();
  169|      1|    test_v.push_back("433MHz");
  170|      1|    test_v.push_back("show");
  171|      1|    test_v.push_back("all");
  172|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  173|      1|    deleteSwitch("Aaa");
  174|      1|}
  175|       |
  176|       |TEST_F(command433MHz_Class_fixture, addExistingWeather)
  177|      1|{
  178|      1|    test_v.push_back("show");
  179|      1|    test_v.push_back("all");
  180|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  181|      1|    auto v = test_rec->getWeather_StationPtrVector();
  182|      1|    EXPECT_EQ(v.size(),1);
  183|      1|    test_v.clear();
  184|      1|    test_v.push_back("433MHz");
  185|      1|    test_v.push_back("add");
  186|      1|    test_v.push_back("WEATHER");
  187|      1|    test_v.push_back("first");
  188|      1|    test_v.push_back("1234");
  189|      1|
  190|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  191|      1|    v = test_rec->getWeather_StationPtrVector();
  192|      1|    EXPECT_EQ(v.size(),1);
  193|      1|    test_v.clear();
  194|      1|    test_v.push_back("433MHz");
  195|      1|    test_v.push_back("show");
  196|      1|    test_v.push_back("all");
  197|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  198|      1|}
  199|       |
  200|       |TEST_F(command433MHz_Class_fixture, missingParamiter_addSwitch)
  201|      1|{
  202|      1|    test_v.push_back("show");
  203|      1|    test_v.push_back("all");
  204|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  205|      1|    auto v = test_rec->getSwitchPointerVector();
  206|      1|    EXPECT_EQ(v.size(),5);
  207|      1|    test_v.clear();
  208|      1|    test_v.push_back("433MHz");
  209|      1|    test_v.push_back("add");
  210|      1|    test_v.push_back("SWITCH");
  211|      1|    test_v.push_back("Abc");
  212|      1|    test_v.push_back("1234");
  213|      1|    test_v.push_back("onCode_A");
  214|      1|    test_v.push_back("ofCode_A");
  215|      1|    test_v.push_back("on15sec_A");
  216|      1|    std::string result = test_command_433MHz->execute(test_v,&test_my_data);
  217|      2|    EXPECT_THAT(result, testing::HasSubstr("mising paramiter")) << "nie ma bledu";
  218|      1|    v = test_rec->getSwitchPointerVector();
  219|      1|    EXPECT_EQ(v.size(),5);
  220|      1|    test_v.clear();
  221|      1|    test_v.push_back("433MHz");
  222|      1|    test_v.push_back("show");
  223|      1|    test_v.push_back("all");
  224|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  225|      1|}
  226|       |\
  227|       |TEST_F(command433MHz_Class_fixture, add_wrongType_addSwitch)
  228|      1|{
  229|      1|    test_v.push_back("show");
  230|      1|    test_v.push_back("all");
  231|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  232|      1|    auto v = test_rec->getSwitchPointerVector();
  233|      1|    EXPECT_EQ(v.size(),5);
  234|      1|    test_v.clear();
  235|      1|    test_v.push_back("433MHz");
  236|      1|    test_v.push_back("add");
  237|      1|    test_v.push_back("FAKE"); //here is wrong type
  238|      1|    test_v.push_back("Abc");
  239|      1|    test_v.push_back("1234");
  240|      1|    test_v.push_back("onCode_A");
  241|      1|    test_v.push_back("ofCode_A");
  242|      1|    test_v.push_back("on15sec_A");
  243|      1|    test_v.push_back("sunrise_A");
  244|      1|    test_v.push_back("sunset_A");
  245|      1|    test_v.push_back("lock_A");
  246|      1|    test_v.push_back("unlock_A");
  247|      1|    std::string result = test_command_433MHz->execute(test_v,&test_my_data);
  248|      1|    EXPECT_THAT(result, testing::HasSubstr("wrong type"));
  249|      1|    std::cout << "wynik testu: " << result << std::endl;
  250|      1|    v = test_rec->getSwitchPointerVector();
  251|      1|    EXPECT_EQ(v.size(),5);
  252|      1|    test_v.clear();
  253|      1|    test_v.push_back("433MHz");
  254|      1|    test_v.push_back("show");
  255|      1|    test_v.push_back("all");
  256|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  257|      1|}
  258|       |
  259|       |TEST_F(command433MHz_Class_fixture, add_wrongID_addSwitch)
  260|      1|{
  261|      1|    test_v.push_back("show");
  262|      1|    test_v.push_back("all");
  263|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  264|      1|    auto v = test_rec->getSwitchPointerVector();
  265|      1|    EXPECT_EQ(v.size(),5);
  266|      1|    test_v.clear();
  267|      1|    test_v.push_back("433MHz");
  268|      1|    test_v.push_back("add");
  269|      1|    test_v.push_back("SWITCH");
  270|      1|    test_v.push_back("Abc");
  271|      1|    test_v.push_back("dummy"); //here is wrong ID
  272|      1|    test_v.push_back("onCode_A");
  273|      1|    test_v.push_back("ofCode_A");
  274|      1|    test_v.push_back("on15sec_A");
  275|      1|    test_v.push_back("sunrise_A");
  276|      1|    test_v.push_back("sunset_A");
  277|      1|    test_v.push_back("lock_A");
  278|      1|    test_v.push_back("unlock_A");
  279|      1|    std::string result = test_command_433MHz->execute(test_v,&test_my_data);
  280|      1|    std::cout << "wynik testu: " << result << std::endl;
  281|      1|    EXPECT_THAT(result, testing::HasSubstr("wrong ID"));
  282|      1|    v = test_rec->getSwitchPointerVector();
  283|      1|    EXPECT_EQ(v.size(),5);
  284|      1|    test_v.clear();
  285|      1|    test_v.push_back("433MHz");
  286|      1|    test_v.push_back("show");
  287|      1|    test_v.push_back("all");
  288|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  289|      1|}
  290|       |
  291|       |TEST_F(command433MHz_Class_fixture, show_config)
  292|      1|{
  293|      1|    test_v.push_back("show");
  294|      1|    test_v.push_back("config");
  295|      1|    auto retStr = test_command_433MHz->execute(test_v,&test_my_data);
  296|      1|    EXPECT_GT(retStr.size(), 2210);
  297|      1|}
  298|       |
  299|       |TEST_F(command433MHz_Class_fixture, show_switch)
  300|      1|{
  301|      1|    test_v.push_back("show");
  302|      1|    test_v.push_back("all");
  303|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) << std::endl;
  304|      1|    auto v = test_rec->getSwitchPointerVector();
  305|      1|    EXPECT_EQ(v.size(),5);
  306|      1|    test_v.clear();
  307|      1|    test_v.push_back("433MHz");
  308|      1|    test_v.push_back("show");
  309|      1|    test_v.push_back("switch");
  310|      1|
  311|      1|    std::string result = test_command_433MHz->execute(test_v,&test_my_data);
  312|      1|    std::cout << "wynik testu: " << result << std::endl;
  313|      1|    EXPECT_THAT(result, testing::HasSubstr("UNDEFINE"));
  314|      1|    v = test_rec->getSwitchPointerVector();
  315|      1|    EXPECT_EQ(v.size(),5);
  316|      1|    test_v.clear();
  317|      1|    test_v.push_back("433MHz");
  318|      1|    test_v.push_back("show");
  319|      1|    test_v.push_back("all");
  320|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) <<std::endl;
  321|      1|}
  322|       |
  323|       |TEST_F(command433MHz_Class_fixture, show_aether)
  324|      1|{
  325|      1|    test_my_data.main_RFLink->rflinkMAP["kk"].msg = "astro";
  326|      1|    test_my_data.main_RFLink->rflinkMAP["kk"].m_counter = 99;
  327|      1|    test_my_data.main_RFLink->rflinkMAP["jj"].msg = "lock";
  328|      1|    test_my_data.main_RFLink->rflinkMAP["jj"].m_counter = 155;
  329|      1|    test_v.push_back("show");
  330|      1|    test_v.push_back("all");
  331|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) <<std::endl;
  332|      1|    auto v = test_rec->getSwitchPointerVector();
  333|      1|    EXPECT_EQ(v.size(),5);
  334|      1|    test_v.clear();
  335|      1|    test_v.push_back("433MHz");
  336|      1|    test_v.push_back("show");
  337|      1|    test_v.push_back("aether");
  338|      1|
  339|      1|    std::string result = test_command_433MHz->execute(test_v,&test_my_data);
  340|      1|    std::cout << "wynik testu: " << result << std::endl;
  341|      1|    EXPECT_THAT(result, testing::HasSubstr("astro"));
  342|      1|    EXPECT_THAT(result, testing::HasSubstr("lock"));
  343|      1|    EXPECT_THAT(result, testing::HasSubstr("99"));
  344|      1|    EXPECT_THAT(result, testing::HasSubstr("155"));
  345|      1|    v = test_rec->getSwitchPointerVector();
  346|      1|    EXPECT_EQ(v.size(),5);
  347|      1|    test_v.clear();
  348|      1|}
  349|       |
  350|       |TEST_F(command433MHz_Class_fixture, switchRF433)
  351|      1|{
  352|      1|    test_v.push_back("show");
  353|      1|    test_v.push_back("all");
  354|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) <<std::endl;
  355|      1|    auto v = test_rec->getSwitchPointerVector();
  356|      1|    EXPECT_EQ(v.size(),5);
  357|      1|    /////////////////////////////// ON
  358|      1|    test_v.clear();
  359|      1|    test_v.push_back("433MHz");
  360|      1|    test_v.push_back("switch");
  361|      1|    test_v.push_back("B");
  362|      1|    test_v.push_back("ON");
  363|      1|    test_command_433MHz->execute(test_v,&test_my_data);
  364|      1|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("B")->getState(), STATE::ON);
  365|      1|    ////////////////////////////// OFF
  366|      1|    test_v.clear();
  367|      1|    test_v.push_back("433MHz");
  368|      1|    test_v.push_back("switch");
  369|      1|    test_v.push_back("B");
  370|      1|    test_v.push_back("OFF");
  371|      1|    test_command_433MHz->execute(test_v,&test_my_data);
  372|      1|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("B")->getState(), STATE::OFF);
  373|      1|    ////////////////////////////// 15s
  374|      1|    test_v.clear();
  375|      1|    test_v.push_back("433MHz");
  376|      1|    test_v.push_back("switch");
  377|      1|    test_v.push_back("B");
  378|      1|    test_v.push_back("15s");
  379|      1|    test_command_433MHz->execute(test_v,&test_my_data);
  380|      1|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("B")->getState(), STATE::TEMPORARY);
  381|      1|    ////////////////////////////// unknown paramiter
  382|      1|    test_v.clear();
  383|      1|    test_v.push_back("433MHz");
  384|      1|    test_v.push_back("switch");
  385|      1|    test_v.push_back("B");
  386|      1|    test_v.push_back("fake");
  387|      1|    std::string result = test_command_433MHz->execute(test_v,&test_my_data);
  388|      1|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("B")->getState(), STATE::TEMPORARY);
  389|      1|    EXPECT_THAT(result, testing::HasSubstr("fake"));
  390|      1|    ///////////////////////////// fake switch
  391|      1|    test_v.clear();
  392|      1|    test_v.push_back("433MHz");
  393|      1|    test_v.push_back("switch");
  394|      1|    test_v.push_back("B_fake");
  395|      1|    test_v.push_back("fake");
  396|      1|
  397|      1|    result = test_command_433MHz->execute(test_v,&test_my_data);
  398|      1|    EXPECT_THAT(result, testing::HasSubstr("not found"));
  399|      1|    v = test_rec->getSwitchPointerVector();
  400|      1|    EXPECT_EQ(v.size(),5);
  401|      1|    test_v.clear();
  402|      1|}
  403|       |
  404|       |
  405|       |TEST_F(command433MHz_Class_fixture, sendRF433)
  406|      1|{
  407|      1|    test_v.push_back("show");
  408|      1|    test_v.push_back("all");
  409|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) <<std::endl;
  410|      1|    auto v = test_rec->getSwitchPointerVector();
  411|      1|    EXPECT_EQ(v.size(),5);
  412|      1|    test_v.clear();
  413|      1|    test_v.push_back("433MHz");
  414|      1|    test_v.push_back("send");
  415|      1|    test_v.push_back("fake");
  416|      1|
  417|      1|    std::string retStr = test_command_433MHz->execute(test_v,&test_my_data);
  418|      1|    EXPECT_THAT(retStr, testing::HasSubstr("sended"));
  419|      1|}
  420|       |
  421|       |TEST_F(command433MHz_Class_fixture, fakeSwitchON)
  422|      1|{
  423|      1|    test_v.push_back("show");
  424|      1|    test_v.push_back("all");
  425|      1|    std::cout << test_command_433MHz->execute(test_v,&test_my_data) <<std::endl;
  426|      1|    auto v = test_rec->getSwitchPointerVector();
  427|      1|    EXPECT_EQ(v.size(),5);
  428|      1|    test_v.clear();
  429|      1|    test_v.push_back("433MHz");
  430|      1|    test_v.push_back("switch");
  431|      1|    test_v.push_back("ALARM-fake");
  432|      1|    test_v.push_back("ON");
  433|      1|
  434|      1|    std::string retStr = test_command_433MHz->execute(test_v,&test_my_data);
  435|      1|    EXPECT_THAT(retStr, testing::HasSubstr(" not found ALARM-fake"));
  436|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_ardu_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "../command_ardu.h"
    4|       |#include "../../../functions/functions.h"
    5|       |#include "../../../RADIO_433_eq/radio_433_eq.h"
    6|       |#include "../../../433MHz/RFLink/rflinkhandler.h"
    7|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    8|       |
    9|       |class commandArdu_Class_fixture : public iDomTOOLS_ClassTest
   10|       |{
   11|       |public:
   12|     12|    commandArdu_Class_fixture() {
   13|     12|        this->test_RFLink = std::nullptr_t();
   14|     12|        this->test_ardu = std::nullptr_t();
   15|     12|    }
   16|       |
   17|       |protected:
   18|       |    std::vector<std::string> test_v= {"ardu"};
   19|       |    RFLinkHandler* test_RFLink;
   20|       |    blockQueue test_q;
   21|       |    command_ardu* test_ardu;
   22|       |    void SetUp() final
   23|     12|    {
   24|     12|        iDomTOOLS_ClassTest::SetUp();
   25|     12|
   26|     12|        test_q._clearAll();
   27|     12|
   28|     12|        test_RFLink = new RFLinkHandler(&test_my_data);
   29|     12|        test_ardu = new command_ardu("ardu", &test_my_data);
   30|     12|        test_my_data.main_RFLink = test_RFLink;
   31|     12|        test_v.push_back("433MHz");
   32|     12|        std::cout << "commandArdu_Class_fixture SetUp" << std::endl;
   33|     12|    }
   34|       |
   35|       |    void TearDown() final
   36|     12|    {
   37|     12|        iDomTOOLS_ClassTest::TearDown();
   38|     12|        delete test_RFLink;
   39|     12|        delete test_ardu;
   40|     12|        std::cout << "commandArdu_Class_fixture TearDown" << std::endl;
   41|     12|    }
   42|       |
   43|       |};
   44|       |
   45|       |TEST_F(commandArdu_Class_fixture, wrongMSGformat)
   46|      1|{
   47|      1|    test_v.push_back("EV1527;ID=01e7be;SWITCH=01;CMD=ON;"); // wronh msg format missing 20;
   48|      1|    EXPECT_THROW(test_ardu->execute(test_v, &test_my_data), WRONG_FORMAT);
   49|      1|}
   50|       |
   51|       |TEST_F(commandArdu_Class_fixture, UnlockHome)
   52|      1|{
   53|      1|    test_idomTOOLS->lockHome();
   54|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::LOCK);
   55|      1|
   56|      1|    test_v.push_back("20;EV1527;ID=01e7be;SWITCH=01;CMD=ON;");
   57|      1|    test_ardu->execute(test_v, &test_my_data);
   58|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNLOCK);
   59|      1|
   60|      1|    EXPECT_EQ(test_q._size(),1);
   61|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
   62|      1|    EXPECT_EQ(test_q._size(),0);
   63|      1|}
   64|       |
   65|       |TEST_F(commandArdu_Class_fixture, LockHome)
   66|      1|{
   67|      1|    test_idomTOOLS->unlockHome();
   68|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNLOCK);
   69|      1|
   70|      1|    test_v.push_back("20;EV1527;ID=01e7be;SWITCH=01;CMD=ON;");
   71|      4|    for(auto i = 0; i < 3; ++i){
   72|      3|        test_ardu->execute(test_v, &test_my_data);
   73|      3|    }
   74|      1|
   75|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::LOCK);
   76|      1|    EXPECT_EQ(test_q._size(),1);
   77|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP);
   78|      1|    EXPECT_EQ(test_q._size(),0);
   79|      1|}
   80|       |
   81|       |TEST_F(commandArdu_Class_fixture, LockHome1unlockHome2)
   82|      1|{
   83|      1|    test_idomTOOLS->lockHome();
   84|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::LOCK);
   85|      1|
   86|      1|    ////////////////////////// unlock locker-main
   87|      1|    test_v.push_back("20;EV1527;ID=01e7be;SWITCH=01;CMD=ON;");
   88|      1|
   89|      1|    test_ardu->execute(test_v, &test_my_data);
   90|      1|
   91|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNLOCK);
   92|      1|    EXPECT_EQ(test_q._size(),1);
   93|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
   94|      1|    EXPECT_EQ(test_q._size(),0);
   95|      1|
   96|      1|    ////////////////////////// lock locker-2
   97|      1|    test_v.push_back("20;EV1527;ID=123456789;SWITCH=01;CMD=ON;");
   98|      4|    for(auto i = 0; i < 3; ++i){
   99|      3|        test_ardu->execute(test_v, &test_my_data);
  100|      3|    }
  101|      1|
  102|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::LOCK);
  103|      1|    EXPECT_EQ(test_q._size(),1);
  104|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP);
  105|      1|    EXPECT_EQ(test_q._size(),0);
  106|      1|}
  107|       |
  108|       |TEST_F(commandArdu_Class_fixture, playMusic)
  109|      1|{
  110|      1|    test_idomTOOLS->unlockHome();
  111|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNLOCK);
  112|      1|    EXPECT_EQ(test_status.getObjectState("listwa"),STATE::UNKNOWN);
  113|      1|    test_status.addObject("music",STATE::STOP);
  114|      1|
  115|      1|    test_v.push_back("20;EV1527;ID=01e7be;SWITCH=01;CMD=ON;");
  116|      1|
  117|      1|    test_ardu->execute(test_v, &test_my_data);
  118|      1|
  119|      1|    EXPECT_EQ(test_q._size(),1);
  120|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
  121|      1|    EXPECT_EQ(test_q._size(),0);
  122|      1|    EXPECT_EQ(test_status.getObjectState("listwa"),STATE::ON);
  123|      1|}
  124|       |
  125|       |TEST_F(commandArdu_Class_fixture, stopMusic)
  126|      1|{
  127|      1|    test_idomTOOLS->unlockHome();
  128|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNLOCK);
  129|      1|    EXPECT_EQ(test_status.getObjectState("listwa"),STATE::UNKNOWN);
  130|      1|    test_status.addObject("music",STATE::PLAY);
  131|      1|
  132|      1|    test_v.push_back("20;EV1527;ID=01e7be;SWITCH=01;CMD=ON;");
  133|      1|
  134|      1|    test_ardu->execute(test_v, &test_my_data);
  135|      1|
  136|      1|    EXPECT_EQ(test_q._size(),1);
  137|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP);
  138|      1|    EXPECT_EQ(test_q._size(),0);
  139|      1|    EXPECT_EQ(test_status.getObjectState("listwa"),STATE::OFF);
  140|      1|}
  141|       |
  142|       |TEST_F(commandArdu_Class_fixture, weatherStationTemp)
  143|      1|{
  144|      1|    test_v.push_back("20;2A;LaCrosse;ID=0704;TEMP=8043;");
  145|      1|    test_ardu->execute(test_v, &test_my_data);
  146|      1|    RADIO_WEATHER_STATION* st = static_cast<RADIO_WEATHER_STATION*>(test_my_data.main_REC->getEqPointer("first"));
  147|      1|    EXPECT_DOUBLE_EQ(-6.7, st->data.getTemperature() );
  148|      1|    EXPECT_DOUBLE_EQ(0, st->data.getHumidity() );
  149|      1|    test_v[2] = "20;35;LaCrosse;ID=0704;HUM=42;";
  150|      1|    test_ardu->execute(test_v, &test_my_data);
  151|      1|    EXPECT_DOUBLE_EQ(42, st->data.getHumidity() );
  152|      1|    test_v[2] = "20;2A;LaCrosse;ID=0704;TEMP=0000;";
  153|      1|    test_ardu->execute(test_v, &test_my_data);
  154|      1|    EXPECT_DOUBLE_EQ(0, st->data.getTemperature() );
  155|      1|}
  156|       |
  157|       |TEST_F(commandArdu_Class_fixture, command_ardu_show)
  158|      1|{
  159|      1|    test_v.pop_back();
  160|      1|    test_v.push_back("show");
  161|      1|    std::string retStr = test_ardu->execute(test_v, &test_my_data);
  162|      1|    EXPECT_THAT(retStr, testing::HasSubstr("data: 0"));
  163|      1|    EXPECT_THAT(retStr, testing::HasSubstr("temperature= 0c"));
  164|      1|}
  165|       |
  166|       |TEST_F(commandArdu_Class_fixture, command_ardu_help)
  167|      1|{
  168|      1|    command_ardu test_Command_ardu ("ardu");
  169|      1|
  170|      1|    std::string retStr = test_Command_ardu.help();
  171|      1|    EXPECT_STREQ(retStr.c_str(), " only for internal usege\n");
  172|      1|}
  173|       |
  174|       |TEST_F(commandArdu_Class_fixture, command_ardu_433MHz_throw)
  175|      1|{
  176|      1|    test_v.push_back("fake_msg");
  177|      1|    std::string retStr = test_ardu->execute(test_v, &test_my_data);
  178|      1|
  179|      1|    EXPECT_THAT(retStr, testing::HasSubstr("for"));
  180|      1|}
  181|       |
  182|       |TEST_F(commandArdu_Class_fixture, command_ardu_433MHz_OK)
  183|      1|{
  184|      1|    test_v.push_back("20;53;OK;");
  185|      1|    test_ardu->execute(test_v, &test_my_data);
  186|      1|    EXPECT_NE(test_my_data.main_RFLink->okTime, 0);
  187|      1|    EXPECT_EQ(test_my_data.main_RFLink->okTime, Clock::getUnixTime());
  188|      1|}
  189|       |
  190|       |TEST_F(commandArdu_Class_fixture, command_ardu_433MHz_PING)
  191|      1|{
  192|      1|    test_v.push_back("20;99;PONG;");
  193|      1|    test_ardu->execute(test_v, &test_my_data);
  194|      1|    EXPECT_NE(test_my_data.main_RFLink->pingTime, 0);
  195|      1|    EXPECT_EQ(test_my_data.main_RFLink->pingTime, Clock::getUnixTime());
  196|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_big_BT.cpp:
    1|       |#include "../command_big.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_big_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_big_Class_fixture()
    8|      1|    {
    9|      1|
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_big> test_command_big;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      1|    {
   18|      1|        iDomTOOLS_ClassTest::SetUp();
   19|      1|        test_command_big = std::make_unique <command_big> ("big");
   20|      1|    }
   21|       |
   22|       |    void TearDown() final
   23|      1|    {
   24|      1|        iDomTOOLS_ClassTest::TearDown();
   25|      1|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_big_Class_fixture, main)
   29|      1|{
   30|      1|    int s = 55;
   31|      1|    test_v.push_back("big");
   32|      1|    test_v.push_back(std::to_string(s));
   33|      1|    auto ret = test_command_big->execute(test_v,&test_my_data);
   34|      1|    EXPECT_EQ(ret.size(),s);
   35|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_clock_BT.cpp:
    1|       |#include "../command_clock.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_clock_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_clock_Class_fixture()
    8|      2|    {
    9|      2|
   10|      2|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_clock> test_command_clock;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      2|    {
   18|      2|        iDomTOOLS_ClassTest::SetUp();
   19|      2|        test_command_clock = std::make_unique <command_clock> ("clock");
   20|      2|    }
   21|       |
   22|       |    void TearDown() final
   23|      2|    {
   24|      2|        iDomTOOLS_ClassTest::TearDown();
   25|      2|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_clock_Class_fixture, main)
   29|      1|{
   30|      1|    test_v.push_back("clock");
   31|      1|    test_v.push_back("1234");
   32|      1|    auto ret = test_command_clock->execute(test_v,&test_my_data);
   33|      1|    EXPECT_STREQ(ret.c_str(),"clock set return test");
   34|      1|}
   35|       |
   36|       |TEST_F(command_clock_Class_fixture, missingParamiter)
   37|      1|{
   38|      1|    test_v.push_back("clock");
   39|      1|    auto ret = test_command_clock->execute(test_v,&test_my_data);
   40|      1|    EXPECT_STREQ(ret.c_str(),"can not set clock");
   41|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_cmd_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "../command_cmd.h"
    4|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    5|       |
    6|       |class command_cmd_Class_fixture : public iDomTOOLS_ClassTest
    7|       |{
    8|       |public:
    9|       |    command_cmd_Class_fixture()
   10|      2|    {
   11|      2|
   12|      2|    }
   13|       |
   14|       |protected:
   15|       |    std::unique_ptr<command_cmd> test_command_cmd;
   16|       |
   17|       |    std::vector<std::string> test_v;
   18|       |    void SetUp() final
   19|      2|    {
   20|      2|        iDomTOOLS_ClassTest::SetUp();
   21|      2|        test_command_cmd = std::make_unique <command_cmd> ("cmd");
   22|      2|    }
   23|       |
   24|       |    void TearDown() final
   25|      2|    {
   26|      2|        iDomTOOLS_ClassTest::TearDown();
   27|      2|    }
   28|       |};
   29|       |
   30|       |TEST_F(command_cmd_Class_fixture, main)
   31|      1|{
   32|      1|    test_my_data.server_settings->omxplayerFile = "/mnt/ramdisk/cmd";
   33|      1|    test_v.push_back("cmd");
   34|      1|    auto ret = test_command_cmd->execute(test_v,&test_my_data);
   35|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("fifo file contain:"));
   36|      1|}
   37|       |
   38|       |TEST_F(command_cmd_Class_fixture, wrongParamiter)
   39|      1|{
   40|      1|    test_v.push_back("cmd");
   41|      1|    test_v.push_back("1234");
   42|      1|    auto ret = test_command_cmd->execute(test_v,&test_my_data);
   43|      1|    EXPECT_STREQ(ret.c_str(),"error: unknown parameter: 1234");
   44|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_event_BT.cpp:
    1|       |#include "../command_event.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_event_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_event_Class_fixture()
    8|      6|    {
    9|      6|
   10|      6|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_event> test_command_event;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      6|    {
   18|      6|        iDomTOOLS_ClassTest::SetUp();
   19|      6|        test_command_event = std::make_unique <command_event> ("event");
   20|      6|    }
   21|       |
   22|       |    void TearDown() final
   23|      6|    {
   24|      6|        iDomTOOLS_ClassTest::TearDown();
   25|      6|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_event_Class_fixture, eventList)
   29|      1|{
   30|      1|    test_v.push_back("event");
   31|      1|    auto ret = test_command_event->execute(test_v,&test_my_data);
   32|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("pilot"));
   33|      1|}
   34|       |
   35|       |TEST_F(command_event_Class_fixture, eventPilot)
   36|      1|{
   37|      1|    test_v.push_back("event");
   38|      1|    test_v.push_back("pilot");
   39|      1|    auto ret = test_command_event->execute(test_v,&test_my_data);
   40|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("pilot"));
   41|      1|}
   42|       |
   43|       |TEST_F(command_event_Class_fixture, clearEventPilot)
   44|      1|{
   45|      1|    test_my_data.myEventHandler.run("pilot")->addEvent("pilot test");
   46|      1|    EXPECT_EQ(test_my_data.myEventHandler.run("pilot")->howManyEvent(),1);
   47|      1|    test_v.push_back("event");
   48|      1|    test_v.push_back("pilot");
   49|      1|    test_v.push_back("clear");
   50|      1|    test_command_event->execute(test_v,&test_my_data);
   51|      1|    EXPECT_EQ(test_my_data.myEventHandler.run("pilot")->howManyEvent(),0);
   52|      1|}
   53|       |
   54|       |TEST_F(command_event_Class_fixture, clearsSomeEventPilot)
   55|      1|{
   56|     11|    for(int i = 0; i<10; ++i){
   57|     10|    test_my_data.myEventHandler.run("pilot")->addEvent("pilot test");
   58|     10|    }
   59|      1|    EXPECT_EQ(test_my_data.myEventHandler.run("pilot")->howManyEvent(),10);
   60|      1|    test_v.push_back("event");
   61|      1|    test_v.push_back("pilot");
   62|      1|    test_v.push_back("clear");
   63|      1|    test_v.push_back("3");
   64|      1|    test_v.push_back("6");
   65|      1|    test_command_event->execute(test_v,&test_my_data);
   66|      1|    EXPECT_EQ(test_my_data.myEventHandler.run("pilot")->howManyEvent(),7);
   67|      1|}
   68|       |
   69|       |TEST_F(command_event_Class_fixture, intensityEventPilot)
   70|      1|{
   71|      1|    test_my_data.myEventHandler.run("pilot")->addEvent("pilot test");
   72|      1|    EXPECT_EQ(test_my_data.myEventHandler.run("pilot")->howManyEvent(),1);
   73|      1|    test_v.push_back("event");
   74|      1|    test_v.push_back("pilot");
   75|      1|    test_v.push_back("intensity");
   76|      1|    auto ret = test_command_event->execute(test_v,&test_my_data);
   77|      1|    EXPECT_STREQ(ret.c_str(),"event pilot 1 intensity per last minute!");
   78|      1|    EXPECT_EQ(test_my_data.myEventHandler.run("pilot")->howManyEvent(),1);
   79|      1|}
   80|       |
   81|       |TEST_F(command_event_Class_fixture, wrongParamiter)
   82|      1|{
   83|      1|    test_v.push_back("event");
   84|      1|    test_v.push_back("pilot");
   85|      1|    test_v.push_back("clear");
   86|      1|    test_v.push_back("3");
   87|      1|    test_v.push_back("6");
   88|      1|    test_v.push_back("clear");
   89|      1|    test_v.push_back("3");
   90|      1|    test_v.push_back("6");
   91|      1|    test_v.push_back("clear");
   92|      1|    test_v.push_back("3");
   93|      1|    test_v.push_back("6");
   94|      1|    auto ret = test_command_event->execute(test_v,&test_my_data);
   95|      1|    EXPECT_THAT(ret,::testing::HasSubstr("event"));
   96|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_exit_BT.cpp:
    1|       |#include "../commandexit.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_exit_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_exit_Class_fixture()
    8|      1|    {
    9|      1|
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<commandEXIT> test_command_exit;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      1|    {
   18|      1|        iDomTOOLS_ClassTest::SetUp();
   19|      1|        test_command_exit = std::make_unique <commandEXIT> ("exit");
   20|      1|    }
   21|       |
   22|       |    void TearDown() final
   23|      1|    {
   24|      1|        iDomTOOLS_ClassTest::TearDown();
   25|      1|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_exit_Class_fixture, main)
   29|      1|{
   30|      1|    test_v.push_back("exit");
   31|      1|    auto ret = test_command_exit->execute(test_v,&test_my_data);
   32|      1|    EXPECT_STREQ(ret.c_str(),"\nEND.\n");
   33|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_hello_BT.cpp:
    1|       |#include "../command_hello.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_hello_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_hello_Class_fixture()
    8|      1|    {
    9|      1|
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_hello> test_command_hello;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      1|    {
   18|      1|        iDomTOOLS_ClassTest::SetUp();
   19|      1|        test_command_hello = std::make_unique <command_hello> ("hello");
   20|      1|    }
   21|       |
   22|       |    void TearDown() final
   23|      1|    {
   24|      1|        iDomTOOLS_ClassTest::TearDown();
   25|      1|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_hello_Class_fixture, main)
   29|      1|{
   30|      1|    test_v.push_back("hello");
   31|      1|    auto ret = test_command_hello->execute(test_v,&test_my_data);
   32|      1|    EXPECT_STREQ(ret.c_str(),"\nHI You User!\n");
   33|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_help_BT.cpp:
    1|       |#include "../command_help.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_help_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_help_Class_fixture()
    8|      3|    {
    9|      3|
   10|      3|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_help> test_command_help;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      3|    {
   18|      3|        iDomTOOLS_ClassTest::SetUp();
   19|      3|        test_command_help = std::make_unique <command_help> ("help");
   20|      3|    }
   21|       |
   22|       |    void TearDown() final
   23|      3|    {
   24|      3|        iDomTOOLS_ClassTest::TearDown();
   25|      3|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_help_Class_fixture, all)
   29|      1|{
   30|      1|    std::unique_ptr<commandHandlerRoot> chr = std::make_unique<commandHandlerRoot>(&test_my_data);
   31|      1|    test_v.push_back("help");
   32|      1|    auto size = test_command_help->execute(test_v,&test_my_data).size();
   33|      1|    EXPECT_EQ(size,4424);
   34|      1|}
   35|       |
   36|       |TEST_F(command_help_Class_fixture, one)
   37|      1|{
   38|      1|    std::unique_ptr<commandHandlerRoot> chr = std::make_unique<commandHandlerRoot>(&test_my_data);
   39|      1|    test_v.push_back("help");
   40|      1|    test_v.push_back("ok");
   41|      1|    auto ret = test_command_help->execute(test_v,&test_my_data);
   42|      1|    EXPECT_STREQ(ret.c_str(),"ok - confirmation msg server response: END \n");
   43|      1|}
   44|       |
   45|       |TEST_F(command_help_Class_fixture, nonExistingCommand)
   46|      1|{
   47|      1|    std::unique_ptr<commandHandlerRoot> chr = std::make_unique<commandHandlerRoot>(&test_my_data);
   48|      1|    test_v.push_back("help");
   49|      1|    test_v.push_back("okdoki");
   50|      1|    auto ret = test_command_help->execute(test_v,&test_my_data);
   51|      1|    EXPECT_STREQ(ret.c_str(),"unknown command: okdoki help note not found");
   52|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_idom_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_idom.h"
    4|       |#include "../../../functions/functions.h"
    5|       |#include "../../../RADIO_433_eq/radio_433_eq.h"
    6|       |#include "../../../433MHz/RFLink/rflinkhandler.h"
    7|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    8|       |#include "../../../thread_functions/iDom_thread.h"
    9|       |
   10|       |class commandiDom_Class_fixture : public iDomTOOLS_ClassTest
   11|       |{
   12|       |public:
   13|       |    commandiDom_Class_fixture()
   14|     20|    {
   15|     20|        this->test_command_iDom = std::nullptr_t();
   16|     20|        this->test_RFLink = std::nullptr_t();
   17|     20|    }
   18|       |
   19|       |protected:
   20|       |    std::vector<std::string> test_v= {"iDom"};
   21|       |    RFLinkHandler* test_RFLink;
   22|       |    blockQueue test_q;
   23|       |    command_iDom* test_command_iDom;
   24|       |
   25|       |    void SetUp() final
   26|     20|    {
   27|     20|        iDomTOOLS_ClassTest::SetUp();
   28|     20|
   29|     20|        test_q._clearAll();
   30|     20|
   31|     20|        test_RFLink = new RFLinkHandler(&test_my_data);
   32|     20|        test_command_iDom = new command_iDom("iDom");
   33|     20|        test_my_data.main_RFLink = test_RFLink;
   34|     20|        std::cout << "commandiDom_Class_fixture SetUp" << std::endl;
   35|     20|    }
   36|       |
   37|       |    void TearDown() final
   38|     20|    {
   39|     20|        iDomTOOLS_ClassTest::TearDown();
   40|     20|        delete test_RFLink;
   41|     20|        delete test_command_iDom;
   42|     20|        std::cout << "commandiDom_Class_fixture TearDown" << std::endl;
   43|     20|    }
   44|       |};
   45|       |
   46|       |TEST_F(commandiDom_Class_fixture, getName)
   47|      1|{
   48|      1|    EXPECT_THAT(test_command_iDom->getCommandName(),testing::HasSubstr("iDom"));
   49|      1|}
   50|       |
   51|       |TEST_F(commandiDom_Class_fixture, help)
   52|      1|{
   53|      1|    std::string helpStr = test_command_iDom->help();
   54|      1|    EXPECT_THAT(helpStr,testing::HasSubstr("iDom"));
   55|      1|    std::cout << "test " << helpStr.size() << std::endl;
   56|      1|    EXPECT_EQ(helpStr.size(),1189);
   57|      1|}
   58|       |
   59|       |TEST_F(commandiDom_Class_fixture, less_param)
   60|      1|{
   61|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
   62|      1|    EXPECT_THAT(retStr,testing::HasSubstr("need parameter!"));
   63|      1|}
   64|       |TEST_F(commandiDom_Class_fixture, unknonw_para)
   65|      1|{
   66|      1|    test_v.push_back("fake");
   67|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
   68|      1|    EXPECT_THAT(retStr,testing::HasSubstr("iDom - unknown parameter:"));
   69|      1|}
   70|       |
   71|       |TEST_F(commandiDom_Class_fixture, speakers)
   72|      1|{
   73|      1|    test_my_data.main_iDomTools->unlockHome();
   74|      1|    //////////////// fake command
   75|      1|    test_v.push_back("speakers");
   76|      1|    test_v.push_back("fake");
   77|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
   78|      1|    EXPECT_THAT(retStr,testing::HasSubstr("unknow speakers action: fake"));
   79|      1|    ///////////////// ON
   80|      1|    test_my_data.main_iDomStatus->setObjectState("speakers",STATE::UNDEFINE);
   81|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("speakers"), STATE::UNDEFINE);
   82|      1|    test_v.clear();
   83|      1|    test_v.push_back("iDom");
   84|      1|    test_v.push_back("speakers");
   85|      1|    test_v.push_back("ON");
   86|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
   87|      1|    EXPECT_THAT(retStr,testing::HasSubstr("speakers ON"));
   88|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("speakers"), STATE::ON);
   89|      1|    ///////////////// OFF
   90|      1|    test_v.clear();
   91|      1|    test_v.push_back("iDom");
   92|      1|    test_v.push_back("speakers");
   93|      1|    test_v.push_back("OFF");
   94|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
   95|      1|    EXPECT_THAT(retStr,testing::HasSubstr("speakers OFF"));
   96|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("speakers"), STATE::OFF);
   97|      1|}
   98|       |
   99|       |TEST_F(commandiDom_Class_fixture, sunset_sunrise)
  100|      1|{
  101|      1|    test_v.clear();
  102|      1|    test_v.push_back("iDom");
  103|      1|    test_v.push_back("sunset");
  104|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  105|      1|    std::cout << "retString: " << retStr << std::endl;
  106|      1|    EXPECT_THAT(retStr,testing::HasSubstr("Sunset time:"));
  107|      1|
  108|      1|    test_v.clear();
  109|      1|    test_v.push_back("iDom");
  110|      1|    test_v.push_back("sunrise");
  111|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
  112|      1|    std::cout << "retString: " << retStr << std::endl;
  113|      1|    EXPECT_THAT(retStr,testing::HasSubstr("Sunrise time:"));
  114|      1|}
  115|       |
  116|       |TEST_F(commandiDom_Class_fixture, day_lenght)
  117|      1|{
  118|      1|    test_v.clear();
  119|      1|    test_v.push_back("iDom");
  120|      1|    test_v.push_back("day");
  121|      1|    test_v.push_back("lenght");
  122|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  123|      1|    std::cout << "retString: " << retStr << std::endl;
  124|      1|    EXPECT_THAT(retStr,testing::HasSubstr("Day Lenght :"));
  125|      1|}
  126|       |
  127|       |TEST_F(commandiDom_Class_fixture, sun)
  128|      1|{
  129|      1|    test_v.clear();
  130|      1|    test_v.push_back("iDom");
  131|      1|    test_v.push_back("sun");
  132|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  133|      1|    std::cout << "retString: " << retStr << std::endl;
  134|      1|    EXPECT_THAT(retStr,testing::HasSubstr("Day Lenght :"));
  135|      1|}
  136|       |
  137|       |TEST_F(commandiDom_Class_fixture, sysinfo)
  138|      1|{
  139|      1|    test_v.clear();
  140|      1|    test_v.push_back("iDom");
  141|      1|    test_v.push_back("sysinfo");
  142|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  143|      1|    std::cout << "retString: " << retStr << std::endl;
  144|      1|    EXPECT_THAT(retStr,testing::HasSubstr("free RAM"));
  145|      1|}
  146|       |
  147|       |TEST_F(commandiDom_Class_fixture, temperature)
  148|      1|{
  149|      1|    TEST_DATA::return_send_to_arduino = "-12:22";
  150|      1|    test_v.clear();
  151|      1|    test_v.push_back("iDom");
  152|      1|    test_v.push_back("temperature");
  153|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  154|      1|    std::cout << "retString: " << retStr << std::endl;
  155|      1|    EXPECT_THAT(retStr,testing::HasSubstr("-12:22"));
  156|      1|
  157|      1|    test_v.clear();
  158|      1|    test_v.push_back("iDom");
  159|      1|    test_v.push_back("temperature");
  160|      1|    test_v.push_back("stats");
  161|      1|    test_v.push_back("insideee");
  162|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
  163|      1|    std::cout << "retString: " << retStr << std::endl;
  164|      1|    EXPECT_THAT(retStr,testing::HasSubstr("not found!"));
  165|      1|}
  166|       |
  167|       |TEST_F(commandiDom_Class_fixture, text)
  168|      1|{
  169|      1|    TEST_DATA::return_send_to_arduino = "-12:22";
  170|      1|    test_v.clear();
  171|      1|    test_v.push_back("iDom");
  172|      1|    test_v.push_back("text");
  173|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  174|      1|    std::cout << "retString: " << retStr << std::endl;
  175|      1|    EXPECT_THAT(retStr,testing::HasSubstr("Godzina"));
  176|      1|}
  177|       |
  178|       |TEST_F(commandiDom_Class_fixture, lock_unlock)
  179|      1|{
  180|      1|    test_v.clear();
  181|      1|    test_v.push_back("iDom");
  182|      1|    test_v.push_back("lock");
  183|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  184|      1|    std::cout << "retString: " << retStr << std::endl;
  185|      1|    EXPECT_EQ(test_my_data.idom_all_state.houseState, STATE::LOCK);
  186|      1|
  187|      1|    test_v.clear();
  188|      1|    test_v.push_back("iDom");
  189|      1|    test_v.push_back("unlock");
  190|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
  191|      1|    std::cout << "retString: " << retStr << std::endl;
  192|      1|    EXPECT_EQ(test_my_data.idom_all_state.houseState, STATE::UNLOCK);
  193|      1|}
  194|       |
  195|       |TEST_F(commandiDom_Class_fixture, t_230V)
  196|      1|{
  197|      1|    test_my_data.main_iDomTools->unlockHome();
  198|      1|    //////////////// fake command
  199|      1|    test_v.push_back("230V");
  200|      1|    test_v.push_back("fake");
  201|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  202|      1|    EXPECT_THAT(retStr,testing::HasSubstr("wrong paramiter"));
  203|      1|    ///////////////// ON
  204|      1|    test_my_data.main_iDomStatus->setObjectState("printer",STATE::UNDEFINE);
  205|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("printer"), STATE::UNDEFINE);
  206|      1|    test_v.clear();
  207|      1|    test_v.push_back("iDom");
  208|      1|    test_v.push_back("230V");
  209|      1|    test_v.push_back("ON");
  210|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
  211|      1|    std::cout << "retString: " << retStr << std::endl;
  212|      1|    EXPECT_THAT(retStr,testing::HasSubstr("230V ON"));
  213|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("printer"), STATE::ON);
  214|      1|    ///////////////// OFF
  215|      1|    test_v.clear();
  216|      1|    test_v.push_back("iDom");
  217|      1|    test_v.push_back("230V");
  218|      1|    test_v.push_back("OFF");
  219|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
  220|      1|    std::cout << "retString: " << retStr << std::endl;
  221|      1|    EXPECT_THAT(retStr,testing::HasSubstr("230V OFF"));
  222|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("printer"), STATE::OFF);
  223|      1|}
  224|       |
  225|       |TEST_F(commandiDom_Class_fixture, smog)
  226|      1|{
  227|      1|    test_v.clear();
  228|      1|    test_v.push_back("iDom");
  229|      1|    test_v.push_back("smog");
  230|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  231|      1|    std::cout << "retString: " << retStr << std::endl;
  232|      1|    EXPECT_THAT(retStr,testing::HasSubstr(" mg/m^3"));
  233|      1|}
  234|       |
  235|       |TEST_F(commandiDom_Class_fixture, say)
  236|      1|{
  237|      1|    Clock::setTime_forBT_usage(23,23);
  238|      1|    TEST_DATA::return_send_to_arduino = "-3:6";
  239|      1|    test_v.clear();
  240|      1|    test_v.push_back("iDom");
  241|      1|    test_v.push_back("say");
  242|      1|    test_v.push_back("dummy");
  243|      1|    test_v.push_back("dummy");
  244|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  245|      1|    std::cout << "retString: " << retStr << std::endl;
  246|      1|    //EXPECT_THAT(retStr,testing::HasSubstr("sad"));
  247|      1|}
  248|       |TEST_F(commandiDom_Class_fixture, wifi)
  249|      1|{
  250|      1|    TEST_DATA::return_httpPost = "ok";
  251|      1|    test_v.clear();
  252|      1|    test_v.push_back("iDom");
  253|      1|    test_v.push_back("wifi");
  254|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  255|      1|    std::cout << "retString: " << retStr << std::endl;
  256|      1|    EXPECT_THAT(retStr,testing::HasSubstr("ok"));
  257|      1|}
  258|       |
  259|       |TEST_F(commandiDom_Class_fixture, lightning)
  260|      1|{
  261|      1|    test_v.clear();
  262|      1|    test_v.push_back("iDom");
  263|      1|    test_v.push_back("lightning");
  264|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  265|      1|    std::cout << "retString: " << retStr << std::endl;
  266|      1|    EXPECT_THAT(retStr,testing::HasSubstr("bool: "));
  267|      1|}
  268|       |
  269|       |TEST_F(commandiDom_Class_fixture, camera)
  270|      1|{
  271|      1|    test_my_data.server_settings->cameraLedOFF = "cameraOFF";
  272|      1|    test_my_data.server_settings->cameraLedON = "cameraON";
  273|      1|
  274|      1|    Clock::setTime_forBT_usage(23,23);
  275|      1|    test_v.clear();
  276|      1|    test_v.push_back("iDom");
  277|      1|    test_v.push_back("camera");
  278|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  279|      1|    std::cout << "retString: " << retStr << std::endl;
  280|      1|    EXPECT_STREQ(retStr.c_str(),"not enough parameters");
  281|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("cameraLED"),STATE::UNKNOWN);
  282|      1|    ////////////////////////////////////////// ON
  283|      1|    TEST_DATA::return_httpPost = "ok.\n";
  284|      1|    test_v.clear();
  285|      1|    test_v.push_back("iDom");
  286|      1|    test_v.push_back("camera");
  287|      1|    test_v.push_back("LED");
  288|      1|
  289|      1|    test_v.push_back("ON");
  290|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
  291|      1|    std::cout << "retString: " << retStr << std::endl;
  292|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("cameraLED"),STATE::ON);
  293|      1|    EXPECT_STREQ(retStr.c_str(),"led DONE");
  294|      1|    ////////////////////////////////////////// OFF
  295|      1|    TEST_DATA::return_httpPost = "ok.\n";
  296|      1|    test_v.clear();
  297|      1|    test_v.push_back("iDom");
  298|      1|    test_v.push_back("camera");
  299|      1|    test_v.push_back("LED");
  300|      1|
  301|      1|    test_v.push_back("OFF");
  302|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
  303|      1|    std::cout << "retString: " << retStr << std::endl;
  304|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("cameraLED"),STATE::OFF);
  305|      1|    EXPECT_STREQ(retStr.c_str(),"led DONE");
  306|      1|}
  307|       |
  308|       |TEST_F(commandiDom_Class_fixture, LED)
  309|      1|{
  310|      1|    test_my_data.main_iDomTools->unlockHome();
  311|      1|
  312|      1|    test_v.clear();
  313|      1|    test_v.push_back("iDom");
  314|      1|    test_v.push_back("LED");
  315|      1|    test_v.push_back("33");
  316|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  317|      1|    std::cout << "retString: " << retStr << std::endl;
  318|      1|    EXPECT_THAT(retStr,testing::HasSubstr("need more parameter from-to-R-G-B"));
  319|      1|
  320|      1|    ///////////////////////////////////// OFF
  321|      1|    TEST_DATA::return_send_to_arduino = "led OFF";
  322|      1|
  323|      1|    test_v.clear();
  324|      1|    test_v.push_back("iDom");
  325|      1|    test_v.push_back("LED");
  326|      1|    test_v.push_back("OFF");
  327|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
  328|      1|    std::cout << "retString: " << retStr << std::endl;
  329|      1|    EXPECT_THAT(retStr,testing::HasSubstr("led OFF"));
  330|      1|}
  331|       |TEST_F(commandiDom_Class_fixture, kodi)
  332|      1|{
  333|      1|    test_my_data.main_iDomStatus->setObjectState("KODI",STATE::ACTIVE);
  334|      1|    test_v.clear();
  335|      1|    test_v.push_back("iDom");
  336|      1|    test_v.push_back("KODI");
  337|      1|    std::string retStr = test_command_iDom->execute(test_v, &test_my_data);
  338|      1|
  339|      1|    std::cout << "retString: " << retStr << std::endl;
  340|      1|    EXPECT_STREQ(retStr.c_str(),"kodi already run");
  341|      1|
  342|      1|    test_my_data.main_iDomStatus->setObjectState("KODI",STATE::DEACTIVE);
  343|      1|    test_my_data.main_iDomStatus->setObjectState("music",STATE::PLAY);
  344|      1|    test_my_data.main_iDomStatus->setObjectState("speakers",STATE::ON);
  345|      1|
  346|      1|    std::array<Thread_array_struc,iDomConst::MAX_CONNECTION> test_ThreadArrayStruc;
  347|      1|
  348|     11|    for (std::size_t i = 0 ; i < iDomConst::MAX_CONNECTION; i++)
  349|     10|        test_ThreadArrayStruc.at(i).thread_socket = 0;
  350|      1|    test_ThreadArrayStruc.at(3).thread_socket = 0;
  351|      1|    test_ThreadArrayStruc.at(3).thread_ID = std::this_thread::get_id();
  352|      1|    test_my_data.main_THREAD_arr = &test_ThreadArrayStruc;
  353|      1|
  354|      1|    test_v.clear();
  355|      1|    test_v.push_back("iDom");
  356|      1|    test_v.push_back("KODI");
  357|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
  358|      1|
  359|      1|    //sleep(1);
  360|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_my_data);
  361|      1|
  362|      1|    std::cout << "retString: " << retStr << std::endl;
  363|      1|    EXPECT_THAT(retStr,testing::HasSubstr("STARTED"));
  364|      1|
  365|     11|    for (std::size_t i = 0 ; i < iDomConst::MAX_CONNECTION; i++)
  366|     10|        test_ThreadArrayStruc[i].thread_socket = 1;
  367|      1|
  368|      1|    test_v.clear();
  369|      1|    test_v.push_back("iDom");
  370|      1|    test_v.push_back("KODI");
  371|      1|    retStr = test_command_iDom->execute(test_v, &test_my_data);
  372|      1|
  373|      1|    std::cout << "retString: " << retStr << std::endl;
  374|      1|    EXPECT_STREQ(retStr.c_str(),"not free space to new thread");
  375|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_ip_BT.cpp:
    1|       |#include "../command_ip.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_ip_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_ip_Class_fixture()
    8|      1|    {
    9|      1|
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_ip> test_command_ip;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      1|    {
   18|      1|        iDomTOOLS_ClassTest::SetUp();
   19|      1|        test_command_ip =  std::make_unique <command_ip> ("ip");
   20|      1|    }
   21|       |
   22|       |    void TearDown() final
   23|      1|    {
   24|      1|        iDomTOOLS_ClassTest::TearDown();
   25|      1|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_ip_Class_fixture, main)
   29|      1|{
   30|      1|    test_my_data.server_settings->SERVER_IP = "100.001.1.0";
   31|      1|    test_v.push_back("ip");
   32|      1|    auto ret = test_command_ip->execute(test_v,&test_my_data);
   33|      1|    EXPECT_STREQ(ret.c_str(),"iDom server IP: 100.001.1.0");
   34|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_log_BT.cpp:
    1|       |#include "../command_log.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_log_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_log_Class_fixture()
    8|      1|    {
    9|      1|
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_log> test_command_log;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      1|    {
   18|      1|        iDomTOOLS_ClassTest::SetUp();
   19|      1|        test_command_log = std::make_unique <command_log> ("log");
   20|      1|    }
   21|       |
   22|       |    void TearDown() final
   23|      1|    {
   24|      1|        iDomTOOLS_ClassTest::TearDown();
   25|      1|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_log_Class_fixture, main)
   29|      1|{
   30|      1|    test_v.clear();
   31|      1|    test_v.push_back("log");
   32|      1|    test_v.push_back("INFOoo");
   33|      1|    test_v.push_back("test");
   34|      1|    auto ret = test_command_log->execute(test_v,&test_my_data);
   35|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   36|      1|
   37|      1|    test_v.clear();
   38|      1|    test_v.push_back("log");
   39|      1|    test_v.push_back("INFO");
   40|      1|    test_v.push_back("test");
   41|      1|    ret = test_command_log->execute(test_v,&test_my_data);
   42|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   43|      1|
   44|      1|    test_v.clear();
   45|      1|    test_v.push_back("log");
   46|      1|    test_v.push_back("DEBUG");
   47|      1|    test_v.push_back("test");
   48|      1|    ret = test_command_log->execute(test_v,&test_my_data);
   49|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   50|      1|
   51|      1|    test_v.clear();
   52|      1|    test_v.push_back("log");
   53|      1|    test_v.push_back("WARNING");
   54|      1|    test_v.push_back("test");
   55|      1|    ret = test_command_log->execute(test_v,&test_my_data);
   56|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   57|      1|    test_v.clear();
   58|      1|    test_v.push_back("log");
   59|      1|    test_v.push_back("ERROR");
   60|      1|    test_v.push_back("test");
   61|      1|    ret = test_command_log->execute(test_v,&test_my_data);
   62|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   63|      1|    test_v.clear();
   64|      1|    test_v.push_back("log");
   65|      1|    test_v.push_back("FATAL");
   66|      1|    test_v.push_back("test");
   67|      1|    ret = test_command_log->execute(test_v,&test_my_data);
   68|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   69|      1|    test_v.clear();
   70|      1|    test_v.push_back("log");
   71|      1|    test_v.push_back("CRITICAL");
   72|      1|    test_v.push_back("test");
   73|      1|    ret = test_command_log->execute(test_v,&test_my_data);
   74|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   75|      1|    test_v.clear();
   76|      1|    test_v.push_back("log");
   77|      1|    test_v.push_back("VERBOSE");
   78|      1|    test_v.push_back("test");
   79|      1|    ret = test_command_log->execute(test_v,&test_my_data);
   80|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   81|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_mpd_BT.cpp:
    1|       |#include "../command_mpd.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_mpd_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_mpd_Class_fixture()
    8|      9|    {
    9|      9|
   10|      9|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_mpd> test_command_mpd;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      9|    {
   18|      9|        iDomTOOLS_ClassTest::SetUp();
   19|      9|        test_command_mpd = std::make_unique <command_mpd> ("mpd");
   20|      9|    }
   21|       |
   22|       |    void TearDown() final
   23|      9|    {
   24|      9|        iDomTOOLS_ClassTest::TearDown();
   25|      9|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_mpd_Class_fixture, unknownParameter)
   29|      1|{
   30|      1|    test_v.clear();
   31|      1|    test_v.push_back("mpd");
   32|      1|    test_v.push_back("test");
   33|      1|    auto ret = test_command_mpd->execute(test_v,&test_my_data);
   34|      1|    EXPECT_STREQ(ret.c_str(), "unknown parameter test");
   35|      1|
   36|      1| }
   37|       |
   38|       |TEST_F(command_mpd_Class_fixture, list)
   39|      1|{
   40|      1|    test_my_data.ptr_MPD_info->songList = {"song 1","song 2","song 3"};
   41|      1|    test_v.clear();
   42|      1|    test_v.push_back("mpd");
   43|      1|    test_v.push_back("list");
   44|      1|    auto ret = test_command_mpd->execute(test_v,&test_my_data);
   45|      1|    EXPECT_STREQ(ret.c_str(), "song 1\nsong 2\nsong 3\n");
   46|      1| }
   47|       |
   48|       |TEST_F(command_mpd_Class_fixture, get)
   49|      1|{
   50|      1|    test_my_data.ptr_MPD_info->volume = 33;
   51|      1|    test_my_data.ptr_MPD_info->radio = "radio test";
   52|      1|    test_my_data.ptr_MPD_info->title = "title test";
   53|      1|
   54|      1|    test_v.clear();
   55|      1|    test_v.push_back("mpd");
   56|      1|    test_v.push_back("get");
   57|      1|    test_v.push_back("volume");
   58|      1|
   59|      1|    auto ret = test_command_mpd->execute(test_v,&test_my_data);
   60|      1|    EXPECT_STREQ(ret.c_str(), "33");
   61|      1|
   62|      1|    test_v.clear();
   63|      1|    test_v.push_back("mpd");
   64|      1|    test_v.push_back("get");
   65|      1|    test_v.push_back("info");
   66|      1|
   67|      1|    ret = test_command_mpd->execute(test_v,&test_my_data);
   68|      1|    EXPECT_STREQ(ret.c_str(), "radio test : title test");
   69|      1| }
   70|       |TEST_F(command_mpd_Class_fixture, volume)
   71|      1|{
   72|      1|    test_my_data.ptr_MPD_info->volume = 33;
   73|      1|
   74|      1|    test_v.clear();
   75|      1|    test_v.push_back("mpd");
   76|      1|    test_v.push_back("volume");
   77|      1|    test_v.push_back("up");
   78|      1|
   79|      1|    blockQueue test_q;
   80|      1|    test_q._clearAll();
   81|      1|
   82|      1|    test_command_mpd->execute(test_v,&test_my_data);
   83|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::VOLUP);
   84|      1|
   85|      1|    test_v.clear();
   86|      1|    test_v.push_back("mpd");
   87|      1|    test_v.push_back("volume");
   88|      1|    test_v.push_back("down");
   89|      1|
   90|      1|    test_command_mpd->execute(test_v,&test_my_data);
   91|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::VOLDOWN);
   92|      1|
   93|      1|    test_v.clear();
   94|      1|    test_v.push_back("mpd");
   95|      1|    test_v.push_back("volume");
   96|      1|    test_v.push_back("55");
   97|      1|
   98|      1|    test_command_mpd->execute(test_v,&test_my_data);
   99|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::VOLSET);
  100|      1|    EXPECT_EQ(test_my_data.ptr_MPD_info->volume, 55);
  101|      1|    /////// voule -gt 100%
  102|      1|    test_v.clear();
  103|      1|    test_v.push_back("mpd");
  104|      1|    test_v.push_back("volume");
  105|      1|    test_v.push_back("155");
  106|      1|
  107|      1|    test_command_mpd->execute(test_v,&test_my_data);
  108|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::NULL_);
  109|      1|    EXPECT_EQ(test_my_data.ptr_MPD_info->volume, 55);
  110|      1| }
  111|       |
  112|       |TEST_F(command_mpd_Class_fixture, pause)
  113|      1|{
  114|      1|    test_v.clear();
  115|      1|    test_v.push_back("mpd");
  116|      1|    test_v.push_back("pause");
  117|      1|
  118|      1|    blockQueue test_q;
  119|      1|    test_q._clearAll();
  120|      1|
  121|      1|    auto ret = test_command_mpd->execute(test_v,&test_my_data);
  122|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PAUSE);
  123|      1|    EXPECT_STREQ(ret.c_str(), "paused!");
  124|      1|}
  125|       |
  126|       |TEST_F(command_mpd_Class_fixture, next)
  127|      1|{
  128|      1|    test_v.clear();
  129|      1|    test_v.push_back("mpd");
  130|      1|    test_v.push_back("next");
  131|      1|
  132|      1|    blockQueue test_q;
  133|      1|    test_q._clearAll();
  134|      1|
  135|      1|    test_command_mpd->execute(test_v,&test_my_data);
  136|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::NEXT);
  137|      1|}
  138|       |
  139|       |TEST_F(command_mpd_Class_fixture, prev)
  140|      1|{
  141|      1|    test_v.clear();
  142|      1|    test_v.push_back("mpd");
  143|      1|    test_v.push_back("prev");
  144|      1|
  145|      1|    blockQueue test_q;
  146|      1|    test_q._clearAll();
  147|      1|
  148|      1|    test_command_mpd->execute(test_v,&test_my_data);
  149|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PREV);
  150|      1|}
  151|       |
  152|       |TEST_F(command_mpd_Class_fixture, stop)
  153|      1|{
  154|      1|    test_v.clear();
  155|      1|    test_v.push_back("mpd");
  156|      1|    test_v.push_back("stop");
  157|      1|
  158|      1|    blockQueue test_q;
  159|      1|    test_q._clearAll();
  160|      1|
  161|      1|    auto ret = test_command_mpd->execute(test_v,&test_my_data);
  162|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP);
  163|      1|    EXPECT_STREQ(ret.c_str(), "stoped!");
  164|      1|}
  165|       |
  166|       |TEST_F(command_mpd_Class_fixture, play_playID)
  167|      1|{
  168|      1|    test_my_data.idom_all_state.houseState = STATE::UNLOCK;
  169|      1|    test_my_data.ptr_MPD_info->currentSongID = 2;
  170|      1|    test_my_data.ptr_MPD_info->songList = {"song 1","song 2","song 3"};
  171|      1|
  172|      1|    test_v.clear();
  173|      1|    test_v.push_back("mpd");
  174|      1|    test_v.push_back("start");
  175|      1|
  176|      1|    blockQueue test_q;
  177|      1|    test_q._clearAll();
  178|      1|
  179|      1|    test_command_mpd->execute(test_v,&test_my_data);
  180|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
  181|      1|
  182|      1|    test_v.clear();
  183|      1|    test_v.push_back("mpd");
  184|      1|    test_v.push_back("start");
  185|      1|    test_v.push_back("3");
  186|      1|
  187|      1|    test_q._clearAll();
  188|      1|
  189|      1|    test_command_mpd->execute(test_v,&test_my_data);
  190|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY_ID);
  191|      1|    EXPECT_EQ(test_my_data.ptr_MPD_info->currentSongID, 3);
  192|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_ok_BT.cpp:
    1|       |#include "../command_ok.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_ok_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_ok_Class_fixture()
    8|      1|    {
    9|      1|
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_ok> test_command_ok;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      1|    {
   18|      1|        iDomTOOLS_ClassTest::SetUp();
   19|      1|        test_command_ok =  std::make_unique <command_ok> ("ok");
   20|      1|    }
   21|       |
   22|       |    void TearDown() final
   23|      1|    {
   24|      1|        iDomTOOLS_ClassTest::TearDown();
   25|      1|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_ok_Class_fixture, main)
   29|      1|{
   30|      1|    test_v.push_back("ok");
   31|      1|    auto ret = test_command_ok->execute(test_v,&test_my_data);
   32|      1|    EXPECT_STREQ(ret.c_str(),"\nEND\n");
   33|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_program_BT.cpp:
    1|       |#include "../command_program.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_program_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_program_Class_fixture()
    8|      9|    {
    9|      9|
   10|      9|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_program> test_command_program;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      9|    {
   18|      9|        iDomTOOLS_ClassTest::SetUp();
   19|      9|        test_command_program = std::make_unique <command_program> ("program");
   20|      9|    }
   21|       |
   22|       |    void TearDown() final
   23|      9|    {
   24|      9|        iDomTOOLS_ClassTest::TearDown();
   25|      9|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_program_Class_fixture, unknownParameter)
   29|      1|{
   30|      1|    test_v.clear();
   31|      1|    test_v.push_back("program");
   32|      1|    test_v.push_back("test");
   33|      1|    auto ret = test_command_program->execute(test_v,&test_my_data);
   34|      1|    EXPECT_STREQ(ret.c_str(), "add more paramiters");
   35|      1|
   36|      1|}
   37|       |
   38|       |TEST_F(command_program_Class_fixture, missingParameter)
   39|      1|{
   40|      1|    test_v.clear();
   41|      1|    test_v.push_back("program");
   42|      1|    auto ret = test_command_program->execute(test_v,&test_my_data);
   43|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("what?"));
   44|      1|}
   45|       |
   46|       |TEST_F(command_program_Class_fixture, fakeParameter)
   47|      1|{
   48|      1|    test_v.clear();
   49|      1|    test_v.push_back("program");
   50|      1|    test_v.push_back("fake");
   51|      1|    test_v.push_back("fake2");
   52|      1|    auto ret = test_command_program->execute(test_v,&test_my_data);
   53|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("what? - fake"));
   54|      1|}
   55|       |
   56|       |TEST_F(command_program_Class_fixture, stopProgram)
   57|      1|{
   58|      1|    test_v.clear();
   59|      1|    test_v.push_back("program");
   60|      1|    test_v.push_back("stop");
   61|      1|    EXPECT_THROW(test_command_program->execute(test_v,&test_my_data), std::string);
   62|      1|}
   63|       |
   64|       |TEST_F(command_program_Class_fixture, programReloadSoft)
   65|      1|{
   66|      1|    test_v.clear();
   67|      1|    test_v.push_back("program");
   68|      1|    test_v.push_back("reload");
   69|      1|    test_v.push_back("soft");
   70|      1|    EXPECT_THROW(test_command_program->execute(test_v,&test_my_data), std::string);
   71|      1|    EXPECT_EQ(test_my_data.iDomProgramState, iDomStateEnum::RELOAD);
   72|      1|}
   73|       |
   74|       |TEST_F(command_program_Class_fixture, programReloadHard)
   75|      1|{
   76|      1|    test_v.clear();
   77|      1|    test_v.push_back("program");
   78|      1|    test_v.push_back("reload");
   79|      1|    test_v.push_back("hard");
   80|      1|    EXPECT_THROW(test_command_program->execute(test_v,&test_my_data), std::string);
   81|      1|    EXPECT_EQ(test_my_data.iDomProgramState, iDomStateEnum::HARD_RELOAD);
   82|      1|}
   83|       |
   84|       |TEST_F(command_program_Class_fixture, clearRamProgram)
   85|      1|{
   86|      1|    test_v.clear();
   87|      1|    test_v.push_back("program");
   88|      1|    test_v.push_back("clear");
   89|      1|    test_v.push_back("ram");
   90|      1|    auto ret = test_command_program->execute(test_v,&test_my_data);
   91|      1|    EXPECT_STREQ(ret.c_str(),"ram has beed freed");
   92|      1|}
   93|       |
   94|       |TEST_F(command_program_Class_fixture, raspberryProgram)
   95|      1|{
   96|      1|    test_v.clear();
   97|      1|    test_v.push_back("program");
   98|      1|    test_v.push_back("raspberry");
   99|      1|    test_v.push_back("command");
  100|      1|    auto ret = test_command_program->execute(test_v,&test_my_data);
  101|      1|    EXPECT_STREQ(ret.c_str(),"command done with exitcode: 0");
  102|      1|}
  103|       |
  104|       |TEST_F(command_program_Class_fixture, debugeVariableProgram)
  105|      1|{
  106|      1|    RFLinkHandler test_RFLinkkHandler(&test_my_data);
  107|      1|
  108|      1|    test_my_data.main_RFLink = &test_RFLinkkHandler;
  109|      1|    test_my_data.main_RFLink->okTime = 777;
  110|      1|    test_my_data.main_RFLink->pingTime = 888;
  111|      1|    test_my_data.server_settings->PORT = 88;
  112|      1|    test_my_data.server_settings->v_delay = 1;
  113|      1|    test_my_data.sleeper = 1;
  114|      1|    test_my_data.now_time = 123;
  115|      1|    test_my_data.start = 12;
  116|      1|    int32_t buf = 1;
  117|      1|    unsigned int who = 0;
  118|      1|    test_my_data.pointer.ptr_buf = &buf;
  119|      1|    test_my_data.pointer.ptr_who = &who;
  120|      1|
  121|      1|    test_v.clear();
  122|      1|    test_v.push_back("program");
  123|      1|    test_v.push_back("debuge");
  124|      1|    test_v.push_back("variable");
  125|      1|    auto ret = test_command_program->execute(test_v,&test_my_data);
  126|      1|    std::cout << ret << std::endl;
  127|      1|    EXPECT_THAT(ret,testing::HasSubstr("END"));
  128|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_put_BT.cpp:
    1|       |#include "../command_put.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_put_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_put_Class_fixture()
    8|      1|    {
    9|      1|
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_put> test_command_put;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      1|    {
   18|      1|        iDomTOOLS_ClassTest::SetUp();
   19|      1|        test_command_put = std::make_unique <command_put> ("put");
   20|      1|    }
   21|       |
   22|       |    void TearDown() final
   23|      1|    {
   24|      1|        iDomTOOLS_ClassTest::TearDown();
   25|      1|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_put_Class_fixture, main)
   29|      1|{
   30|      1|    TEST_DATA::return_send_to_arduino = "-2:3";
   31|      1|
   32|      1|    test_v.push_back("put");
   33|      1|    test_v.push_back("temperature");
   34|      1|    auto ret = test_command_put->execute(test_v,&test_my_data);
   35|      1|    EXPECT_STREQ(ret.c_str(), "DONE");
   36|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_rs232_BT.cpp:
    1|       |#include "../commandrs232.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_RS232_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_RS232_Class_fixture()
    8|      8|    {
    9|      8|
   10|      8|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<commandRS232> test_command_put;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      8|    {
   18|      8|        iDomTOOLS_ClassTest::SetUp();
   19|      8|        test_command_put = std::make_unique <commandRS232> ("RS232");
   20|      8|    }
   21|       |
   22|       |    void TearDown() final
   23|      8|    {
   24|      8|        iDomTOOLS_ClassTest::TearDown();
   25|      8|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_RS232_Class_fixture, wrongParameter)
   29|      1|{
   30|      1|    test_v.push_back("RS232");
   31|      1|    test_v.push_back("test_par");
   32|      1|    auto ret = test_command_put->execute(test_v,&test_my_data);
   33|      1|    EXPECT_STREQ(ret.c_str(), "wrong parameter: test_par");
   34|      1|}
   35|       |
   36|       |TEST_F(command_RS232_Class_fixture, getWrongParameter)
   37|      1|{
   38|      1|    test_v.push_back("RS232");
   39|      1|    test_v.push_back("get");
   40|      1|    test_v.push_back("fake");
   41|      1|    auto ret = test_command_put->execute(test_v,&test_my_data);
   42|      1|    EXPECT_STREQ(ret.c_str(), "wrong parameter: fake");
   43|      1|}
   44|       |
   45|       |TEST_F(command_RS232_Class_fixture, getTemperature)
   46|      1|{
   47|      1|    TEST_DATA::return_send_to_arduino = "-2:-21";
   48|      1|
   49|      1|    test_v.push_back("RS232");
   50|      1|    test_v.push_back("get");
   51|      1|    test_v.push_back("temperature");
   52|      1|    auto ret = test_command_put->execute(test_v,&test_my_data);
   53|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("-2:-21"));
   54|      1|}
   55|       |
   56|       |TEST_F(command_RS232_Class_fixture, send)
   57|      1|{
   58|      1|    TEST_DATA::return_send_to_arduino = "done";
   59|      1|
   60|      1|    test_v.push_back("RS232");
   61|      1|    test_v.push_back("send");
   62|      1|    test_v.push_back("test:33;");
   63|      1|    auto ret = test_command_put->execute(test_v,&test_my_data);
   64|      1|    EXPECT_STREQ(ret.c_str(), "done");
   65|      1|}
   66|       |
   67|       |TEST_F(command_RS232_Class_fixture, errorMissingPara)
   68|      1|{
   69|      1|    TEST_DATA::return_send_to_arduino = "done";
   70|      1|
   71|      1|    test_v.push_back("RS232");
   72|      1|    test_v.push_back("error");
   73|      1|    auto ret = test_command_put->execute(test_v,&test_my_data);
   74|      1|    EXPECT_STREQ(ret.c_str(), "add more parameter to error");
   75|      1|}
   76|       |
   77|       |TEST_F(command_RS232_Class_fixture, errorTemperatureMissingPara)
   78|      1|{
   79|      1|    TEST_DATA::return_send_to_arduino = "done";
   80|      1|
   81|      1|    test_v.push_back("RS232");
   82|      1|    test_v.push_back("error");
   83|      1|    test_v.push_back("Temperature");
   84|      1|    test_v.push_back("error");
   85|      1|    auto ret = test_command_put->execute(test_v,&test_my_data);
   86|      1|    EXPECT_STREQ(ret.c_str(), "default");
   87|      1|}
   88|       |
   89|       |TEST_F(command_RS232_Class_fixture, msgTestMissing)
   90|      1|{
   91|      1|    TEST_DATA::return_send_to_arduino = "done";
   92|      1|
   93|      1|    test_v.push_back("RS232");
   94|      1|    test_v.push_back("error");
   95|      1|    test_v.push_back("test");
   96|      1|    test_v.push_back("msg");
   97|      1|
   98|      1|    test_v.push_back("fake msg");
   99|      1|
  100|      1|    auto ret = test_command_put->execute(test_v,&test_my_data);
  101|      1|    EXPECT_STREQ(ret.c_str(), "DONE!");
  102|      1|}
  103|       |
  104|       |TEST_F(command_RS232_Class_fixture, msgTestFake)
  105|      1|{
  106|      1|    TEST_DATA::return_send_to_arduino = "done";
  107|      1|
  108|      1|    test_v.push_back("RS232");
  109|      1|    test_v.push_back("error");
  110|      1|    test_v.push_back("test");
  111|      1|    test_v.push_back("fake");;
  112|      1|
  113|      1|    auto ret = test_command_put->execute(test_v,&test_my_data);
  114|      1|    EXPECT_STREQ(ret.c_str(), "default");
  115|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_show_BT.cpp:
    1|       |#include "../command_show.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_show_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_show_Class_fixture()
    8|      9|    {
    9|      9|
   10|      9|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_show> test_command_show;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      9|    {
   18|      9|        iDomTOOLS_ClassTest::SetUp();
   19|      9|        test_command_show = std::make_unique <command_show> ("show");
   20|      9|    }
   21|       |
   22|       |    void TearDown() final
   23|      9|    {
   24|      9|        iDomTOOLS_ClassTest::TearDown();
   25|      9|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_show_Class_fixture, wrongParameter)
   29|      1|{
   30|      1|    test_v.push_back("show");
   31|      1|    test_v.push_back("t");
   32|      1|    auto ret = test_command_show->execute(test_v,&test_my_data);
   33|      1|    EXPECT_STREQ(ret.c_str(), "wrong parameter: t");
   34|      1|}
   35|       |
   36|       |TEST_F(command_show_Class_fixture, unknownParameter)
   37|      1|{
   38|      1|    test_v.push_back("show");
   39|      1|    auto ret = test_command_show->execute(test_v,&test_my_data);
   40|      1|    EXPECT_STREQ(ret.c_str(), "show what?");
   41|      1|}
   42|       |
   43|       |TEST_F(command_show_Class_fixture, showThreadAll)
   44|      1|{
   45|      1|    std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> threadArray;
   46|      1|
   47|      1|    threadArray[1].thread_ID = std::this_thread::get_id();
   48|      1|    threadArray[1].thread_name = "thread1 test1";
   49|      1|    threadArray[1].thread_socket = 1;
   50|      1|    threadArray[2].thread_ID = std::this_thread::get_id();
   51|      1|    threadArray[2].thread_name = "thread1 test2";
   52|      1|    threadArray[2].thread_socket = 2;
   53|      1|
   54|      1|    test_my_data.main_THREAD_arr = &threadArray;
   55|      1|
   56|      1|    test_v.push_back("show");
   57|      1|    test_v.push_back("thread");
   58|      1|    test_v.push_back("all");
   59|      1|    auto ret = test_command_show->execute(test_v,&test_my_data);
   60|      1|    EXPECT_THAT(ret, testing::HasSubstr("socket: 2"));
   61|      1|}
   62|       |
   63|       |TEST_F(command_show_Class_fixture, showThread)
   64|      1|{
   65|      1|    std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> threadArray;
   66|      1|
   67|      1|    threadArray[1].thread_ID = std::this_thread::get_id();
   68|      1|    threadArray[1].thread_name = "thread1 test1";
   69|      1|    threadArray[1].thread_socket = 1;
   70|      1|    threadArray[2].thread_ID = std::this_thread::get_id();
   71|      1|    threadArray[2].thread_name = "thread1 test2";
   72|      1|    threadArray[2].thread_socket = 2;
   73|      1|
   74|      1|    test_my_data.main_THREAD_arr = &threadArray;
   75|      1|
   76|      1|    test_v.push_back("show");
   77|      1|    test_v.push_back("thread");
   78|      1|    test_v.push_back("2");
   79|      1|    auto ret = test_command_show->execute(test_v,&test_my_data);
   80|      1|    EXPECT_THAT(ret, testing::HasSubstr("socket: 2"));
   81|      1|}
   82|       |
   83|       |TEST_F(command_show_Class_fixture, showThreadNoId)
   84|      1|{
   85|      1|    test_v.push_back("show");
   86|      1|    test_v.push_back("thread");
   87|      1|    auto ret = test_command_show->execute(test_v,&test_my_data);
   88|      1|    EXPECT_STREQ(ret.c_str(), "No ID");
   89|      1|}
   90|       |
   91|       |TEST_F(command_show_Class_fixture, showLog)
   92|      1|{
   93|      1|    test_v.push_back("show");
   94|      1|    test_v.push_back("log");
   95|      1|    auto ret = test_command_show->execute(test_v,&test_my_data);
   96|      1|    EXPECT_THAT(ret, testing::HasSubstr("VERBOSE"));
   97|      1|}
   98|       |
   99|       |TEST_F(command_show_Class_fixture, showLogNoInfo)
  100|      1|{
  101|      1|    test_v.push_back("show");
  102|      1|    test_v.push_back("log");
  103|      1|    test_v.push_back("no");
  104|      1|    test_v.push_back("INFO");
  105|      1|    auto ret = test_command_show->execute(test_v,&test_my_data);
  106|      1|    EXPECT_THAT(ret, testing::HasSubstr("VERBOSE"));
  107|      1|    EXPECT_THAT(ret, testing::Not(testing::HasSubstr("INFO")));
  108|      1|}
  109|       |
  110|       |TEST_F(command_show_Class_fixture, showLogInfo)
  111|      1|{
  112|      1|    test_v.push_back("show");
  113|      1|    test_v.push_back("log");
  114|      1|    test_v.push_back("INFO");
  115|      1|    auto ret = test_command_show->execute(test_v,&test_my_data);
  116|      1|    EXPECT_THAT(ret, testing::HasSubstr("INFO"));
  117|      1|}
  118|       |
  119|       |TEST_F(command_show_Class_fixture, showLogFakeInfo)
  120|      1|{
  121|      1|    test_v.push_back("show");
  122|      1|    test_v.push_back("log");
  123|      1|    test_v.push_back("fake");
  124|      1|    test_v.push_back("INFO");
  125|      1|    auto ret = test_command_show->execute(test_v,&test_my_data);
  126|      1|    EXPECT_STREQ(ret.c_str(), "do you mean : show log no <string>?");
  127|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_sleep_BT.cpp:
    1|       |#include "../command_sleep.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_sleep_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_sleep_Class_fixture()
    8|      5|    {
    9|      5|
   10|      5|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_sleep> test_command_sleep;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      5|    {
   18|      5|        iDomTOOLS_ClassTest::SetUp();
   19|      5|        test_command_sleep = std::make_unique <command_sleep> ("sleep");
   20|      5|    }
   21|       |
   22|       |    void TearDown() final
   23|      5|    {
   24|      5|        iDomTOOLS_ClassTest::TearDown();
   25|      5|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_sleep_Class_fixture, sleep)
   29|      1|{
   30|      1|    test_my_data.sleeper = 88;
   31|      1|
   32|      1|    test_v.push_back("sleep");
   33|      1|    auto ret = test_command_sleep->execute(test_v,&test_my_data);
   34|      1|    EXPECT_STREQ(ret.c_str(), "sleep set to: 88");
   35|      1|}
   36|       |
   37|       |TEST_F(command_sleep_Class_fixture, sleepFakeParam)
   38|      1|{
   39|      1|    test_my_data.sleeper = 88;
   40|      1|
   41|      1|    test_v.push_back("sleep");
   42|      1|    test_v.push_back("fake");
   43|      1|    auto ret = test_command_sleep->execute(test_v,&test_my_data);
   44|      1|    EXPECT_STREQ(ret.c_str(), "internal error");
   45|      1|}
   46|       |
   47|       |TEST_F(command_sleep_Class_fixture, sleepFakeParam2)
   48|      1|{
   49|      1|    test_my_data.sleeper = 88;
   50|      1|
   51|      1|    test_v.push_back("sleep");
   52|      1|    test_v.push_back("fake");
   53|      1|    test_v.push_back("fake2");
   54|      1|    auto ret = test_command_sleep->execute(test_v,&test_my_data);
   55|      1|    EXPECT_STREQ(ret.c_str(), "wrong parametr fake");
   56|      1|}
   57|       |
   58|       |TEST_F(command_sleep_Class_fixture, sleepSetNoIntiger)
   59|      1|{
   60|      1|    test_my_data.sleeper = 88;
   61|      1|
   62|      1|    test_v.push_back("sleep");
   63|      1|    test_v.push_back("set");
   64|      1|    test_v.push_back("fake2");
   65|      1|    auto ret = test_command_sleep->execute(test_v,&test_my_data);
   66|      1|    EXPECT_STREQ(ret.c_str(), "system need intiger > 0 not: fake2");
   67|      1|}
   68|       |
   69|       |TEST_F(command_sleep_Class_fixture, sleepSet)
   70|      1|{
   71|      1|    std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> threadArray;
   72|      1|
   73|      1|    threadArray[1].thread_ID = std::this_thread::get_id();
   74|      1|    threadArray[1].thread_name = "thread1 test1";
   75|      1|    threadArray[1].thread_socket = 1;
   76|      1|    threadArray[2].thread_ID = std::this_thread::get_id();
   77|      1|    threadArray[2].thread_name = "thread1 test2";
   78|      1|    threadArray[2].thread_socket = 2;
   79|      1|
   80|      1|    test_my_data.main_THREAD_arr = &threadArray;
   81|      1|
   82|      1|    test_v.push_back("sleep");
   83|      1|    test_v.push_back("set");
   84|      1|    test_v.push_back("2");
   85|      1|    auto ret = test_command_sleep->execute(test_v,&test_my_data);
   86|      1|    EXPECT_STREQ(ret.c_str(), "DONE - Sleep MPD STARTED");
   87|      1|    sleep(1);
   88|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_state_BT.cpp:
    1|       |#include "../command_state.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_state_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_state_Class_fixture()
    8|      3|    {
    9|      3|
   10|      3|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_state> test_command_state;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      3|    {
   18|      3|        iDomTOOLS_ClassTest::SetUp();
   19|      3|        test_command_state = std::make_unique <command_state> ("state");
   20|      3|    }
   21|       |
   22|       |    void TearDown() final
   23|      3|    {
   24|      3|        iDomTOOLS_ClassTest::TearDown();
   25|      3|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_state_Class_fixture, stateAll)
   29|      1|{
   30|      1|    test_v.clear();
   31|      1|    test_v.push_back("state");
   32|      1|    test_v.push_back("all");
   33|      1|    auto ret = test_command_state->execute(test_v,&test_my_data);
   34|      1|    EXPECT_STREQ(ret.c_str(), "state: KODI=DEACTIVE alarm=DEACTIVE cameraLED=UNKNOWN house=UNDEFINE printer=OFF speakers=OFF ");
   35|      1|}
   36|       |
   37|       |TEST_F(command_state_Class_fixture, stateGetOne)
   38|      1|{
   39|      1|    test_v.clear();
   40|      1|    test_v.push_back("state");
   41|      1|    test_v.push_back("KODI");
   42|      1|    auto ret = test_command_state->execute(test_v,&test_my_data);
   43|      1|    EXPECT_STREQ(ret.c_str(), "DEACTIVE");
   44|      1|}
   45|       |
   46|       |TEST_F(command_state_Class_fixture, stateMissingParam)
   47|      1|{
   48|      1|    test_v.clear();
   49|      1|    test_v.push_back("state");
   50|      1|    auto ret = test_command_state->execute(test_v,&test_my_data);
   51|      1|    EXPECT_THAT(ret, testing::HasSubstr("need parameter!\n"));
   52|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_test_BT.cpp:
    1|       |#include "../commandtest.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_test_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_test_Class_fixture()
    8|      3|    {
    9|      3|
   10|      3|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<commandTEST> test_command_test;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      3|    {
   18|      3|        iDomTOOLS_ClassTest::SetUp();
   19|      3|        test_command_test = std::make_unique <commandTEST> ("test");
   20|      3|    }
   21|       |
   22|       |    void TearDown() final
   23|      3|    {
   24|      3|        iDomTOOLS_ClassTest::TearDown();
   25|      3|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_test_Class_fixture, test)
   29|      1|{
   30|      1|    test_v.push_back("test");
   31|      1|    test_v.push_back("test");
   32|      1|    auto ret = test_command_test->execute(test_v,&test_my_data);
   33|      1|    EXPECT_STREQ(ret.c_str(),"test - for test");
   34|      1|}
   35|       |
   36|       |TEST_F(command_test_Class_fixture, throw)
   37|      1|{
   38|      1|    test_v.push_back("test");
   39|      1|    test_v.push_back("throw");
   40|      1|    EXPECT_THROW(test_command_test->execute(test_v,&test_my_data),std::string);
   41|      1|}
   42|       |
   43|       |TEST_F(command_test_Class_fixture, unknownParam)
   44|      1|{
   45|      1|    test_v.push_back("test");
   46|      1|    test_v.push_back("fake");
   47|      1|    auto ret = test_command_test->execute(test_v,&test_my_data);
   48|      1|    EXPECT_EQ(ret.size(),49);
   49|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_uptime_BT.cpp:
    1|       |#include "../command_uptime.h"
    2|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_uptime_Class_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_uptime_Class_fixture()
    8|      1|    {
    9|      1|
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_UPTIME> test_command_uptime;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    void SetUp() final
   17|      1|    {
   18|      1|        iDomTOOLS_ClassTest::SetUp();
   19|      1|        test_command_uptime = std::make_unique <command_UPTIME> ("uptime");
   20|      1|    }
   21|       |
   22|       |    void TearDown() final
   23|      1|    {
   24|      1|        iDomTOOLS_ClassTest::TearDown();
   25|      1|    }
   26|       |};
   27|       |
   28|       |TEST_F(command_uptime_Class_fixture, main)
   29|      1|{
   30|      1|    time(&test_my_data.start);
   31|      1|    test_v.push_back("uptime");
   32|      1|    auto ret = test_command_uptime->execute(test_v,&test_my_data);
   33|      1|    std::cout << "DATA: " << ret << std::endl;
   34|      1|    EXPECT_STREQ(ret.c_str(),"uptime: \n0 day 0 hours 0 minutes 0 seconds");
   35|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_433mhz.cpp:
    1|       |#include "command_433mhz.h"
    2|       |#include "../../RADIO_433_eq/radio_433_eq.h"
    3|       |#include "../../433MHz/RFLink/rflinkhandler.h"
    4|       |
    5|       |command_433MHz::command_433MHz(const std::string &name):command(name)
    6|     22|{
    7|     22|}
    8|       |
    9|       |command_433MHz::~command_433MHz()
   10|     22|{
   11|     22|    // puts("command_433MHz::~command_433MHz()");
   12|     22|}
   13|       |
   14|       |std::string command_433MHz::execute(std::vector<std::string> &v, thread_data *my_data)
   15|     43|{
   16|     43|    std::string str_buf = "wrong paramiter\n" + help();
   17|     43|    if (v.size() > 2){
   18|     43|        //////////////////////////// switch
   19|     43|        if (v[1] == "show" && v[2] == "all"){
   20|     22|            str_buf = my_data->main_REC->listAllName();
   21|     22|        }
   22|     21|        else if (v[1] == "delete" && v.size() == 3)
   23|      4|        {
   24|      4|            if (my_data->main_REC->nameExist(v[2]) == false)
   25|      1|            {
   26|      1|                return "equipment "+ v[2]+" not exist ";
   27|      1|            }
   28|      3|            my_data->main_REC->deleteRadioEq(v[2]);
   29|      3|            str_buf = v[2] + " deleted";
   30|      3|        }
   31|     17|        else if (v[1] == "add" && v.size() > 3) //zmień tu
   32|      7|        {
   33|      7|            RADIO_EQ_CONFIG cfg;
   34|      7|           /* if(v[2] == "SWITCH" && v.size() == 12)
   35|      7|                cfg.set(v[2],v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11]); // zmień tu
   36|      7|            else*/ if(v[2] == "BUTTON" && v.size() >= 6)
   37|      1|                cfg.set(v[2],v[3],v[4],v[5],v[6]); // zmień tu
   38|      6|            else if(v[2] == "WEATHER" && v.size() >= 4)
   39|      1|                cfg.set(v[2],v[3],v[4]); // zmień tu
   40|      5|            else
   41|      5|            {
   42|      5|                if (v.size() != 12)
   43|      1|                    return "mising paramiter!";
   44|      4|                cfg.set(v[2],v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11]); // zmień tu
   45|      4|                //return v[2] + " " + v[3] + " " + v[4] + "add more paramiter or wrong type";
   46|      4|}
   47|      7|            /////////////////////////////////////////////////////////////
   48|      7|            if (my_data->main_REC->nameExist(v[3]) == true)
   49|      1|            {
   50|      1|                return "equipment "+ v[3]+" exist ";
   51|      1|            }
   52|      5|            try
   53|      5|            {
   54|      5|                my_data->main_REC->addRadioEq(cfg,v[2]);
   55|      5|            }
   56|      5|            catch(const WRONG_FORMAT& )
   57|      5|            {
   58|      1|                return "wrong type "+v[2];
   59|      1|            }
   60|      1|            catch(const std::invalid_argument& )
   61|      1|            {
   62|      1|                return "wrong ID "+v[4];
   63|      1|            }
   64|      3|
   65|      3|            str_buf = v[2] + " " + v[3] + " added";
   66|      3|            my_data->main_REC->saveConfig(my_data->server_settings->radio433MHzConfigFile);
   67|      3|        }
   68|     10|        else if (v[1] == "show" && v[2] == "switch"){
   69|      1|            str_buf = "";
   70|      1|            for (auto m_switch : my_data->main_REC->getSwitchPointerVector())
   71|      5|            {
   72|      5|                str_buf.append(stateToString(m_switch->getState()) );
   73|      5|            }
   74|      1|        }
   75|      9|        else if (v[1] == "show" && v[2] == "aether"){
   76|      1|            str_buf.clear();
   77|      1|            for(auto itr = my_data->main_RFLink->rflinkMAP.begin();
   78|      3|                itr != my_data->main_RFLink->rflinkMAP.end();
   79|      2|                itr++)
   80|      2|            {
   81|      2|                str_buf += itr->second.read();
   82|      2|                str_buf += '\n';
   83|      2|            }
   84|      1|            str_buf += ".";
   85|      1|
   86|      1|        }
   87|      8|        else if (v[1] == "show" && v[2] == "config"){
   88|      1|            str_buf = my_data->main_REC->showConfig(my_data->server_settings->radio433MHzConfigFile);
   89|      1|        }
   90|      7|        else if (v[1] == "send"){
   91|      1|            str_buf = "sended!;";
   92|      1|            my_data->main_RFLink->sendCommand(v[2]);
   93|      1|
   94|      1|        }
   95|      6|        else if (v[1] == "switch"){
   96|      6|            try{
   97|      6|                RADIO_SWITCH *m_switch = dynamic_cast<RADIO_SWITCH*>(my_data->main_REC->getEqPointer(v[2]));
   98|      6|
   99|      6|                if (v[3] == "ON") {
  100|      1|                    m_switch->on();
  101|      1|                    str_buf = " done ";
  102|      1|                }
  103|      5|                else if (v[3] == "OFF"){
  104|      1|                    m_switch->off();
  105|      1|                    str_buf = " done ";
  106|      1|                }
  107|      4|                else if (v[3] == "15s"){
  108|      1|                    m_switch->onFor15sec();
  109|      1|                    str_buf = " done ";
  110|      1|                }
  111|      3|                else{
  112|      3|                    str_buf = "unknown paramiter: ";
  113|      3|                    str_buf.append(v[3]);
  114|      3|                }
  115|      6|            }
  116|      6|            catch (std::string& error){
  117|      2|                str_buf = error;
  118|      2|            }
  119|      6|            my_data->main_iDomTools->saveState_iDom();
  120|      6|        }
  121|     43|        /////////////////////////////////////////////
  122|     43|    }
  123|     43|    return str_buf;
  124|     43|}
  125|       |
  126|       |std::string command_433MHz::help()
  127|     44|{
  128|     44|    std::stringstream help;
  129|     44|    help << ("433MHz delete <name> - dalete radio equipment") <<std::endl;
  130|     44|    help << ("433MHz add <type> <name> <ID> <onCode> <offCode> <on15sec> <sunrise> <sunset> <lock> <unlock> - add radio equipment") <<std::endl;
  131|     44|    help << ("433MHz switch <name> ON/OFF/15s - change switch state") <<std::endl;
  132|     44|    help << ("433MHz show all - list all equipment by name") <<std::endl;
  133|     44|    help << ("433MHz show aether - show aether devices by ID") <<std::endl;
  134|     44|    help << ("433MHz show config - show 433MHz devices config") <<std::endl;
  135|     44|    help << ("433MHz send <msg> - send command") <<std::endl;
  136|     44|    return help.str();
  137|     44|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_ardu.cpp:
    1|       |#include "command_ardu.h"
    2|       |
    3|       |command_ardu::command_ardu(const std::string &name):command(name)
    4|      1|{
    5|      1|    this->m_mainRadioButton = std::nullptr_t(); //TODO zamienic na wektor przyciskow
    6|      1|}
    7|       |
    8|       |command_ardu::command_ardu(const std::string& name, thread_data *my_data):command(name)
    9|       |  ,m_button433MHzVector(my_data->main_REC->getButtonPointerVector())
   10|     19|{
   11|     19|    //m_button433MHzVector = my_data->main_REC->getButtonPointerVector();
   12|     19|    //m_mainRadioButton = static_cast<RADIO_BUTTON*>(my_data->main_REC->getEqPointer("locker"));
   13|     19|    m_weatherStVe = my_data->main_REC->getWeather_StationPtrVector();
   14|     19|    m_mainWeatherStation = static_cast<RADIO_WEATHER_STATION*>(my_data->main_REC->getEqPointer("first"));
   15|     19|}
   16|       |
   17|       |std::string command_ardu::execute(std::vector<std::string> &v, thread_data *my_data)
   18|     18|{
   19|     18|    std::string str_buf = " only for internal usage!";
   20|     18|    if (v.size() > 1){
   21|     18|        if(v[1] == "show"){
   22|      1|            RADIO_WEATHER_STATION* st = static_cast<RADIO_WEATHER_STATION*>(my_data->main_REC->getEqPointer("first"));
   23|      1|            str_buf = st->data.getDataString();
   24|      1|        }
   25|     18|        if(v[1] == "433MHz"){
   26|     17|            my_data->myEventHandler.run("433MHz")->addEvent("RFLink: "+v[2]);
   27|     17|            try {
   28|     17|                my_data->main_RFLink->
   29|     17|                        rflinkMAP[my_data->main_RFLink->getArgumentValueFromRFLinkMSG(v[2],
   30|     17|                        "ID")].counter();
   31|     17|                my_data->main_RFLink->
   32|     17|                        rflinkMAP[my_data->main_RFLink->getArgumentValueFromRFLinkMSG(v[2],
   33|     17|                        "ID")].msg = v[2];
   34|     17|            }
   35|     17|            catch(const std::string& e){
   36|      3|                std::cout << "wyjatek w szukaniu: " << e <<std::endl;
   37|      3|                pingAndOkRecv( my_data, v[2]);
   38|      3|            }
   39|     17|            //TODO add command
   40|     17|            try {
   41|     16|                for(auto k : m_button433MHzVector)
   42|     29|                {
   43|     29|                    if (k->getID() == my_data->main_RFLink->getArgumentValueFromRFLinkMSG(v[2],"ID") )
   44|     10|                    {
   45|     10|                        my_data->main_iDomTools->button433mhzLockerPressed(k);
   46|     10|                    }
   47|     29|                }
   48|     16|            }
   49|     16|            catch (const std::string& e){ }
   50|     16|            try {
   51|     16|                if (m_mainWeatherStation->getID() == my_data->main_RFLink->getArgumentValueFromRFLinkMSG(v[2],"ID") )
   52|      3|                {
   53|      3|                    m_mainWeatherStation->data.putData(v[2]);
   54|      3|                }
   55|     16|            }
   56|     16|            catch (std::string& e){ }
   57|     16|        }
   58|     18|    }
   59|     18|    return str_buf;
   60|     18|}
   61|       |
   62|       |std::string command_ardu::help()
   63|      2|{
   64|      2|    return " only for internal usege\n";
   65|      2|}
   66|       |
   67|       |void command_ardu::pingAndOkRecv(thread_data *my_data, const std::string& s)
   68|      3|{
   69|      3|    if (s.find("OK;") != std::string::npos)
   70|      1|        my_data->main_RFLink->okTime = Clock::getUnixTime();
   71|      2|    else if (s.find("PONG;") != std::string::npos)
   72|      1|        my_data->main_RFLink->pingTime = Clock::getUnixTime();
   73|      3|    std::cout << "poing && ok recv " << s <<std::endl
   74|      3|              << " ok time: "<<my_data->main_RFLink->okTime<< std::endl
   75|      3|              << " ping time: "<<my_data->main_RFLink->pingTime<< std::endl;
   76|      3|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_big.cpp:
    1|       |#include "command_big.h"
    2|       |
    3|       |command_big::command_big(const std::string &name):command(name)
    4|      8|{
    5|      8|
    6|      8|}
    7|       |
    8|       |std::string command_big::execute(std::vector<std::string> &v, thread_data *my_data)
    9|      1|{
   10|      1|    std::string str_buf = "command big - wrong paramiter:\n "+ help();
   11|      1|    if (v.size() > 1){
   12|      1|        str_buf.erase();
   13|     55|        for (int i =0; i < std::stoi(v[1])-1; ++i){
   14|     54|            str_buf += "z";
   15|     54|        }
   16|      1|        str_buf += "Y";
   17|      1|    }
   18|      1|    return str_buf;
   19|      1|}
   20|       |
   21|       |std::string command_big::help()
   22|      2|{
   23|      2|    return "big <number> - send big (number) data \n";
   24|      2|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_clock.cpp:
    1|       |#include "command_clock.h"
    2|       |#include "../../../src/functions/functions.h"
    3|       |
    4|       |command_clock::command_clock(const std::string &name):command(name)
    5|      9|{
    6|      9|
    7|      9|}
    8|       |
    9|       |std::string command_clock::execute(std::vector<std::string> &v, thread_data *my_data)
   10|      2|{
   11|      2|    if (v.size() > 1){
   12|      1|        return "clock set "+ useful_F::send_to_arduino_clock(my_data,v[1]);
   13|      1|    }
   14|      1|    return "can not set clock";
   15|      1|}
   16|       |
   17|       |std::string command_clock::help()
   18|      1|{
   19|      1|    return "clock <number/string> - put number/string (max 4 digits) to 7segment LCD\n";
   20|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_cmd.cpp:
    1|       |#include "command_cmd.h"
    2|       |#include "../../../src/functions/functions.h"
    3|       |
    4|       |command_cmd::command_cmd(const std::string &name):command(name)
    5|      9|{
    6|      9|
    7|      9|}
    8|       |
    9|       |std::string command_cmd::execute(std::vector<std::string> &v, thread_data *my_data)
   10|      2|{
   11|      2|    if (v.size() == 1){
   12|      1|        return "fifo file contain: "+ useful_F_libs::read_from_mkfifo(my_data->server_settings->omxplayerFile);
   13|      1|    }
   14|      1|    return "error: unknown parameter: "+v[1];
   15|      1|}
   16|       |
   17|       |std::string command_cmd::help()
   18|      1|{
   19|      1|    return "cmd - read char prom cmd fifo file for unblock video player\n";
   20|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_event.cpp:
    1|       |#include "command_event.h"
    2|       |
    3|       |command_event::command_event(const std::string &name) :command(name)
    4|     13|{
    5|     13|
    6|     13|}
    7|       |
    8|       |std::string command_event::execute(std::vector<std::string> &v, thread_data *my_data)
    9|      6|{
   10|      6|    if (v.size() == 1){
   11|      1|        return my_data->myEventHandler.getListPossibleEvents();
   12|      1|    }
   13|      5|    if (v.size() == 2){
   14|      1|        return my_data->myEventHandler.run(v[1])->getEvent();
   15|      1|    }
   16|      4|    if (v.size() == 3 && v[2]=="clear"){
   17|      1|        my_data->myEventHandler.run(v[1])->clearEvent();
   18|      1|        return "event " +v[1]+ " has been cleared!";
   19|      1|    }
   20|      3|    if (v.size() == 3 && v[2]=="intensity"){
   21|      1|        std::stringstream intensity;
   22|      1|        intensity << my_data->myEventHandler.run(v[1])->getLast1minNumberEvent();
   23|      1|        return "event " +v[1]+" "+ intensity.str() +" intensity per last minute!";
   24|      1|    }
   25|      2|    if (v.size() == 5 && v[2]=="clear"){
   26|      1|        unsigned int from = std::stoi(v[3]);
   27|      1|        unsigned int to = std::stoi(v[4]);
   28|      1|        my_data->myEventHandler.run(v[1])->clearEvent(from, to);
   29|      1|        return "event " +v[1]+ " has been cleared!";
   30|      1|    }
   31|      1|    return my_data->myEventHandler.help();
   32|      1|}
   33|       |
   34|       |std::string command_event::help()
   35|      1|{
   36|      1|    std::stringstream help;
   37|      1|    help << "event- show actual event (all)" << std::endl;
   38|      1|    help << "event <name> - show one event" << std::endl;
   39|      1|    help << "event <name> clear - clear event <name>" << std::endl;
   40|      1|    help << "event <name> intensity - intensity per minute" <<std::endl;
   41|      1|    return help.str();
   42|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_hello.cpp:
    1|       |#include "command_hello.h"
    2|       |
    3|       |command_hello::command_hello(const std::string &name):command(name)
    4|      8|{
    5|      8|}
    6|       |
    7|       |command_hello::~command_hello()
    8|      8|{
    9|      8|}
   10|       |
   11|       |std::string command_hello::execute(std::vector<std::string> &v, thread_data *my_data)
   12|      1|{
   13|      1|    return "\nHI You User!\n";
   14|      1|}
   15|       |
   16|       |std::string command_hello::help()
   17|      1|{
   18|      1|    return "hello - send test message to server if connection is ok, the server response: \"HI!\"\n";
   19|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_help.cpp:
    1|       |#include "command_help.h"
    2|       |#include <vector>
    3|       |#include <algorithm>
    4|       |
    5|       |command_help::command_help(const std::string &name):command(name)
    6|     10|{
    7|     10|}
    8|       |
    9|       |std::string command_help::execute(std::vector<std::string> &v, thread_data *my_data)
   10|      3|{
   11|      3|    std::string result ="";
   12|      3|    if (v.size() ==2){
   13|      2|
   14|      2|        if (my_data->commandMapPtr->find(v[1]) == my_data->commandMapPtr->end()){
   15|      1|            return "unknown command: "+ v[1]+" help note not found";
   16|      1|        }
   17|      1|        else{
   18|      1|            return my_data->commandMapPtr->find(v[1])->second->help();
   19|      1|        }
   20|      1|    }
   21|      1|    else
   22|      1|    {
   23|     23|        for( auto iter= my_data->commandMapPtr->begin();iter != my_data->commandMapPtr->end(); ++iter ) {
   24|     22|
   25|     22|            result+= iter->second->help();
   26|     22|            result+= "------------------------------------\n";
   27|     22|        }
   28|      1|    }
   29|      3|    return result;
   30|      3|}
   31|       |
   32|       |std::string command_help::help()
   33|      1|{
   34|      1|    return "help - show help for all command \nhelp <parameter> - show help for command\n";
   35|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_idom.cpp:
    1|       |#include "command_idom.h"
    2|       |#include "../../functions/functions.h"
    3|       |
    4|       |command_iDom::command_iDom(const std::string &name):command(name)
    5|     27|{
    6|     27|}
    7|       |
    8|       |std::string command_iDom::execute(std::vector<std::string> &v, thread_data *my_data)
    9|     30|{
   10|     30|    if (v.size()<2){
   11|      1|        return "need parameter!\n" + help();
   12|      1|    }
   13|     29|    if (v[1]=="speakers")
   14|      3|    {
   15|      3|        if (v[2] =="ON"){
   16|      1|            iDomTOOLS::turnOnSpeakers();
   17|      1|            return "speakers ON";
   18|      1|        }
   19|      2|        else if (v[2]=="OFF"){
   20|      1|            iDomTOOLS::turnOffSpeakers();
   21|      1|            return "speakers OFF";
   22|      1|        }
   23|      1|        else{
   24|      1|            return "unknow speakers action: "+v[2];
   25|      1|        }
   26|     26|    }
   27|     26|    else if (v[1]=="sunset"){
   28|      1|        return my_data->main_iDomTools->getSunset(true);
   29|      1|    }
   30|     25|    else if (v[1]=="sunrise"){
   31|      1|        return my_data->main_iDomTools->getSunrise(true);
   32|      1|    }
   33|     24|    else if (v[1]=="day" && v[2]=="lenght"){
   34|      1|        return my_data->main_iDomTools->getDayLenght(true);
   35|      1|    }
   36|     23|    else if (v[1]=="sun"){
   37|      1|        std::string ret;
   38|      1|        ret = my_data->main_iDomTools->getSunrise(true);
   39|      1|        ret.append("\n");
   40|      1|        ret.append(my_data->main_iDomTools->getSunset(true));
   41|      1|        ret.append("\n");
   42|      1|        ret.append(my_data->main_iDomTools->getDayLenght(true));
   43|      1|        ret.append("\n");
   44|      1|        return ret;
   45|      1|    }
   46|     22|    else if (v[1]=="sysinfo"){
   47|      1|        return my_data->main_iDomTools->getSystemInfo();
   48|      1|    }
   49|     21|    else if (v[1]=="temperature"){
   50|      2|        if ( v.size() < 3){
   51|      1|            return my_data->main_iDomTools->getTemperatureString();
   52|      1|        }
   53|      1|        else {
   54|      1|            if (v[2] == "stats"){
   55|      1|                std::string ret;
   56|      1|                try{
   57|      1|                 ret = my_data->main_iDomTools->getThermoStats(v[3]);
   58|      1|                }
   59|      1|                catch (std::string& obj){
   60|      1|                    ret = obj +" "+v[3];
   61|      1|                }
   62|      1|               return ret;
   63|     19|            }
   64|      1|        }
   65|     19|    }
   66|     19|    else if (v[1]=="text"){
   67|      1|        return my_data->main_iDomTools->getTextToSpeach();
   68|      1|    }
   69|     18|    else if (v[1] == "lock"){
   70|      1|        my_data->main_iDomTools->lockHome();
   71|      1|        return "hous locked";
   72|      1|    }
   73|     17|    else if (v[1] == "unlock"){
   74|      1|        my_data->main_iDomTools->unlockHome();
   75|      1|        return "hous unlocked";
   76|      1|    }
   77|     16|    else if (v[1]=="LED"){
   78|      2|        if (v.size() != 7){
   79|      2|            if (v[2]=="OFF"){
   80|      1|                return my_data->main_iDomTools->ledOFF();
   81|      1|            }
   82|      1|            else if(v[2] == "set"){
   83|      0|               return my_data->main_iDomTools->ledOn(
   84|      0|                            my_data->ptr_pilot_led->colorLED[2],
   85|      0|                            std::stoi(v[3]),
   86|      0|                            std::stoi(v[4])
   87|      0|                            );
   88|      0|            }
   89|      1|            else{
   90|      1|                return "need more parameter from-to-R-G-B";
   91|      1|            }
   92|      0|        }
   93|      0|        else {
   94|      0|            LED_Strip strip(v[2],v[3],v[4],v[5],v[6]);
   95|      0|            return my_data->main_iDomTools->ledOn(strip);
   96|      0|        }
   97|     14|    }
   98|     14|    else if (v[1]=="say"){
   99|      1|        if (v.size() > 3){
  100|      1|            std::vector<std::string> vTTS ={ my_data->main_iDomTools->getTextToSpeach()};
  101|      1|            my_data->main_iDomTools->textToSpeach(&vTTS);
  102|      1|            return "sad";
  103|      1|        }
  104|     13|    }
  105|     13|    else if (v[1]=="smog"){
  106|      1|        return my_data->main_iDomTools->getSmog()+" mg/m^3";
  107|      1|    }
  108|     12|    else if (v[1]=="230V"){
  109|      3|        if (v.size() > 2 && v[2]=="ON"){
  110|      1|            my_data->main_iDomTools->turnOnPrinter();
  111|      1|            return "230V ON";
  112|      1|        }
  113|      2|        else if(v.size() > 2 && v[2]=="OFF"){
  114|      1|            my_data->main_iDomTools->turnOffPrinter();
  115|      1|            return "230V OFF";
  116|      1|        }
  117|      1|        else {
  118|      1|            return "wrong paramiter";
  119|      1|        }
  120|      9|    }
  121|      9|    else if (v[1]=="wifi"){
  122|      1|        std::string readBuffer = useful_F_libs::httpPost("http://cyniu88.no-ip.pl/cgi-bin/kto_wifi.sh",10);
  123|      1|        return readBuffer;
  124|      1|    }
  125|      8|    else if (v[1]=="lightning"){
  126|      1|        std::stringstream readBuffer;
  127|      1|        readBuffer << my_data->main_iDomTools->getLightningStruct().data.str();
  128|      1|        readBuffer << std::endl;
  129|      1|        readBuffer << "bool: " << my_data->main_iDomTools->getLightningStruct().riseAlarm;
  130|      1|        readBuffer <<std::endl <<" time: ";
  131|      1|        readBuffer << Clock::getTime().getString();
  132|      1|        return readBuffer.str();
  133|      1|    }
  134|      7|    else if (v[1]=="kill"){
  135|      0|
  136|      0|        if (v[2]=="thread"){
  137|      0|            my_data->main_THREAD_arr->at(std::stoi(v[3]) ).thread.~thread();
  138|      0|            return "done!";
  139|      0|        }
  140|      7|    }
  141|      7|    else if (v[1]=="facebook"){
  142|      0|        std::string msg;
  143|      0|        for (unsigned int i = 2; i < v.size(); ++i){
  144|      0|            msg+=" ";
  145|      0|            msg+=v[i];
  146|      0|        }
  147|      0|        return my_data->main_iDomTools->postOnFacebook(msg);
  148|      0|    }
  149|      7|    else if (v[1]=="viber"){
  150|      0|        std::string msg;
  151|      0|        for (unsigned int i = 2; i < v.size(); ++i){
  152|      0|            msg+=" ";
  153|      0|            msg+=v[i];
  154|      0|        }
  155|      0|        STATE stMSG = my_data->main_iDomTools->sendViberMsgBool(msg, my_data->server_settings->viberReceiver.at(0),
  156|      0|                                                     my_data->server_settings->viberSender);
  157|      0|        if(stMSG == STATE::SEND_OK){
  158|      0|            return "wiadomosc wyslana poprawnie";
  159|      0|        }
  160|      0|        else{
  161|      0|            return "blad wysylania wiadomosci - sprawdz logi";
  162|      0|        }
  163|      7|    }
  164|      7|    else if (v[1] == "camera"){
  165|      3|
  166|      3|        if (v.size() < 4){
  167|      1|            return "not enough parameters";
  168|      1|        }
  169|      2|        if (v[2]=="LED" && v[3] == "ON"){
  170|      1|            my_data->main_iDomTools->cameraLedON(my_data->server_settings->cameraLedON);
  171|      1|        }
  172|      1|        else if (v[2]=="LED" && v[3] == "OFF"){
  173|      1|            my_data->main_iDomTools->cameraLedOFF(my_data->server_settings->cameraLedOFF);
  174|      1|        }
  175|      2|        return "led DONE";
  176|      2|    }
  177|      4|    else if (v[1]=="weather"){
  178|      0|
  179|      0|        if (v.size() < 4){
  180|      0|            return "not enough parameters";
  181|      0|        }
  182|      0|        std::string tempHTML = my_data->main_iDomTools->getWeatherEvent(v[2],std::stoi(v[3]));
  183|      0|        return useful_F_libs::removeHtmlTag(tempHTML);
  184|      0|    }
  185|      4|    else if (v[1] == "KODI"){
  186|      3|        return my_data->main_iDomTools->startKodi_Thread();
  187|      3|    }
  188|      1|    else if (v[1]=="alarm"){
  189|      0|
  190|      0|        if (v.size() < 3){
  191|      0|            return "not enough parameters";
  192|      0|        }
  193|      0|        if (v[2] == "OFF"){
  194|      0|            my_data->alarmTime.state = STATE::DEACTIVE;
  195|      0|            my_data->main_iDomStatus->setObjectState("alarm", my_data->alarmTime.state);
  196|      0|            my_data->main_iDomTools->saveState_iDom();
  197|      0|            return "alarm clock has been deactivated";
  198|      0|        }
  199|      0|        else if (v[2] == "GET"){
  200|      0|            return my_data->alarmTime.time.getString();
  201|      0|        }
  202|      0|        else if (v[2] == "SET" && v.size() == 5){
  203|      0|            if (v[3] == "from")
  204|      0|            {
  205|      0|                my_data->alarmTime.fromVolume = std::stoi(v[4]);
  206|      0|            }
  207|      0|            else if (v[3] == "to")
  208|      0|            {
  209|      0|                my_data->alarmTime.toVolume = std::stoi(v[4]);
  210|      0|            }
  211|      0|            else if (v[3] == "radio")
  212|      0|            {
  213|      0|                my_data->alarmTime.radioID = std::stoi(v[4]);
  214|      0|            }
  215|      0|            std::stringstream ret;
  216|      0|            ret << "The values has beedn set:" << std::endl;
  217|      0|            ret << "From Value: " << my_data->alarmTime.fromVolume << std::endl;
  218|      0|            ret << "To Value: " << my_data->alarmTime.toVolume << std::endl;
  219|      0|            ret << "Radio ID: " << my_data->alarmTime.radioID << std::endl;
  220|      0|            my_data->main_iDomTools->saveState_iDom();
  221|      0|            return ret.str();
  222|      0|        }
  223|      0|        else if (v[2] == "ON" && v.size() > 3){
  224|      0|            my_data->alarmTime.time = Clock(v[3]);
  225|      0|            my_data->alarmTime.state = STATE::ACTIVE;
  226|      0|            my_data->main_iDomStatus->setObjectState("alarm", my_data->alarmTime.state);
  227|      0|            my_data->main_iDomTools->saveState_iDom();
  228|      0|            return "alarm clock has been activated";
  229|      0|        }
  230|      1|    }
  231|      1|    return "iDom - unknown parameter: "+ v[1];
  232|      1|}
  233|       |
  234|       |std::string command_iDom::help()
  235|      3|{
  236|      3|    std::stringstream help;
  237|      3|    help << "iDom - for control smart home" << std::endl;
  238|      3|    help << "iDom speakers ON/OFF - to on or off speakers" << std::endl;
  239|      3|    help << "iDom 230v ON/OFF     - to on or off printers" << std::endl;
  240|      3|    help << "iDom sunset/sunrise/day lenght - to show those parameters" << std::endl;
  241|      3|    help << "iDom sun        - get sunrise, sunset and day lenght" << std::endl;
  242|      3|    help << "iDom sysinfo    - get system info" << std::endl;
  243|      3|    help << "iDom text       - get text to speach" << std::endl;
  244|      3|    help << "iDom say <text> - say standatrd info or <text>" << std::endl;
  245|      3|    help << "iDom sms <text> - send sms<text>" << std::endl;
  246|      3|    help << "iDom LED <FROM> <TO> <R> <G> <B> - set RGB LED strip" << std::endl;
  247|      3|    help << "iDom LED OFF    - led off" << std::endl;
  248|      3|    help << "iDom LED set <from> <to> - set green led from to" << std::endl;
  249|      3|    help << "iDom temperature - get temperature from all termomether" << std::endl;
  250|      3|    help << "iDom temperature stats <name> - get temperature stats from termomether <name>" << std::endl;
  251|      3|    help << "iDom smog       - get current SMOG level (KRAKOW)" << std::endl;
  252|      3|    help << "iDom kill thread <ID>  - kill thread but denger!" << std::endl;
  253|      3|    help << "iDom camera LED ON/OFF - LED camera work" << std::endl;
  254|      3|    help << "iDom facebook ... - post on facebook wall" << std::endl;
  255|      3|    help << "iDom viber ...   - send viber msg" << std::endl;
  256|      3|    help << "iDom weather <city> <radius> - get weather alert" << std::endl;
  257|      3|    help << "iDom lightning  - get lightning alert" << std::endl;
  258|      3|    help << "iDom alarm ON/OFF hh:mm - set larm clock" << std::endl;
  259|      3|    help << "iDom alarm SET from/to/radio <value> - set larm clock" << std::endl;
  260|      3|    help << "iDom alarm GET - get alarm time" << std::endl;
  261|      3|    help << "iDom lock   - lock home" << std::endl;
  262|      3|    help << "iDom unlock - unlock home" << std::endl;
  263|      3|    help << "iDom KODI - start KODI smart TV" << std::endl;
  264|      3|    help << "iDom wifi - show all wifi client" << std::endl;
  265|      3|    return help.str();
  266|      3|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_ip.cpp:
    1|       |#include "command_ip.h"
    2|       |
    3|       |command_ip::command_ip(const std::string &name):command(name)
    4|      8|{
    5|      8|}
    6|       |
    7|       |std::string command_ip::execute(std::vector<std::string> &v, thread_data *my_data)
    8|      1|{
    9|      1|    return "iDom server IP: " +my_data->server_settings->SERVER_IP;
   10|      1|}
   11|       |
   12|       |std::string command_ip::help()
   13|      1|{
   14|      1|    return "ip - show server IP address\n";
   15|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_log.cpp:
    1|       |#include "command_log.h"
    2|       |
    3|       |command_log::command_log(const std::string &name):command(name)
    4|      8|{
    5|      8|}
    6|       |
    7|       |std::string command_log::execute(std::vector<std::string> &v, thread_data *my_data)
    8|      8|{
    9|      8|    std::string msg;
   10|     16|    for (unsigned int i = 2; i < v.size(); ++i)
   11|      8|    {
   12|      8|        msg+=" ";
   13|      8|        msg+=v[i];
   14|      8|    }
   15|      8|    log_file_mutex.mutex_lock();
   16|      8|    log_file_cout <<"USER:- " << logLevel(v[1]) << msg <<std::endl;;
   17|      8|    log_file_mutex.mutex_unlock();
   18|      8|    return "DONE!";
   19|      8|}
   20|       |
   21|       |std::string command_log::help()
   22|      1|{
   23|      1|    std::stringstream help;
   24|      1|    help << "log <logLevel> \"***TXT***\"- add *** to iDom logfile" << std::endl;
   25|      1|    return help.str();
   26|      1|}
   27|       |
   28|       |logger_level command_log::logLevel(const std::string &level)
   29|      8|{
   30|      8|    if (level == "VERBOSE"){
   31|      1|        return VERBOSE;
   32|      1|    }
   33|      7|    else if (level == "DEBUG"){
   34|      1|        return DEBUG;
   35|      1|    }
   36|      6|    else if (level == "INFO"){
   37|      1|        return INFO;
   38|      1|    }
   39|      5|    else if (level == "WARNING"){
   40|      1|        return WARNING;
   41|      1|    }
   42|      4|    else if (level == "ERROR"){
   43|      1|        return ERROR;
   44|      1|    }
   45|      3|    else if (level == "FATAL"){
   46|      1|        return FATAL;
   47|      1|    }
   48|      2|    else if (level == "CRITICAL"){
   49|      1|        return CRITICAL;
   50|      1|    }
   51|      1|puts ("nie mam co wysetlic wale verbose");
   52|      1|        return VERBOSE;
   53|      1|
   54|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_mpd.cpp:
    1|       |#include "command_mpd.h"
    2|       |#include "../../blockQueue/blockqueue.h"
    3|       |#include "../../functions/functions.h"
    4|       |
    5|       |command_mpd::command_mpd(const std::string &name) :command(name)
    6|     16|{
    7|     16|}
    8|       |
    9|       |std::string command_mpd::execute(std::vector<std::string> &v, thread_data *my_data)
   10|     14|{
   11|     14|    std::string str_buf;
   12|     14|
   13|     14|    if (v[1]=="start")
   14|      2|    {
   15|      2|        if (v.size()>2)
   16|      1|        {
   17|      1|            int id = std::stoi(v[2]);
   18|      1|            if (id > 0)
   19|      1|            {
   20|      1|                iDomTOOLS::MPD_play(my_data,id);
   21|      1|                useful_F::sleep(1);
   22|      1|                str_buf = my_data->ptr_MPD_info->songList[id-1];
   23|      1|            }
   24|      1|        }
   25|      1|        else
   26|      1|        {
   27|      1|            iDomTOOLS::MPD_play(my_data);
   28|      1|            useful_F::sleep(1);
   29|      1|            str_buf=my_data->ptr_MPD_info->title;
   30|      1|        }
   31|      2|        my_data->main_iDomTools->saveState_iDom();
   32|      2|    }
   33|     12|    else if (v[1]=="stop")
   34|      1|    {
   35|      1|        iDomTOOLS::MPD_stop();
   36|      1|        str_buf="stoped!";
   37|      1|        my_data->main_iDomTools->saveState_iDom();
   38|      1|    }
   39|     11|    else if (v[1]=="next")
   40|      1|    {
   41|      1|        iDomTOOLS::MPD_next();
   42|      1|        useful_F::sleep(1);
   43|      1|        str_buf = my_data->ptr_MPD_info->radio + " : "+ my_data->ptr_MPD_info->title;
   44|      1|    }
   45|     10|    else if (v[1]=="prev")
   46|      1|    {
   47|      1|        iDomTOOLS::MPD_prev();
   48|      1|        useful_F::sleep(1);
   49|      1|        str_buf=my_data->ptr_MPD_info->radio+ " : "+ my_data->ptr_MPD_info->title;
   50|      1|    }
   51|      9|    else if (v[1]=="pause")
   52|      1|    {
   53|      1|        iDomTOOLS::MPD_pause();
   54|      1|        str_buf="paused!";
   55|      1|    }
   56|      8|    else if (v[1]=="volume")
   57|      4|    {
   58|      4|        if (v[2]=="up")
   59|      1|        {
   60|      1|            iDomTOOLS::MPD_volumeUp();
   61|      1|        }
   62|      3|        else if (v[2]=="down")
   63|      1|        {
   64|      1|            iDomTOOLS::MPD_volumeDown();
   65|      1|        }
   66|      2|        else
   67|      2|        {
   68|      2|            int vol = std::stoi(v[2]);
   69|      2|            if (vol >0 && vol <100)
   70|      1|            {
   71|      1|                iDomTOOLS::MPD_volumeSet(my_data,vol);
   72|      1|            }
   73|      2|        }
   74|      4|        //sleep(1);
   75|      4|        str_buf=std::to_string(my_data->ptr_MPD_info->volume);
   76|      4|    }
   77|      4|    else if (v[1]=="get")
   78|      2|    {
   79|      2|        if(v[2]=="volume")
   80|      1|        {
   81|      1|            str_buf=std::to_string(my_data->ptr_MPD_info->volume);
   82|      1|        }
   83|      1|        else if (v[2]=="info")
   84|      1|        {
   85|      1|            str_buf = my_data->ptr_MPD_info->radio + " : "+ my_data->ptr_MPD_info->title;
   86|      1|        }
   87|      2|    }
   88|      2|    else if (v[1]=="list")
   89|      1|    {
   90|      1|        for (auto i : my_data->ptr_MPD_info->songList)
   91|      3|            str_buf += i+"\n";
   92|      1|    }
   93|      1|    else
   94|      1|    {
   95|      1|        str_buf = "unknown parameter " + v[1];
   96|      1|    }
   97|     14|    return str_buf;
   98|     14|}
   99|       |
  100|       |std::string command_mpd::help()
  101|      1|{
  102|      1|    std::stringstream help;
  103|      1|    help << "MPD - for control music player:" << std::endl;
  104|      1|    help << "parameter:" << std::endl;
  105|      1|    help << "\tstart - play music" << std::endl;
  106|      1|    help << "\tstop  - stop music" << std::endl;
  107|      1|    help << "\tpause - pause music" << std::endl;
  108|      1|    help << "\tnext  - next song" << std::endl;
  109|      1|    help << "\tprev  - previous song" << std::endl;
  110|      1|    help << "\tlist  - show playlist" << std::endl;
  111|      1|    help << "\tget volume - get volume %" << std::endl;
  112|      1|    help << "\tget info - get info about current song" << std::endl;
  113|      1|    help << "\tvolume up/down - increase/decrease volume 1%" << std::endl;
  114|      1|    return help.str();
  115|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_ok.cpp:
    1|       |#include "command_ok.h"
    2|       |
    3|       |command_ok::command_ok(const std::string &name):command(name)
    4|      8|{
    5|      8|}
    6|       |
    7|       |std::string command_ok::execute(std::vector<std::string> &v, thread_data *my_data)
    8|      2|{
    9|      2|    return "\nEND\n";
   10|      2|}
   11|       |
   12|       |std::string command_ok::help()
   13|      2|{
   14|      2|    return "ok - confirmation msg server response: END \n";
   15|      2|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_program.cpp:
    1|       |#include "command_program.h"
    2|       |#include "../../functions/functions.h"
    3|       |#include "../../433MHz/RFLink/rflinkhandler.h"
    4|       |
    5|       |command_program::command_program(const std::string &name):command(name)
    6|     16|{
    7|     16|}
    8|       |
    9|       |std::string command_program::execute(std::vector<std::string> &v, thread_data *my_data)
   10|     10|{
   11|     10|    std::string ret = help();
   12|     10|    if (v.size() <2 )
   13|      1|    {
   14|      1|        return "what?\n" + help();
   15|      1|    }
   16|      9|    if (v[1] == "stop")
   17|      2|    {
   18|      2|        std::string s ="close server";
   19|      2|        useful_F::send_to_arduino_clock(my_data, "STOP");
   20|      2|        iDomTOOLS::MPD_stop();
   21|      2|        my_data->iDomProgramState = iDomStateEnum::CLOSE;
   22|      2|        my_data->main_iDomTools->saveState_iDom();
   23|      2|        throw s;
   24|      2|    }
   25|      7|    if (v.size() < 3 )
   26|      1|    {
   27|      1|        return "add more paramiters";
   28|      1|    }
   29|      6|    if(v[1] == "reload" && v[2] == "soft"){
   30|      1|        std::string s ="close server";
   31|      1|        useful_F::send_to_arduino_clock(my_data, "RELO");
   32|      1|        iDomTOOLS::MPD_stop();
   33|      1|        my_data->iDomProgramState = iDomStateEnum::RELOAD;
   34|      1|        my_data->main_iDomTools->saveState_iDom();
   35|      1|        throw s;
   36|      1|    }
   37|      5|    else if(v[1] == "reload" && v[2] == "hard")
   38|      1|    {
   39|      1|        std::string s ="close server";
   40|      1|        useful_F::send_to_arduino_clock(my_data, "UPAD");
   41|      1|        iDomTOOLS::MPD_stop();
   42|      1|        my_data->iDomProgramState = iDomStateEnum::HARD_RELOAD;
   43|      1|        my_data->main_iDomTools->saveState_iDom();
   44|      1|        throw s;
   45|      1|    }
   46|      4|    else if(v[1] == "clear" && v[2] == "ram")
   47|      1|    {
   48|      1|        useful_F::runLinuxCommand("sync; echo 3 > /proc/sys/vm/drop_caches");
   49|      1|        ret = "ram has beed freed";
   50|      1|    }
   51|      3|    else if(v[1] == "debuge" && v[2] == "variable")
   52|      1|    {
   53|      1|        std::stringstream r;
   54|      1|       r << "my_data->alarmTime.fromVolume \t" << my_data->alarmTime.fromVolume <<std::endl;
   55|      1|        r << "my_data->alarmTime.radioID \t" << my_data->alarmTime.radioID <<std::endl;
   56|      1|        r << "my_data->alarmTime.state \t" << stateToString( my_data->alarmTime.state) <<std::endl;
   57|      1|        r << "my_data->alarmTime.time \t" << my_data->alarmTime.time.getString() <<std::endl;
   58|      1|        r << "my_data->alarmTime.toVolume \t" << my_data->alarmTime.toVolume <<std::endl;
   59|      1|        r << std::endl;
   60|      1|        r << "my_data->encriptionKey \t" << my_data->encriptionKey <<std::endl;
   61|      1|        r << std::endl;
   62|      1|        r << "my_data->server_settings->BaudRate \t" << my_data->server_settings->BaudRate <<std::endl;
   63|      1|        r << "my_data->server_settings->cameraLedOFF \t" << my_data->server_settings->cameraLedOFF <<std::endl;
   64|      1|        r << "my_data->server_settings->cameraLedON \t" << my_data->server_settings->cameraLedON <<std::endl;
   65|      1|        r << "my_data->server_settings->cameraURL \t" << my_data->server_settings->cameraURL <<std::endl;
   66|      1|        r << "my_data->server_settings->encrypted \t" << my_data->server_settings->encrypted <<std::endl;
   67|      1|        r << "my_data->server_settings->facebookAccessToken \t" << my_data->server_settings->facebookAccessToken <<std::endl;
   68|      1|        r << "my_data->server_settings->ftpServer.URL \t" << my_data->server_settings->ftpServer.URL <<std::endl;
   69|      1|        r << "my_data->server_settings->ftpServer.user \t" << my_data->server_settings->ftpServer.user <<std::endl;
   70|      1|        r << "my_data->server_settings->ID_server \t" << my_data->server_settings->ID_server <<std::endl;
   71|      1|        r << "my_data->server_settings->lightningApiURL \t" << my_data->server_settings->lightningApiURL <<std::endl;
   72|      1|        r << "my_data->server_settings->MENU_PATH \t" << my_data->server_settings->MENU_PATH<<std::endl;
   73|      1|        r << "my_data->server_settings->MOVIES_DB_PATH \t" << my_data->server_settings->MOVIES_DB_PATH<<std::endl;
   74|      1|        r << "my_data->server_settings->MPD_IP \t" << my_data->server_settings->MPD_IP<<std::endl;
   75|      1|        r << "my_data->server_settings->omxplayerFile \t" << my_data->server_settings->omxplayerFile<<std::endl;
   76|      1|        r << "my_data->server_settings->PORT \t" << my_data->server_settings->PORT<<std::endl;
   77|      1|        r << "my_data->server_settings->portRS232 \t" << my_data->server_settings->portRS232<<std::endl;
   78|      1|        r << "my_data->server_settings->portRS232_clock \t" << my_data->server_settings->portRS232_clock<<std::endl;
   79|      1|        r << "my_data->server_settings->radio433MHzConfigFile \t" << my_data->server_settings->radio433MHzConfigFile<<std::endl;
   80|      1|        r << "my_data->server_settings->RFLinkBaudRate \t" << my_data->server_settings->RFLinkBaudRate<<std::endl;
   81|      1|        r << "my_data->server_settings->RFLinkPort \t" << my_data->server_settings->RFLinkPort<<std::endl;
   82|      1|        r << "my_data->server_settings->saveFilePath \t" << my_data->server_settings->saveFilePath<<std::endl;
   83|      1|        r << "my_data->server_settings->SERVER_IP \t" << my_data->server_settings->SERVER_IP<<std::endl;
   84|      1|        r << "my_data->server_settings->THREAD_CRON \t" << my_data->server_settings->THREAD_CRON<<std::endl;
   85|      1|        r << "my_data->server_settings->THREAD_DUMMY \t" << my_data->server_settings->THREAD_DUMMY<<std::endl;
   86|      1|        r << "my_data->server_settings->THREAD_IRDA \t" << my_data->server_settings->THREAD_IRDA<<std::endl;
   87|      1|        r << "my_data->server_settings->THREAD_MPD \t" << my_data->server_settings->THREAD_MPD<<std::endl;
   88|      1|        r << "my_data->server_settings->THREAD_RS232 \t" << my_data->server_settings->THREAD_RS232<<std::endl;
   89|      1|        r << "my_data->server_settings->TS_KEY \t" << my_data->server_settings->TS_KEY<<std::endl;
   90|      1|        r << "my_data->server_settings->viberAvatar \t" << my_data->server_settings->viberAvatar<<std::endl;
   91|      1|        r << "my_data->server_settings->viberReceiver.at(0) \t" << my_data->server_settings->viberReceiver.at(0)<<std::endl;
   92|      1|        r << "my_data->server_settings->viberSender \t" << my_data->server_settings->viberSender<<std::endl;
   93|      1|        r << "my_data->server_settings->viberToken \t" << my_data->server_settings->viberToken<<std::endl;
   94|      1|        r << "my_data->server_settings->v_delay \t" << my_data->server_settings->v_delay<<std::endl;
   95|      1|        r << std::endl;
   96|      1|        r << "my_data->server_settings->sleeper \t" << my_data->sleeper<<std::endl;
   97|      1|        r << std::endl;
   98|      1|        r << "my_data->iDomProgramState \t" << static_cast<int>(my_data->iDomProgramState)<<std::endl;
   99|      1|        r << std::endl;
  100|      1|        r << "my_data->main_iDomStatus \t" << my_data->main_iDomStatus->getAllObjectsStateString()<<std::endl;
  101|      1|        r << std::endl;
  102|      1|        r << "my_data->idom_all_state.houseState \t" <<stateToString(my_data->idom_all_state.houseState)<<std::endl;
  103|      1|        r << std::endl;
  104|      1|        r << "my_data->now_time \t" << my_data->now_time<<std::endl;
  105|      1|        r << "my_data->start - time \t" << my_data->start<<std::endl;
  106|      1|        r << std::endl;
  107|      1|        r << "my_data->pointer.ptr_buf \t" << my_data->pointer.ptr_buf<<std::endl;
  108|      1|        r << "my_data->pointer.ptr_who \t" << my_data->pointer.ptr_who<<std::endl;
  109|      1|
  110|      1|        r << std::endl;
  111|      1|        r << "my_data->ptr_MPD_info->artist \t" << my_data->ptr_MPD_info->artist<<std::endl;
  112|      1|        r << "my_data->ptr_MPD_info->currentSongID \t" << my_data->ptr_MPD_info->currentSongID<<std::endl;
  113|      1|        r << "my_data->ptr_MPD_info->isPlay \t" << my_data->ptr_MPD_info->isPlay<<std::endl;
  114|      1|        r << "my_data->ptr_MPD_info->radio \t" << my_data->ptr_MPD_info->radio<<std::endl;
  115|      1|        r << "my_data->ptr_MPD_info->songList.at(0) \t" << my_data->ptr_MPD_info->songList.at(0)<<std::endl;
  116|      1|        r << "my_data->ptr_MPD_info->title \t" << my_data->ptr_MPD_info->title<<std::endl;
  117|      1|        r << "my_data->ptr_MPD_info->volume \t" << my_data->ptr_MPD_info->volume<<std::endl;
  118|      1|
  119|      1|        r << std::endl;
  120|      1|        r << "my_data->main_RFLink->okTime \t" << my_data->main_RFLink->okTime<<std::endl;
  121|      1|        r << "my_data->main_RFLink->pingTime \t" << my_data->main_RFLink->pingTime<<std::endl;
  122|      1|
  123|      1|        r << std::endl;
  124|      1|        r << "my_data->mainLCD-> \t" << my_data->mainLCD->getData() <<std::endl;
  125|      1|
  126|      1|        r << "END.";
  127|      1|        ret = r.str();
  128|      1|    }
  129|      2|    else if(v[1] == "raspberry")
  130|      1|    {
  131|      1|        int i = useful_F::runLinuxCommand(v[2].c_str());
  132|      1|        ret = "command done with exitcode: " + std::to_string(i);
  133|      1|    }
  134|      1|    else
  135|      1|    {
  136|      1|        ret = " what? - "+ v[1];
  137|      1|    }
  138|      6|    return ret;
  139|      6|}
  140|       |
  141|       |std::string command_program::help()
  142|     12|{
  143|     12|    std::stringstream help;
  144|     12|    help << "program stop - close iDom server"<< std::endl;
  145|     12|    help << "program reload soft - reload iDom server" << std::endl;
  146|     12|    help << "program reload hard - reload iDom server" << std::endl;
  147|     12|    help << "program clear ram   - reload iDom server" << std::endl;
  148|     12|    help << "program debuge variable - show value iDom server variable" << std::endl;
  149|     12|    help << "program raspberry <command> - put command to raspberry " << std::endl;
  150|     12|    return help.str();
  151|     12|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_put.cpp:
    1|       |#include "command_put.h"
    2|       |#include "../../../src/CRON/cron.hpp"
    3|       |
    4|       |command_put::command_put(const std::string &name):command(name)
    5|      8|{
    6|      8|}
    7|       |
    8|       |std::string command_put::execute(std::vector<std::string> &v, thread_data *my_data)
    9|      1|{
   10|      1|    std::string str_buf = "command put - wrong paramiter: ";
   11|      1|    if (v.size() > 1){
   12|      1|        if (v[1] =="temperature")
   13|      1|        {
   14|      1|            str_buf.erase();
   15|      1|            my_data->main_iDomTools->send_temperature_thingSpeak();
   16|      1|            str_buf = "DONE";
   17|      1|        }
   18|      1|    }
   19|      1|    return str_buf;
   20|      1|}
   21|       |
   22|       |std::string command_put::help()
   23|      1|{
   24|      1|    std::stringstream help;
   25|      1|    help << "put <parameter> - " << std::endl << std::endl;
   26|      1|    help << "parameter:" << std::endl;
   27|      1|    help << "\ttemperature - put actual temperature from inside and outside and smog on thingspeak\n" << std::endl;
   28|      1|    return help.str();
   29|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_show.cpp:
    1|       |#include <sstream>
    2|       |#include "command_show.h"
    3|       |#include "../../../src/functions/functions.h"
    4|       |
    5|       |command_show::command_show(const std::string &name):command(name)
    6|     16|{
    7|     16|
    8|     16|}
    9|       |
   10|       |std::string command_show::execute(std::vector<std::string> &v, thread_data *my_data)
   11|      9|{
   12|      9|    std::string str_buf = "show what?";
   13|      9|    if (v.size() > 1){
   14|      8|        if (v[1] =="log")
   15|      4|        {
   16|      4|            if (v.size() >2 && v.size() < 4){
   17|      1|                 return useful_F::l_send_file(_logfile,v[2],true);
   18|      1|            }
   19|      3|            else if (v.size() > 3){
   20|      2|                if (v[2] == "no"){
   21|      1|                 return useful_F::l_send_file(_logfile,v[3],false);
   22|      1|                }
   23|      1|                else{
   24|      1|                    return "do you mean : show log no <string>?";
   25|      1|                }
   26|      1|            }
   27|      1|            return useful_F::l_send_file(_logfile,"");
   28|      1|        }
   29|      4|        if (v[1]=="thread")
   30|      3|        {
   31|      3|            if (v.size() < 3){
   32|      1|                return "No ID";
   33|      1|            }
   34|      2|            else {
   35|      2|                if (v [2] !="all"){
   36|      1|                    std::stringstream ss;
   37|      1|                    ss << my_data->main_THREAD_arr->at(std::stoi(v[2])).thread_ID;
   38|      1|                    str_buf = my_data->main_THREAD_arr->at(std::stoi(v[2])).thread_name;
   39|      1|                    str_buf += "ID: ";
   40|      1|                    str_buf += ss.str();
   41|      1|                    str_buf += " socket: ";
   42|      1|                    str_buf += std::to_string(my_data->main_THREAD_arr->at(std::stoi(v[2])).thread_socket);
   43|      1|                    return str_buf;
   44|      1|                }
   45|      1|                else{
   46|      1|                    str_buf.erase();
   47|      1|                    std::stringstream ss;
   48|     11|                    for (int i =0; i< iDomConst::MAX_CONNECTION;++i)
   49|     10|                    {
   50|     10|                        ss.clear();
   51|     10|                        ss = std::stringstream();
   52|     10|                        str_buf += std::to_string(i)+" ";
   53|     10|                        str_buf += my_data->main_THREAD_arr->at(i).thread_name;
   54|     10|                        str_buf += "\t ID: ";
   55|     10|                        ss << my_data->main_THREAD_arr->at(i).thread_ID;
   56|     10|                        str_buf += ss.str();
   57|     10|                        int idSocket = my_data->main_THREAD_arr->at(i).thread_socket;
   58|     10|
   59|     10|                        if (idSocket != 0 && idSocket != 1){
   60|      1|                            str_buf += " socket: ";
   61|      1|                            str_buf += std::to_string(my_data->main_THREAD_arr->at(i).thread_socket);
   62|      1|                        }
   63|     10|                        str_buf += "\n";
   64|     10|                    }
   65|      1|                    return str_buf;
   66|      1|                }
   67|      1|            }
   68|      1|        }
   69|      1|        else {
   70|      1|            return "wrong parameter: "+v[1];
   71|      1|        }
   72|      1|    }
   73|      1|    return str_buf;
   74|      1|}
   75|       |
   76|       |std::string command_show::help()
   77|      1|{
   78|      1|    std::stringstream help;
   79|      1|    help << "show <parameter>- for show something" <<std::endl << std::endl;
   80|      1|    help << "parameter:" << std::endl;
   81|      1|    help << "\tlog             - show all server log" << std::endl;
   82|      1|    help << "\tlog <string>    - show all server log lines which contain <string>" << std::endl;
   83|      1|    help << "\tlog no <string> - show all server log lines which NO contain <string>" << std::endl;
   84|      1|    help << "\tthread all      - show all server thread pid " << std::endl;
   85|      1|    help << "\tthread <number> - show server <number> thread pid " << std::endl;
   86|      1|
   87|      1|    return help.str();
   88|      1|}
   89|       |

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_sleep.cpp:
    1|       |#include "command_sleep.h"
    2|       |#include "../../functions/functions.h"
    3|       |#include "../../thread_functions/iDom_thread.h"
    4|       |
    5|       |command_sleep::command_sleep(const std::string &name):command(name)
    6|     12|{
    7|     12|}
    8|       |
    9|       |std::string command_sleep::execute(std::vector<std::string> &v, thread_data *my_data)
   10|      5|{   if (v.size()== 1)
   11|      1|    {
   12|      1|        return "sleep set to: "+ std::to_string(my_data->sleeper);
   13|      1|    }
   14|      4|    else if (v.size() == 3 ){
   15|      3|        if (v[1] == "set"){
   16|      2|            int sleep = 0;
   17|      2|            try {
   18|      2|                sleep = std::stoi(v[2]);
   19|      2|            }
   20|      2|            catch (...){
   21|      1|                return "system need intiger > 0 not: " +v[2];
   22|      1|            }
   23|      1|
   24|      1|            my_data->sleeper = sleep;
   25|      1|
   26|      1|            return iDOM_THREAD::start_thread("Sleep MPD",useful_F::sleeper_mpd,my_data);
   27|      1|        }
   28|      1|        else {
   29|      1|            return "wrong parametr "+v[1];
   30|      1|        }
   31|      1|    }
   32|      1|    return "internal error";
   33|      1|}
   34|       |
   35|       |std::string command_sleep::help()
   36|      1|{
   37|      1|    std::stringstream help;
   38|      1|    help << "sleep - show actual time to stop play music" << std::endl;
   39|      1|    help << "sleep set <int> - start sleep for <int> minutes" << std::endl;
   40|      1|
   41|      1|    return help.str();
   42|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_state.cpp:
    1|       |#include "command_state.h"
    2|       |
    3|       |command_state::command_state(const std::string &name):command(name)
    4|     10|{
    5|     10|}
    6|       |
    7|       |std::string command_state::execute(std::vector<std::string> &v, thread_data *my_data)
    8|      3|{
    9|      3|    std::string ret = "need parameter!\n" + help();
   10|      3|    if (v.size() > 1)
   11|      2|    {
   12|      2|
   13|      2|        if (v[1] == "all")
   14|      1|        {
   15|      1|            return my_data->main_iDomStatus->getAllObjectsStateString();
   16|      1|        }
   17|      1|        if (v[1] != "all")
   18|      1|        {
   19|      1|            return my_data->main_iDomStatus->getObjectStateString(v[1]);
   20|      1|        }
   21|      1|
   22|      1|    }
   23|      1|    return ret;
   24|      1|}
   25|       |
   26|       |std::string command_state::help()
   27|      4|{
   28|      4|    std::stringstream help;
   29|      4|    help << "state all/<name> - show state" << std::endl;
   30|      4|    return help.str();
   31|      4|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_uptime.cpp:
    1|       |#include "command_uptime.h"
    2|       |#include "../../../src/functions/functions.h"
    3|       |
    4|       |command_UPTIME::command_UPTIME(const std::string &name):command(name)
    5|      8|{
    6|      8|
    7|      8|}
    8|       |
    9|       |std::string command_UPTIME::execute(std::vector<std::string> &v, thread_data *my_data)
   10|      1|{
   11|      1|    std::string str_buf;
   12|      1|    time(&my_data->now_time);
   13|      1|    str_buf ="uptime: ";
   14|      1|    str_buf.append(useful_F::sek_to_uptime(difftime(my_data->now_time,my_data->start) ) );
   15|      1|    return str_buf;
   16|      1|}
   17|       |
   18|       |std::string command_UPTIME::help()
   19|      1|{
   20|      1|    std::stringstream help;
   21|      1|    help << "uptime - show server uptime" << std::endl;
   22|      1|    return help.str();
   23|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/commandexit.cpp:
    1|       |#include "commandexit.h"
    2|       |
    3|       |commandEXIT::commandEXIT(const std::string &name):command(name)
    4|      8|{
    5|      8|}
    6|       |
    7|       |std::string commandEXIT::execute(std::vector<std::string> &v, thread_data *my_data)
    8|      1|{
    9|      1|    return "\nEND.\n";
   10|      1|}
   11|       |
   12|       |std::string commandEXIT::help()
   13|      1|{
   14|      1|    return "exit - disconnect from server\n";
   15|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/commandrs232.cpp:
    1|       |#include "commandrs232.h"
    2|       |#include "../../../src/functions/functions.h"
    3|       |
    4|       |commandRS232::commandRS232(const std::string &name):command(name)
    5|     15|{
    6|     15|}
    7|       |std::string commandRS232::execute(std::vector<std::string> &v, thread_data *my_data)
    8|      8|{
    9|      8|    std::string str_buf ="default";
   10|      8|
   11|      8|    if (v[1]=="get")
   12|      2|    {
   13|      2|        if (v[2]=="temperature")
   14|      1|        {
   15|      1|            str_buf = useful_F::send_to_arduino(my_data,"temperature:339;");
   16|      1|            str_buf += std::to_string(++counter);
   17|      1|        }
   18|      1|        else
   19|      1|        {
   20|      1|            str_buf = ("wrong parameter: "+v[2]);
   21|      1|        }
   22|      2|    }
   23|      6|
   24|      6|    else if (v[1]=="send")
   25|      1|    {
   26|      1|        str_buf = useful_F::send_to_arduino(my_data,v[2]);
   27|      1|    }
   28|      5|    else if (v[1]=="error")
   29|      4|    {
   30|      4|        if (v.size() < 3 )
   31|      1|            return "add more parameter to error";
   32|      3|        std::string msg;
   33|     10|        for (unsigned int i = 2; i < v.size(); ++i)
   34|      7|        {
   35|      7|            msg+=" ";
   36|      7|            msg+=v[i];
   37|      7|        }
   38|      3|        if(v[2]=="Temperature" && v[3]=="error")
   39|      1|        {
   40|      1|
   41|      1|            my_data->myEventHandler.run("RS232")->addEvent("RS232 error event: "+msg);
   42|      1|            log_file_mutex.mutex_lock();
   43|      1|            log_file_cout << WARNING<< "RS232 ERROR event: " << msg << std::endl;
   44|      1|            log_file_mutex.mutex_unlock();
   45|      1|        }
   46|      2|        else if (v[2]=="test" && v[3]=="msg")
   47|      1|        {
   48|      1|            log_file_mutex.mutex_lock();
   49|      1|            log_file_cout << DEBUG << "RS232 ERROR debug : "<<msg << std::endl;
   50|      1|            log_file_mutex.mutex_unlock();
   51|      1|            str_buf = "DONE!";
   52|      1|        }
   53|      1|        else
   54|      1|        {
   55|      1|            log_file_mutex.mutex_lock();
   56|      1|            log_file_cout << CRITICAL << "RS232 ERROR unknown : "<<msg << std::endl;
   57|      1|            log_file_mutex.mutex_unlock();
   58|      1|        }
   59|      3|    }
   60|      1|    else
   61|      1|    {
   62|      1|        str_buf = ("wrong parameter: "+v[1]);
   63|      1|    }
   64|      8|    return str_buf;
   65|      8|}
   66|       |
   67|       |std::string commandRS232::help()
   68|      1|{
   69|      1|    std::stringstream help;
   70|      1|    help << "RS232 - communication with Arduino:" << std::endl;
   71|      1|    help << "parameter:" << std::endl << std::endl;
   72|      1|    help << "\tsend <command> - send <command> to Arduino" << std::endl;
   73|      1|    help << "\tget <param> - get <param> from Arduino" << std::endl;
   74|      1|    help << "\t\ttemperature - get temeprature INSIDE + OUTSIDE" << std::endl;
   75|      1|
   76|      1|    return help.str();
   77|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/commandtest.cpp:
    1|       |#include "commandtest.h"
    2|       |#include "../../functions/functions.h"
    3|       |#include "../../../ftplibpp/ftplib.h"
    4|       |
    5|       |commandTEST::commandTEST(const std::string &name):command(name)
    6|     10|{
    7|     10|}
    8|       |
    9|       |std::string commandTEST::execute(std::vector<std::string> &v, thread_data *my_data)
   10|      3|{
   11|      3|
   12|      3|    if (v[1] == "test")
   13|      1|    {
   14|      1|        std::string msg = "test - for test";
   15|      1|        my_data->main_iDomTools->runOnSunrise();
   16|      1|        return msg;
   17|      1|    }
   18|      2|    else if (v[1] == "throw")
   19|      1|    {
   20|      1|        throw std::string("test throw");
   21|      1|    }
   22|      1|    return help();
   23|      1|}
   24|       |std::string commandTEST::help()
   25|      2|{
   26|      2|    std::stringstream help;
   27|      2|    help << "test - for test" << std::endl;
   28|      2|    help << "throw - trow test reload program" << std::endl;
   29|      2|    return help.str();
   30|      2|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandhandler.cpp:
    1|       |#include <iostream>
    2|       |#include "../../libs/emoji/emoji.h"
    3|       |#include "commandhandler.h"
    4|       |#include "commandClass/command_mpd.h"
    5|       |#include "commandClass/commandrs232.h"
    6|       |#include "commandClass/command_uptime.h"
    7|       |#include "commandClass/command_big.h"
    8|       |#include "commandClass/command_clock.h"
    9|       |#include "commandClass/command_hello.h"
   10|       |#include "commandClass/command_help.h"
   11|       |#include "commandClass/command_ip.h"
   12|       |#include "commandClass/command_put.h"
   13|       |#include "commandClass/command_sleep.h"
   14|       |#include "commandClass/command_ok.h"
   15|       |#include "commandClass/command_show.h"
   16|       |#include "commandClass/command_idom.h"
   17|       |#include "commandClass/command_program.h"
   18|       |#include "commandClass/commandexit.h"
   19|       |#include "commandClass/commandtest.h"
   20|       |#include "commandClass/command_log.h"
   21|       |#include "commandClass/command_state.h"
   22|       |#include "commandClass/command_ardu.h"
   23|       |
   24|       |commandHandler::commandHandler(thread_data * my_data)
   25|      7|{
   26|      7|    std::unique_ptr <command> test(new commandTEST("test") );
   27|      7|    commandMap.insert( std::make_pair(test->getCommandName(),std::move( test )) );
   28|      7|
   29|      7|    std::unique_ptr <command> program(new command_program("program") );
   30|      7|    commandMap.insert( std::make_pair(program->getCommandName(),std::move( program )) );
   31|      7|
   32|      7|    std::unique_ptr <command> eexit(new commandEXIT("exit"));
   33|      7|    commandMap.insert( std::make_pair(eexit->getCommandName(),std::move( eexit )) );
   34|      7|
   35|      7|    std::unique_ptr <command> MPD(new command_mpd("MPD"));
   36|      7|    commandMap.insert(std::make_pair(MPD->getCommandName(), std::move (MPD)));
   37|      7|
   38|      7|    std::unique_ptr <command> RS232 (new commandRS232("RS232"));
   39|      7|    commandMap.insert(std::make_pair(RS232->getCommandName(), std::move(RS232)));
   40|      7|
   41|      7|    std::unique_ptr <command> uptime (new command_UPTIME("uptime"));
   42|      7|    commandMap.insert(std::make_pair(uptime->getCommandName(), std::move(uptime)));
   43|      7|
   44|      7|    std::unique_ptr <command> big (new command_big("big"));
   45|      7|    commandMap.insert(std::make_pair(big->getCommandName(), std::move(big)));
   46|      7|
   47|      7|    std::unique_ptr <command> clock (new command_clock("clock"));
   48|      7|    commandMap.insert(std::make_pair(clock->getCommandName(), std::move(clock)));
   49|      7|
   50|      7|    std::unique_ptr <command> hello (new command_hello("hello"));
   51|      7|    commandMap.insert(std::make_pair(hello->getCommandName(), std::move(hello)));
   52|      7|
   53|      7|    std::unique_ptr <command> help (new command_help("help"));
   54|      7|    commandMap.insert(std::make_pair(help->getCommandName(), std::move(help)));
   55|      7|
   56|      7|    std::unique_ptr <command> ip (new command_ip("ip"));
   57|      7|    commandMap.insert(std::make_pair(ip->getCommandName(), std::move(ip)));
   58|      7|
   59|      7|    std::unique_ptr <command> ok (new command_ok("ok"));
   60|      7|    commandMap.insert(std::make_pair(ok->getCommandName(), std::move(ok)));
   61|      7|
   62|      7|    std::unique_ptr <command> show (new command_show("show"));
   63|      7|    commandMap.insert(std::make_pair(show->getCommandName(), std::move(show)));
   64|      7|
   65|      7|    std::unique_ptr <command> sleep (new command_sleep("sleep"));
   66|      7|    commandMap.insert(std::make_pair(sleep->getCommandName(), std::move(sleep)));
   67|      7|
   68|      7|    std::unique_ptr <command> put (new command_put("put"));
   69|      7|    commandMap.insert(std::make_pair(put->getCommandName(), std::move(put)));
   70|      7|
   71|      7|    std::unique_ptr <command> iDom (new command_iDom("iDom"));
   72|      7|    commandMap.insert(std::make_pair(iDom->getCommandName(), std::move(iDom)));
   73|      7|
   74|      7|    std::unique_ptr <command> log (new command_log("log"));
   75|      7|    commandMap.insert(std::make_pair(log->getCommandName(), std::move(log)));
   76|      7|
   77|      7|    std::unique_ptr <command> state (new command_state("state"));
   78|      7|    commandMap.insert(std::make_pair(state->getCommandName(), std::move(state)));
   79|      7|
   80|      7|    std::unique_ptr <command> ardu (new command_ardu("ardu", my_data));
   81|      7|    commandMap.insert(std::make_pair(ardu->getCommandName(), std::move(ardu)));
   82|      7|
   83|      7|    this->my_data = my_data;
   84|      7|    this->my_data->commandMapPtr = &commandMap;
   85|      7|}
   86|       |
   87|       |commandHandler::~commandHandler()
   88|      7|{
   89|      7|    puts("commandHandler::~commandHandler()");
   90|      7|}
   91|       |
   92|       |std::string commandHandler::run(std::vector<std::string> &v, thread_data *my_data)
   93|      3|{
   94|      3|    if (commandMap.find(v[0]) == commandMap.end()){
   95|      1|        std::fstream log;
   96|      1|        log.open( "/mnt/ramdisk/command.txt", std::ios::binary | std::ios::in | std::ios::out|std::ios::app );
   97|      1|        log << v[0] << std::endl;
   98|      1|        log.close();
   99|      1|        return EMOJI::emoji(E_emoji::WARNING_SIGN)+" unknown command: "+ v[0];
  100|      1|    }
  101|      2|    else{
  102|      2|        return commandMap[v[0]]->execute(v,my_data);
  103|      2|    }
  104|      3|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandhandlerroot.cpp:
    1|       |#include "commandhandlerroot.h"
    2|       |#include "commandClass/command_cmd.h"
    3|       |#include "commandClass/command_event.h"
    4|       |#include "commandClass/command_433mhz.h"
    5|       |
    6|       |commandHandlerRoot::commandHandlerRoot(thread_data * my_data): commandHandler(my_data)
    7|      7|{
    8|      7|    std::unique_ptr <command> cmd (new command_cmd("cmd"));
    9|      7|    commandMap.insert(std::make_pair(cmd->getCommandName(), std::move(cmd)));
   10|      7|
   11|      7|    std::unique_ptr <command> event (new command_event("event"));
   12|      7|    commandMap.insert(std::make_pair(event->getCommandName(), std::move(event)));
   13|      7|
   14|      7|    std::unique_ptr <command> r_433MHz (new command_433MHz("433MHz"));
   15|      7|    commandMap.insert(std::make_pair(r_433MHz->getCommandName(), std::move(r_433MHz)));
   16|      7|}
   17|       |
   18|       |commandHandlerRoot::~commandHandlerRoot()
   19|      7|{
   20|      7|    puts("commandHandlerRoot::~commandHandlerRoot()");
   21|      7|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandhandlerrs232.cpp:
    1|       |#include "commandhandlerrs232.h"
    2|       |#include "commandClass/command_cmd.h"
    3|       |#include "commandClass/command_event.h"
    4|       |
    5|       |
    6|       |commandHandlerRS232::commandHandlerRS232(thread_data *my_data):commandHandlerRoot(my_data)
    7|      1|{
    8|      1|
    9|      1|}
   10|       |
   11|       |commandHandlerRS232::~commandHandlerRS232()
   12|      1|{
   13|      1|    puts("commandHandlerRS232::~commandHandlerRS232()");
   14|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/test/commandhandler_BT.cpp:
    1|       |#include "../commandhandlerrs232.h"
    2|       |#include "../../iDomTools/test/iDomTools_fixture.h"
    3|       |
    4|       |class command_handler_rs232_fixture : public iDomTOOLS_ClassTest
    5|       |{
    6|       |public:
    7|       |    command_handler_rs232_fixture()
    8|      1|    {
    9|      1|
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<commandHandlerRS232> test_chRS232;
   14|       |    std::vector<std::string> test_v;
   15|       |    void SetUp() final
   16|      1|    {
   17|      1|        iDomTOOLS_ClassTest::SetUp();
   18|      1|        test_chRS232 = std::make_unique<commandHandlerRS232>(&test_my_data);
   19|      1|    }
   20|       |
   21|       |    void TearDown() final
   22|      1|    {
   23|      1|        iDomTOOLS_ClassTest::TearDown();
   24|      1|    }
   25|       |};
   26|       |
   27|       |TEST_F(command_handler_rs232_fixture, main)
   28|      1|{
   29|      1|    test_v.push_back("ok");
   30|      1|    auto ret = test_chRS232->run(test_v, &test_my_data);
   31|      1|    EXPECT_STREQ(ret.c_str(), "\nEND\n");
   32|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/test/commandhandler_stub.cpp:
    1|       |#include "../../src/functions/functions.h"
    2|       |#include "../../src/LCD_c/lcd_c.h"
    3|       |
    4|       |//std::string useful_F::send_to_arduino (thread_data *my_data_logic, const std::string& msg){
    5|       |//    return "retunr test ";
    6|       |//}
    7|       |
    8|      5|std::string useful_F::send_to_arduino_clock (thread_data *my_data_logic, std::string msg){
    9|      5|    return "return test";
   10|      5|}
   11|       |//std::string useful_F::l_send_file(std::string path, std::string find, bool reverse )
   12|       |//{
   13|       |//    return "return test in l_send_file()";
   14|       |//}
   15|       |
   16|      1|std::string LCD_c::getData(){
   17|      1|    return " data test";
   18|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/files_tree/files_tree.cpp:
    1|       |#include "files_tree.h"
    2|       |
    3|       |bool comper (const movie_database & a , const movie_database& b)
    4|    212|{
    5|    212|    return a.files_name < b.files_name;
    6|    212|}
    7|       |files_tree::files_tree (const std::string& path, LCD_c *mainLCD_PTR):database_path(path),w_serial( "([Ss]\\d{1,3}[Ee]\\d{1,3})")
    8|       |
    9|     12|{
   10|     12|    //database_path = path;
   11|     12|    mainLCD = mainLCD_PTR;
   12|     12|    //tree_stack.push(database_path);
   13|     12|    i_stack.push(0);
   14|     12|    i = 0;
   15|     12|    get_list(database_path);
   16|     12|}
   17|       |bool files_tree::is_file() const
   18|      3|{
   19|      3|    return movie_database_vector[i].is_file;
   20|      3|}
   21|       |
   22|       |void files_tree::next()
   23|      3|{   
   24|      3|    ++i;
   25|      3|    ////std::cout << " dodaje " << i << std::endl;
   26|      3|    if (get_vector_size() == i ){
   27|      1|        i=0;
   28|      1|    }
   29|      3|}
   30|       |
   31|       |void files_tree::previous()
   32|      5|{
   33|      5|    --i;
   34|      5|    ////std::cout << " odejmuje " << i << std::endl;
   35|      5|
   36|      5|    if ( i <0 )
   37|      2|    {
   38|      2|        i=get_vector_size()-1;
   39|      2|    }
   40|      5|}
   41|       |
   42|       |int files_tree::get_vector_size () const
   43|      5|{
   44|      5|    return movie_database_vector.size();
   45|      5|}
   46|       |void files_tree::vector_clear ()
   47|     14|{
   48|     14|    movie_database_vector.clear();
   49|     14|}
   50|       |int files_tree::get_i()
   51|      1|{ if (i_stack.size() >1 ) {
   52|      1|        int i = i_stack.top();
   53|      1|        i_stack.pop();
   54|      1|        return i;
   55|      1|    }
   56|      0|    else
   57|      0|        return 0;
   58|      1|}
   59|       |
   60|       |void files_tree::enter_dir()
   61|      1|{
   62|      1|    i_stack.push(i); // wpisuje na stos kolejna wersje licznika i
   63|      1|
   64|      1|    if (movie_database_vector[i].is_file == false) {
   65|      1|        get_list (movie_database_vector[i].path);
   66|      1|        i=0;
   67|      1|    }
   68|      1|
   69|      1|}
   70|       |void files_tree::enter_dir(const std::string& path)
   71|      0|{	//tree_stack.push(path);
   72|      0|    get_list (path);
   73|      0|}
   74|       |
   75|       |void files_tree::back_dir()
   76|      1|{
   77|      1|    if ( tree_stack.size() >1 ) {
   78|      1|        tree_stack.pop();
   79|      1|        std::string path = tree_stack.top();
   80|      1|        tree_stack.pop();
   81|      1|        i = get_i();
   82|      1|        get_list (path);
   83|      1|        return;
   84|      1|    }
   85|      0|    i = get_i();
   86|      0|
   87|      0|    ////std::cout << " III ma teraz : " << i << std::endl;
   88|      0|    get_list (database_path);
   89|      0|    return;
   90|      0|}
   91|       |
   92|       |std::string files_tree::show_list()
   93|     24|{
   94|     24|    //std::cout << "iteracja!!!!!!!!!!!!!!!!!!!!!!: " << i <<"rozmiar vectora : " << get_vector_size() << std::endl;
   95|     24|    if (movie_database_vector[i].is_file == true ) {
   96|     12|        //std::cout << "wypisuje sciezke pliku " << movie_database_vector[i].path <<" | " <<movie_database_vector[i].files_name.substr(0,16)<< std::endl;
   97|     12|
   98|     12|        mainLCD->printString(true,0,0,movie_database_vector[i].files_name.substr(0,16));
   99|     12|        if( regex_search(movie_database_vector[i].path,result,w_serial) )
  100|     12|        {
  101|     12|            mainLCD->printString(false,10,1,movie_database_vector[i].files_name.substr( movie_database_vector[i].files_name.size()-4,movie_database_vector[i].files_name.size()));
  102|     12|            mainLCD->printString(false, 1,1,result[0]);
  103|     12|        }
  104|      0|        else
  105|      0|        {
  106|      0|            mainLCD->printString(false,10,1,movie_database_vector[i].files_name.substr( movie_database_vector[i].files_name.size()-4,movie_database_vector[i].files_name.size()));
  107|      0|        }
  108|     12|    }
  109|     12|    else {
  110|     12|        mainLCD->printString(true,0,0,movie_database_vector[i].files_name+"/");
  111|     12|    }
  112|     24|    return movie_database_vector[i].path;
  113|     24|}
  114|       |
  115|     14|void files_tree::get_list(std::string path) {
  116|     14|    tree_stack.push(path);
  117|     14|    vector_clear(); // czyscimy vector
  118|     14|    std::string path2 =path;
  119|     14|    std::string v_path ,tmp_string;
  120|     14|
  121|     14|    //if()
  122|     14|    {
  123|     14|        sciezka = opendir( path.c_str() );
  124|     82|        while(( plik = readdir( sciezka ) ) )
  125|     68|        {
  126|     68|            path2 =path;
  127|     68|            if (static_cast<int>(plik->d_type) == 4 /*&& strcmp( plik->d_name, "..") && strcmp( plik->d_name, ".")*/)
  128|     41|            {
  129|     41|                temp.is_file=false;
  130|     41|            }
  131|     27|            else //if ( (int)plik->d_type == 8 && strcmp( plik->d_name, "..") && strcmp( plik->d_name, "."))
  132|     27|            {
  133|     27|                temp.is_file=true;
  134|     27|            }
  135|     68|
  136|     68|            v_path= path2;
  137|     68|            v_path+="/";
  138|     68|            tmp_string.assign(plik->d_name);
  139|     68|            v_path+=tmp_string;
  140|     68|            temp.path =v_path;
  141|     68|            temp.files_name.assign(plik->d_name);
  142|     68|            movie_database_vector.push_back(temp);
  143|     68|        }// end while
  144|     14|        sort(movie_database_vector.begin(),movie_database_vector.end(), comper);
  145|     14|        closedir( sciezka );
  146|     14|    }
  147|     14|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/functions/functions2.cpp:
    1|       |#include <iostream>
    2|       |#include <fstream>
    3|       |#include <regex>
    4|       |#include <iterator>
    5|       |#include <vector>
    6|       |
    7|       |#include "functions.h"
    8|       |#include "../thread_functions/iDom_thread.h"
    9|       |
   10|     23|std::vector<std::string> useful_F::split(const std::string& s, char separator ){
   11|     23|    std::vector<std::string> output;
   12|     23|    std::string::size_type prev_pos = 0, pos = 0;
   13|     23|
   14|     53|    while((pos = s.find(separator, pos)) != std::string::npos)
   15|     30|    {
   16|     30|        std::string substring( s.substr(prev_pos, pos-prev_pos) );
   17|     30|        output.push_back(substring);
   18|     30|        prev_pos = ++pos;
   19|     30|    }
   20|     23|    try
   21|     23|    {
   22|     23|        output.push_back(s.substr(prev_pos, pos-prev_pos)); // Last word
   23|     23|    }
   24|     23|    catch (...)
   25|     23|    {
   26|      0|        log_file_mutex.mutex_lock();
   27|      0|        log_file_cout << CRITICAL << "wyjatek substr() w useful_F::split() !!!!!!"<< std::endl;
   28|      0|        log_file_mutex.mutex_unlock();
   29|      0|    }
   30|     23|    return output;
   31|     23|}
   32|       |thread_data* useful_F::myStaticData = std::nullptr_t();
   33|       |void useful_F::setStaticData(thread_data *my_dataPtr)
   34|      1|{
   35|      1|    myStaticData = my_dataPtr;
   36|      1|}
   37|       |
   38|      5|void useful_F::tokenizer ( std::vector <std::string> &command, std::string separator, std::string &text){
   39|      5|    std::string temp;
   40|      5|
   41|      5|    for(char n: text)
   42|     44|    { // the initializer may be an array
   43|     44|        bool is_sep = false;
   44|     44|        for(char m: separator)
   45|    119|        {
   46|    119|            if (n == m)
   47|      5|                is_sep = true;
   48|    119|        }
   49|     44|        if (is_sep == false)
   50|     39|            temp += n;
   51|      5|        else
   52|      5|        {
   53|      5|            if (!temp.empty())
   54|      5|            {
   55|      5|                command.push_back( temp);
   56|      5|                temp = "";
   57|      5|            }
   58|      5|        }
   59|     44|    }
   60|      5|    if (!temp.empty())
   61|      3|        command.push_back(temp);
   62|      5|
   63|      5|    if (command.size() == 0)
   64|      2|        throw std::string("command empty");
   65|      3|}
   66|       |
   67|       |////// watek sleeper
   68|       |void useful_F::sleeper_mpd (thread_data *my_data, const std::string& threadName)
   69|      3|{
   70|      3|    unsigned int t = 60/my_data->sleeper;
   71|      3|    unsigned int k = 0;
   72|      3|
   73|     16|    for (; my_data->sleeper >0; my_data->sleeper-- )
   74|     13|    {
   75|     13|        useful_F::sleep(60);
   76|     13|        k += t;
   77|     13|        my_data->main_iDomTools->ledClear(0,k);
   78|     13|    }
   79|      3|    my_data->main_iDomTools->ledOFF();
   80|      3|    my_data->main_iDomTools->MPD_stop();
   81|      3|    my_data->main_iDomTools->turnOff433MHzSwitch("listwa");
   82|      3|
   83|      3|    log_file_mutex.mutex_lock();
   84|      3|    log_file_cout << INFO<< "zaczynam procedure konca watku " << threadName << std::endl;
   85|      3|    log_file_mutex.mutex_unlock();
   86|      3|
   87|      3|    iDOM_THREAD::stop_thread(threadName,my_data);
   88|      3|
   89|      3|    log_file_mutex.mutex_lock();
   90|      3|    log_file_cout << INFO<< "koniec watku SLEEP_MPD" << std::endl;
   91|      3|    log_file_mutex.mutex_unlock();
   92|      3|}
   93|       |
   94|       |///////////////////////////////////////////////////////////////////////////////////////////////////// watek kodi
   95|       |void useful_F::kodi (thread_data *my_data, const std::string& threadName)
   96|      2|{
   97|      2|    log_file_mutex.mutex_lock();
   98|      2|    log_file_cout << INFO<< "start wątku "<<threadName << std::endl;
   99|      2|    log_file_mutex.mutex_unlock();
  100|      2|
  101|      2|    my_data->mainLCD->set_print_song_state(100);
  102|      2|    my_data->mainLCD->printString(false,2,1,"  KODI");
  103|      2|
  104|      2|    my_data->main_iDomStatus->setObjectState("KODI",STATE::ACTIVE);
  105|      2|    //status mpd
  106|      2|    STATE musicState = my_data->main_iDomStatus->getObjectState("music");
  107|      2|    // status glosnikow
  108|      2|    STATE speakersState = my_data->main_iDomStatus->getObjectState("speakers");
  109|      2|
  110|      2|    if (musicState != STATE::STOP)
  111|      2|        my_data->main_iDomTools->MPD_pause();
  112|      2|    if (speakersState != STATE::ON)
  113|      1|        my_data->main_iDomTools->turnOnSpeakers();
  114|      2|    //system
  115|      2|
  116|      2|    int ret = useful_F::runLinuxCommand("runuser -u pi kodi");
  117|      2|
  118|      2|    if(ret != 0)
  119|      0|    {
  120|      0|        log_file_mutex.mutex_lock();
  121|      0|        log_file_cout << CRITICAL<< "kodi zamkniete z błędem "<<ret << std::endl;
  122|      0|        log_file_mutex.mutex_unlock();
  123|      0|    }
  124|      2|    //przywracanie danych
  125|      2|
  126|      2|    if(musicState == STATE::PLAY)
  127|      1|        my_data->main_iDomTools->MPD_play(my_data);
  128|      1|    else
  129|      1|        my_data->main_iDomTools->turnOffSpeakers();
  130|      2|    //koniec
  131|      2|
  132|      2|    my_data->main_iDomStatus->setObjectState("KODI",STATE::DEACTIVE);
  133|      2|    my_data->mainLCD->set_print_song_state(0);
  134|      2|    iDOM_THREAD::stop_thread("kodi smartTV",my_data);
  135|      2|}
  136|       |std::string useful_F::RSHash(const std::string& data, unsigned int b, unsigned int a)
  137|      4|{
  138|      4|    time_t act_time;
  139|      4|    struct tm * act_date;
  140|      4|    time(&act_time);
  141|      4|    act_date = localtime(&act_time);
  142|      4|    char buffer[10];
  143|      4|    strftime(buffer,10,"%M%H%w",act_date);
  144|      4|    std::string str(buffer);
  145|      4|    str+=data;
  146|      4|    unsigned int hash = 0;
  147|      4|
  148|     56|    for(std::size_t i = 0; i < str.length(); i++)
  149|     52|    {
  150|     52|        hash = hash * a + str[i];
  151|     52|        a = a * b;
  152|     52|    }
  153|      4|    return std::to_string((hash & 0x7FFFFFFF));
  154|      4|}
  155|       |
  156|       |std::string useful_F::sek_to_uptime(long long secy )
  157|      2|{
  158|      2|    const int min = 60; //s
  159|      2|    const int houry = 3600; //s
  160|      2|    const int day = 86400; //s
  161|      2|    int number_day, number_hour, number_min, number_sec;
  162|      2|    int temp1, temp2, temp3;
  163|      2|    number_day = secy / day;
  164|      2|    std::stringstream text;
  165|      2|    text << "\n" << number_day << " day ";
  166|      2|    temp1 = secy % day;
  167|      2|    number_hour = temp1 / houry;
  168|      2|    text << number_hour << " hours ";
  169|      2|    temp2 = temp1 % houry;
  170|      2|    number_min = temp2 / min;
  171|      2|    text << number_min << " minutes ";
  172|      2|    temp3 = temp2 % min;
  173|      2|    number_sec = temp3;
  174|      2|    text << number_sec << " seconds";
  175|      2|    return text.str();
  176|      2|}
  177|       |
  178|       |//wysylanie pliku
  179|       |std::string useful_F::l_send_file(std::string path, std::string find, bool reverse )
  180|      3|{
  181|      3|    std::string str_buf;
  182|      3|    if(find.empty()==true)
  183|      1|    {
  184|      1|        std::fstream log_file;
  185|      1|        log_file.open(path.c_str(),std::ios::in);
  186|      1|        if( log_file.good() == false )
  187|      0|        {
  188|      0|            return " can not open file !";
  189|      0|        }
  190|      1|        else
  191|      1|        {
  192|      1|            str_buf.erase();
  193|  7.78k|            while( !log_file.eof() )
  194|  7.78k|            {
  195|  7.78k|                str_buf += log_file.get();
  196|  7.78k|            }
  197|      1|            str_buf.erase(str_buf.length()-1, str_buf.length());
  198|      1|
  199|      1|            log_file.close();
  200|      1|        }
  201|      1|    }
  202|      2|    else
  203|      2|    {
  204|      2|        std::fstream log_file;
  205|      2|        log_file.open(path.c_str(),std::ios::in);
  206|      2|        if( log_file.good() == false )
  207|      0|        {
  208|      0|            return " can not open file !";
  209|      0|        }
  210|      2|        else
  211|      2|        {
  212|      2|            str_buf.erase();
  213|      2|            std::string str_temp;
  214|    214|            while( std::getline(log_file,str_temp) )
  215|    212|            {
  216|    212|                if (reverse)
  217|    106|                {
  218|    106|                    if(std::string::npos!=str_temp.find(find))
  219|     57|                    {
  220|     57|                        str_buf+=str_temp +"\n";
  221|     57|                    }
  222|     49|                    else
  223|     49|                    {
  224|     49|                        if(str_buf.size()<3)
  225|      1|                        {
  226|      1|                            str_buf+="    ";
  227|      1|                        }
  228|     49|                    }
  229|    106|                }
  230|    106|                else
  231|    106|                {
  232|    106|                    if(std::string::npos == str_temp.find(find))
  233|     49|                    {
  234|     49|                        str_buf+=str_temp+"\n";
  235|     49|                    }
  236|    106|                }
  237|    212|                if(str_buf.size()<3)
  238|      0|                {
  239|      0|                    str_buf+="    ";
  240|      0|                }
  241|    212|            }
  242|      2|        }
  243|      2|        log_file.close();
  244|      2|    }
  245|      3|    return str_buf;
  246|      3|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/functions/tests/functions_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include "../functions.h"
    3|       |#include "../../RADIO_433_eq/radio_433_eq.h"
    4|       |#include "../../iDomTools/test/iDomTools_fixture.h"
    5|       |
    6|       |class functions_fixture : public iDomTOOLS_ClassTest{
    7|       |
    8|       |};
    9|       |
   10|       |void useful_F::sleep(int sec)
   11|     25|{
   12|     25|    std::cout << "sleep() sec: " << sec <<std::endl;
   13|     25|}
   14|       |
   15|       |TEST(functions_, tokenizer)
   16|      1|{
   17|      1|     std::string test_msg = "one=two three";
   18|      1|     std::vector<std::string> test_v;
   19|      1|
   20|      1|     EXPECT_EQ(test_v.size(), 0);
   21|      1|     useful_F::tokenizer(test_v,"= ",test_msg);
   22|      1|
   23|      1|     EXPECT_EQ(test_v.size(),3);
   24|      1|     EXPECT_STREQ(test_v.at(2).c_str(),"three");
   25|      1|}
   26|       |
   27|       |TEST(functions_, sekToUptime)
   28|      1|{
   29|      1|    EXPECT_STREQ(useful_F::sek_to_uptime(34534).c_str(),"\n0 day 9 hours 35 minutes 34 seconds");
   30|      1|}
   31|       |
   32|       |TEST(functions_, tokenizerEmpty)
   33|      1|{
   34|      1|     std::string test_msg = "";
   35|      1|     std::vector<std::string> test_v;
   36|      1|
   37|      1|     EXPECT_EQ(test_v.size(), 0);
   38|      1|     EXPECT_THROW(useful_F::tokenizer(test_v,"= ",test_msg),std::string);
   39|      1|}
   40|       |
   41|       |TEST(functions_, removeHtmlTag)
   42|      1|{
   43|      1|     std::string test_msg = "<html>test</html>";
   44|      1|     std::string test_pure_str = useful_F_libs::removeHtmlTag(test_msg);
   45|      1|
   46|      1|     EXPECT_STREQ(test_pure_str.c_str(),"test");
   47|      1|}
   48|       |
   49|       |TEST(functions_, repalceAll)
   50|      1|{
   51|      1|     std::string test_msg = "one two three";
   52|      1|     std::string test_pure_str = useful_F_libs::replaceAll(test_msg,"two","zero");
   53|      1|
   54|      1|     EXPECT_STREQ(test_pure_str.c_str(),"one zero three");
   55|      1|}
   56|       |
   57|       |TEST(functions_, split)
   58|      1|{
   59|      1|    std::string test_msg = "one two three";
   60|      1|    std::vector<std::string> test_v;
   61|      1|
   62|      1|    EXPECT_EQ(test_v.size(), 0);
   63|      1|    test_v = useful_F::split(test_msg,' ');
   64|      1|
   65|      1|    EXPECT_EQ(test_v.size(),3);
   66|      1|    EXPECT_STREQ(test_v.at(2).c_str(),"three");
   67|      1|}
   68|       |
   69|       |TEST(functions_, RSHash)
   70|      1|{
   71|      1|    std::string msg = "test msg";
   72|      1|    std::string s1  = useful_F::RSHash(msg, 33, 44);
   73|      1|    std::string s2  = useful_F::RSHash(msg, 33 ,44);
   74|      1|    EXPECT_STREQ(s1.c_str(), s2.c_str());
   75|      1|
   76|      1|    s1 = useful_F::RSHash(msg, 35, 44);
   77|      1|    s2 = useful_F::RSHash(msg, 33 ,44);
   78|      1|    EXPECT_STRNE(s1.c_str(), s2.c_str());
   79|      1|}
   80|       |
   81|       |TEST_F(functions_fixture, setStaticData)
   82|      1|{
   83|      1|    test_my_data.sleeper = 99;
   84|      1|    EXPECT_EQ( useful_F::myStaticData->sleeper, 99 );
   85|      1|    thread_data test_my_data2;
   86|      1|    test_my_data2.sleeper = 88;
   87|      1|    EXPECT_EQ( test_my_data2.sleeper, 88 );
   88|      1|    EXPECT_EQ( useful_F::myStaticData->sleeper, 99 );
   89|      1|    useful_F::setStaticData(&test_my_data2);
   90|      1|    EXPECT_EQ( useful_F::myStaticData->sleeper, 88 );
   91|      1|}
   92|       |
   93|       |TEST_F(functions_fixture, sleepThread)
   94|      1|{
   95|      1|    std::array <Thread_array_struc,10> test_THRARRSTR;
   96|      1|    test_my_data.main_THREAD_arr = &test_THRARRSTR;
   97|      1|
   98|      1|    MPD_info test_ptr_MPD;
   99|      1|    test_ptr_MPD.volume = 3;
  100|      1|    test_my_data.ptr_MPD_info = &test_ptr_MPD;
  101|      1|
  102|      1|   // RADIO_EQ_CONTAINER_STUB test_rec(&test_my_data);
  103|      1|    std::shared_ptr<RADIO_EQ_CONTAINER> test_rec = std::make_shared<RADIO_EQ_CONTAINER>(&test_my_data);
  104|      1|    test_rec->loadConfig(test_server_set.radio433MHzConfigFile);
  105|      1|    test_my_data.main_REC = (test_rec);
  106|      1|    test_my_data.alarmTime.time = Clock::getTime();
  107|      1|    test_my_data.alarmTime.state = STATE::ACTIVE;
  108|      1|
  109|      1|    test_my_data.sleeper = 10;
  110|      1|
  111|      1|    blockQueue test_q;
  112|      1|    test_q._clearAll();
  113|      1|    EXPECT_EQ(test_q._size(),0);
  114|      1|    useful_F::sleeper_mpd(&test_my_data,"test sleep");
  115|      1|    EXPECT_EQ(test_q._size(),1);
  116|      2|    EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP) << "NIE ZATRZYMANO MUZYKI :(";
  117|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/functions/tests/functions_stub.cpp:
    1|       |#include "../functions.h"
    2|       |#include "test_data.h"
    3|       |
    4|     11|int useful_F::runLinuxCommand(const std::string& cmd){
    5|     11|    std::cout << "runLinuxCommand(): " << cmd << std::endl;
    6|     11|    return TEST_DATA::runLinuxCommandReturn;
    7|     11|}
    8|       |
    9|       |bool useful_F::go_while = true;
   10|       |bool useful_F::workServer = true;
   11|       |
   12|     55|std::string useful_F::send_to_arduino(thread_data *my_data, const std::string& d){
   13|     55|    puts("useful_F::send_to_arduino()");
   14|     55|    return TEST_DATA::return_send_to_arduino;
   15|     55|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomSaveState/idom_save_state.cpp:
    1|       |#include <iostream>     // std::cout
    2|       |#include <fstream>
    3|       |#include "idom_save_state.h"
    4|       |#include "../iDom_server_OOP.h"
    5|       |
    6|       |iDom_SAVE_STATE::iDom_SAVE_STATE(const std::string &path): m_path(path)
    7|     59|{
    8|     59|#ifdef BT_TEST
    9|     59|    puts("iDom_SAVE_STATE::iDom_SAVE_STATE()");
   10|     59|#endif
   11|     59|}
   12|       |
   13|       |iDom_SAVE_STATE::~iDom_SAVE_STATE()
   14|     59|{
   15|     59|#ifdef BT_TEST
   16|     59|    puts("iDom_SAVE_STATE::~iDom_SAVE_STATE()");
   17|     59|#endif
   18|     59|}
   19|       |
   20|       |nlohmann::json iDom_SAVE_STATE::read()
   21|      3|{
   22|      3|    std::lock_guard<std::mutex> lGuard(m_mutex);
   23|      3|    // read a JSON file
   24|      3|    std::ifstream i(m_path);
   25|      3|    nlohmann::json j;
   26|      3|    i >> j;
   27|      3|
   28|      3|    log_file_mutex.mutex_lock();
   29|      3|    log_file_cout << INFO << "czytam zapisany stan parametrow iDom" << std::endl;
   30|      3|    log_file_mutex.mutex_unlock();
   31|      3|
   32|      3|    return j;
   33|      3|}
   34|       |
   35|       |void iDom_SAVE_STATE::write(const nlohmann::json &jj)
   36|     58|{
   37|     58|    std::lock_guard<std::mutex> lGuard(m_mutex);
   38|     58|    // write prettified JSON to another file
   39|     58|    std::ofstream o(m_path);
   40|     58|    o << std::setw(4) << jj << std::endl;
   41|     58|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomSaveState/test/iDomSaveState_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "test_data.h"
    4|       |#include "../idom_save_state.h"
    5|       |#include "json.hpp"
    6|       |
    7|       |TEST(iDomSaveState, write_and_read)
    8|      1|{
    9|      1|    iDom_SAVE_STATE test_saveState("/mnt/ramdisk/iDomStateTest.save");
   10|      1|    nlohmann::json test_json ;
   11|      1|
   12|      1|    test_json["happy"] = true;
   13|      1|    test_json["pi"] = 3.14;
   14|      1|
   15|      1|    nlohmann::json test_json_in_json;
   16|      1|    test_json_in_json["name"] = "cyniu";
   17|      1|    test_json_in_json["age"] = 30;
   18|      1|
   19|      1|    test_json["person"] = test_json_in_json;
   20|      1|
   21|      1|    test_saveState.write(test_json);
   22|      1|    nlohmann::json test_json2 = test_saveState.read();
   23|      2|    EXPECT_DOUBLE_EQ(test_json.at("pi").get<double>(),
   24|      2|                     test_json2.at("pi").get<double>()) << "wartosci pi nie sa rowne";
   25|      1|
   26|      2|    EXPECT_TRUE(test_json2.at("happy").get<bool>()) << " nie jest happy";
   27|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomStatus/idomstatus.cpp:
    1|       |#include "idomstatus.h"
    2|       |
    3|       |iDomSTATUS::iDomSTATUS()
    4|    204|{
    5|    204|}
    6|       |
    7|       |void iDomSTATUS::addObject(std::string name, STATE st)
    8|  1.21k|{
    9|  1.21k|    std::lock_guard < std::mutex > lock ( m_lockGuard);
   10|  1.21k|    m_stateMAP.insert(std::make_pair(name,st));
   11|  1.21k|}
   12|       |
   13|       |void iDomSTATUS::setObjectState(const std::string& name, STATE st)
   14|    114|{
   15|    114|    std::lock_guard < std::mutex > lock ( m_lockGuard);
   16|    114|    auto i = m_stateMAP.find(name);
   17|    114|    if (i != m_stateMAP.end()){
   18|     90|        i->second = st;
   19|     90|    }
   20|     24|    else
   21|     24|    {
   22|     24|        lock.~lock_guard();
   23|     24|        addObject(name,st);
   24|     24|    }
   25|    114|}
   26|       |
   27|       |STATE iDomSTATUS::getObjectState(const std::string& name)
   28|     84|{
   29|     84|    std::lock_guard < std::mutex > lock ( m_lockGuard);
   30|     84|    auto i = m_stateMAP.find(name);
   31|     84|    if (i != m_stateMAP.end())
   32|     75|    {
   33|     75|        return i->second;
   34|     75|    }
   35|      9|    return STATE::UNKNOWN;
   36|      9|}
   37|       |
   38|       |std::string iDomSTATUS::getObjectStateString(const std::string& name)
   39|    174|{
   40|    174|    std::lock_guard < std::mutex > lock ( m_lockGuard);
   41|    174|    auto i = m_stateMAP.find(name);
   42|    174|    if (i != m_stateMAP.end())
   43|    129|    {
   44|    129|        return stateToString( i->second);
   45|    129|    }
   46|     45|    return stateToString(STATE::UNKNOWN) + " "+name;
   47|     45|}
   48|       |
   49|       |std::string iDomSTATUS::getAllObjectsStateString()
   50|      3|{
   51|      3|    std::stringstream st;
   52|      3|    st << "state: ";
   53|      3|    std::lock_guard < std::mutex > lock( m_lockGuard);
   54|      3|    for (auto elm : m_stateMAP)
   55|     20|    {
   56|     20|        st << elm.first << "=";
   57|     20|        st << stateToString(elm.second) << " ";
   58|     20|    }
   59|      3|    return st.str();
   60|      3|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/idomtools.cpp:
    1|       |#include <algorithm>
    2|       |#include <fstream>
    3|       |#include <string>
    4|       |#include <typeinfo>
    5|       |
    6|       |#include "idomtools.h"
    7|       |#include "../functions/functions.h"
    8|       |#include "../../libs/emoji/emoji.h"
    9|       |#include "../../libs/Statistic/statistic.h"
   10|       |#include "../CRON/cron.hpp"
   11|       |#include "../RADIO_433_eq/radio_433_eq.h"
   12|       |#include "json.hpp"
   13|       |#include "../thread_functions/iDom_thread.h"
   14|       |
   15|       |iDomTOOLS::iDomTOOLS(thread_data *myData): key(myData->server_settings->TS_KEY)
   16|    198|{
   17|    198|    puts("iDomTOOLS::iDomTOOLS()");
   18|    198|    my_data = myData;
   19|    198|
   20|    198|    //////////////////////////////////// temeprature /////////////////
   21|    198|
   22|    198|    allThermometer.add("inside");
   23|    198|    allThermometer.add("outside");
   24|    198|    allThermometerUpdate.add("inside");
   25|    198|    allThermometerUpdate.add("outside");
   26|    198|    /////////////////////////////////////////////////////////////////
   27|       |#ifndef BT_TEST
   28|       |    pinMode(iDomConst::GPIO_SPIK, OUTPUT); // gpio pin do zasilania glosnikow
   29|       |    digitalWrite(iDomConst::GPIO_SPIK,LOW);
   30|       |    pinMode(iDomConst::GPIO_PRINTER,OUTPUT); /// gpio pin do zsilania drukarki
   31|       |    digitalWrite(iDomConst::GPIO_PRINTER,LOW);
   32|       |#endif
   33|       |    my_data->main_iDomStatus->addObject("cameraLED",STATE::UNKNOWN);
   34|    198|    my_data->main_iDomStatus->addObject("printer",STATE::OFF);
   35|    198|    my_data->main_iDomStatus->addObject("speakers",STATE::OFF);
   36|    198|    my_data->main_iDomStatus->addObject("alarm",STATE::DEACTIVE);
   37|    198|    my_data->main_iDomStatus->addObject("KODI",STATE::DEACTIVE);
   38|    198|
   39|    198|    ///////// setup viber api
   40|    198|    m_viber.setAvatar(my_data->server_settings->viberAvatar);
   41|    198|    m_viber.setAccessToken(my_data->server_settings->viberToken);
   42|    198|    m_viber.setURL("https://chatapi.viber.com/pa/send_message");
   43|    198|    ///////// setup faceboook api
   44|    198|    m_facebook.setAccessToken(my_data->server_settings->facebookAccessToken);
   45|    198|
   46|    198|    //////// button 433MHz
   47|    198|    buttonPointerVector = my_data->main_REC->getButtonPointerVector();
   48|    198|
   49|    198|    lastButton433MHzLockUnlockTime = Clock::getTime() + Clock(23,58);
   50|    198|}
   51|       |
   52|       |TEMPERATURE_STATE iDomTOOLS::hasTemperatureChange(const std::string& thermometerName, double reference, double histereza )
   53|     16|{
   54|     16|    reference += 0.0055;
   55|     16|    const auto newTemp = allThermometer.getTemp(thermometerName);
   56|     16|    const auto oldTemp = allThermometer.getOldTemp(thermometerName);
   57|     16|    const auto lastState = allThermometer.getLastState(thermometerName);
   58|     16|    if (newTemp >= reference + histereza &&
   59|     16|            oldTemp < reference + histereza &&
   60|     16|            lastState != TEMPERATURE_STATE::Over)
   61|      3|    {
   62|      3|        my_data->myEventHandler.run("test")->addEvent("over: new "+ to_string_with_precision(newTemp)+" old: "
   63|      3|                                                      +to_string_with_precision(oldTemp)+" ref: "
   64|      3|                                                      +to_string_with_precision(reference));
   65|      3|        allThermometer.setState(thermometerName, TEMPERATURE_STATE::Over);
   66|      3|        return TEMPERATURE_STATE::Over;
   67|      3|    }
   68|     13|    else if (newTemp <= reference - histereza &&
   69|     13|             oldTemp > reference - histereza &&
   70|     13|             lastState != TEMPERATURE_STATE::Under)
   71|      3|    {
   72|      3|        my_data->myEventHandler.run("test")->addEvent("under: new "+to_string_with_precision(newTemp)+" old: "
   73|      3|                                                      +to_string_with_precision(oldTemp)+" ref: "
   74|      3|                                                      +to_string_with_precision(reference));
   75|      3|        allThermometer.setState(thermometerName, TEMPERATURE_STATE::Under);
   76|      3|        return TEMPERATURE_STATE::Under;
   77|      3|    }
   78|     10|
   79|     10|    my_data->myEventHandler.run("test")->addEvent("noChanges: new "+to_string_with_precision(newTemp)+" old: "
   80|     10|                                                  +to_string_with_precision(oldTemp)+" ref: "+to_string_with_precision(reference));
   81|     10|
   82|     10|    allThermometer.setState(thermometerName, TEMPERATURE_STATE::NoChanges);
   83|     10|    return TEMPERATURE_STATE::NoChanges;
   84|     10|}
   85|       |
   86|       |void iDomTOOLS::sendSMSifTempChanged(const std::string& thermomethernName, int reference)
   87|     16|{
   88|     16|    TEMPERATURE_STATE status = hasTemperatureChange(thermomethernName,reference,0.5);
   89|     16|    std::string m = "temperature "+thermomethernName+" over "+ EMOJI::emoji(E_emoji::NORTH_EAST_ARROW)
   90|     16|            + to_string_with_precision(reference);
   91|     16|
   92|     16|    if (status == TEMPERATURE_STATE::Over)
   93|      3|    {
   94|      3|        my_data->myEventHandler.run("temperature")->addEvent(m);
   95|      3|        if (reference < 2)
   96|      1|        {
   97|      1|            sendViberMsg(m,my_data->server_settings->viberReceiver.at(0),my_data->server_settings->viberSender);
   98|      1|            sendViberMsg(m,my_data->server_settings->viberReceiver.at(1),my_data->server_settings->viberSender);
   99|      1|        }
  100|      2|        else
  101|      2|        {
  102|      2|            sendViberMsg(m,my_data->server_settings->viberReceiver.at(0),my_data->server_settings->viberSender);
  103|      2|        }
  104|      3|    }
  105|     13|    else if (status == TEMPERATURE_STATE::Under)
  106|      3|    {
  107|      3|        m ="temperature " + thermomethernName+" under "+EMOJI::emoji(E_emoji::SOUTH_EAST_ARROW)
  108|      3|                +to_string_with_precision(reference);
  109|      3|        my_data->myEventHandler.run("temperature")->addEvent(m);
  110|      3|        if (reference < 2)
  111|      2|        {
  112|      2|            sendViberPicture(m,"http://canacopegdl.com/images/cold/cold-14.jpg",
  113|      2|                             my_data->server_settings->viberReceiver.at(0),
  114|      2|                             my_data->server_settings->viberSender);
  115|      2|            sendViberPicture(m,"http://canacopegdl.com/images/cold/cold-14.jpg",
  116|      2|                             my_data->server_settings->viberReceiver.at(1),
  117|      2|                             my_data->server_settings->viberSender);
  118|      2|            postOnFacebook(m,"http://canacopegdl.com/images/cold/cold-14.jpg");
  119|      2|        }
  120|      1|        else {
  121|      1|            sendViberMsg(m,my_data->server_settings->viberReceiver.at(0),
  122|      1|                         my_data->server_settings->viberSender);
  123|      1|        }
  124|      3|    }
  125|     10|    else{
  126|     10|        //my_data->myEventHandler.run("unknown")->addEvent("temperatura nie przeszla przez "+to_string_with_precision(reference));
  127|     10|    }
  128|     16|}
  129|       |
  130|       |std::string iDomTOOLS::getThermoStats(const std::string& name)
  131|      2|{
  132|      2|    return allThermometerUpdate.getStatsByName(name);
  133|      2|}
  134|       |
  135|       |void iDomTOOLS::updateTemperatureStats()
  136|      6|{
  137|      6|    auto v = getTemperature();
  138|      6|    allThermometerUpdate.updateAll(&v);
  139|      6|    allThermometerUpdate.updateStats("outside");
  140|      6|    allThermometerUpdate.updateStats("inside");
  141|      6|
  142|      6|    if( true == allThermometerUpdate.isMoreDiff("outside",2.1))
  143|      2|    {
  144|      2|        auto data = allThermometerUpdate.getLast2("outside");
  145|      2|        std::string msg = "alarm roznicy temeratur na polu! " + to_string_with_precision(data.first) +" na "+
  146|      2|                to_string_with_precision(data.second);
  147|      2|
  148|      2|        if (data.first > data.second)
  149|      1|        {
  150|      1|            msg += " temperatura maleje " + EMOJI::emoji(E_emoji::CHART_WITH_DOWNWARDS_TREND);
  151|      1|        }
  152|      1|        else
  153|      1|        {
  154|      1|            msg += " temperatura rośnie " + EMOJI::emoji(E_emoji::CHART_WITH_UPWARDS_TREND);
  155|      1|        }
  156|      2|
  157|      2|        sendViberMsg(msg,
  158|      2|                     my_data->server_settings->viberReceiver.at(0),
  159|      2|                     my_data->server_settings->viberSender);
  160|      2|
  161|      2|        log_file_mutex.mutex_lock();
  162|      2|        log_file_cout << WARNING << msg << std::endl;
  163|      2|        log_file_mutex.mutex_unlock();
  164|      2|    }
  165|      6|    if( true == allThermometerUpdate.isMoreDiff("inside",2.1))
  166|      2|    {
  167|      2|        auto data = allThermometerUpdate.getLast2("inside");
  168|      2|        std::string msg = "alarm roznicy temeratur na mieszkaniu! " + to_string_with_precision(data.first) +" na "+
  169|      2|                to_string_with_precision(data.second);
  170|      2|
  171|      2|        if (data.first > data.second)
  172|      1|        {
  173|      1|            msg += " temperatura maleje " + EMOJI::emoji(E_emoji::CHART_WITH_DOWNWARDS_TREND);
  174|      1|        }
  175|      1|        else
  176|      1|        {
  177|      1|            msg += " temperatura rośnie " + EMOJI::emoji(E_emoji::CHART_WITH_UPWARDS_TREND);
  178|      1|        }
  179|      2|
  180|      2|        sendViberMsg(msg,
  181|      2|                     my_data->server_settings->viberReceiver.at(0),
  182|      2|                     my_data->server_settings->viberSender);
  183|      2|
  184|      2|        log_file_mutex.mutex_lock();
  185|      2|        log_file_cout << WARNING << msg << std::endl;
  186|      2|        log_file_mutex.mutex_unlock();
  187|      2|    }
  188|      6|}
  189|       |
  190|       |void iDomTOOLS::turnOnSpeakers()
  191|      9|{
  192|      9|    if (useful_F::myStaticData->idom_all_state.houseState == STATE::UNLOCK)
  193|      4|    {
  194|      4|        digitalWrite(iDomConst::GPIO_SPIK, HIGH);
  195|      4|        useful_F::myStaticData->main_iDomStatus->setObjectState("speakers",STATE::ON);
  196|      4|    }
  197|      5|    else
  198|      5|    {
  199|      5|        useful_F::myStaticData->myEventHandler.run("speakers")->addEvent("speakers can not start due to home state: "+
  200|      5|                                                                         stateToString(useful_F::myStaticData->idom_all_state.houseState));
  201|      5|    }
  202|      9|    useful_F::myStaticData->main_iDomTools->saveState_iDom();
  203|      9|}
  204|       |
  205|       |void iDomTOOLS::turnOffSpeakers()
  206|      6|{
  207|      6|    digitalWrite(iDomConst::GPIO_SPIK, LOW);
  208|      6|    useful_F::myStaticData->main_iDomStatus->setObjectState("speakers",STATE::OFF);
  209|      6|    // useful_F::myStaticData->main_iDomTools->saveState_iDom();
  210|      6|}
  211|       |
  212|       |void iDomTOOLS::turnOnPrinter()
  213|      5|{
  214|      5|    if (my_data->idom_all_state.houseState == STATE::UNLOCK)
  215|      4|    {
  216|      4|        digitalWrite(iDomConst::GPIO_PRINTER,HIGH);
  217|      4|        my_data->myEventHandler.run("230V")->addEvent("230v drukarki ON");
  218|      4|        my_data->main_iDomStatus->setObjectState("printer",STATE::ON);
  219|      4|    }
  220|      1|    else{
  221|      1|        my_data->myEventHandler.run("230V")->addEvent("Printer can not start due to home state: "+
  222|      1|                                                      stateToString(my_data->idom_all_state.houseState));
  223|      1|    }
  224|      5|}
  225|       |
  226|       |void iDomTOOLS::turnOffPrinter()
  227|      8|{
  228|      8|    digitalWrite(iDomConst::GPIO_PRINTER,LOW);
  229|      8|    my_data->myEventHandler.run("230V")->addEvent("230v drukarki OFF");
  230|      8|    my_data->main_iDomStatus->setObjectState("printer",STATE::OFF);
  231|      8|}
  232|       |
  233|       |PIN_STATE iDomTOOLS::getPinState(int pin_number)
  234|      7|{
  235|      7|    int pin_state = digitalRead(pin_number);
  236|      7|    switch (pin_state){
  237|      7|    case 0:
  238|      3|        return PIN_STATE::LOW_STATE;
  239|      7|    case 1:
  240|      2|        return PIN_STATE::HIGH_STATE;
  241|      7|    default:
  242|      2|        return PIN_STATE::UNKNOWN_STATE;
  243|      0|    }
  244|      0|}
  245|       |
  246|       |void iDomTOOLS::turnOnOffPrinter()
  247|      4|{
  248|      4|    PIN_STATE pinState = getPinState(iDomConst::GPIO_PRINTER);
  249|      4|    switch (pinState){
  250|      4|    case PIN_STATE::HIGH_STATE:
  251|      1|        turnOffPrinter();
  252|      1|        my_data->mainLCD->set_lcd_STATE(10);
  253|      1|        my_data->mainLCD->printString(true,0,0,"230V OFF");
  254|      1|        break;
  255|      4|    case PIN_STATE::LOW_STATE:
  256|      2|        turnOnPrinter();
  257|      2|        my_data->mainLCD->set_lcd_STATE(10);
  258|      2|        my_data->mainLCD->printString(true,0,0,"230V ON");
  259|      2|        break;
  260|      4|    default:
  261|      1|        puts("def");
  262|      1|
  263|      1|        log_file_mutex.mutex_lock();
  264|      1|        log_file_cout << CRITICAL << " blad odczytu stanu pinu zasilania drukarki "<< std::endl;
  265|      1|        log_file_mutex.mutex_unlock();
  266|      4|    }
  267|      4|}
  268|       |
  269|       |void iDomTOOLS::turnOnOff433MHzSwitch(const std::string& name)
  270|      5|{
  271|      5|    STATE listwaState = my_data->main_iDomStatus->getObjectState(name);
  272|      5|    RADIO_SWITCH *m_switch = nullptr;
  273|      5|    try {
  274|      5|        m_switch = dynamic_cast<RADIO_SWITCH*>(my_data->main_REC->getEqPointer(name));
  275|      5|    } catch (const std::string& e) {
  276|      1|        log_file_mutex.mutex_lock();
  277|      1|        log_file_cout << CRITICAL << " void iDomTOOLS::turnOnOff433MHzSwitch(const std::string& name) "<< e << std::endl;
  278|      1|        log_file_mutex.mutex_unlock();
  279|      1|        return;
  280|      1|    }
  281|      4|
  282|      4|    if (listwaState == STATE::ON){
  283|      2|        my_data->mainLCD->set_lcd_STATE(10);
  284|      2|        my_data->mainLCD->printString(true,0,0,"230V OFF "+name);
  285|      2|        m_switch->off();
  286|      2|    }
  287|      2|    else if (listwaState == STATE::OFF){
  288|      2|        my_data->mainLCD->set_lcd_STATE(10);
  289|      2|        my_data->mainLCD->printString(true,0,0,"230V ON "+name);
  290|      2|        m_switch->on();
  291|      2|    }
  292|      4|    saveState_iDom();
  293|      4|}
  294|       |
  295|       |void iDomTOOLS::turnOn433MHzSwitch(std::string name)
  296|      3|{
  297|      3|    try {
  298|      3|        RADIO_SWITCH *m_switch = dynamic_cast<RADIO_SWITCH*>(my_data->main_REC->getEqPointer(std::move(name)));
  299|      3|        m_switch->on();
  300|      3|    } catch (const std::string& e) {
  301|      1|        log_file_mutex.mutex_lock();
  302|      1|        log_file_cout << CRITICAL << " void iDomTOOLS::turnOn433MHzSwitch(std::string name) "<< e << std::endl;
  303|      1|        log_file_mutex.mutex_unlock();
  304|      1|    }
  305|      3|}
  306|       |
  307|       |void iDomTOOLS::turnOff433MHzSwitch(std::string name)
  308|      5|{
  309|      5|    try {
  310|      5|        RADIO_SWITCH *m_switch = dynamic_cast<RADIO_SWITCH*>(my_data->main_REC->getEqPointer(std::move(name)));
  311|      5|        m_switch->off();
  312|      5|    } catch (const std::string& e) {
  313|      1|        log_file_mutex.mutex_lock();
  314|      1|        log_file_cout << CRITICAL << " void iDomTOOLS::turnOff433MHzSwitch(std::string name) "<< e << std::endl;
  315|      1|        log_file_mutex.mutex_unlock();
  316|      1|    }
  317|      5|}
  318|       |
  319|       |void iDomTOOLS::runOnSunset()
  320|      3|{
  321|      3|    if (my_data->idom_all_state.houseState == STATE::UNLOCK)
  322|      2|    {
  323|      2|        ////switch 433mhz
  324|     10|        for (auto m_switch : my_data->main_REC->getSwitchPointerVector()){
  325|     10|            m_switch->onSunset();
  326|     10|        }
  327|      2|    }
  328|      1|    else{
  329|      1|        my_data->myEventHandler.run("iDom")->addEvent("433MHz can not start due to home state: "+
  330|      1|                                                      stateToString(my_data->idom_all_state.houseState));
  331|      1|    }
  332|      3|}
  333|       |
  334|       |void iDomTOOLS::runOnSunrise()
  335|      4|{
  336|      4|    if (my_data->idom_all_state.houseState == STATE::UNLOCK)
  337|      2|    {
  338|      2|        ////switch 433mhz
  339|     10|        for (auto m_switch : my_data->main_REC->getSwitchPointerVector()){
  340|     10|            m_switch->onSunrise();
  341|     10|        }
  342|      2|    }
  343|      2|    else{
  344|      2|        my_data->myEventHandler.run("iDom")->addEvent("433MHz can not start due to home state: "+
  345|      2|                                                      stateToString(my_data->idom_all_state.houseState));
  346|      2|    }
  347|      4|    my_data->main_iDomTools->ledOFF();
  348|      4|}
  349|       |
  350|       |void iDomTOOLS::lockHome()
  351|     11|{
  352|     11|    my_data->idom_all_state.houseState = STATE::LOCK;
  353|     11|    my_data->main_iDomStatus->setObjectState("house", STATE::LOCK);
  354|     11|    my_data->main_iDomTools->sendViberPicture("dom zablokownay!",
  355|     11|                                              "http://cyniu88.no-ip.pl/images/iDom/iDom/lock.jpg",
  356|     11|                                              my_data->server_settings->viberReceiver.at(0),
  357|     11|                                              my_data->server_settings->viberSender);
  358|     11|
  359|     11|    log_file_mutex.mutex_lock();
  360|     11|    log_file_cout << INFO << "status domu - "+stateToString(my_data->idom_all_state.houseState)<< std::endl;
  361|     11|    log_file_mutex.mutex_unlock();
  362|     11|
  363|     11|    saveState_iDom();
  364|     11|}
  365|       |
  366|       |void iDomTOOLS::unlockHome()
  367|     16|{
  368|     16|    my_data->idom_all_state.houseState = STATE::UNLOCK;
  369|     16|    my_data->main_iDomStatus->setObjectState("house", STATE::UNLOCK);
  370|     16|    my_data->main_iDomTools->sendViberPicture("dom odblokownay!",
  371|     16|                                              "http://cyniu88.no-ip.pl/images/iDom/iDom/unlock.jpg",
  372|     16|                                              my_data->server_settings->viberReceiver.at(0),
  373|     16|                                              my_data->server_settings->viberSender);
  374|     16|
  375|     16|    log_file_mutex.mutex_lock();
  376|     16|    log_file_cout << INFO << "status domu - "+stateToString(my_data->idom_all_state.houseState)<< std::endl;
  377|     16|    log_file_mutex.mutex_unlock();
  378|     16|
  379|     16|    saveState_iDom();
  380|     16|}
  381|       |
  382|       |void iDomTOOLS::switchActionOnLockHome()
  383|      1|{
  384|      1|    ////switch 433mhz
  385|      5|    for (auto m_switch : my_data->main_REC->getSwitchPointerVector()){
  386|      5|        m_switch->onLockHome();
  387|      5|    }
  388|      1|}
  389|       |
  390|       |void iDomTOOLS::switchActionOnUnlockHome()
  391|      1|{
  392|      1|    ////switch 433mhz
  393|      5|    for (auto m_switch : my_data->main_REC->getSwitchPointerVector()){
  394|      5|        m_switch->onUnlockHome();
  395|      5|    }
  396|      1|}
  397|       |
  398|       |std::string iDomTOOLS::buttonPressed(const std::string& id)
  399|      2|{
  400|      4|    for (auto n : buttonPointerVector){
  401|      4|        if (id == n->getID()){
  402|      1|            return n->getName();
  403|      1|        }
  404|      1|    }
  405|      1|    throw "UNKNOWN BUTTON ID: " + std::to_string(id);
  406|      1|}
  407|       |
  408|       |void iDomTOOLS::button433MHzPressedAction(const std::string& name)
  409|      6|{
  410|      6|    if (useful_F_libs::hasSubstring(name,"locker") == true)  // TODO  dodac hassubstring
  411|      6|    {
  412|      6|        RADIO_BUTTON* buttonLocker = static_cast<RADIO_BUTTON*>(my_data->main_REC->getEqPointer(name) );
  413|      6|        button433mhzLockerPressed(buttonLocker);
  414|      6|    }
  415|      6|}
  416|       |
  417|       |void iDomTOOLS::button433mhzLockerPressed(RADIO_BUTTON *radioButton)
  418|     16|{
  419|     16|    static unsigned int counter = 0;
  420|     16|
  421|     16|    Clock t = Clock::getTime();
  422|     16|    if (lastButton433MHzLockUnlockTime != t /*|| (lastButton433MHzLockUnlockTime + Clock(0,1)) == t*/)
  423|      8|    {
  424|      8|#ifdef BT_TEST
  425|      8|        std::cout << "LOCKER TEST iDomTOOLS::button433mhzLockerPressed()" <<std::endl;
  426|      8|#endif
  427|      8|        lastButton433MHzLockUnlockTime = t;
  428|      8|        counter = 0;
  429|      8|        if(my_data->idom_all_state.houseState != STATE::UNLOCK)
  430|      4|        {
  431|      4|            buttonUnlockHome();
  432|      4|            puts("\nodblokuje dom\n");
  433|      4|            radioButton->setState(STATE::UNLOCK);
  434|      4|        }
  435|      4|        else if (my_data->main_iDomStatus->getObjectState("music") == STATE::PLAY)
  436|      1|        {
  437|      1|            ledOFF();
  438|      1|            MPD_stop();
  439|      1|            turnOffPrinter();
  440|      1|            radioButton->setState(STATE::STOP);
  441|      1|            switchActionOnLockHome();
  442|      1|        }
  443|      3|        else if (my_data->main_iDomStatus->getObjectState("music") == STATE::STOP)
  444|      1|        {
  445|      1|            MPD_play(my_data);
  446|      1|            switchActionOnUnlockHome();
  447|      1|            if(isItDay() == false)
  448|      1|            {
  449|      1|                ledOn(my_data->ptr_pilot_led->colorLED[2]);
  450|      1|            }
  451|      1|            radioButton->setState(STATE::PLAY);
  452|      1|        }
  453|      8|    }
  454|      8|    else
  455|      8|    {
  456|      8|        ++counter;
  457|      8|        if (counter == 1)
  458|      4|        {
  459|      4|            buttonLockHome();
  460|      4|            puts("\nzablokuje dom\n");
  461|      4|            radioButton->setState(STATE::LOCK);
  462|      4|        }
  463|      8|        //#ifdef BT_TEST
  464|      8|        std::cout << "LOCKER TEST iDomTOOLS::button433mhzLockerPressed()- counter: " << counter << std::endl;
  465|      8|        //#endif
  466|      8|    }
  467|     16|
  468|     16|}
  469|       |
  470|       |void iDomTOOLS::buttonLockHome()
  471|      4|{
  472|      4|    ledOFF();
  473|      4|    MPD_stop();
  474|      4|    turnOffPrinter();
  475|      4|    lockHome();
  476|      4|}
  477|       |
  478|       |void iDomTOOLS::buttonUnlockHome()
  479|      4|{
  480|      4|    unlockHome();
  481|      4|    MPD_play(my_data);
  482|      4|    if(isItDay() == false){
  483|      4|        ledOn(my_data->ptr_pilot_led->colorLED[2]);
  484|      4|    }
  485|      4|}
  486|       |
  487|       |bool iDomTOOLS::isItDay()
  488|     17|{
  489|     17|    Clock now = Clock::getTime();
  490|     17|    if(now < iDomTOOLS::getSunriseClock() || now > iDomTOOLS::getSunsetClock()){
  491|     16|        return false;
  492|     16|    }
  493|      1|    return true;
  494|      1|}
  495|       |
  496|       |std::string iDomTOOLS::getAllDataSunrisesunset()
  497|      1|{
  498|      1|    return sun.getAllData();
  499|      1|}
  500|       |
  501|       |CARDINAL_DIRECTIONS::ALARM_INFO iDomTOOLS::getLightningStruct()
  502|      4|{
  503|      4|    std::lock_guard<std::mutex> lock(m_lightningMutex);
  504|      4|    return m_lightningStruct;
  505|      4|}
  506|       |
  507|       |void iDomTOOLS::setLightningStruct(CARDINAL_DIRECTIONS::ALARM_INFO &s)
  508|      2|{
  509|      2|    std::lock_guard<std::mutex> lock(m_lightningMutex);
  510|      2|    //std::cout <<"struktura setowana " << s.data.str() <<std::endl;
  511|      2|    m_lightningStruct = s;
  512|      2|
  513|      2|    //std::cout <<"struktura już po setowaniu " << m_lightningStruct.data.str() <<std::endl;
  514|      2|}
  515|       |
  516|       |void iDomTOOLS::checkLightning()
  517|      1|{
  518|      1|    nlohmann::json jj = useful_F_libs::getJson(my_data->server_settings->lightningApiURL);
  519|      1|
  520|      1|    CARDINAL_DIRECTIONS::ALARM_INFO lightningData = lightning.lightningAlert(jj);
  521|      1|    setLightningStruct(lightningData);
  522|      1|    bool result = lightning.checkLightningAlert(&lightningData);
  523|      1|
  524|      1|    if(result == true)
  525|      1|    {
  526|      1|
  527|      1|        m_viber.setAvatar("http://cyniu88.no-ip.pl/avatar/lightning.jpg");
  528|      1|        STATE stateMSG = sendViberMsgBool("UWAGA BURZA KOŁO KRAKOWA! "+EMOJI::emoji(E_emoji::THUNDER_CLOUD_AND_RAIN)
  529|      1|                                          +"\\n\\n "+lightningData.data.str() ,
  530|      1|                                          my_data->server_settings->viberReceiver.at(0),
  531|      1|                                          my_data->server_settings->viberSender);
  532|      1|
  533|      1|        if(stateMSG == STATE::SEND_NOK){
  534|      1|            log_file_mutex.mutex_lock();
  535|      1|            log_file_cout << ERROR << "nie wysłano informacje o burzy"<< std::endl;
  536|      1|            log_file_mutex.mutex_unlock();
  537|      1|        }
  538|      1|        stateMSG = sendViberMsgBool("UWAGA BURZA KOŁO KRAKOWA! "+EMOJI::emoji(E_emoji::THUNDER_CLOUD_AND_RAIN)
  539|      1|                                    +"\\n\\n "+lightningData.data.str() ,
  540|      1|                                    my_data->server_settings->viberReceiver.at(1),
  541|      1|                                    my_data->server_settings->viberSender);
  542|      1|
  543|      1|        m_viber.setAvatar(my_data->server_settings->viberAvatar);
  544|      1|        if(stateMSG == STATE::SEND_OK)
  545|      0|        {
  546|      0|            log_file_mutex.mutex_lock();
  547|      0|            log_file_cout << INFO << "wysłano informacje o burzy"<< std::endl;
  548|      0|            log_file_mutex.mutex_unlock();
  549|      0|        }
  550|      1|        else
  551|      1|        {
  552|      1|            log_file_mutex.mutex_lock();
  553|      1|            log_file_cout << ERROR << "nie wysłano informacje o burzy"<< std::endl;
  554|      1|            log_file_mutex.mutex_unlock();
  555|      1|        }
  556|      1|    }
  557|      1|}
  558|       |
  559|       |std::string iDomTOOLS::getSunrise(bool extend )
  560|      7|{
  561|      7|    Clock tt = sun.getSunRise();
  562|      7|    if (extend == true){
  563|      3|        return "Sunrise time: "+tt.getString();
  564|      3|    }
  565|      4|    return tt.getString();
  566|      4|}
  567|       |
  568|       |std::string iDomTOOLS::getSunset(bool extend )
  569|      7|{
  570|      7|    Clock tt = sun.getSunSet();
  571|      7|    if (extend == true){
  572|      3|        return "Sunset time: "+tt.getString();
  573|      3|    }
  574|      4|    return tt.getString();
  575|      4|}
  576|       |
  577|       |Clock iDomTOOLS::getSunsetClock()
  578|      1|{
  579|      1|    return sun.getSunSet();
  580|      1|}
  581|       |
  582|       |Clock iDomTOOLS::getSunriseClock()
  583|     17|{
  584|     17|    return sun.getSunRise();
  585|     17|}
  586|       |
  587|       |std::string iDomTOOLS::getDayLenght(bool extend )
  588|      7|{
  589|      7|    Clock tt = sun.getDayLength();
  590|      7|    if (extend == true){
  591|      3|        return "Day Lenght : "+tt.getString();
  592|      3|    }
  593|      4|    return tt.getString();
  594|      4|}
  595|       |
  596|       |std::string iDomTOOLS::getWeatherEvent(const std::string& city, unsigned int radius)
  597|      1|{
  598|      1|    std::string url = "http://burze.dzis.net/ramka.php?miejscowosc=";
  599|      1|    url.append(city);
  600|      1|    url.append("&promien=");
  601|      1|    url.append(std::to_string(radius));
  602|      1|    return useful_F_libs::httpPost(url, 10);
  603|      1|}
  604|       |
  605|       |std::vector<WEATHER_ALER> iDomTOOLS::getAlert(std::string data)
  606|      1|{
  607|      1|    std::vector<WEATHER_ALER> wAlert;
  608|      1|    WEATHER_ALER tempWA;
  609|      1|    std::string d = useful_F_libs::removeHtmlTag(data);
  610|      1|    std::vector<std::string> vect;
  611|      1|
  612|      1|    vect = useful_F::split(d,'\n');
  613|      1|    vect.pop_back();
  614|      1|    for (auto n : vect)
  615|      7|    {
  616|      7|        if (n.find("brak") == std::string::npos)
  617|      1|        {
  618|      1|            tempWA.alert = n;
  619|      1|            tempWA.name = n;
  620|      1|            tempWA.sended = false;
  621|      1|            wAlert.push_back(tempWA);
  622|      1|        }
  623|      7|    }
  624|      1|    return {wAlert};
  625|      1|}
  626|       |
  627|       |void iDomTOOLS::textToSpeach(std::vector<std::string> *textVector)
  628|      4|{
  629|      4|    if (textVector->empty() ){
  630|      1|        return;
  631|      1|    }
  632|      3|    std::string txt;
  633|      3|
  634|      7|    for (auto a : *textVector){
  635|      7|        txt += a;
  636|      7|    }
  637|      3|    /////////// start thread TTS - python use ////////////////////////
  638|      3|    std::string command = " python /home/pi/programowanie/iDom_server_OOP/script/PYTHON/gadacz.py \\"+ txt +"\\";
  639|      3|    if(my_data->ptr_MPD_info->isPlay){
  640|      1|
  641|      1|    }
  642|      2|    else {
  643|      2|        turnOnSpeakers();
  644|      2|    }
  645|      3|
  646|      3|    useful_F::runLinuxCommand(command);
  647|      3|
  648|      3|    if(my_data->ptr_MPD_info->isPlay){
  649|      1|
  650|      1|    }
  651|      2|    else {
  652|      2|        turnOffSpeakers();
  653|      2|    }
  654|      3|}
  655|       |
  656|       |std::string iDomTOOLS::getTextToSpeach()
  657|      3|{
  658|      3|    std::vector<std::string> dayL = useful_F::split(getDayLenght(),':');
  659|      3|    std::stringstream text;
  660|      3|    std::string smogText = getSmog();
  661|      3|    int smogInt = std::stoi(smogText);
  662|      3|    text << "Godzina: " << Clock::getTime().getString();
  663|      3|    text << ". \nWschód słońca: " << getSunrise();
  664|      3|    text << ". \nZachód słońca: " << getSunset();
  665|      3|    text << ". \nDługość dnia: " << dayL[0] << " godzin " << dayL[1] << " minut";
  666|      3|    text <<". \n";
  667|      3|    dayL = getTemperature();
  668|      3|    text << "Temperatura na zewnątrz: " << dayL[1] << " stopnia. \n";
  669|      3|    text << "Temperatura w pokoju: " << dayL[0] << " stopnia. \n";
  670|      3|    text << "Smog: " << smogText << " mg/m^3. \n";
  671|      3|    if (smogInt > 50){
  672|      0|        int result = smogInt *2;
  673|      0|        text << "UWAGA! Maksymalna wartość przekroczona " << result << "%.";
  674|      0|    }
  675|      3|    return text.str();
  676|      3|}
  677|       |
  678|       |std::vector<std::string> iDomTOOLS::getTemperature()
  679|     18|{
  680|     18|    std::vector<std::string> vect = useful_F::split(useful_F::send_to_arduino(my_data,"temperature:22;"),':');
  681|     18|    return vect;
  682|     18|}
  683|       |
  684|       |std::string iDomTOOLS::getTemperatureString()
  685|      2|{
  686|      2|    return useful_F::send_to_arduino(my_data,"temperature:22;");
  687|      2|}
  688|       |
  689|       |std::string iDomTOOLS::getSmog()
  690|     14|{
  691|     14|    CURL *curl;
  692|     14|    CURLcode res;
  693|     14|    std::string readBuffer;
  694|     14|    curl = curl_easy_init();
  695|     14|
  696|     14|    if(curl) {
  697|     14|        curl_easy_setopt(curl, CURLOPT_URL, "www.smog.krakow.pl");
  698|     14|        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, useful_F_libs::WriteCallback);
  699|     14|        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);
  700|     14|        res = curl_easy_perform(curl);
  701|     14|        /* Check for errors */
  702|     14|        if(res != CURLE_OK)
  703|      0|            fprintf(stderr, "curl_easy_perform() failed: %s\n",
  704|      0|                    curl_easy_strerror(res));
  705|     14|
  706|     14|        /* always cleanup */
  707|     14|        curl_easy_cleanup(curl);
  708|     14|    }
  709|     14|    curl_global_cleanup();
  710|     14|    int start = readBuffer.find("<h2 class=\"polution\">");
  711|     14|    try {
  712|     14|        readBuffer = readBuffer.substr(start, 40);
  713|     14|    }
  714|     14|    catch (...){
  715|      0|        log_file_mutex.mutex_lock();
  716|      0|        log_file_cout << CRITICAL << "wyjatek substr() e getSmog() !!!!!!"<< std::endl;
  717|      0|        log_file_mutex.mutex_unlock();
  718|      0|    }
  719|     14|
  720|     14|    readBuffer = useful_F_libs::find_tag(readBuffer);
  721|     14|
  722|     14|    return readBuffer;
  723|     14|}
  724|       |
  725|       |void iDomTOOLS::send_temperature_thingSpeak()
  726|      8|{
  727|      8|    std::vector<std::string> _temperature = getTemperature();
  728|      8|    std::string addres = "api.thingspeak.com/update?key=";
  729|      8|    addres+=key;
  730|      8|    addres+="&field1=";
  731|      8|    addres+= _temperature.at(0);
  732|      8|    // addres.erase(addres.size()-2,addres.size());
  733|      8|    addres+= "&field3="+_temperature.at(1);
  734|      8|    addres+="&field2="+getSmog();
  735|      8|    //////////////////////////////// pozyskanie temperatury
  736|      8|    allThermometer.updateAll(&_temperature);
  737|      8|    sendSMSifTempChanged("outside",0);
  738|      8|    sendSMSifTempChanged("inside",24);
  739|      8|    std::string s = useful_F_libs::httpPost(addres,10);
  740|      8|
  741|      8|    if(s == "0"){
  742|      0|        log_file_mutex.mutex_lock();
  743|      0|        log_file_cout << CRITICAL << " błąd wysyłania temoeratury na thingspeak: "<< s << std::endl;
  744|      0|        log_file_mutex.mutex_unlock();
  745|      0|    }
  746|      8|}
  747|       |
  748|       |void iDomTOOLS::cameraLedON(const std::string& link)
  749|      3|{
  750|      3|    Clock t = Clock::getTime();
  751|      3|    SunRiseSet sun;
  752|      3|    Clock sunRise, sunSet;
  753|      3|    sunRise = sun.getSunRise();
  754|      3|    sunSet = sun.getSunSet();
  755|      3|    sunSet += Clock(23,30); // +23:30 == -00:30
  756|      3|    if (t <= sunRise || t >= sunSet){
  757|      2|        //printf("zapalam leda!\n");
  758|      2|        std::string s = useful_F_libs::httpPost(link,10);
  759|      2|        if (s == "ok.\n"){
  760|      2|            my_data->main_iDomStatus->setObjectState("cameraLED",STATE::ON);
  761|      2|            // printf("w ifie\n");
  762|      2|        }
  763|      2|    }
  764|      3|    // printf("nie odpalam leda!\n");
  765|      3|}
  766|       |
  767|       |void iDomTOOLS::cameraLedOFF(const std::string& link)
  768|      3|{
  769|      3|    std::string s = useful_F_libs::httpPost(link,10);
  770|      3|    //printf (" camera response '%s' \n", s.c_str());
  771|      3|    if (s == "ok.\n"){
  772|      3|        my_data->main_iDomStatus->setObjectState("cameraLED",STATE::OFF);
  773|      3|        //printf("w ifie\n");
  774|      3|    }
  775|      3|}
  776|       |
  777|       |nlohmann::json iDomTOOLS::sendViberMsg(const std::string &msg,
  778|       |                                       const std::string &receiver,
  779|       |                                       const std::string &senderName,
  780|       |                                       const std::string& accessToken,
  781|       |                                       const std::string& url)
  782|     11|{
  783|     11|    nlohmann::json jj;
  784|     11|    std::lock_guard<std::mutex> lock(m_msgMutex);
  785|     11|    jj = nlohmann::json::parse( m_viber.sendViberMSG(msg,receiver,senderName,accessToken,url));
  786|     11|    return jj;
  787|     11|}
  788|       |
  789|       |nlohmann::json iDomTOOLS::sendViberPicture(const std::string &msg,
  790|       |                                           const std::string &image,
  791|       |                                           const std::string &receiver,
  792|       |                                           const std::string &senderName,
  793|       |                                           const std::string& accessToken,
  794|       |                                           const std::string& url)
  795|     31|{
  796|     31|    nlohmann::json jj;
  797|     31|    std::lock_guard<std::mutex> lock(m_msgMutex);
  798|     31|    jj = nlohmann::json::parse(m_viber.sendViberPicture(msg,image,receiver,senderName,accessToken,url));
  799|     31|    return jj;
  800|     31|}
  801|       |
  802|       |STATE iDomTOOLS::sendViberMsgBool(const std::string &msg,
  803|       |                                  const std::string &receiver,
  804|       |                                  const std::string &senderName,
  805|       |                                  const std::string& accessToken,
  806|       |                                  const std::string& url)
  807|      2|{
  808|      2|    nlohmann::json jj = sendViberMsg(msg,receiver,senderName,accessToken,url);
  809|      2|    STATE ret = STATE::SEND_NOK;
  810|      2|    if(jj.find("status_message")!= jj.end())
  811|      0|    {
  812|      0|        if(jj.at("status_message").get<std::string>() == "ok")
  813|      0|        {
  814|      0|            ret = STATE::SEND_OK;
  815|      0|        }
  816|      0|    }
  817|      2|    else
  818|      2|    {
  819|      2|        log_file_mutex.mutex_lock();
  820|      2|        log_file_cout << ERROR << "nie wyslanno wiadomosci viber"<< jj.dump()<< std::endl;
  821|      2|        log_file_mutex.mutex_unlock();
  822|      2|    }
  823|      2|    return ret;
  824|      2|}
  825|       |
  826|       |STATE iDomTOOLS::sendViberPictureBool(const std::string& msg,
  827|       |                                      const std::string& image,
  828|       |                                      const std::string& receiver,
  829|       |                                      const std::string& senderName,
  830|       |                                      const std::string& accessToken,
  831|       |                                      const std::string& url)
  832|      0|{
  833|      0|    nlohmann::json jj = sendViberPicture(msg,image,receiver,senderName,accessToken,url);
  834|      0|    STATE ret = STATE::SEND_NOK;
  835|      0|    if(jj.at("status_message").get<std::string>() == "ok")
  836|      0|    {
  837|      0|        ret = STATE::SEND_OK;
  838|      0|    }
  839|      0|    else
  840|      0|    {
  841|      0|        log_file_mutex.mutex_lock();
  842|      0|        log_file_cout << ERROR << "nie wyslanno wiadomosci viber"<< jj.dump()<< std::endl;
  843|      0|        log_file_mutex.mutex_unlock();
  844|      0|    }
  845|      0|    return ret;
  846|      0|}
  847|       |
  848|       |std::string iDomTOOLS::postOnFacebook(const std::string& msg, const std::string& image)
  849|      2|{
  850|      2|    std::lock_guard<std::mutex> lock(m_msgMutex);
  851|      2|    if (image != "NULL"){
  852|      2|        return m_facebook.postPhotoOnWall(image,msg);
  853|      2|    }
  854|      0|
  855|      0|    return m_facebook.postTxtOnWall(msg);
  856|      0|}
  857|       |
  858|       |std::string iDomTOOLS::ledOFF()
  859|     14|{
  860|     14|    return useful_F::send_to_arduino(my_data,"LED_STOP:2;");
  861|     14|}
  862|       |
  863|       |std::string iDomTOOLS::ledClear()
  864|      1|{
  865|      1|    return useful_F::send_to_arduino(my_data,"LED_CLEAR:2;");
  866|      1|}
  867|       |
  868|       |std::string iDomTOOLS::ledClear(unsigned int from, unsigned int to)
  869|     13|{
  870|     13|    LED_Strip ledColor(0,60,0,0,0,"BLACK");
  871|     13|    useful_F::send_to_arduino(my_data,ledColor.get(from, to));
  872|     13|    return "Led cleared";
  873|     13|}
  874|       |
  875|       |std::string iDomTOOLS::ledOn(const LED_Strip& ledColor, unsigned int from, unsigned int to)
  876|     23|{
  877|     23|    if (my_data->idom_all_state.houseState == STATE::UNLOCK)
  878|      5|    {
  879|      5|        return useful_F::send_to_arduino(my_data,ledColor.get(from, to));
  880|      5|    }
  881|     18|    else{
  882|     18|        my_data->myEventHandler.run("LED")->addEvent("LED can not start due to home state: "+
  883|     18|                                                     stateToString(my_data->idom_all_state.houseState));
  884|     18|    }
  885|     23|    return "iDom LOCKED!";
  886|     23|}
  887|       |
  888|       |void iDomTOOLS::checkAlarm()
  889|     10|{
  890|     10|    unsigned int fromVol = my_data->alarmTime.fromVolume;
  891|     10|    unsigned int toVol   = my_data->alarmTime.toVolume;
  892|     10|    unsigned int radioId = my_data->alarmTime.radioID;
  893|     10|
  894|     10|    Clock now = Clock::getTime();
  895|     10|    if (now == my_data->alarmTime.time && my_data->alarmTime.state == STATE::ACTIVE){
  896|      1|        my_data->alarmTime.state = STATE::WORKING;
  897|      1|        MPD_volumeSet(my_data, fromVol);
  898|      1|        MPD_play(my_data,radioId);
  899|      1|        my_data->main_iDomStatus->setObjectState("alarm",STATE::DEACTIVE);
  900|      1|    }
  901|     10|
  902|     10|    if (my_data->alarmTime.state == STATE::WORKING){
  903|     10|        unsigned int vol = MPD_getVolume(my_data) + 1;
  904|     10|        if (vol < toVol){
  905|      9|            MPD_volumeSet(my_data, vol);
  906|      9|
  907|      9|            if(iDomTOOLS::isItDay() == false){
  908|      9|                my_data->main_iDomTools->ledOn(my_data->ptr_pilot_led->colorLED[2],fromVol,vol);
  909|      9|            }
  910|      9|        }
  911|      1|        else{
  912|      1|            my_data->alarmTime.state = STATE::DEACTIVE;
  913|      1|            if(iDomTOOLS::isItDay() == false){
  914|      1|                 my_data->main_iDomTools->turnOn433MHzSwitch("ALARM");
  915|      1|                 saveState_iDom();
  916|      1|                 log_file_mutex.mutex_lock();
  917|      1|                 log_file_cout << DEBUG << "uruchamiam ALARM 433MHz"<< std::endl;
  918|      1|                 log_file_mutex.mutex_unlock();
  919|      1|            }
  920|      1|        }
  921|     10|    }
  922|     10|}
  923|       |
  924|       |void iDomTOOLS::saveState_iDom()
  925|     57|{
  926|     57|    iDom_SAVE_STATE info(my_data->server_settings->saveFilePath);
  927|     57|    nlohmann::json jsonAlarm;
  928|     57|    nlohmann::json jsonMPD;
  929|     57|    nlohmann::json json_iDomLOCK;
  930|     57|    nlohmann::json json433Mhz;
  931|     57|    //////////////////// iDom
  932|     57|    json_iDomLOCK["iDomLock"] = stateToString(my_data->idom_all_state.houseState);
  933|     57|    //////////////////// alarm
  934|     57|    jsonAlarm["alarm"] = my_data->main_iDomStatus->getObjectStateString("alarm");
  935|     57|    jsonAlarm["time"]  = my_data->alarmTime.time.getString();
  936|     57|    jsonAlarm["fromVolume"] = my_data->alarmTime.fromVolume;
  937|     57|    jsonAlarm["toVolume"] = my_data->alarmTime.toVolume;
  938|     57|    jsonAlarm["radioID"] = my_data->alarmTime.radioID;
  939|     57|    //////////////////// mpd
  940|     57|    jsonMPD["music"] = my_data->main_iDomStatus->getObjectStateString("music");
  941|     57|    jsonMPD["speakers"] = my_data->main_iDomStatus->getObjectStateString("speakers");
  942|     57|    ////////////////// 433Mhz
  943|     57|    auto switch433vector = my_data->main_REC->getSwitchPointerVector();
  944|     57|    for (auto v : switch433vector)
  945|    285|    {
  946|    285|        v->getName();
  947|    285|        json433Mhz[v->getName()] = stateToString(v->getState());
  948|    285|    }
  949|     57|    ///
  950|     57|    nlohmann::json json;
  951|     57|    json["iDom"] = json_iDomLOCK;
  952|     57|    json["ALARM"] = jsonAlarm;
  953|     57|    json["MPD"] = jsonMPD;
  954|     57|    json["433Mhz"] = json433Mhz;
  955|     57|
  956|     57|    info.write(json);
  957|     57|
  958|     57|#ifdef BT_TEST
  959|     57|    std::cout << json <<std::endl;
  960|     57|    std::cout << " saved to " << my_data->server_settings->saveFilePath <<std::endl;
  961|     57|#endif
  962|     57|}
  963|       |
  964|       |void iDomTOOLS::readState_iDom(nlohmann::json jj)
  965|      2|{
  966|      2|    try
  967|      2|    {
  968|      2|#ifdef BT_TEST
  969|      2|        std::cout << "JSON: " << jj.dump(4) << std::endl;
  970|      2|#endif
  971|      2|        nlohmann::json json433MHz = jj.at("433Mhz");
  972|      2|
  973|     12|        for (nlohmann::json::iterator it = json433MHz.begin(); it != json433MHz.end(); ++it)
  974|     10|        {
  975|     10|            if( it.value() == "ON"){
  976|      0|                my_data->main_iDomTools->turnOn433MHzSwitch(it.key());
  977|      0|            }
  978|     10|            else if ( it.value() == "OFF"){
  979|      0|                my_data->main_iDomTools->turnOff433MHzSwitch(it.key());
  980|      0|            }
  981|     10|        }
  982|      2|        auto iDomLock = jj.at("iDom").at("iDomLock").get<std::string>();
  983|      2|
  984|      2|        if(iDomLock == "UNLOCK")
  985|      0|            unlockHome();
  986|      2|        else if (iDomLock == "LOCK")
  987|      2|            lockHome();
  988|      2|
  989|      2|        auto mpdMusic = jj.at("MPD").at("music").get<std::string>();
  990|      2|        auto mpdSpeakers = jj.at("MPD").at("speakers").get<std::string>();
  991|      2|
  992|      2|        if(mpdMusic == "PLAY")
  993|      2|            MPD_play(my_data);
  994|      0|        else if(mpdMusic == "STOP")
  995|      0|            MPD_stop();
  996|      2|        if(mpdSpeakers == "ON")
  997|      2|            turnOnSpeakers();
  998|      0|        else if(mpdSpeakers == "OFF")
  999|      0|            turnOffSpeakers();
 1000|      2|
 1001|      2|        auto alarmState = jj.at("ALARM").at("alarm").get<std::string>();
 1002|      2|        auto alarmTime  = jj.at("ALARM").at("time").get<std::string>();
 1003|      2|        my_data->alarmTime.fromVolume = jj.at("ALARM").at("fromVolume").get<int>();
 1004|      2|        my_data->alarmTime.toVolume = jj.at("ALARM").at("toVolume").get<int>();
 1005|      2|        my_data->alarmTime.radioID = jj.at("ALARM").at("radioID").get<int>();
 1006|      2|        my_data->alarmTime.time = Clock(alarmTime);
 1007|      2|
 1008|      2|        if (alarmState == "ACTIVE"){
 1009|      2|            my_data->alarmTime.state = STATE::ACTIVE;
 1010|      2|            my_data->main_iDomStatus->setObjectState("alarm", my_data->alarmTime.state);
 1011|      2|            saveState_iDom();
 1012|      2|        }
 1013|      2|    }
 1014|      2|    catch(...)
 1015|      2|    {
 1016|      0|        log_file_mutex.mutex_lock();
 1017|      0|        log_file_cout << ERROR << "nie ma pliku json z stanem iDom"<< std::endl;
 1018|      0|        log_file_mutex.mutex_unlock();
 1019|      0|#ifdef BT_TEST
 1020|      0|        std::cout << "nie ma pliku json z stanem iDom" << std::endl;
 1021|      0|#endif
 1022|      0|    }
 1023|      2|}
 1024|       |
 1025|       |std::string iDomTOOLS::startKodi_Thread()
 1026|      4|{
 1027|      4|    STATE kodiState = my_data->main_iDomStatus->getObjectState("KODI");
 1028|      4|    if (kodiState == STATE::ACTIVE)
 1029|      1|        return "kodi already run";
 1030|      3|
 1031|      3|    return iDOM_THREAD::start_thread("kodi smartTV",useful_F::kodi,my_data);
 1032|      3|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/idomtools_mpd.cpp:
    1|       |#include "idomtools.h"
    2|       |#include "../blockQueue/blockqueue.h"
    3|       |#include "../functions/functions.h"
    4|       |
    5|       |void iDomTOOLS::MPD_play(thread_data* my_data)
    6|     14|{
    7|     14|    if(my_data->idom_all_state.houseState == STATE::UNLOCK)
    8|      8|    {
    9|      8|        blockQueue _q;
   10|      8|        _q._add(MPD_COMMAND::PLAY);
   11|      8|    }
   12|      6|    else
   13|      6|    {
   14|      6|        my_data->myEventHandler.run("MPD")->addEvent("MPD can not start due to home state: "+
   15|      6|                                                     stateToString(my_data->idom_all_state.houseState));
   16|      6|    }
   17|     14|}
   18|       |
   19|       |void iDomTOOLS::MPD_stop()
   20|     15|{
   21|     15|    blockQueue _q;
   22|     15|    _q._add(MPD_COMMAND::STOP);
   23|     15|}
   24|       |
   25|       |void iDomTOOLS::MPD_next()
   26|      2|{
   27|      2|    blockQueue _q;
   28|      2|    _q._add(MPD_COMMAND::NEXT);
   29|      2|}
   30|       |
   31|       |void iDomTOOLS::MPD_prev()
   32|      2|{
   33|      2|    blockQueue _q;
   34|      2|    _q._add(MPD_COMMAND::PREV);
   35|      2|}
   36|       |
   37|       |void iDomTOOLS::MPD_pause()
   38|      5|{
   39|      5|    blockQueue _q;
   40|      5|    _q._add(MPD_COMMAND::PAUSE);
   41|      5|}
   42|       |
   43|       |void iDomTOOLS::MPD_volumeUp()
   44|      2|{
   45|      2|    blockQueue _q;
   46|      2|    _q._add(MPD_COMMAND::VOLUP);
   47|      2|}
   48|       |
   49|       |void iDomTOOLS::MPD_volumeDown()
   50|      2|{
   51|      2|    blockQueue _q;
   52|      2|    _q._add(MPD_COMMAND::VOLDOWN);
   53|      2|}
   54|       |
   55|       |void iDomTOOLS::MPD_volumeSet(thread_data *my_data, int vol)
   56|     12|{
   57|     12|    my_data->ptr_MPD_info->volume = vol;
   58|     12|    blockQueue _q;
   59|     12|    _q._add(MPD_COMMAND::VOLSET);
   60|     12|}
   61|       |
   62|       |void iDomTOOLS::MPD_play(thread_data *my_data, int id)
   63|      4|{
   64|      4|    if(my_data->idom_all_state.houseState == STATE::UNLOCK)
   65|      2|    {
   66|      2|        my_data->ptr_MPD_info->currentSongID = id;
   67|      2|        blockQueue _q;
   68|      2|        _q._add(MPD_COMMAND::PLAY_ID);
   69|      2|    }
   70|      2|    else
   71|      2|    {
   72|      2|        my_data->myEventHandler.run("MPD")->addEvent("MPD can not start due to home state: "+
   73|      2|                                                     stateToString(my_data->idom_all_state.houseState));
   74|      2|    }
   75|      4|}
   76|       |
   77|       |int iDomTOOLS::MPD_getVolume(thread_data *my_data)
   78|     11|{
   79|     11|    return my_data->ptr_MPD_info->volume;
   80|     11|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/idomtools_system.cpp:
    1|       |#include "idomtools.h"
    2|       |#include <sys/sysinfo.h>
    3|       |#include <sys/utsname.h>
    4|       |#include <sys/resource.h>
    5|       |#include <sys/time.h>
    6|       |#include <unistd.h>
    7|       |
    8|       |std::string iDomTOOLS::getSystemInfo()
    9|      2|{
   10|      2|    double load[3];
   11|      2|    if (getloadavg(load, 3) != -1)
   12|      2|    {
   13|      2|#ifdef BT_TEST
   14|      2|        printf("load average : %f , %f , %f\n", load[0],load[1],load[2]);
   15|      2|#endif
   16|      2|    }
   17|      2|    const double megabyte = 1024 * 1024;
   18|      2|    struct sysinfo info;
   19|      2|    sysinfo(&info);
   20|      2|
   21|      2|    long input_seconds = info.uptime;
   22|      2|    auto days = input_seconds / 60 / 60 / 24;
   23|      2|    auto hours = (input_seconds / 60 / 60) % 24;
   24|      2|    auto minutes = (input_seconds / 60) % 60;
   25|      2|    auto seconds = input_seconds % 60;
   26|      2|
   27|      2|    std::stringstream ret;
   28|      2|    ret << "System uptime: " << days <<" day " << hours
   29|      2|        << " hours " << minutes << " minutes "
   30|      2|        << seconds << " seconds " << std::endl << "Load: "
   31|      2|        << (info.loads[0]/65536) << "% - 1 min, " <<(info.loads[1]/65536)
   32|      2|        << "% - 5 min, "<<(info.loads[2]/65536) << "% - 15 min." << std::endl
   33|      2|        << "process count : " << info.procs << std::endl
   34|      2|        << "total RAM   : "<< (info.totalram / megabyte)<< "MB" << std::endl
   35|      2|        << "free RAM   : " << (info.freeram / megabyte) << "MB" << std::endl;
   36|      2|
   37|      2|    return ret.str();
   38|      2|}
   39|       |

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/lightning.cpp:
    1|       |#include "lightning.h"
    2|       |
    3|       |LIGHTNING::LIGHTNING()
    4|    404|{
    5|    404|    puts("LIGHTNING::LIGHTNING()");
    6|    404|}
    7|       |
    8|       |LIGHTNING::~LIGHTNING()
    9|    404|{
   10|    404|    puts("LIGHTNING::~LIGHTNING()");
   11|    404|}
   12|       |
   13|       |CARDINAL_DIRECTIONS::ALARM_INFO LIGHTNING::lightningAlert(nlohmann::json jj)
   14|     13|{
   15|     13|    CARDINAL_DIRECTIONS::ALARM_INFO data;
   16|     13|    nlohmann::json i;
   17|     13|
   18|     13|#ifdef BT_TEST
   19|     13|    std::cout <<"\n\n data all " << i.dump(4) <<" size:"<< i.size() <<std::endl;
   20|     13|#endif
   21|     13|    if (jj.find("response") != jj.end())
   22|     12|    {
   23|     12|        i = jj.at("response").get<nlohmann::json>();
   24|     12|    }
   25|      1|    else
   26|      1|    {
   27|      1|        std::cout << " zly JSON " <<std::endl;
   28|      1|        return data;
   29|      1|    }
   30|     12|
   31|     12|    auto _size = i.size();
   32|     12|    if (_size == 0)
   33|      4|    {
   34|      4|        data.riseAlarm = false;
   35|      4|        return data;
   36|      4|    }
   37|      8|    STATISTIC<int> ageAver(_size);
   38|      8|    STATISTIC<double> distanceKmAver(_size);
   39|      8|    STATISTIC<int> bearingAver(_size);
   40|    146|    for (auto j : i){
   41|    146|#ifdef BT_TEST
   42|    146|   //     std::cout <<"\n distance " << j.at("relativeTo").at("bearingENG").get<std::string>() << std::endl;
   43|    146|   //     std::cout <<"distance " << j.at("relativeTo").at("distanceKM").get<double>() << std::endl;
   44|    146|   //     std::cout <<"timestamp " << j.at("age").get<int>() << std::endl;
   45|    146|#endif
   46|    146|        ageAver.push_back(j.at("age").get<int>());
   47|    146|        distanceKmAver.push_back(j.at("relativeTo").at("distanceKM").get<double>());
   48|    146|        bearingAver.push_back(static_cast<int>(CARDINAL_DIRECTIONS::stringToCardinalDirectionsEnum(
   49|    146|                                                   j.at("relativeTo").at("bearingENG").get<std::string>()))
   50|    146|                              );
   51|    146|    }
   52|      8|    data.bearingENG = static_cast<CARDINAL_DIRECTIONS::CARDINAL_DIRECTIONS_ENUM>(bearingAver.mode());
   53|      8|    data.distance = distanceKmAver.average();
   54|      8|    data.timestamp = ageAver.median();
   55|      8|
   56|      8|    data.data.str(std::string());
   57|      8|    data.data << "ilość uderzeń: "<< _size << "\\n";
   58|      8|    data.data << "średni czas upłynięty od ostatniego uderzenia pioruna: "<< data.timestamp << " sek \\n";
   59|      8|    data.data << "średnia odległość ostatniego uderzenia pieruna: "<< data.distance <<" km \\n ";
   60|      8|    data.data << "kierunek uderzeń piorunów: " << CARDINAL_DIRECTIONS::cardinalDirectionsEnumToHuman(data.bearingENG);
   61|      8|
   62|      8|    if(i.size() > 0){
   63|      8|        // std::cout << "jest size: " << i.size()<<std::endl;
   64|      8|        data.riseAlarm = true;
   65|      8|    }
   66|      8|
   67|      8|    return data;
   68|      8|}
   69|       |
   70|       |bool LIGHTNING::checkLightningAlert(CARDINAL_DIRECTIONS::ALARM_INFO *info)
   71|     15|{
   72|     15|#ifdef BT_TEST
   73|     15|    std::cout << "LIGHTNING::checkLightningAlert() bool "<< info->riseAlarm <<" local " << alarmState << std::endl
   74|     15|              << " distance " << info->distance << std::endl;
   75|     15|#endif
   76|     15|    if(info->riseAlarm == false && alarmState == false){
   77|      4|#ifdef BT_TEST
   78|      4|        std::cout << "(info->riseAlarm == false || alarmState == false)"<<std::endl;
   79|      4|#endif
   80|      4|        return false;
   81|      4|    }
   82|     11|    if(info->riseAlarm == false && alarmState == true){
   83|      2|#ifdef BT_TEST
   84|      2|        std::cout << "(info->riseAlarm == false || alarmState == true)"<<std::endl;
   85|      2|#endif
   86|      2|        alarmState = false;
   87|      2|        return false;
   88|      2|    }
   89|      9|    if(info->riseAlarm == true && alarmState == false){
   90|      5|
   91|      5|#ifdef BT_TEST
   92|      5|        std::cout << "(info->riseAlarm == true || alarmState == false)"<<std::endl;
   93|      5|#endif
   94|      5|        alarmState = true;
   95|      5|        lightningTime = Clock::getTime();
   96|      5|        oldDistance = info->distance;
   97|      5|        std::cout << " w true oldDistance: "<< oldDistance <<std::endl;
   98|      5|        return true;
   99|      5|    }
  100|      4|
  101|      4|#ifdef BT_TEST
  102|      4|    std::cout << "checkLightningAlert() - dystans"<<std::endl;
  103|      4|    std::cout << "Dystans: " <<info->distance << " oldDistance: "<< oldDistance <<std::endl;
  104|      4|#endif
  105|      4|    if(oldDistance > info->distance)
  106|      1|    {
  107|      1|
  108|      1|        oldDistance = info->distance;
  109|      1|        return true;
  110|      1|    }
  111|      3|    else
  112|      3|    {
  113|      3|        oldDistance = info->distance;
  114|      3|    }
  115|      4|    ////////////////clear
  116|      4|    //oldDistance = 0.0;
  117|      4|    return false;
  118|      4|}
  119|       |

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/lightning.h:
    1|       |#ifndef LIGHTNING_H
    2|       |#define LIGHTNING_H
    3|       |#include <iostream>
    4|       |
    5|       |#include "../../libs/Statistic/statistic.h"
    6|       |#include "../../libs/useful/useful.h"
    7|       |
    8|       |#include "idomtools_useful.h"
    9|       |#include "json.hpp"
   10|       |
   11|       |class CARDINAL_DIRECTIONS{
   12|       |public:
   13|       |    enum class CARDINAL_DIRECTIONS_ENUM{
   14|       |        /*
   15|       |           N
   16|       |        NNW NNE
   17|       |      NW       NE
   18|       |   WNW		     ENE
   19|       | W				    E
   20|       |   WSW			 ESE
   21|       |      SW	   SE
   22|       |        SSW	 SSE
   23|       |           S
   24|       |    */
   25|       |
   26|       |        N = 1,NNE,NE,ENE,E,ESE,SE,SSE,S,SSW,SW,WSW,W,WNW,NW,NNW,ERROR
   27|       |    };
   28|    148|    static CARDINAL_DIRECTIONS_ENUM stringToCardinalDirectionsEnum(std::string s){
   29|    148|        if (s == "N")      return CARDINAL_DIRECTIONS_ENUM::N;
   30|    147|        else if (s == "NNE")    return CARDINAL_DIRECTIONS_ENUM::NNE;
   31|    135|        else if (s == "NE")     return CARDINAL_DIRECTIONS_ENUM::NE;
   32|    129|        else if (s == "ENE")    return CARDINAL_DIRECTIONS_ENUM::ENE;
   33|     51|        else if (s == "E")      return CARDINAL_DIRECTIONS_ENUM::E;
   34|      3|        else if (s == "ESE")    return CARDINAL_DIRECTIONS_ENUM::ESE;
   35|      3|        else if (s == "SE")     return CARDINAL_DIRECTIONS_ENUM::SE;
   36|      3|        else if (s == "SSE")    return CARDINAL_DIRECTIONS_ENUM::SSE;
   37|      3|        else if (s == "S")      return CARDINAL_DIRECTIONS_ENUM::S;
   38|      3|        else if (s == "SSW")    return CARDINAL_DIRECTIONS_ENUM::SSW;
   39|      3|        else if (s == "SW")     return CARDINAL_DIRECTIONS_ENUM::SW;
   40|      3|        else if (s == "WSW")    return CARDINAL_DIRECTIONS_ENUM::WSW;
   41|      1|        else if (s == "W")      return CARDINAL_DIRECTIONS_ENUM::W;
   42|      1|        else if (s == "WNW")    return CARDINAL_DIRECTIONS_ENUM::WNW;
   43|      1|        else if (s == "NW")     return CARDINAL_DIRECTIONS_ENUM::NW;
   44|      1|        else if (s == "NNW")    return CARDINAL_DIRECTIONS_ENUM::NNW;
   45|      1|        else                    return CARDINAL_DIRECTIONS_ENUM::ERROR;
   46|      0|    }
   47|       |
   48|      2|    static std::string cardinalDirectionsEnumToString(CARDINAL_DIRECTIONS_ENUM e){
   49|      2|        switch (e){
   50|      2|        case CARDINAL_DIRECTIONS_ENUM::N:
   51|      0|            return "N";
   52|      2|        case CARDINAL_DIRECTIONS_ENUM::NNE:
   53|      0|            return "NNE";
   54|      2|        case CARDINAL_DIRECTIONS_ENUM:: NE:
   55|      0|            return "NE";
   56|      2|        case CARDINAL_DIRECTIONS_ENUM::ENE:
   57|      0|            return "ENE";
   58|      2|        case CARDINAL_DIRECTIONS_ENUM::E:
   59|      0|            return "E";
   60|      2|        case CARDINAL_DIRECTIONS_ENUM::ESE:
   61|      1|            return "ESE";
   62|      2|        case CARDINAL_DIRECTIONS_ENUM::SE:
   63|      0|            return "SE";
   64|      2|        case CARDINAL_DIRECTIONS_ENUM::SSE:
   65|      0|            return "SSE";
   66|      2|        case CARDINAL_DIRECTIONS_ENUM::S:
   67|      0|            return "S";
   68|      2|        case CARDINAL_DIRECTIONS_ENUM::SSW:
   69|      0|            return "SSW";
   70|      2|        case CARDINAL_DIRECTIONS_ENUM::SW:
   71|      0|            return "SW";
   72|      2|        case CARDINAL_DIRECTIONS_ENUM::WSW:
   73|      0|            return "WSW";
   74|      2|        case CARDINAL_DIRECTIONS_ENUM::W:
   75|      0|            return "W";
   76|      2|        case CARDINAL_DIRECTIONS_ENUM::WNW:
   77|      0|            return "WNW";
   78|      2|        case CARDINAL_DIRECTIONS_ENUM::NW:
   79|      0|            return "NW";
   80|      2|        case CARDINAL_DIRECTIONS_ENUM::NNW:
   81|      0|            return "NNW";
   82|      2|        default:
   83|      1|            return "UNKNOWN DIRECTION";
   84|      0|        }
   85|      0|    }
   86|      8|    static std::string cardinalDirectionsEnumToHuman(CARDINAL_DIRECTIONS_ENUM e){
   87|      8|        switch (e){
   88|      8|        case CARDINAL_DIRECTIONS_ENUM::N:
   89|      0|            return "północ";
   90|      8|        case CARDINAL_DIRECTIONS_ENUM::NNE:
   91|      0|            return "północ - północny wschód";
   92|      8|        case CARDINAL_DIRECTIONS_ENUM:: NE:
   93|      0|            return "północny wschód";
   94|      8|        case CARDINAL_DIRECTIONS_ENUM::ENE:
   95|      6|            return "wschód - północny wschód";
   96|      8|        case CARDINAL_DIRECTIONS_ENUM::E:
   97|      0|            return "wschód";
   98|      8|        case CARDINAL_DIRECTIONS_ENUM::ESE:
   99|      0|            return "wschód - południowy wschód";
  100|      8|        case CARDINAL_DIRECTIONS_ENUM::SE:
  101|      0|            return "południowy wschód";
  102|      8|        case CARDINAL_DIRECTIONS_ENUM::SSE:
  103|      0|            return "południe - południowy wschód";
  104|      8|        case CARDINAL_DIRECTIONS_ENUM::S:
  105|      0|            return "południe";
  106|      8|        case CARDINAL_DIRECTIONS_ENUM::SSW:
  107|      0|            return "południe - południowy zachów";
  108|      8|        case CARDINAL_DIRECTIONS_ENUM::SW:
  109|      0|            return "południowy zachów";
  110|      8|        case CARDINAL_DIRECTIONS_ENUM::WSW:
  111|      2|            return "zachód - południowy zachów";
  112|      8|        case CARDINAL_DIRECTIONS_ENUM::W:
  113|      0|            return "zachód";
  114|      8|        case CARDINAL_DIRECTIONS_ENUM::WNW:
  115|      0|            return "zachód - północny zachód";
  116|      8|        case CARDINAL_DIRECTIONS_ENUM::NW:
  117|      0|            return "północny zachód";
  118|      8|        case CARDINAL_DIRECTIONS_ENUM::NNW:
  119|      0|            return "północ - północny zachód";
  120|      8|        default:
  121|      0|            return "UNKNOWN DIRECTION";
  122|      0|        }
  123|      0|    }
  124|       |    struct ALARM_INFO{
  125|       |        ALARM_INFO():
  126|       |            riseAlarm(false),
  127|       |            timestamp(0),
  128|       |            distance(0.0),
  129|       |            bearingENG(CARDINAL_DIRECTIONS::CARDINAL_DIRECTIONS_ENUM::ERROR)
  130|    416|        {
  131|    416|            data << "NULL";
  132|    416|        }
  133|       |        ALARM_INFO(const ALARM_INFO &s):
  134|       |            riseAlarm(s.riseAlarm),
  135|       |            data(s.data.str()),
  136|       |            timestamp(s.timestamp),
  137|       |            distance(s.distance),
  138|       |            bearingENG(s.bearingENG)
  139|      4|        {
  140|      4|        }
  141|       |        ALARM_INFO& operator = (const ALARM_INFO& s)
  142|     14|        {
  143|     14|            this->data.str(std::string());
  144|     14|            this->riseAlarm = s.riseAlarm;
  145|     14|            this->data << s.data.str();
  146|     14|            this->timestamp = s.timestamp;
  147|     14|            this->distance = s.distance;
  148|     14|            this->bearingENG = s.bearingENG;
  149|     14|            return *this;
  150|     14|        }
  151|       |
  152|       |        bool riseAlarm;
  153|       |        std::stringstream data;
  154|       |        unsigned int timestamp; //second
  155|       |        double distance; //km
  156|       |        CARDINAL_DIRECTIONS::CARDINAL_DIRECTIONS_ENUM bearingENG;
  157|       |    };
  158|       |};
  159|       |
  160|       |class LIGHTNING
  161|       |{
  162|       |public:
  163|       |    LIGHTNING();
  164|       |    ~LIGHTNING();
  165|       |    CARDINAL_DIRECTIONS::ALARM_INFO lightningAlert(nlohmann::json jj);
  166|       |    bool checkLightningAlert(CARDINAL_DIRECTIONS::ALARM_INFO* info);
  167|       |private:
  168|       |    bool alarmState = false;
  169|       |    Clock lightningTime;
  170|       |    double oldDistance = 0.0;
  171|       |};
  172|       |
  173|       |#endif // LIGHTNING_H

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/test/iDomTools_fixture.h:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "test_data.h"
    4|       |#include "../idomtools.h"
    5|       |#include "../../src/functions/functions.h"
    6|       |#include "../../RADIO_433_eq/radio_433_eq.h"
    7|       |#include "testJSON.h"
    8|       |
    9|       |class iDomTOOLS_ClassTest : public testing::Test
   10|       |{
   11|       |public:
   12|       |    TEST_JSON test_Json;
   13|       |    LIGHTNING test_lightning;
   14|       |    CARDINAL_DIRECTIONS::ALARM_INFO test_struct;
   15|       |    thread_data test_my_data;
   16|       |    iDomSTATUS test_status;
   17|       |    config test_server_set;
   18|       |    std::shared_ptr<RADIO_EQ_CONTAINER> test_rec;
   19|       |    iDOM_STATE main_iDomStatus;
   20|       |    ALERT test_alarmTime;
   21|       |    pilot_led test_pilot_led;
   22|       |    MPD_info test_ptr_MPD;
   23|       |
   24|       |    /// pointer
   25|       |    iDomTOOLS* test_idomTOOLS;
   26|       |    /////// method
   27|       |    iDomTOOLS_ClassTest()//:test_rec(&test_my_data)
   28|    199|    {
   29|    199|        std::cout << "konstruktor testu " <<std::endl;
   30|    199|    }
   31|       |    void SetUp()
   32|    198|    {
   33|    198|        std::cout << "SetUP testu iDomTOOLS_ClassTest" <<std::endl;
   34|    198|        test_rec = std::make_shared<RADIO_EQ_CONTAINER>(&test_my_data);
   35|    198|        test_server_set.TS_KEY = "key test";
   36|    198|        test_server_set.viberSender = "test sender";
   37|    198|        test_server_set.viberReceiver = {"R1","R2"};
   38|    198|        test_server_set.saveFilePath = "/mnt/ramdisk/iDomStateTest2.save";
   39|    198|        test_server_set.radio433MHzConfigFile = "/mnt/ramdisk/433_eq_conf.json";
   40|    198|        test_rec->loadConfig(test_server_set.radio433MHzConfigFile);
   41|    198|
   42|    198|        test_my_data.main_REC = test_rec;
   43|    198|        test_my_data.server_settings = &test_server_set;
   44|    198|        test_my_data.main_iDomStatus = &test_status;
   45|    198|        test_my_data.alarmTime = test_alarmTime;
   46|    198|        test_my_data.idom_all_state = main_iDomStatus;
   47|    198|        test_my_data.ptr_pilot_led = &test_pilot_led;
   48|    198|
   49|    198|        test_status.addObject("house");
   50|    198|
   51|    198|        /////////// create
   52|    198|        test_idomTOOLS = new iDomTOOLS(&test_my_data);
   53|    198|
   54|    198|        test_my_data.main_iDomTools = test_idomTOOLS;
   55|    198|        test_ptr_MPD.volume = 3;
   56|    198|        test_my_data.ptr_MPD_info = &test_ptr_MPD;
   57|    198|
   58|    198|        useful_F::myStaticData = &test_my_data;
   59|    198|    }
   60|       |
   61|       |    void TearDown()
   62|    198|    {
   63|    198|        delete test_idomTOOLS;
   64|    198|    }
   65|       |};
   66|       |

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/test/iDom_server_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <curl/curl.h>
    3|       |#include "iDomTools_fixture.h"
    4|       |
    5|       |class iDom_server_Class : public iDomTOOLS_ClassTest
    6|       |{
    7|       |protected:
    8|       |    TEST_JSON test_Json;
    9|       |    LIGHTNING test_lightning;
   10|       |    CARDINAL_DIRECTIONS::ALARM_INFO test_struct;
   11|       |    virtual void SetUp() final
   12|      1|    {
   13|      1|        std::cout << "konfiguracja przed testem iDom_server_Class " <<std::endl;
   14|      1|    }
   15|       |
   16|       |    virtual void TearDown() final
   17|      1|    {
   18|      1|        std::cout << "czyszczenie po tescie iDom_server_Class " <<std::endl;
   19|      1|    }
   20|       |};
   21|       |
   22|       |TEST_F(iDom_server_Class, LED_Strip )
   23|      1|{
   24|      1|    LED_Strip test_LED("1","60","255","255","255", "WHITE");
   25|      1|    EXPECT_STREQ(test_LED.getColorName().c_str(), "WHITE");
   26|      1|    EXPECT_STREQ(test_LED.get(0,60).c_str(),"LED:[1-60-255-255-255];");
   27|      1|    EXPECT_STREQ(test_LED.makeCommand("1","60","128","128","128").c_str(),"LED:[1-60-128-128-128];");
   28|      1|
   29|      1|    test_LED.set("1","60","0","255","0","UNKNOWN");
   30|      1|
   31|      1|    EXPECT_STREQ(test_LED.getColorName().c_str(), "UNKNOWN");
   32|      1|    EXPECT_STREQ(test_LED.get(0,60).c_str(),"LED:[1-60-0-255-0];");
   33|      1|
   34|      1|    test_LED.set(50,51,1,2,3,"BLACK");
   35|      1|
   36|      1|    EXPECT_STREQ(test_LED.getColorName().c_str(), "BLACK");
   37|      1|    EXPECT_STREQ(test_LED.get(0,60).c_str(),"LED:[50-51-1-2-3];");
   38|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/test/idomTools_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include <curl/curl.h>
    4|       |
    5|       |#include "iDomTools_fixture.h"
    6|       |
    7|       |TEST_F(iDomTOOLS_ClassTest, smog)
    8|      1|{
    9|      1|    std::string smog = test_idomTOOLS->getSmog();
   10|      1|    puts(smog.c_str());
   11|      1|    puts(" smog");
   12|      1|    ASSERT_GE(smog.size(),1);
   13|      1|
   14|      1|    unsigned int smog_int = std::stoi(smog);
   15|      1|    ASSERT_GT(smog_int,1);
   16|      1|    ASSERT_LT(smog_int,1000);
   17|      1|}
   18|       |
   19|       |TEST_F(iDomTOOLS_ClassTest, hasTemperatureChange)
   20|      1|{
   21|      1|    std::cout << "##################################### 0" <<std::endl;
   22|      1|
   23|      1|    TEST_DATA::return_send_to_arduino = "20.0:-1.0;";
   24|      1|    test_idomTOOLS->send_temperature_thingSpeak();
   25|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("outside"),TEMPERATURE_STATE::Under);
   26|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("inside"),TEMPERATURE_STATE::NoChanges);
   27|      1|    std::cout << "##################################### 1" <<std::endl;
   28|      1|
   29|      1|    TEST_DATA::return_send_to_arduino = "25.4:0.0;";
   30|      1|    test_idomTOOLS->send_temperature_thingSpeak();
   31|      1|
   32|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("outside"),TEMPERATURE_STATE::NoChanges);
   33|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("inside"),TEMPERATURE_STATE::Over);
   34|      1|
   35|      1|    std::cout << "##################################### 2" <<std::endl;
   36|      1|
   37|      1|    TEST_DATA::return_send_to_arduino = "21.0:1.0;";
   38|      1|    test_idomTOOLS->send_temperature_thingSpeak();
   39|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("outside"),TEMPERATURE_STATE::Over);
   40|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("inside"),TEMPERATURE_STATE::Under);
   41|      1|
   42|      1|    std::cout << "##################################### 3" <<std::endl;
   43|      1|    TEST_DATA::return_send_to_arduino = "21.0:5.0;";
   44|      1|    test_idomTOOLS->send_temperature_thingSpeak();
   45|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("outside"),TEMPERATURE_STATE::NoChanges);
   46|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("inside"),TEMPERATURE_STATE::NoChanges);
   47|      1|
   48|      1|    std::cout << "##################################### 4" <<std::endl;
   49|      1|    TEST_DATA::return_send_to_arduino = "21.0:4.0;";
   50|      1|    test_idomTOOLS->send_temperature_thingSpeak();
   51|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("outside"),TEMPERATURE_STATE::NoChanges);
   52|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("inside"),TEMPERATURE_STATE::NoChanges);
   53|      1|    std::cout << "##################################### 5" <<std::endl;
   54|      1|
   55|      1|    TEST_DATA::return_send_to_arduino = "31.9:11.11;";
   56|      1|    test_idomTOOLS->send_temperature_thingSpeak();
   57|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("outside"),TEMPERATURE_STATE::NoChanges);
   58|      1|    EXPECT_EQ(test_idomTOOLS->allThermometer.getLastState("inside"),TEMPERATURE_STATE::Over);
   59|      1|    std::cout << "##################################### 6" <<std::endl;
   60|      1|
   61|      1|    ////// getThermoStats
   62|      1|
   63|      1|    std::cout << "WYNIK: " << test_idomTOOLS->getThermoStats("inside") <<std::endl;
   64|      1|}
   65|       |
   66|       |TEST_F(iDomTOOLS_ClassTest, weatherAlert)
   67|      1|{
   68|      1|    std::string test_data_from_www = " <div style=\"margin:0;padding:0;width:350px;font:0.8em Lucida,Arial,sans-seri f;background:#FFC\">"
   69|      1|                                     "<p style=\"margin:1px;padding:1px;text-align:center;background:#FF9;borde \\ r:1px dotted\"><b><a href=\"http://burze.dzis.net?page=wyszukiwarka&amp;miejscowos\\ c=krakow\" target=\"_blank\" style=\"color:#00E\">krakow</a></b>"
   70|      1|                                     "<i>(50°03'N 19°57'E)</i> </p>"
   71|      1|                                     "<dl style=\"margin:1px 1px 0 1px;padding:0;cl ear:both;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:\\ center\">Zarejestrowano 54 wyładowania atmosferyczne w promieniu 300km . Najbliższe 79.76km na zachód."
   72|      1|                                     "</dl> <dl style=\"margin:1px 1px 0 1px;padding:0;cl ear:both;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align: \\ center\">Mróz, brak ostrzeżeń</dl>"
   73|      1|                                     "<dl style=\"margin:1px 1px 0 1px;padding:0;clear:both ;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:center\">  Upał, brak ostrzeżeń</dl>"
   74|      1|                                     "<dl style=\"margin:1px 1px 0 1px;padding:0;clear:both ;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:center\">  Wiatr, brak ostrzeżeń</dl>"
   75|      1|                                     "<dl style=\"margin:1px 1px 0 1px;padding:0;clear:both ;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:center\">  Opady, brak ostrzeżeń</dl>"
   76|      1|                                     "<dl style=\"margin:1px 1px 0 1px;padding:0;clear:both ;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:center\">  Burze, brak ostrzeżeń</dl>"
   77|      1|                                     "<dl style=\"margin:1px 1px 0 1px;padding:0;clear:both ;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:center\">  Trąby powietrzne, brak ostrzeżeń</dl></div>";
   78|      1|
   79|      1|    std::vector<WEATHER_ALER> test_WA;
   80|      1|    test_WA =  test_idomTOOLS->getAlert(test_data_from_www);
   81|      2|    EXPECT_EQ(1,test_WA.size()) << "ZŁY ROZMIAR VEKTORA WA";
   82|      1|}
   83|       |
   84|      1|TEST_F(iDomTOOLS_ClassTest, send_temperature_thingSpeak){
   85|      1|
   86|      1|    TEST_DATA::return_send_to_arduino = "-2.3:-2";
   87|      1|    TEST_DATA::return_httpPost_expect = "NULL";
   88|      1|    EXPECT_STREQ(TEST_DATA::return_httpPost_expect.c_str(),"NULL");
   89|      1|    test_idomTOOLS->send_temperature_thingSpeak();
   90|      1|    std::cout << "DATA: "<< TEST_DATA::return_httpPost_expect <<std::endl;
   91|      1|    EXPECT_STREQ(TEST_DATA::return_httpPost_expect.c_str(),"httpPost");
   92|      1|}
   93|       |
   94|       |TEST_F(iDomTOOLS_ClassTest, checkAlarm)
   95|      1|{
   96|      1|    blockQueue test_q;
   97|      1|    unsigned int fromVol = 48;
   98|      1|    unsigned int  toVol = 57;
   99|      1|
  100|      1|    ///////////////////////////////////// to save
  101|      1|    test_status.setObjectState("house",STATE::UNLOCK);
  102|      1|    test_status.setObjectState("music", STATE::PLAY);
  103|      1|    test_status.setObjectState("speakers", STATE::ON);
  104|      1|    test_my_data.idom_all_state.houseState = STATE::LOCK;
  105|      1|
  106|      1|    test_status.setObjectState("listwa",STATE::ON);
  107|      1|
  108|      1|    test_alarmTime.time = Clock::getTime();
  109|      1|    test_alarmTime.state = STATE::ACTIVE;
  110|      1|    test_alarmTime.toVolume = 58;
  111|      1|    test_alarmTime.fromVolume = 48;
  112|      1|    test_status.setObjectState("alarm", test_alarmTime.state);
  113|      1|    test_my_data.alarmTime = test_alarmTime;
  114|      1|    useful_F::myStaticData = &test_my_data;
  115|      1|
  116|      1|    //////////////////////////////////////////////////////////////
  117|      1|
  118|      1|    test_my_data.alarmTime.time = Clock::getTime();
  119|      1|    test_my_data.alarmTime.state = STATE::ACTIVE;
  120|      1|
  121|      1|    EXPECT_EQ(test_my_data.alarmTime.state, STATE::ACTIVE);
  122|      1|
  123|     10|    for(unsigned int i = fromVol; i<toVol; ++i)
  124|      9|    {
  125|      9|        test_idomTOOLS->checkAlarm();
  126|      9|        test_q._get();
  127|     18|        EXPECT_EQ(test_my_data.alarmTime.state, STATE::WORKING)<< "zły stan w for " << i<< " "<< toVol;
  128|     18|        EXPECT_EQ(test_my_data.ptr_MPD_info->volume, i+1) << "zły poziom glosnosci w for";
  129|      9|    }
  130|      1|
  131|      1|    test_idomTOOLS->checkAlarm();
  132|      1|
  133|      2|    EXPECT_EQ(test_my_data.alarmTime.state, STATE::DEACTIVE) << "nie jest STATE::DEACTIVE";
  134|      2|    EXPECT_EQ(test_my_data.ptr_MPD_info->volume, toVol)<< "nie inkrementowane?";
  135|      1|
  136|      1|}
  137|       |
  138|       |TEST_F(iDomTOOLS_ClassTest, homeLockPlayStopMusic)
  139|      1|{
  140|      1|    ///////////////////////////////////// to save
  141|      1|    test_status.setObjectState("house",STATE::UNDEFINE);
  142|      1|    test_status.setObjectState("music", STATE::PLAY);
  143|      1|    test_status.setObjectState("speakers", STATE::ON);
  144|      1|    test_my_data.idom_all_state.houseState = STATE::LOCK;
  145|      1|
  146|      1|    test_status.setObjectState("listwa",STATE::ON);
  147|      1|
  148|      1|    test_alarmTime.time = Clock::getTime();
  149|      1|    test_alarmTime.state = STATE::ACTIVE;
  150|      1|    test_status.setObjectState("alarm", test_alarmTime.state);
  151|      1|
  152|      1|    blockQueue test_q;
  153|      1|    test_q._clearAll();
  154|      1|    EXPECT_EQ(test_q._size(),0);
  155|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNDEFINE);
  156|      1|    test_idomTOOLS->lockHome();
  157|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::LOCK);
  158|      1|    test_idomTOOLS->MPD_play(&test_my_data);
  159|      1|    EXPECT_EQ(test_q._size(),0);
  160|      1|    test_idomTOOLS->unlockHome();
  161|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNLOCK);
  162|      1|    test_idomTOOLS->MPD_play(&test_my_data);
  163|      1|    EXPECT_EQ(test_q._size(),1);
  164|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
  165|      1|    EXPECT_EQ(test_q._size(),0);
  166|      1|    test_idomTOOLS->lockHome();
  167|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::LOCK);
  168|      1|    test_idomTOOLS->MPD_stop();
  169|      1|    EXPECT_EQ(test_q._size(),1);
  170|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP);
  171|      1|    EXPECT_EQ(test_q._size(),0);
  172|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::LOCK);
  173|      1|    std::string returnedString = test_status.getAllObjectsStateString();
  174|      1|    EXPECT_THAT(returnedString, testing::HasSubstr("LOCK"));
  175|      1|}
  176|       |
  177|       |TEST_F(iDomTOOLS_ClassTest, buttonPressed)
  178|      1|{
  179|      1|    std::string button433MHz_id = "01e7be";
  180|      1|    std::string pressedButtonName = test_idomTOOLS->buttonPressed(button433MHz_id);
  181|      1|    EXPECT_EQ(2, test_my_data.main_REC->getButtonPointerVector().size());
  182|      1|    EXPECT_STREQ(std::to_string(button433MHz_id).c_str(),
  183|      1|                 test_my_data.main_REC->getButtonPointerVector().at(1)->getID().c_str());
  184|      1|    EXPECT_STREQ(pressedButtonName.c_str(), "locker-main");
  185|      1|
  186|      1|    EXPECT_THROW(test_idomTOOLS->buttonPressed(button433MHz_id+"a"),
  187|      1|                 std::string);
  188|      1|}
  189|       |
  190|       |TEST_F(iDomTOOLS_ClassTest, button433MHzPressedAction_lockerUnlock)
  191|      1|{
  192|      1|    blockQueue test_q;
  193|      1|    test_q._clearAll();
  194|      1|
  195|      1|    test_idomTOOLS->unlockHome();
  196|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNLOCK);
  197|      1|
  198|      4|    for(auto i =0 ; i < 3; ++i){
  199|      3|        test_idomTOOLS->button433MHzPressedAction("locker-main");
  200|      3|    }
  201|      1|    EXPECT_EQ(test_status.getObjectState("house"),STATE::LOCK);
  202|      1|
  203|      1|    EXPECT_EQ(test_q._size(),1);
  204|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP);
  205|      1|
  206|      1|}
  207|       |
  208|       |TEST_F(iDomTOOLS_ClassTest, button433MHzPressedAction_lockerLock)
  209|      1|{
  210|      1|    blockQueue test_q;
  211|      1|    test_q._clearAll();
  212|      1|
  213|      2|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNDEFINE) << "nie jest UNDEFINED";
  214|      1|
  215|      1|    test_idomTOOLS->button433MHzPressedAction("locker-main");
  216|      2|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNLOCK)<< "nie jest UNLOCK";
  217|      1|
  218|      1|    EXPECT_EQ(test_q._size(),1);
  219|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
  220|      1|    EXPECT_EQ(test_q._size(),0);
  221|      1|}
  222|       |
  223|       |TEST_F(iDomTOOLS_ClassTest, button433MHzPressedAction_locker_mainLock_locker_2unlock)
  224|      1|{
  225|      1|    blockQueue test_q;
  226|      1|    test_q._clearAll();
  227|      1|
  228|      2|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNDEFINE) << "nie jest UNDEFINED";
  229|      1|
  230|      1|    test_idomTOOLS->button433MHzPressedAction("locker-main");
  231|      2|    EXPECT_EQ(test_status.getObjectState("house"),STATE::UNLOCK)<< "nie jest UNLOCK";
  232|      1|
  233|      1|    EXPECT_EQ(test_q._size(),1);
  234|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
  235|      1|    EXPECT_EQ(test_q._size(),0);
  236|      1|
  237|      1|    test_idomTOOLS->button433MHzPressedAction("locker-2");
  238|      2|    EXPECT_EQ(test_status.getObjectState("house"),STATE::LOCK)<< "nie jest UNLOCK";
  239|      1|
  240|      1|    EXPECT_EQ(test_q._size(),1);
  241|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP);
  242|      1|    EXPECT_EQ(test_q._size(),0);
  243|      1|}
  244|       |
  245|       |TEST_F(iDomTOOLS_ClassTest, testCPU_Load)
  246|      1|{
  247|      1|    std::cout <<"TEST LOAD" << std::endl;
  248|      1|    std::cout << test_idomTOOLS->getSystemInfo() << std::endl;
  249|      1|}
  250|       |TEST_F(iDomTOOLS_ClassTest, stringToCardinalDirectionsEnum)
  251|      1|{
  252|      1|    EXPECT_EQ(CARDINAL_DIRECTIONS::stringToCardinalDirectionsEnum("NWWA"),
  253|      1|              CARDINAL_DIRECTIONS::CARDINAL_DIRECTIONS_ENUM::ERROR);
  254|      1|    EXPECT_EQ(CARDINAL_DIRECTIONS::stringToCardinalDirectionsEnum("N"),
  255|      1|              CARDINAL_DIRECTIONS::CARDINAL_DIRECTIONS_ENUM::N);
  256|      1|}
  257|       |
  258|       |TEST_F(iDomTOOLS_ClassTest, cardinalDirectionsEnumToString)
  259|      1|{
  260|      1|    EXPECT_STREQ( CARDINAL_DIRECTIONS::cardinalDirectionsEnumToString(CARDINAL_DIRECTIONS::CARDINAL_DIRECTIONS_ENUM::ERROR).c_str(),
  261|      1|                  "UNKNOWN DIRECTION");
  262|      1|    EXPECT_STREQ( CARDINAL_DIRECTIONS::cardinalDirectionsEnumToString(CARDINAL_DIRECTIONS::CARDINAL_DIRECTIONS_ENUM::ESE).c_str(),
  263|      1|                  "ESE");
  264|      1|}
  265|       |
  266|       |TEST_F(iDomTOOLS_ClassTest, saveState_readState)
  267|      1|{
  268|      1|    test_status.setObjectState("house",STATE::UNLOCK);
  269|      1|    //////////////////// mpd
  270|      1|    test_status.setObjectState("music", STATE::PLAY);
  271|      1|    test_status.setObjectState("speakers", STATE::ON);
  272|      1|    test_my_data.idom_all_state.houseState = STATE::LOCK;
  273|      1|
  274|      1|    test_status.setObjectState("listwa",STATE::ON);
  275|      1|    test_alarmTime.time = Clock::getTime();
  276|      1|    test_alarmTime.state = STATE::ACTIVE;
  277|      1|    test_alarmTime.fromVolume = 0;
  278|      1|    test_alarmTime.toVolume = 100;
  279|      1|    test_alarmTime.radioID = 44;
  280|      1|    test_my_data.alarmTime = test_alarmTime;
  281|      1|    test_status.setObjectState("alarm", test_alarmTime.state);
  282|      1|
  283|      1|    test_idomTOOLS->saveState_iDom();
  284|      1|
  285|      1|    nlohmann::json testJson;
  286|      1|    std::ifstream i(test_server_set.saveFilePath);
  287|      1|    i >> testJson;
  288|      1|    EXPECT_STREQ(test_status.getObjectStateString("music").c_str(),
  289|      1|                 testJson.at("MPD").at("music").get<std::string>().c_str() );
  290|      1|    EXPECT_STREQ((test_status.getObjectStateString("alarm")).c_str(),
  291|      1|                 testJson.at("ALARM").at("alarm").get<std::string>().c_str() );
  292|      1|    EXPECT_EQ(test_alarmTime.radioID,
  293|      1|              testJson.at("ALARM").at("radioID").get<int>() );
  294|      1|    EXPECT_EQ(test_alarmTime.fromVolume,
  295|      1|              testJson.at("ALARM").at("fromVolume").get<int>() );
  296|      1|    EXPECT_EQ(test_alarmTime.toVolume,
  297|      1|              testJson.at("ALARM").at("toVolume").get<int>() );
  298|      1|
  299|      1|    ////////////////////////////////// read
  300|      1|    iDom_SAVE_STATE info(test_my_data.server_settings->saveFilePath);
  301|      1|    test_idomTOOLS->readState_iDom(info.read());
  302|      1|    EXPECT_EQ(test_my_data.alarmTime.state,STATE::ACTIVE);
  303|      1|
  304|      1|    test_my_data.server_settings->saveFilePath = "null";
  305|      1|    EXPECT_NO_THROW(test_idomTOOLS->readState_iDom(info.read()));
  306|      1|}
  307|       |
  308|       |TEST_F(iDomTOOLS_ClassTest, getLightningStruct)
  309|      1|{
  310|      1|    LIGHTNING test_lightning;
  311|      1|    test_struct = test_lightning.lightningAlert(test_Json.jj_lightning);
  312|      1|
  313|      1|    test_idomTOOLS->setLightningStruct(test_struct);
  314|      1|
  315|      1|    bool test_result = test_lightning.checkLightningAlert(&test_struct);
  316|      1|    EXPECT_TRUE(test_result);
  317|      1|
  318|      1|    auto test_alert_info = test_idomTOOLS->getLightningStruct();
  319|      1|    EXPECT_EQ(test_alert_info.timestamp,210);
  320|      1|}
  321|       |TEST_F(iDomTOOLS_ClassTest, checkLightning)
  322|      1|{
  323|      1|    test_my_data.server_settings->lightningApiURL = "http://cyniu88.no-ip.pl/test/json/lightning.json";
  324|      1|    test_idomTOOLS->checkLightning();
  325|      1|    auto test_alert_info = test_idomTOOLS->getLightningStruct();
  326|      1|    EXPECT_EQ(test_alert_info.timestamp,210);
  327|      1|}
  328|       |
  329|       |TEST_F(iDomTOOLS_ClassTest, updateTemperatureStats)
  330|      1|{
  331|      1|    TEST_DATA::return_send_to_arduino = "12:12";
  332|      1|    test_idomTOOLS->updateTemperatureStats();
  333|      1|    TEST_DATA::return_send_to_arduino = "16:16";
  334|      1|    test_idomTOOLS->updateTemperatureStats();
  335|      1|
  336|      1|    ////////////// maleje na mieskzaniu
  337|      1|    TEST_DATA::return_send_to_arduino = "12:16";
  338|      1|    test_idomTOOLS->updateTemperatureStats();
  339|      1|    EXPECT_THAT(TEST_DATA::return_viber_msg,testing::HasSubstr("temperatura maleje"));
  340|      1|    EXPECT_THAT(TEST_DATA::return_viber_msg,testing::HasSubstr("mieszkaniu"));
  341|      1|
  342|      1|    ////////////// maleje na polu
  343|      1|    TEST_DATA::return_send_to_arduino = "12:12";
  344|      1|    test_idomTOOLS->updateTemperatureStats();
  345|      1|    EXPECT_THAT(TEST_DATA::return_viber_msg,testing::HasSubstr("temperatura maleje"));
  346|      1|    EXPECT_THAT(TEST_DATA::return_viber_msg,testing::HasSubstr("polu"));
  347|      1|
  348|      1|    ////////////// rośnie na mieskzaniu
  349|      1|    TEST_DATA::return_send_to_arduino = "17:12";
  350|      1|    test_idomTOOLS->updateTemperatureStats();
  351|      1|    EXPECT_THAT(TEST_DATA::return_viber_msg,testing::HasSubstr("temperatura rośnie"));
  352|      1|    EXPECT_THAT(TEST_DATA::return_viber_msg,testing::HasSubstr("mieszkaniu"));
  353|      1|
  354|      1|    ////////////// rośnie na polu
  355|      1|    TEST_DATA::return_send_to_arduino = "17:17";
  356|      1|    test_idomTOOLS->updateTemperatureStats();
  357|      1|    EXPECT_THAT(TEST_DATA::return_viber_msg,testing::HasSubstr("temperatura rośnie"));
  358|      1|    EXPECT_THAT(TEST_DATA::return_viber_msg,testing::HasSubstr("polu"));
  359|      1|}
  360|       |
  361|       |TEST_F(iDomTOOLS_ClassTest, speakersON_OFF)
  362|      1|{
  363|      1|    EXPECT_EQ(test_status.getObjectState("speakers"), STATE::OFF);
  364|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::UNLOCK;
  365|      1|    test_idomTOOLS->turnOnSpeakers();
  366|      1|    EXPECT_EQ(test_status.getObjectState("speakers"), STATE::ON);
  367|      1|    test_idomTOOLS->turnOffSpeakers();
  368|      1|    EXPECT_EQ(test_status.getObjectState("speakers"), STATE::OFF);
  369|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::LOCK;
  370|      1|    test_idomTOOLS->turnOnSpeakers();
  371|      1|    EXPECT_EQ(test_status.getObjectState("speakers"), STATE::OFF);
  372|      1|    std::string retStr = useful_F::myStaticData->myEventHandler.run("speakers")->getEvent();
  373|      1|    EXPECT_THAT(retStr, testing::HasSubstr("speakers can not start due to home state: LOCK"));
  374|      1|}
  375|       |
  376|       |TEST_F(iDomTOOLS_ClassTest, printerON_OFF)
  377|      1|{
  378|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::UNLOCK;
  379|      1|    test_idomTOOLS->turnOnPrinter();
  380|      1|    EXPECT_EQ(test_status.getObjectState("printer"), STATE::ON);
  381|      1|    test_idomTOOLS->turnOffPrinter();
  382|      1|    EXPECT_EQ(test_status.getObjectState("printer"), STATE::OFF);
  383|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::LOCK;
  384|      1|    test_idomTOOLS->turnOnPrinter();
  385|      1|    EXPECT_EQ(test_status.getObjectState("printer"), STATE::OFF);
  386|      1|    std::string retStr = useful_F::myStaticData->myEventHandler.run("230V")->getEvent();
  387|      1|    EXPECT_THAT(retStr, testing::HasSubstr("Printer can not start due to home state: LOCK"));
  388|      1|}
  389|       |
  390|       |TEST_F(iDomTOOLS_ClassTest, getPinState)
  391|      1|{
  392|      1|    setReturnPinState(0);
  393|      1|    EXPECT_EQ(test_idomTOOLS->getPinState(0), PIN_STATE::LOW_STATE);
  394|      1|    setReturnPinState(1);
  395|      1|    EXPECT_EQ(test_idomTOOLS->getPinState(0), PIN_STATE::HIGH_STATE);
  396|      1|    setReturnPinState(4);
  397|      1|    EXPECT_EQ(test_idomTOOLS->getPinState(0), PIN_STATE::UNKNOWN_STATE);
  398|      1|}
  399|       |
  400|       |TEST_F(iDomTOOLS_ClassTest, turnOnOffPrinter)
  401|      1|{
  402|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::UNLOCK;
  403|      1|    test_status.setObjectState("printer",STATE::ON);
  404|      1|    EXPECT_EQ(test_status.getObjectState("printer"), STATE::ON);
  405|      1|    setReturnPinState(1);
  406|      1|    puts("off printer");
  407|      1|    test_idomTOOLS->turnOnOffPrinter();
  408|      1|    EXPECT_EQ(test_status.getObjectState("printer"), STATE::OFF);
  409|      1|    setReturnPinState(0);
  410|      1|    puts("on printer");
  411|      1|    test_idomTOOLS->turnOnOffPrinter();
  412|      1|    EXPECT_EQ(test_status.getObjectState("printer"), STATE::ON);
  413|      1|    setReturnPinState(4);
  414|      1|    test_idomTOOLS->turnOnOffPrinter();
  415|      1|    EXPECT_EQ(test_status.getObjectState("printer"), STATE::ON);
  416|      1|}
  417|       |
  418|       |TEST_F(iDomTOOLS_ClassTest, turn_On_Off_433MHzSwitch)
  419|      1|{
  420|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::UNLOCK;
  421|      1|    EXPECT_EQ(test_status.getObjectState("B"),STATE::UNKNOWN);
  422|      1|    test_idomTOOLS->turnOn433MHzSwitch("B");
  423|      1|    EXPECT_EQ(test_status.getObjectState("B"),STATE::ON);
  424|      1|    test_idomTOOLS->turnOff433MHzSwitch("B");
  425|      1|    EXPECT_EQ(test_status.getObjectState("B"),STATE::OFF);
  426|      1|}
  427|       |
  428|       |TEST_F(iDomTOOLS_ClassTest, turn_On_Off_fake_433MHzSwitch)
  429|      1|{
  430|      1|    EXPECT_NO_THROW(test_idomTOOLS->turnOn433MHzSwitch("B-fake"));
  431|      1|    EXPECT_NO_THROW(test_idomTOOLS->turnOff433MHzSwitch("B-fake"));
  432|      1|    EXPECT_NO_THROW(test_idomTOOLS->turnOnOff433MHzSwitch("B-fake"));
  433|      1|}
  434|       |
  435|       |TEST_F(iDomTOOLS_ClassTest, turnOnOff433MHzSwitch)
  436|      1|{
  437|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::UNLOCK;
  438|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("B"),STATE::UNKNOWN);
  439|      1|    test_my_data.main_iDomStatus->setObjectState("B",STATE::ON);
  440|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("B"),STATE::ON);
  441|      1|    test_idomTOOLS->turnOnOff433MHzSwitch("B");
  442|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("B"),STATE::OFF);
  443|      1|    test_idomTOOLS->turnOnOff433MHzSwitch("B");
  444|      1|    EXPECT_EQ(test_status.getObjectState("B"),STATE::ON);
  445|      1|
  446|      1|}
  447|       |
  448|       |TEST_F(iDomTOOLS_ClassTest, runOnSunset)
  449|      1|{
  450|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::LOCK;
  451|      1|    test_idomTOOLS->runOnSunset();
  452|      1|    std::string retStr = useful_F::myStaticData->myEventHandler.run("iDom")->getEvent();
  453|      1|    EXPECT_THAT(retStr, testing::HasSubstr("433MHz can not start due to home state: LOCK"));
  454|      1|
  455|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::UNLOCK;
  456|      1|    auto ptr = static_cast<RADIO_SWITCH*>(test_my_data.main_REC->getEqPointer("B"));
  457|      1|    ptr->m_state = STATE::ON;
  458|      1|    test_idomTOOLS->runOnSunset();
  459|      1|
  460|      1|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("B")->getState(), STATE::OFF);
  461|      1|
  462|      1|    RADIO_EQ_CONFIG cfg;
  463|      1|    cfg.sunset = "on";
  464|      1|    cfg.sunrise = "off";
  465|      1|
  466|      1|    ptr->setCode(cfg);
  467|      1|    ptr->m_state = STATE::OFF;
  468|      1|    test_idomTOOLS->runOnSunset();
  469|      1|
  470|      1|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("B")->getState(), STATE::ON);
  471|      1|}
  472|       |
  473|       |TEST_F(iDomTOOLS_ClassTest, runOnSunrise)
  474|      1|{
  475|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::LOCK;
  476|      1|    test_idomTOOLS->runOnSunrise();
  477|      1|    std::string retStr = useful_F::myStaticData->myEventHandler.run("iDom")->getEvent();
  478|      1|    EXPECT_THAT(retStr, testing::HasSubstr("433MHz can not start due to home state: LOCK"));
  479|      1|
  480|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::UNLOCK;
  481|      1|    auto ptr = static_cast<RADIO_SWITCH*>(test_my_data.main_REC->getEqPointer("B"));
  482|      1|    ptr->m_state = STATE::OFF;
  483|      1|    test_idomTOOLS->runOnSunrise();
  484|      1|
  485|      1|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("B")->getState(), STATE::ON);
  486|      1|
  487|      1|    RADIO_EQ_CONFIG cfg;
  488|      1|    cfg.sunset = "off";
  489|      1|    cfg.sunrise = "on";
  490|      1|
  491|      1|    ptr->setCode(cfg);
  492|      1|
  493|      1|    cfg.sunset = "on";
  494|      1|    cfg.sunrise = "off";
  495|      1|
  496|      1|    ptr->setCode(cfg);
  497|      1|    ptr->m_state = STATE::ON;
  498|      1|    test_idomTOOLS->runOnSunrise();
  499|      1|
  500|      1|    EXPECT_EQ(test_my_data.main_REC->getEqPointer("B")->getState(), STATE::OFF);
  501|      1|}
  502|       |
  503|       |TEST_F(iDomTOOLS_ClassTest, getSunrise_Sunset)
  504|      1|{
  505|      1|    std::string ret = test_idomTOOLS->getSunrise();
  506|      1|    EXPECT_THAT(ret, testing::HasSubstr(":"));
  507|      1|
  508|      1|    ret = test_idomTOOLS->getSunset();
  509|      1|    EXPECT_THAT(ret, testing::HasSubstr(":"));
  510|      1|
  511|      1|    ret = test_idomTOOLS->getSunrise(true);
  512|      1|    EXPECT_THAT(ret, testing::HasSubstr("Sunrise time:"));
  513|      1|
  514|      1|    ret = test_idomTOOLS->getSunset(true);
  515|      1|    EXPECT_THAT(ret, testing::HasSubstr("Sunset time:"));
  516|      1|}
  517|       |
  518|       |TEST_F(iDomTOOLS_ClassTest, getDayLenght)
  519|      1|{
  520|      1|    std::string ret = test_idomTOOLS->getDayLenght();
  521|      1|    EXPECT_THAT(ret, testing::HasSubstr(":"));
  522|      1|
  523|      1|    ret = test_idomTOOLS->getDayLenght(true);
  524|      1|    EXPECT_THAT(ret, testing::HasSubstr("Day Lenght :"));
  525|      1|}
  526|       |
  527|       |TEST_F(iDomTOOLS_ClassTest, getTextToSpeach)
  528|      1|{
  529|      1|    TEST_DATA::return_send_to_arduino = "22:23";
  530|      1|    std::string ret = test_idomTOOLS->getTextToSpeach();
  531|      1|    EXPECT_THAT(ret, testing::HasSubstr("Smog:"));
  532|      1|    std::cout << "TEXT :"<< std::endl << ret << std::endl;
  533|      1|}
  534|       |
  535|       |TEST_F(iDomTOOLS_ClassTest, mpd)
  536|      1|{
  537|      1|    MPD_info test_ptr_MPD;
  538|      1|    test_ptr_MPD.volume = 3;
  539|      1|    test_my_data.ptr_MPD_info = &test_ptr_MPD;
  540|      1|    blockQueue test_q;
  541|      1|    test_q._clearAll();
  542|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::LOCK;
  543|      1|    test_idomTOOLS->MPD_play(&test_my_data);
  544|      1|    std::string retStr = useful_F::myStaticData->myEventHandler.run("MPD")->getEvent();
  545|      1|    EXPECT_THAT(retStr, testing::HasSubstr("MPD can not start due to home state: LOCK"));
  546|      1|    EXPECT_EQ(test_q._size(), 0);
  547|      1|
  548|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::UNLOCK;
  549|      1|    test_idomTOOLS->MPD_play(&test_my_data);
  550|      1|    EXPECT_EQ(test_q._size(), 1);
  551|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
  552|      1|    EXPECT_EQ(test_q._size(), 0);
  553|      1|    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  554|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::LOCK;
  555|      1|
  556|      1|    useful_F::myStaticData->myEventHandler.run("MPD")->clearEvent();
  557|      1|    test_idomTOOLS->MPD_play(&test_my_data,2);
  558|      1|    retStr = useful_F::myStaticData->myEventHandler.run("MPD")->getEvent();
  559|      1|    EXPECT_THAT(retStr, testing::HasSubstr("MPD can not start due to home state: LOCK"));
  560|      1|    EXPECT_EQ(test_q._size(), 0);
  561|      1|
  562|      1|    useful_F::myStaticData->idom_all_state.houseState = STATE::UNLOCK;
  563|      1|    test_idomTOOLS->MPD_play(&test_my_data,2);
  564|      1|    EXPECT_EQ(test_q._size(), 1);
  565|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY_ID);
  566|      1|    EXPECT_EQ(test_q._size(), 0);
  567|      1|    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  568|      1|
  569|      1|    test_idomTOOLS->MPD_stop();
  570|      1|    EXPECT_EQ(test_q._size(), 1);
  571|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP);
  572|      1|    EXPECT_EQ(test_q._size(), 0);
  573|      1|
  574|      1|    test_idomTOOLS->MPD_next();
  575|      1|    EXPECT_EQ(test_q._size(), 1);
  576|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::NEXT);
  577|      1|    EXPECT_EQ(test_q._size(), 0);
  578|      1|
  579|      1|    test_idomTOOLS->MPD_prev();
  580|      1|    EXPECT_EQ(test_q._size(), 1);
  581|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PREV);
  582|      1|    EXPECT_EQ(test_q._size(), 0);
  583|      1|
  584|      1|    test_idomTOOLS->MPD_pause();
  585|      1|    EXPECT_EQ(test_q._size(), 1);
  586|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PAUSE );
  587|      1|    EXPECT_EQ(test_q._size(), 0);
  588|      1|
  589|      1|    test_idomTOOLS->MPD_volumeUp();
  590|      1|    EXPECT_EQ(test_q._size(), 1);
  591|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::VOLUP );
  592|      1|    EXPECT_EQ(test_q._size(), 0);
  593|      1|
  594|      1|    test_idomTOOLS->MPD_volumeDown();
  595|      1|    EXPECT_EQ(test_q._size(), 1);
  596|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::VOLDOWN );
  597|      1|    EXPECT_EQ(test_q._size(), 0);
  598|      1|
  599|      1|    test_idomTOOLS->MPD_volumeSet(&test_my_data, 99);
  600|      1|    EXPECT_EQ(test_q._size(), 1);
  601|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::VOLSET );
  602|      1|    EXPECT_EQ(test_q._size(), 0);
  603|      1|    EXPECT_EQ(test_my_data.ptr_MPD_info->volume, 99);
  604|      1|
  605|      1|    EXPECT_EQ(test_idomTOOLS->MPD_getVolume(&test_my_data),99);
  606|      1|
  607|      1|}
  608|       |
  609|       |TEST_F(iDomTOOLS_ClassTest, getTemperatureString)
  610|      1|{
  611|      1|    TEST_DATA::return_send_to_arduino = "-2:2";
  612|      1|    EXPECT_STREQ(test_my_data.main_iDomTools->getTemperatureString().c_str(), "-2:2");
  613|      1|}
  614|       |
  615|       |TEST_F(iDomTOOLS_ClassTest, cameraLED)
  616|      1|{
  617|      1|    TEST_DATA::return_httpPost = "ok.\n";
  618|      1|    test_my_data.main_iDomTools->cameraLedOFF("test_link");
  619|      1|
  620|      1|    ///////////////////////////////at day
  621|      1|    Clock::setTime_forBT_usage(12,12);
  622|      1|    test_my_data.main_iDomTools->cameraLedON("test_link");
  623|      1|
  624|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("cameraLED"), STATE::OFF);
  625|      1|    ////////////////////////////////////// at night
  626|      1|    Clock::setTime_forBT_usage(2,2);
  627|      1|    test_my_data.main_iDomTools->cameraLedON("test_link");
  628|      1|
  629|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("cameraLED"), STATE::ON);
  630|      1|}
  631|       |
  632|       |TEST_F(iDomTOOLS_ClassTest, textToSpeach)
  633|      1|{
  634|      1|    test_my_data.ptr_MPD_info->isPlay = true;
  635|      1|    test_my_data.main_iDomStatus->setObjectState("speakers", STATE::UNDEFINE);
  636|      1|
  637|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("speakers"), STATE::UNDEFINE);
  638|      1|    std::vector<std::string> test_v;
  639|      1|    test_my_data.main_iDomTools->textToSpeach(&test_v); //empty
  640|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("speakers"), STATE::UNDEFINE);
  641|      1|
  642|      1|    test_v = {"test","msg","clock"};
  643|      1|    test_my_data.ptr_MPD_info->isPlay = true;
  644|      1|    test_my_data.main_iDomTools->textToSpeach(&test_v);
  645|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("speakers"), STATE::UNDEFINE);
  646|      1|    test_my_data.ptr_MPD_info->isPlay = false;
  647|      1|    test_my_data.main_iDomTools->textToSpeach(&test_v);
  648|      1|    EXPECT_EQ(test_my_data.main_iDomStatus->getObjectState("speakers"), STATE::OFF);
  649|      1|}
  650|       |
  651|       |TEST_F(iDomTOOLS_ClassTest, getWeatherEvent)
  652|      1|{
  653|      1|    TEST_DATA::return_httpPost = "httpPost";
  654|      1|    std::string retStr = test_my_data.main_iDomTools->getWeatherEvent("test",10);
  655|      1|    EXPECT_STREQ(retStr.c_str(),"httpPost");
  656|      1|}
  657|       |
  658|       |TEST_F(iDomTOOLS_ClassTest, isItDay)
  659|      1|{
  660|      1|    Clock::setTime_forBT_usage(12,12);
  661|      1|    EXPECT_TRUE(test_my_data.main_iDomTools->isItDay());
  662|      1|    Clock::setTime_forBT_usage(2,12);
  663|      1|    EXPECT_FALSE(test_my_data.main_iDomTools->isItDay());
  664|      1|}
  665|       |
  666|       |TEST_F(iDomTOOLS_ClassTest, ledClear)
  667|      1|{
  668|      1|    TEST_DATA::return_send_to_arduino = "done";
  669|      1|    std::string retStr = test_my_data.main_iDomTools->ledClear();
  670|      1|    EXPECT_STREQ(retStr.c_str(),"done");
  671|      1|}
  672|       |
  673|       |TEST_F(iDomTOOLS_ClassTest, getAllDataSunrisesunset)
  674|      1|{
  675|      1|    EXPECT_THAT(test_my_data.main_iDomTools->getAllDataSunrisesunset(),
  676|      1|                testing::HasSubstr("Days until Y2K"));
  677|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/test/lightning_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "test_data.h"
    4|       |#include "testJSON.h"
    5|       |#include "../idomtools.h"
    6|       |
    7|       |class lightning_Class : public ::testing::Test
    8|       |{
    9|       |protected:
   10|       |    TEST_JSON test_Json;
   11|       |    LIGHTNING test_lightning;
   12|       |    CARDINAL_DIRECTIONS::ALARM_INFO test_struct;
   13|       |    virtual void SetUp() final
   14|      5|    {
   15|      5|        std::cout << "konfiguracja przed testem lightning_Class " <<std::endl;
   16|      5|    }
   17|       |
   18|       |    virtual void TearDown() final
   19|      5|    {
   20|      5|        std::cout << "czyszczenie po tescie lightning_Class " <<std::endl;
   21|      5|    }
   22|       |};
   23|       |
   24|       |TEST_F(lightning_Class, lightningAlertOFF)
   25|      1|{
   26|      1|    test_struct = test_lightning.lightningAlert(test_Json.jj_noLightning);
   27|      1|    std::cout <<std::endl << test_struct.data.str();
   28|      2|    EXPECT_FALSE(test_struct.riseAlarm) << "BRAK ALARMU";
   29|      1|}
   30|       |
   31|       |TEST_F(lightning_Class, lightningAlertON)
   32|      1|{
   33|      1|    test_struct = test_lightning.lightningAlert(test_Json.jj_lightning);
   34|      1|    std::cout <<std::endl << test_struct.data.str();
   35|      2|    EXPECT_TRUE(test_struct.riseAlarm) << "BRAK ALARMU";
   36|      1|}
   37|       |
   38|       |TEST_F(lightning_Class, checkLightningAlert)
   39|      1|{
   40|      1|
   41|      1|    nlohmann::json test_Json2 = useful_F_libs::getJson("http://cyniu88.no-ip.pl/test/json/on_lightning.json");
   42|      1|    test_struct = test_lightning.lightningAlert(test_Json.jj_noLightning);
   43|      1|
   44|      1|    bool test_result = test_lightning.checkLightningAlert(&test_struct);
   45|      1|
   46|      2|    EXPECT_FALSE(test_result) << "BRAK ALARMU 1";
   47|      1|    test_struct = test_lightning.lightningAlert(test_Json2);
   48|      1|    test_result = test_lightning.checkLightningAlert(&test_struct);
   49|      2|    EXPECT_TRUE(test_result) << "BRAK ALARMU 2";
   50|      1|    test_result = test_lightning.checkLightningAlert(&test_struct);
   51|      2|    EXPECT_FALSE(test_result) << "BRAK ALARMU 3";
   52|      1|    test_struct.riseAlarm = false;
   53|      1|    test_result = test_lightning.checkLightningAlert(&test_struct);
   54|      2|    EXPECT_FALSE(test_result) << "BRAK ALARMU 4";
   55|      1|    test_struct.riseAlarm = false;
   56|      1|    test_result = test_lightning.checkLightningAlert(&test_struct);
   57|      2|    EXPECT_FALSE(test_result) << "BRAK ALARMU 5";
   58|      1|}
   59|       |
   60|       |TEST_F(lightning_Class, checkLightningAlert_stormCloser)
   61|      1|{
   62|      1|    nlohmann::json test_Json2 = useful_F_libs::getJson("http://cyniu88.no-ip.pl/test/json/on_lightning.json");
   63|      1|
   64|      1|    test_struct = test_lightning.lightningAlert(test_Json.jj_noLightning);
   65|      1|    bool test_result = test_lightning.checkLightningAlert(&test_struct);
   66|      2|    EXPECT_FALSE(test_result) << "BRAK ALARMU 1";
   67|      1|
   68|      1|    test_struct = test_lightning.lightningAlert(test_Json2);
   69|      1|    test_result = test_lightning.checkLightningAlert(&test_struct);
   70|      2|    EXPECT_TRUE(test_result) << "BRAK ALARMU 2";
   71|      1|
   72|      1|    test_result = test_lightning.checkLightningAlert(&test_struct);
   73|      2|    EXPECT_FALSE(test_result) << "BRAK ALARMU 3";
   74|      1|
   75|      1|    test_struct = test_lightning.lightningAlert(test_Json.jj_lightning_lt15km);
   76|      1|    test_result = test_lightning.checkLightningAlert(&test_struct);
   77|      2|    EXPECT_TRUE(test_result) << "BRAK ALARMU 4";
   78|      1|
   79|      1|    test_struct = test_lightning.lightningAlert(test_Json.jj_lightning_lt15km);
   80|      1|    test_result = test_lightning.checkLightningAlert(&test_struct);
   81|      2|    EXPECT_FALSE(test_result) << "BRAK ALARMU 5";
   82|      1|
   83|      1|    test_struct = test_lightning.lightningAlert(test_Json.jj_noLightning);
   84|      1|    test_result = test_lightning.checkLightningAlert(&test_struct);
   85|      2|    EXPECT_FALSE(test_result) << "BRAK ALARMU 6";
   86|      1|
   87|      1|    test_struct = test_lightning.lightningAlert(test_Json.jj_lightning_lt15km);
   88|      1|    test_result = test_lightning.checkLightningAlert(&test_struct);
   89|      2|    EXPECT_TRUE(test_result) << "BRAK ALARMU 7";
   90|      1|}
   91|       |
   92|       |TEST_F(lightning_Class, oneLightning)
   93|      1|{
   94|      1|    test_struct = test_lightning.lightningAlert(test_Json.jj_oneLightning);
   95|      1|    bool test_result = test_lightning.checkLightningAlert(&test_struct);
   96|      1|    EXPECT_FALSE(test_result);
   97|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDom_server_OOP.h:
    1|       |#ifndef GLOBAL_H
    2|       |#define GLOBAL_H
    3|       |
    4|       |#include <iostream>
    5|       |#include <fstream>
    6|       |#include <string>
    7|       |#include <cstdlib>
    8|       |#include <pthread.h>
    9|       |#include <stdio.h>
   10|       |#include <stdlib.h>
   11|       |#include <sys/socket.h>
   12|       |#include <sys/types.h>
   13|       |#include <netinet/in.h>
   14|       |#include <vector>
   15|       |#include <thread>
   16|       |#include <arpa/inet.h>
   17|       |#include <netinet/in.h>
   18|       |#include <unistd.h>
   19|       |#include <sys/fcntl.h>
   20|       |#include <unistd.h>
   21|       |#include <errno.h>
   22|       |#include <signal.h>
   23|       |#include <time.h>
   24|       |#include <wiringPi.h>
   25|       |#include <chrono>
   26|       |#include <array>
   27|       |
   28|       |// MOJE BIBLIOTEKI
   29|       |#include "KEY/key.h"
   30|       |#include "logger/logger.hpp"
   31|       |#include "files_tree/files_tree.h"
   32|       |#include "menu_tree/menu_tree.h"
   33|       |#include "LCD_c/lcd_c.h"
   34|       |#include "command/command.h"
   35|       |#include "../libs/event_counters/event_counters_handler.h"
   36|       |#include "iDomTools/idomtools.h"
   37|       |#include "iDomStatus/idomstatus.h"
   38|       |#include "iDomSaveState/idom_save_state.h"
   39|       |
   40|    495|#define log_file_cout  f_log //std::cout zmien f_log na std::cout i bedzie wypisywac na ekran
   41|    210|#define log_file_mutex f_log
   42|       |
   43|       |enum class iDomStateEnum{
   44|       |    CLOSE = 0,
   45|       |    RELOAD,
   46|       |    ERROR,
   47|       |    WORKING,
   48|       |    HARD_RELOAD
   49|       |};
   50|       |
   51|       |namespace iDomConst
   52|       |{
   53|       |constexpr int MAX_CONNECTION = 10;
   54|       |constexpr int FREE  = 1;
   55|       |constexpr int RS232 = 11;
   56|       |constexpr int CLOCK = 12;
   57|       |constexpr int ok    = 0;
   58|       |constexpr int GPIO_SPIK = 21;
   59|       |constexpr int GPIO_PRINTER = 22;
   60|       |}
   61|       |struct ALERT
   62|       |{
   63|       |    Clock time;
   64|       |    STATE state = STATE::DEACTIVE;
   65|       |    unsigned int fromVolume = 48;
   66|       |    unsigned int toVolume = 58;
   67|       |    unsigned int radioID = 8;
   68|       |};
   69|       |
   70|       |extern std::string _logfile;
   71|       |extern Logger log_file_mutex;
   72|       |extern std::string buffer;
   73|       |
   74|       |enum class TEMPERATURE_STATE;
   75|       |enum class PILOT_KEY;
   76|       |
   77|       |struct MPD_info{
   78|       |    std::string title   = "NULL";
   79|       |    std::string radio   = "NULL";
   80|       |    std::string artist  = "NULL";
   81|       |    int volume = 0;
   82|       |    bool isPlay = false;
   83|       |    int currentSongID = 0;
   84|       |    std::vector <std::string> songList = {"NULL"};
   85|       |};
   86|       |struct s_pointer{
   87|       |    unsigned int *ptr_who;
   88|       |    int32_t *ptr_buf;
   89|       |};
   90|       |
   91|       |struct Thread_array_struc {
   92|       |    std::thread thread;
   93|       |    std::thread::id thread_ID = std::thread::id(0);
   94|       |    std::string thread_name;
   95|       |    unsigned int thread_socket = 0;
   96|       |};
   97|       |
   98|       |struct address_another_servers {
   99|       |    int id;
  100|       |    std::string SERVER_IP;
  101|       |};
  102|       |
  103|       |struct FTP_SERVER{
  104|       |    std::string URL;
  105|       |    std::string user;
  106|       |    std::string pass;
  107|       |};
  108|       |struct iDOM_STATE{
  109|       |    STATE houseState = STATE::UNDEFINE;
  110|       |
  111|       |};
  112|       |
  113|       |struct config{
  114|       |    std::string portRS232;
  115|       |    std::string portRS232_clock;
  116|       |    std::string BaudRate;
  117|       |    std::string RFLinkPort;
  118|       |    std::string RFLinkBaudRate;
  119|       |    int PORT;
  120|       |    std::string SERVER_IP;
  121|       |    std::string MPD_IP;
  122|       |    std::string MOVIES_DB_PATH;
  123|       |    std::string MENU_PATH;
  124|       |    std::string THREAD_MPD   = "NULL";
  125|       |    std::string THREAD_IRDA  = "NULL";
  126|       |    std::string THREAD_CRON  = "NULL";
  127|       |    std::string THREAD_RS232 = "NULL";
  128|       |    std::string THREAD_DUMMY = "NULL";
  129|       |    std::string TS_KEY= " gg ";
  130|       |    std::string cameraLedON = "";
  131|       |    std::string cameraLedOFF ="";
  132|       |    std::string cameraURL="";
  133|       |    std::string facebookAccessToken = "";
  134|       |    std::string viberToken = "NULL";
  135|       |    std::string viberAvatar;
  136|       |    std::vector <std::string> viberReceiver;
  137|       |    std::string viberSender;
  138|       |    std::string radio433MHzConfigFile;
  139|       |    std::string omxplayerFile = "NULL";
  140|       |    int ID_server = 0;
  141|       |    int v_delay;
  142|       |    bool encrypted = true;
  143|       |
  144|       |    FTP_SERVER ftpServer;
  145|       |    std::string lightningApiURL = "NULL";
  146|       |    std::string saveFilePath = "NULL";
  147|       |};
  148|       |
  149|       |struct LED_Strip{
  150|       |    std::string from;
  151|       |    std::string to;
  152|       |    std::string R;
  153|       |    std::string G;
  154|       |    std::string B;
  155|       |    std::string colorName;
  156|       |
  157|       |    LED_Strip (int from, int to, int r, int g, int b, std::string colorName = "NULL"):from(std::to_string(from)),
  158|       |        to(std::to_string(to)),
  159|       |        R(std::to_string(r)),
  160|       |        G(std::to_string(g)),
  161|       |        B(std::to_string(b)),
  162|       |        colorName(colorName)
  163|  1.60k|    {
  164|  1.60k|
  165|  1.60k|    }
  166|       |    LED_Strip (const std::string& from,
  167|       |               const std::string& to,
  168|       |               const std::string& r,
  169|       |               const std::string& g,
  170|       |               const std::string& b,
  171|       |               const std::string& colorName = "NULL"):
  172|       |        from(from),
  173|       |        to(to),
  174|       |        R(r),
  175|       |        G(g),
  176|       |        B(b),
  177|       |        colorName(colorName)
  178|      1|    {
  179|      1|
  180|      1|    }
  181|       |
  182|       |    void set (const std::string& from,
  183|       |              const std::string& to,
  184|       |              const std::string& r,
  185|       |              const std::string& g,
  186|       |              const std::string& b,
  187|       |              const std::string& colorName = "NULL")
  188|      1|    {
  189|      1|        this->from =from;
  190|      1|        this->to = to;
  191|      1|        R = r;
  192|      1|        G = g;
  193|      1|        B = b;
  194|      1|        this->colorName =colorName;
  195|      1|    }
  196|       |
  197|      1|    void set (int from, int to, int r, int g, int b, std::string colorName = "NULL"){
  198|      1|        this->from = std::to_string(from);
  199|      1|        this->to = std::to_string(to);
  200|      1|        R = std::to_string(r);
  201|      1|        G = std::to_string(g);
  202|      1|        B = std::to_string(b);
  203|      1|        this->colorName =colorName;
  204|      1|    }
  205|       |
  206|     12|    std::string getColorName() const{
  207|     12|        return colorName;
  208|     12|    }
  209|       |
  210|     21|    std::string get(unsigned int _from, unsigned int _to) const{
  211|     21|        if (_from != 0 || _to != 60){
  212|     10|            return "LED:["+std::to_string(_from)+"-"+std::to_string(_to)+"-"+R+"-"+G+"-"+B+"];";
  213|     10|        }
  214|     11|        return "LED:["+from+"-"+to+"-"+R+"-"+G+"-"+B+"];";
  215|     11|    }
  216|       |
  217|       |    std::string makeCommand(const std::string& from,
  218|       |                            const std::string& to,
  219|       |                            const std::string& R,
  220|       |                            const std::string& G,
  221|      1|                            const std::string& B){
  222|      1|        return "LED:["+from+"-"+to+"-"+R+"-"+G+"-"+B+"];";
  223|      1|    }
  224|       |};
  225|       |
  226|       |struct pilot_led{
  227|       |    unsigned int counter=0;
  228|       |    std::vector<LED_Strip> colorLED   = { LED_Strip(1,60,237,145,33 ,"carrot orange"),
  229|       |                                          LED_Strip(1,60,255,0,0    ,"red"),
  230|       |                                          LED_Strip(1,60,0,255,0    ,"green"),
  231|       |                                          LED_Strip(1,60,0,0,255    ,"blue"),
  232|       |                                          LED_Strip(1,60,255,255,255,"white"),
  233|       |                                          LED_Strip(1,60,255,255,0  ,"yellow"),
  234|       |                                          LED_Strip(1,60,0,255,255  ,"cyan"),
  235|       |                                          LED_Strip(1,60,255,0,255  ,"magenta")
  236|       |                                        };
  237|       |};
  238|       |
  239|       |class command; // for struc thread_data req
  240|       |class iDomTOOLS;
  241|       |class RADIO_EQ_CONTAINER;
  242|       |class RFLinkHandler;
  243|       |
  244|       |struct thread_data{
  245|       |    int s_client_sock;
  246|       |    struct sockaddr_in from;
  247|       |    struct config *server_settings = NULL;
  248|       |    struct s_pointer pointer;
  249|       |    LCD_c *mainLCD = NULL;
  250|       |    files_tree *main_tree = NULL;
  251|       |    menu_tree *main_MENU = NULL;
  252|       |    iDomTOOLS *main_iDomTools = NULL;
  253|       |    RFLinkHandler *main_RFLink = NULL;
  254|       |    std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> *main_THREAD_arr = NULL;
  255|       |    time_t start;
  256|       |    time_t now_time;
  257|       |    int sleeper;
  258|       |    std::map <std::string, std::unique_ptr <KEY> > key_map;
  259|       |    MPD_info *ptr_MPD_info = NULL;
  260|       |    pilot_led * ptr_pilot_led = NULL;
  261|       |    std::map <std::string, std::unique_ptr<command> >* commandMapPtr = NULL;
  262|       |    event_counters_handler myEventHandler;
  263|       |    std::string encriptionKey = "40%";
  264|       |    iDomSTATUS *main_iDomStatus;
  265|       |    iDOM_STATE idom_all_state;
  266|       |    ALERT alarmTime;
  267|       |    std::shared_ptr<RADIO_EQ_CONTAINER> main_REC;
  268|       |    iDomStateEnum iDomProgramState = iDomStateEnum::WORKING;
  269|       |};
  270|       |
  271|       |struct thread_data_rs232{
  272|       |    std::string portRS232;
  273|       |    std::string portRS232_clock;
  274|       |    std::string BaudRate;
  275|       |    struct s_pointer pointer;
  276|       |};
  277|       |
  278|       |#endif // GLOBAL_H

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/logger/logger.cc:
    1|       |/*
    2|       | * logger.cc
    3|       | *
    4|       | *
    5|       | * Logger Library
    6|       | *
    7|       | *
    8|       | * Copyright (C) 2013-2014  Bryant Moscon - bmoscon@gmail.com
    9|       | * 
   10|       | * Permission is hereby granted, free of charge, to any person obtaining a copy
   11|       | * of this software and associated documentation files (the "Software"), to 
   12|       | * deal in the Software without restriction, including without limitation the 
   13|       | * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
   14|       | * sell copies of the Software, and to permit persons to whom the Software is
   15|       | * furnished to do so, subject to the following conditions:
   16|       | *
   17|       | * 1. Redistributions of source code must retain the above copyright notice, 
   18|       | *    this list of conditions, and the following disclaimer.
   19|       | *
   20|       | * 2. Redistributions in binary form must reproduce the above copyright notice, 
   21|       | *    this list of conditions and the following disclaimer in the documentation 
   22|       | *    and/or other materials provided with the distribution, and in the same 
   23|       | *    place and form as other copyright, license and disclaimer information.
   24|       | *
   25|       | * 3. The end-user documentation included with the redistribution, if any, must 
   26|       | *    include the following acknowledgment: "This product includes software 
   27|       | *    developed by Bryant Moscon (http://www.bryantmoscon.org/)", in the same 
   28|       | *    place and form as other third-party acknowledgments. Alternately, this 
   29|       | *    acknowledgment may appear in the software itself, in the same form and 
   30|       | *    location as other such third-party acknowledgments.
   31|       | *
   32|       | * 4. Except as contained in this notice, the name of the author, Bryant Moscon,
   33|       | *    shall not be used in advertising or otherwise to promote the sale, use or 
   34|       | *    other dealings in this Software without prior written authorization from 
   35|       | *    the author.
   36|       | *
   37|       | *
   38|       | * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
   39|       | * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
   40|       | * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
   41|       | * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
   42|       | * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   43|       | * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
   44|       | * THE SOFTWARE.
   45|       | *
   46|       | */
   47|       |
   48|       |#include "logger.hpp"
   49|       |
   50|       |pthread_mutex_t Logger::mutex_log = PTHREAD_MUTEX_INITIALIZER;
   51|       |
   52|       |Logger::Logger(const char *f) : _file(f, std::ios::out | std::ios::app), 
   53|       |				_log(_file),
   54|       |				_level(INFO),
   55|       |				_line_level(VERBOSE)
   56|      0|{
   57|      0|  assert(_file.is_open());
   58|      0|}
  ------------------
  | Unexecuted instantiation: _ZN6LoggerC2EPKc
  ------------------
  | Unexecuted instantiation: _ZN6LoggerC1EPKc
  ------------------
   59|       |
   60|       |
   61|       |Logger::Logger(const std::string& f) : _file(f.c_str(), std::ios::out | std::ios::app), 
   62|       |				       _log(_file),
   63|       |				       _level(INFO),
   64|       |				       _line_level(VERBOSE)
   65|      1|{
   66|      1|  assert(_file.is_open());
   67|      1|}
  ------------------
  | Unexecuted instantiation: _ZN6LoggerC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  ------------------
  | _ZN6LoggerC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
  |   65|      1|{
  |   66|      1|  assert(_file.is_open());
  |   67|      1|}
  ------------------
   68|       |
   69|       |
   70|       |Logger::~Logger()
   71|      0|{
   72|      0|  if (_file.is_open()) {
   73|      0|    _log.flush();
   74|      0|    _file.close();
   75|      0|  }
   76|      0|}
   77|       |
   78|       |void Logger::set_level(const logger_level& level)
   79|      0|{
   80|      0|  _level = level;
   81|      0|}  
   82|       | 
   83|       |
   84|       |void Logger::flush()
   85|    110|{
   86|    110|  if (_line_level >= _level) {
   87|     97|    _log << get_time() << " -- [" << level_str(_line_level) << "] -- " << str();
   88|     97|    _log.flush();
   89|     97|  }
   90|     13|  else
   91|     13|  {
   92|     13|      _log << get_time() << " -- [" << level_str(_line_level) << "] -- " << str();
   93|     13|      _log.flush();
   94|     13|  }
   95|    110|
   96|    110|  str("");
   97|    110|  _line_level = VERBOSE;
   98|    110|}
   99|       |
  100|       |
  101|       |Logger& Logger::operator<<(const logger_level& level)
  102|    105|{
  103|    105|  _line_level = level;
  104|    105|  return (*this);
  105|    105|}
  106|       |
  107|       |
  108|       |Logger& Logger::operator<<(LoggerManip m)
  109|    110|{ 
  110|    110|  return m(*this);
  111|    110|}
  112|       |
  113|       |
  114|       |std::string Logger::get_time() const
  115|    110|{
  116|    110|  struct tm *timeinfo;
  117|    110|  time_t rawtime;
  118|    110|  char *time_buf;
  119|    110|  
  120|    110|  time(&rawtime);
  121|    110|  timeinfo = localtime(&rawtime);
  122|    110|  time_buf = asctime(timeinfo);
  123|    110|  
  124|    110|  std::string ret(time_buf);
  125|    110|  if (!ret.empty() && ret[ret.length() - 1] == '\n') {
  126|    110|    ret.erase(ret.length()-1);
  127|    110|  }
  128|    110|  
  129|    110|  return (ret);
  130|    110|}
  131|       |
  132|       |
  133|       |inline const char* Logger::level_str(const logger_level& level)
  134|    110|{
  135|    110|  switch (level) {
  136|    110|  case VERBOSE:
  137|      7|    return ("VERBOSE ");
  138|    110|  case DEBUG:
  139|      6|    return (" DEBUG  ");
  140|    110|  case INFO:
  141|     61|    return ("  INFO  ");
  142|    110|  case WARNING:
  143|      6|    return ("WARNING ");
  144|    110|  case ERROR:
  145|     15|    return (" ERROR  ");
  146|    110|  case CRITICAL:
  147|     14|    return ("CRITICAL");
  148|    110|  case FATAL:
  149|      1|    return (" FATAL  ");
  150|    110|  default:
  151|      0|    assert(false);
  152|    110|  } 
  153|    110|}
  154|       |void Logger::mutex_lock()
  155|    105|{
  156|    105|    pthread_mutex_lock(&Logger::mutex_log);
  157|    105|}
  158|       |
  159|       |void Logger::mutex_unlock()
  160|    105|{
  161|    105|    pthread_mutex_unlock(&Logger::mutex_log);
  162|    105|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/logger/logger.hpp:
    1|       |/*
    2|       | * logger.hpp
    3|       | *
    4|       | *
    5|       | * Logger Library Header
    6|       | *
    7|       | *
    8|       | * Copyright (C) 2013-2014  Bryant Moscon - bmoscon@gmail.com
    9|       | *
   10|       | * Permission is hereby granted, free of charge, to any person obtaining a copy
   11|       | * of this software and associated documentation files (the "Software"), to
   12|       | * deal in the Software without restriction, including without limitation the
   13|       | * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
   14|       | * sell copies of the Software, and to permit persons to whom the Software is
   15|       | * furnished to do so, subject to the following conditions:
   16|       | *
   17|       | * 1. Redistributions of source code must retain the above copyright notice,
   18|       | *    this list of conditions, and the following disclaimer.
   19|       | *
   20|       | * 2. Redistributions in binary form must reproduce the above copyright notice,
   21|       | *    this list of conditions and the following disclaimer in the documentation
   22|       | *    and/or other materials provided with the distribution, and in the same
   23|       | *    place and form as other copyright, license and disclaimer information.
   24|       | *
   25|       | * 3. The end-user documentation included with the redistribution, if any, must
   26|       | *    include the following acknowledgment: "This product includes software
   27|       | *    developed by Bryant Moscon (http://www.bryantmoscon.org/)", in the same
   28|       | *    place and form as other third-party acknowledgments. Alternately, this
   29|       | *    acknowledgment may appear in the software itself, in the same form and
   30|       | *    location as other such third-party acknowledgments.
   31|       | *
   32|       | * 4. Except as contained in this notice, the name of the author, Bryant Moscon,
   33|       | *    shall not be used in advertising or otherwise to promote the sale, use or
   34|       | *    other dealings in this Software without prior written authorization from
   35|       | *    the author.
   36|       | *
   37|       | *
   38|       | * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   39|       | * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   40|       | * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   41|       | * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   42|       | * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   43|       | * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   44|       | * THE SOFTWARE.
   45|       | *
   46|       | */
   47|       |#ifndef __LOGGER__
   48|       |#define __LOGGER__
   49|       |
   50|       |#include <fstream>
   51|       |#include <cassert>
   52|       |#include <ctime>
   53|       |#include <sstream>
   54|       |
   55|       |// Log levels
   56|       |typedef enum {
   57|       |    US =0,
   58|       |    VERBOSE,
   59|       |    DEBUG,
   60|       |    INFO,
   61|       |    WARNING,
   62|       |    ERROR,
   63|       |    CRITICAL,
   64|       |    FATAL
   65|       |} logger_level;
   66|       |
   67|       |class Logger : public std::ostringstream {
   68|       |public:
   69|       |
   70|       |    explicit Logger(const char *f);
   71|       |    explicit Logger(const std::string& f);
   72|       |    Logger (const Logger &);
   73|       |    Logger &operator= (const Logger &);
   74|       |    ~Logger();
   75|       |    static pthread_mutex_t mutex_log;
   76|       |
   77|       |    void set_level(const logger_level& level);
   78|       |    void flush();
   79|       |    void mutex_lock();
   80|       |    void mutex_unlock();
   81|       |
   82|       |    template <typename T>
   83|       |    Logger& operator<<(const T& t)
   84|    185|    {
   85|    185|        *static_cast<std::ostringstream *>(this) << t;
   86|    185|        return (*this);
   87|    185|    }
  ------------------
  | _ZN6LoggerlsIA45_cEERS_RKT_:
  |   84|      2|    {
  |   85|      2|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      2|        return (*this);
  |   87|      2|    }
  ------------------
  | _ZN6LoggerlsIA10_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS_RKT_:
  |   84|     90|    {
  |   85|     90|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     90|        return (*this);
  |   87|     90|    }
  ------------------
  | _ZN6LoggerlsIA35_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | _ZN6LoggerlsIA36_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | _ZN6LoggerlsIA43_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA30_cEERS_RKT_:
  |   84|      2|    {
  |   85|      2|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      2|        return (*this);
  |   87|      2|    }
  ------------------
  | _ZN6LoggerlsIA31_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | _ZN6LoggerlsIA39_cEERS_RKT_:
  |   84|      2|    {
  |   85|      2|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      2|        return (*this);
  |   87|      2|    }
  ------------------
  | _ZN6LoggerlsIA65_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA55_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA56_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA32_cEERS_RKT_:
  |   84|      5|    {
  |   85|      5|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      5|        return (*this);
  |   87|      5|    }
  ------------------
  | _ZN6LoggerlsIA28_cEERS_RKT_:
  |   84|      4|    {
  |   85|      4|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      4|        return (*this);
  |   87|      4|    }
  ------------------
  | _ZN6LoggerlsIA47_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA24_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA37_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA44_cEERS_RKT_
  ------------------
  | _ZN6LoggerlsIA23_cEERS_RKT_:
  |   84|      4|    {
  |   85|      4|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      4|        return (*this);
  |   87|      4|    }
  ------------------
  | _ZN6LoggerlsIA14_cEERS_RKT_:
  |   84|      6|    {
  |   85|      6|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      6|        return (*this);
  |   87|      6|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA27_cEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIiEERS_RKT_
  ------------------
  | _ZN6LoggerlsIA22_cEERS_RKT_:
  |   84|      4|    {
  |   85|      4|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      4|        return (*this);
  |   87|      4|    }
  ------------------
  | _ZN6LoggerlsIA2_cEERS_RKT_:
  |   84|      9|    {
  |   85|      9|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      9|        return (*this);
  |   87|      9|    }
  ------------------
  | _ZN6LoggerlsIA7_cEERS_RKT_:
  |   84|      4|    {
  |   85|      4|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      4|        return (*this);
  |   87|      4|    }
  ------------------
  | _ZN6LoggerlsINSt6thread2idEEERS_RKT_:
  |   84|      4|    {
  |   85|      4|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      4|        return (*this);
  |   87|      4|    }
  ------------------
  | _ZN6LoggerlsIA26_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | _ZN6LoggerlsIA3_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIPKcEERS_RKT_
  ------------------
  | _ZN6LoggerlsIA15_cEERS_RKT_:
  |   84|      5|    {
  |   85|      5|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      5|        return (*this);
  |   87|      5|    }
  ------------------
  | _ZN6LoggerlsIA29_cEERS_RKT_:
  |   84|      2|    {
  |   85|      2|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      2|        return (*this);
  |   87|      2|    }
  ------------------
  | _ZN6LoggerlsIA25_cEERS_RKT_:
  |   84|      2|    {
  |   85|      2|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      2|        return (*this);
  |   87|      2|    }
  ------------------
  | _ZN6LoggerlsIPcEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA16_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | _ZN6LoggerlsIbEERS_RKT_:
  |   84|      2|    {
  |   85|      2|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      2|        return (*this);
  |   87|      2|    }
  ------------------
  | _ZN6LoggerlsIA20_cEERS_RKT_:
  |   84|      2|    {
  |   85|      2|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      2|        return (*this);
  |   87|      2|    }
  ------------------
  | _ZN6LoggerlsIA8_cEERS_RKT_:
  |   84|      8|    {
  |   85|      8|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      8|        return (*this);
  |   87|      8|    }
  ------------------
  | _ZN6LoggerlsIA21_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
   88|       |
   89|       |    Logger& operator<<(const logger_level& level);
   90|       |    typedef Logger& (* LoggerManip)(Logger&);
   91|       |    Logger& operator<<(LoggerManip m);
   92|       |
   93|       |private:
   94|       |    std::string get_time() const;
   95|       |    inline const char* level_str(const logger_level& level);
   96|       |public:
   97|       |    std::ofstream _file;
   98|       |private:
   99|       |    std::ostream& _log;
  100|       |    logger_level _level;
  101|       |    logger_level _line_level;
  102|       |};
  103|       |
  104|       |
  105|       |namespace std { 
  106|       |inline Logger& endl(Logger& out)
  107|    110|{
  108|    110|    out.put('\n');
  109|    110|    out.flush();
  110|    110|    return (out);
  111|    110|}
  112|       |}// end namespace std
  113|       |
  114|       |#endif

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/menu_tree/menu_tree.cpp:
    1|       |#include "menu_tree.h"
    2|       |
    3|       |menu_tree::menu_tree (const std::string &path, LCD_c *mainLCD_PTR):database_path(path),w_serial( "([Ss]\\d{1,3}[Ee]\\d{1,3})")
    4|     12|{
    5|     12|    mainLCD=mainLCD_PTR;
    6|     12|
    7|     12|    i_stack.push(0);
    8|     12|    i=0;
    9|     12|    get_list(database_path);
   10|     12|}
   11|       |
   12|       |bool menu_tree::is_file() const
   13|      7|{
   14|      7|    return movie_database_vector[i].is_file;
   15|      7|}
   16|       |//std::string menu_tree::return_path( int i) const
   17|       |//{
   18|       |
   19|       |//    return movie_database_vector[i].path;
   20|       |//}
   21|       |
   22|       |//void menu_tree::get_main_list()
   23|       |//{
   24|       |//    get_list( database_path );
   25|       |//}
   26|       |void menu_tree::next()
   27|     23|{   
   28|     23|    ++i;
   29|     23|    if (get_vector_size() == i ){
   30|      2|        i=0;
   31|      2|    }
   32|     23|}
   33|       |
   34|       |void menu_tree::previous()
   35|      6|{
   36|      6|    --i;
   37|      6|    if ( i <0 )
   38|      1|    {
   39|      1|        i = get_vector_size()-1;
   40|      1|    }
   41|      6|}
   42|       |
   43|       |int menu_tree::get_vector_size () const
   44|     24|{
   45|     24|    return static_cast<int>(movie_database_vector.size());
   46|     24|}
   47|       |void menu_tree::vector_clear ()
   48|     14|{
   49|     14|    movie_database_vector.clear();
   50|     14|}
   51|       |int menu_tree::get_i()
   52|      1|{
   53|      1|    if (i_stack.size() >1 ) {
   54|      1|        int i = i_stack.top();
   55|      1|        i_stack.pop();
   56|      1|        return i;
   57|      1|    }
   58|      0|    else
   59|      0|        return 0;
   60|      1|}
   61|       |
   62|       |void menu_tree::enter_dir()
   63|      1|{
   64|      1|    i_stack.push(i); // wpisuje na stos kolejna wersje licznika i
   65|      1|    
   66|      1|    if (movie_database_vector[i].is_file == true ) {
   67|      0|
   68|      0|    }
   69|      1|    else {
   70|      1|        get_list (movie_database_vector[i].path);
   71|      1|        i=0;
   72|      1|    }
   73|      1|}
   74|       |
   75|       |void menu_tree::back_dir()
   76|      1|{
   77|      1|    if ( tree_stack.size() >1 ) {
   78|      1|        tree_stack.pop();
   79|      1|        std::string path = tree_stack.top();
   80|      1|        tree_stack.pop();
   81|      1|        i = get_i();
   82|      1|        get_list (path);
   83|      1|        return;
   84|      1|    }
   85|      0|    i = get_i();
   86|      0|    get_list (database_path);
   87|      0|    return;
   88|      0|}
   89|       |
   90|       |std::string menu_tree::show_list()
   91|     60|{
   92|     60|    if (movie_database_vector.at(i).is_file == true ) {
   93|     42|        mainLCD->printString(true,0,0,movie_database_vector[i].files_name.substr(0,16));
   94|     42|
   95|     42|        return movie_database_vector[i].files_name;
   96|     42|    }
   97|     18|    else {
   98|     18|        mainLCD->printString(true,0,0,movie_database_vector[i].files_name+" ->");
   99|     18|    }
  100|     60|
  101|     60|    return movie_database_vector[i].path;
  102|     60|}
  103|       |bool comper (const movie_database & a , const movie_database& b);
  104|       |//{
  105|       |//    return a.files_name < b.files_name;
  106|       |//}
  107|       |
  108|     14|void menu_tree::get_list(std::string path) {
  109|     14|    tree_stack.push(path);
  110|     14|    vector_clear(); // czyscimy vector
  111|     14|    std::string path2;
  112|     14|    std::string v_path ,tmp_string;
  113|     14|    // if()
  114|     14|    {
  115|     14|        sciezka = opendir( path.c_str() );
  116|     14|
  117|    108|        while(( plik = readdir( sciezka ) ) )
  118|     94|        {
  119|     94|            path2 = path;
  120|     94|            if (static_cast<int>(plik->d_type) == 4 /*&& strcmp( plik->d_name, "..") && strcmp( plik->d_name, ".")*/ )
  121|     54|            {
  122|     54|                if (!strcmp( plik->d_name, "..") || !strcmp( plik->d_name, "."))
  123|     28|                {continue;}
  124|     26|                temp.is_file = false;
  125|     26|            }
  126|     40|            else //if ( (int)plik->d_type == 8 && strcmp( plik->d_name, "..") && strcmp( plik->d_name, "."))
  127|     40|            {
  128|     40|                temp.is_file = true;
  129|     40|            }
  130|     94|
  131|     94|            v_path = path2;
  132|     66|            v_path += "/";
  133|     66|            tmp_string.assign(plik->d_name);
  134|     66|            v_path += tmp_string;
  135|     66|            temp.path = v_path;
  136|     66|            temp.files_name.assign(plik->d_name);
  137|     66|            movie_database_vector.push_back(temp);
  138|     66|
  139|     66|        } // end while
  140|     14|        sort(movie_database_vector.begin(),movie_database_vector.end(), comper);
  141|     14|        closedir( sciezka );
  142|     14|    }
  143|     14|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/thread_functions/TEST/rs232_thread_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include "../../iDom_server_OOP.h"
    3|       |#include "../rs232_thread.h"
    4|       |#include "test_data.h"
    5|       |#include "../../../iDom_server_OOP/src/iDomTools/test/iDomTools_fixture.h"
    6|       |
    7|       |std::mutex useful_F::mutex_buf;
    8|       |std::mutex useful_F::mutex_who;
    9|       |
   10|       |std::string buffer;
   11|       |
   12|       |class rs232_thread_fixture : public iDomTOOLS_ClassTest
   13|       |{
   14|       |
   15|       |};
   16|       |
   17|       |TEST_F(rs232_thread_fixture, send_Recieve_rs232_thread_fixture_clock)
   18|      1|{
   19|      1|    useful_F::go_while = true;
   20|      1|    EXPECT_EQ(useful_F::myStaticData->myEventHandler.run("RS232")->howManyEvent(), 0);
   21|      1|    thread_data_rs232 test_data_rs232;
   22|      1|    test_data_rs232.BaudRate = "9600";
   23|      1|    test_data_rs232.portRS232 = "test_port";
   24|      1|    test_data_rs232.portRS232_clock = "test_port_clock";
   25|      1|    unsigned int wh[2];
   26|      1|    test_data_rs232.pointer.ptr_who = wh;
   27|      1|    test_data_rs232.pointer.ptr_who[0] = iDomConst::CLOCK;
   28|      1|    test_data_rs232.pointer.ptr_who[1] = iDomConst::FREE;
   29|      1|    EXPECT_EQ(test_data_rs232.pointer.ptr_who[1], iDomConst::FREE);
   30|      1|
   31|      1|    SerialPi_set_recv_msg("OK");
   32|      1|    EXPECT_STREQ(TEST_DATA::serial_b.c_str(),"OK");
   33|      1|    Send_Recieve_rs232_thread(&test_data_rs232,"RS232_THREAD");
   34|      1|
   35|      1|    EXPECT_STREQ(TEST_DATA::serial_b.c_str(),"");
   36|      1|    EXPECT_EQ(test_data_rs232.pointer.ptr_who[1], iDomConst::CLOCK);
   37|      1|    EXPECT_EQ(useful_F::myStaticData->myEventHandler.run("RS232")->howManyEvent(), 0);
   38|      1|}
   39|       |
   40|       |TEST_F(rs232_thread_fixture, send_Recieve_rs232_thread_clock_empty_answer)
   41|      1|{
   42|      1|    useful_F::go_while = true;
   43|      1|    thread_data_rs232 test_data_rs232;
   44|      1|    test_data_rs232.BaudRate = "9600";
   45|      1|    test_data_rs232.portRS232 = "test_port";
   46|      1|    test_data_rs232.portRS232_clock = "test_port_clock";
   47|      1|    unsigned int test_who[2] = {iDomConst::CLOCK, iDomConst::FREE};
   48|      1|    EXPECT_EQ(test_who[1], iDomConst::FREE);
   49|      1|    test_data_rs232.pointer.ptr_who = test_who;
   50|      1|    EXPECT_EQ(useful_F::myStaticData->myEventHandler.run("RS232")->howManyEvent(), 0);
   51|      1|    SerialPi_set_recv_msg("");
   52|      1|    EXPECT_STREQ(TEST_DATA::serial_b.c_str(),"");
   53|      1|    Send_Recieve_rs232_thread(&test_data_rs232, "RS232_thread");
   54|      1|
   55|      1|    EXPECT_STREQ(TEST_DATA::serial_b.c_str(),"");
   56|      1|    EXPECT_EQ(test_data_rs232.pointer.ptr_who[1], iDomConst::CLOCK);
   57|      1|    EXPECT_EQ(useful_F::myStaticData->myEventHandler.run("RS232")->howManyEvent(), 1);
   58|      1|}
   59|       |
   60|       |TEST_F(rs232_thread_fixture, send_Recieve_rs232_thread_RS232)
   61|      1|{
   62|      1|    useful_F::go_while = true;
   63|      1|    thread_data_rs232 test_data_rs232;
   64|      1|    test_data_rs232.BaudRate = "9600";
   65|      1|    test_data_rs232.portRS232 = "test_port";
   66|      1|    test_data_rs232.portRS232_clock = "test_port_clock";
   67|      1|    unsigned int test_who[2] = {iDomConst::RS232, iDomConst::FREE};
   68|      1|    test_data_rs232.pointer.ptr_who = test_who;
   69|      1|
   70|      1|    test_data_rs232.pointer.ptr_who[0] = iDomConst::RS232;
   71|      1|    EXPECT_EQ(test_who[0], iDomConst::RS232);
   72|      1|    SerialPi_set_recv_msg("OK;");
   73|      1|    Send_Recieve_rs232_thread(&test_data_rs232,"RS232_thread");
   74|      1|
   75|      1|    EXPECT_STREQ(TEST_DATA::serial_b.c_str(),"");
   76|      1|    EXPECT_EQ(test_who[1], iDomConst::RS232);
   77|      1|}
   78|       |
   79|       |TEST_F(rs232_thread_fixture, send_Recieve_rs232_thread_FREE)
   80|      1|{
   81|      1|    EXPECT_EQ(useful_F::myStaticData->myEventHandler.run("RS232")->howManyEvent(), 0);
   82|      1|    useful_F::go_while = true;
   83|      1|    thread_data_rs232 test_data_rs232;
   84|      1|    test_data_rs232.BaudRate = "9600";
   85|      1|    test_data_rs232.portRS232 = "test_port";
   86|      1|    test_data_rs232.portRS232_clock = "test_port_clock";
   87|      1|    unsigned int test_who[2] = {iDomConst::FREE, iDomConst::FREE};
   88|      1|    test_data_rs232.pointer.ptr_who = test_who;
   89|      1|
   90|      1|    test_data_rs232.pointer.ptr_who[0] = iDomConst::FREE;
   91|      1|    EXPECT_EQ(test_who[0], iDomConst::FREE);
   92|      1|    SerialPi_set_recv_msg("TEST;");
   93|      1|    Send_Recieve_rs232_thread(&test_data_rs232,"RS232_thread");
   94|      1|
   95|      1|    EXPECT_STREQ(TEST_DATA::serial_b.c_str(),"");
   96|      1|    EXPECT_EQ(test_who[1], iDomConst::FREE);
   97|      1|    EXPECT_EQ(useful_F::myStaticData->myEventHandler.run("RS232")->howManyEvent(), 1);
   98|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/thread_functions/iDom_thread.cpp:
    1|       |#include "iDom_thread.h"
    2|       |#include "../functions/functions.h"
    3|       |#include <tuple>
    4|       |#include <array>
    5|       |#include <functional>
    6|       |
    7|       |std::string iDOM_THREAD::start_thread(const std::string& name,
    8|       |                                      std::function<void(thread_data*,const std::string& threadName)> functionToThread, //void(fn)(thread_data),
    9|       |                                      thread_data* my_data,
   10|       |                                      unsigned int thread_socket)
   11|      5|{
   12|      5|    int freeSlotID = iDOM_THREAD::findFreeThreadSlot(my_data->main_THREAD_arr);
   13|      5|
   14|      5|    if ( freeSlotID != -1)
   15|      4|    {
   16|      4|        std::size_t it = static_cast<std::size_t>(freeSlotID);
   17|      4|        my_data->main_THREAD_arr->at(it).thread = std::thread(functionToThread ,my_data, name);
   18|      4|
   19|      4|        my_data->main_THREAD_arr->at(it).thread_name   = name;
   20|      4|        my_data->main_THREAD_arr->at(it).thread_ID     = my_data->main_THREAD_arr->at(it).thread.get_id();
   21|      4|        my_data->main_THREAD_arr->at(it).thread_socket = thread_socket;
   22|      4|        my_data->main_THREAD_arr->at(it).thread.detach();
   23|      4|
   24|      4|        log_file_mutex.mutex_lock();
   25|      4|        log_file_cout << INFO << "watek " << name << " wystartowal "
   26|      4|                      << my_data->main_THREAD_arr->at(it).thread_ID << std::endl;
   27|      4|        log_file_mutex.mutex_unlock();
   28|      4|
   29|      4|        return "DONE - " + name + " STARTED";
   30|      4|    }
   31|      1|    return "not free space to new thread";
   32|      1|}
   33|       |
   34|       |std::string iDOM_THREAD::start_thread_RS232(const std::string &name,
   35|       |                                            std::function<void (thread_data_rs232 *, const std::string &)> functionToThread,
   36|       |                                            thread_data* my_data,
   37|       |                                            thread_data_rs232 *my_data_rs232,
   38|       |                                            unsigned int thread_socket)
   39|      0|{
   40|      0|    int freeSlotID = iDOM_THREAD::findFreeThreadSlot(my_data->main_THREAD_arr);
   41|      0|
   42|      0|    if ( freeSlotID != -1)
   43|      0|    {
   44|      0|        std::size_t it = static_cast<std::size_t>(freeSlotID);
   45|      0|        my_data->main_THREAD_arr->at(it).thread = std::thread(functionToThread ,my_data_rs232, name);
   46|      0|
   47|      0|        my_data->main_THREAD_arr->at(it).thread_name   = name;
   48|      0|        my_data->main_THREAD_arr->at(it).thread_ID     = my_data->main_THREAD_arr->at(it).thread.get_id();
   49|      0|        my_data->main_THREAD_arr->at(it).thread_socket = thread_socket;
   50|      0|        my_data->main_THREAD_arr->at(it).thread.detach();
   51|      0|
   52|      0|        log_file_mutex.mutex_lock();
   53|      0|        log_file_cout << INFO << "watek " << name << " wystartowal "<< my_data->main_THREAD_arr->at(it).thread_ID << std::endl;
   54|      0|        log_file_mutex.mutex_unlock();
   55|      0|
   56|      0|        return "DONE - " + name + " STARTED";
   57|      0|    }
   58|      0|    return "not free space to new thread";
   59|      0|}
   60|       |
   61|       |void iDOM_THREAD::stop_thread(const std::string& name,
   62|       |                              thread_data* my_data)
   63|      5|{
   64|      5|    try
   65|      5|    {
   66|     21|        for (std::size_t i = 0; i< iDomConst::MAX_CONNECTION; ++i)
   67|     20|        {
   68|     20|            if (my_data->main_THREAD_arr->at(i).thread_ID == std::this_thread::get_id())
   69|      4|            {
   70|      4|                my_data->main_THREAD_arr->at(i).thread_name ="  -empty-  ";
   71|      4|                my_data->main_THREAD_arr->at(i).thread_ID = std::thread::id();
   72|      4|                my_data->main_THREAD_arr->at(i).thread_socket = 0;
   73|      4|                break;
   74|      4|            }
   75|     20|        }
   76|      5|    }
   77|      5|    catch (std::system_error &e)
   78|      5|    {
   79|      0|        log_file_mutex.mutex_lock();
   80|      0|        log_file_cout << ERROR<< "zlapano wyjatek w watku: " << name << ": " << e.what()<< std::endl;
   81|      0|        log_file_mutex.mutex_unlock();
   82|      0|    }
   83|      5|
   84|      5|    log_file_mutex.mutex_lock();
   85|      5|    log_file_cout << INFO<< "koniec watku: " <<name << std::endl;
   86|      5|    log_file_mutex.mutex_unlock();
   87|      5|}
   88|       |
   89|       |void iDOM_THREAD::waitUntilAllThreadEnd(thread_data *my_data)
   90|      1|{
   91|      1|    int threadCounter = 0;
   92|      1|    int counter = 20;
   93|      1|    do{
   94|      1|        if (--counter == 0){
   95|      0|            puts("niedoczekalem sie konca watkow");
   96|      0|            break;
   97|      0|        }
   98|      1|        std::this_thread::sleep_for(std::chrono::milliseconds(1500));
   99|      1|        threadCounter = 0;
  100|     11|        for(auto i = my_data->main_THREAD_arr->begin(); i < my_data->main_THREAD_arr->end(); ++i)
  101|     10|        {
  102|     10|            threadCounter += i->thread_socket;
  103|     10|            if (i->thread_socket != 0)
  104|      0|                std::cout << "thread name: "<< i->thread_name << std::endl;
  105|     10|        }
  106|      1|        std::cout << "watki pracuja "<<threadCounter<< std::endl;
  107|      1|    } while(threadCounter != 0);
  108|      1|}
  109|       |
  110|       |
  111|       |int iDOM_THREAD::findFreeThreadSlot(std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> *array)
  112|      5|{
  113|     21|    for (std::size_t i = 0; i< array->size(); ++i)
  114|     20|    {
  115|     20|        if (array->at(i).thread_socket == 0)
  116|      4|            return static_cast<int>(i);
  117|     20|    }
  118|      5|    puts("return -1");
  119|      1|    return -1;
  120|      5|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/src/thread_functions/rs232_thread.h:
    1|       |#ifndef RS232_THREAD_H
    2|       |#define RS232_THREAD_H
    3|       |
    4|       |#include "../c_connection/c_connection.h"
    5|       |#include "../TASKER/tasker.h"
    6|       |#include "../SerialPi/serialpi.h"
    7|       |#include "../thread_functions/iDom_thread.h"
    8|       |
    9|       |//////////// watek wysylajacy/obdbierajacy dane z portu RS232 ////////
   10|      4|void Send_Recieve_rs232_thread (thread_data_rs232 *data_rs232, const std::string& threadName){
   11|      4|
   12|      4|    SerialPi serial_ardu(data_rs232->portRS232);
   13|      4|    serial_ardu.begin( std::stoi( data_rs232->BaudRate));
   14|      4|
   15|      4|    log_file_mutex.mutex_lock();
   16|      4|    log_file_cout << INFO <<"otwarcie portu RS232 " << data_rs232->portRS232 << " " <<data_rs232->BaudRate<<std::endl;
   17|      4|    log_file_mutex.mutex_unlock();
   18|      4|
   19|      4|    SerialPi serial_ardu_clock(data_rs232->portRS232_clock);
   20|      4|    serial_ardu_clock.begin( std::stoi( data_rs232->BaudRate));
   21|      4|
   22|      4|    log_file_mutex.mutex_lock();
   23|      4|    log_file_cout << INFO <<"otwarcie portu RS232_clock " << data_rs232->portRS232_clock <<" "<< data_rs232->BaudRate <<std::endl;
   24|      4|    log_file_mutex.mutex_unlock();
   25|      4|
   26|      4|    /////////////////////////////////////////////////// RESET ARDUINO AFTER RESTART ////////////////////////////////
   27|      4|    puts("restart arduino\n");
   28|      4|    //C_connection::mutex_who.lock();
   29|      4|    {
   30|      4|        std::lock_guard<std::mutex> lockWho(useful_F::mutex_who);
   31|      4|        buffer = "reset:00;";
   32|      4|        serial_ardu.print(buffer.c_str());
   33|      4|    }
   34|      4|    //C_connection::mutex_who.unlock();
   35|      4|    //puts("test testo po lock");
   36|      4|    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   37|      4|    while(useful_F::go_while)
   38|      4|    {
   39|      4|        std::this_thread::sleep_for( std::chrono::milliseconds(50));
   40|      4|        //puts("test testo po lock");
   41|      4|        { //mutex who
   42|      4|            std::lock_guard<std::mutex> lockWho(useful_F::mutex_who);
   43|      4|
   44|      4|            if(data_rs232->pointer.ptr_who[0] == iDomConst::RS232)
   45|      1|            {
   46|      1|                std::lock_guard<std::mutex> lockBuf(useful_F::mutex_buf);
   47|      1|                data_rs232->pointer.ptr_who[0] = data_rs232->pointer.ptr_who[1];
   48|      1|                data_rs232->pointer.ptr_who[1] = iDomConst::RS232;
   49|      1|                serial_ardu.print(buffer.c_str());
   50|      1|
   51|      1|                buffer.erase();
   52|      1|
   53|      3|                while(useful_F::go_while){
   54|      3|                    if(serial_ardu.available()>0){
   55|      3|                        buffer += serial_ardu.read();
   56|      3|                    }
   57|      3|                    if(buffer[buffer.size()-1] == ';')
   58|      1|                    {
   59|      1|                        buffer.erase(buffer.end()-1);
   60|      1|                        break;
   61|      1|                    }
   62|      3|                }
   63|      1|#ifdef BT_TEST
   64|      1|                useful_F::go_while = false;
   65|      1|                return;
   66|      1|#endif
   67|      1|            }
   68|      3|            else if(data_rs232->pointer.ptr_who[0] == iDomConst::CLOCK)
   69|      2|            {
   70|      2|                std::lock_guard<std::mutex> lockBuf(useful_F::mutex_buf);
   71|      2|                data_rs232->pointer.ptr_who[0] = data_rs232->pointer.ptr_who[1];
   72|      2|                data_rs232->pointer.ptr_who[1] = iDomConst::CLOCK;
   73|      2|                serial_ardu_clock.print(buffer.c_str());
   74|      2|
   75|      2|                buffer.erase();
   76|      2|
   77|      2|                while(useful_F::go_while){
   78|      2|                    if(serial_ardu_clock.available()>0)
   79|      1|                    {
   80|      1|                        buffer += serial_ardu_clock.read();
   81|      1|                        buffer += serial_ardu_clock.read();
   82|      1|                        serial_ardu_clock.flush();
   83|      1|                        break;
   84|      1|                    }
   85|      1|                    else
   86|      1|                    {
   87|      1|                        puts("w buforze serial_ardu_clock nie ma avaiable ");
   88|      1|
   89|      1|                        useful_F::myStaticData->myEventHandler.run("RS232")
   90|      1|                                ->addEvent("w buforze serial_ardu_clock nie ma avaiable ");
   91|      1|                        break;
   92|      1|                    }
   93|      2|                }
   94|      2|#ifdef BT_TEST
   95|      2|                useful_F::go_while = false;
   96|      2|                return;
   97|      2|#endif
   98|      2|            }
   99|      1|            else if(data_rs232->pointer.ptr_who[0] == iDomConst::FREE)
  100|      1|            {
  101|      1|                std::string bufor = "";
  102|      1|                if(serial_ardu.available()>0) {
  103|      1|
  104|      5|                    while (useful_F::go_while){
  105|      5|                        // std::cout << "serial_ardu.available(): "<<serial_ardu.available()<<std::endl;
  106|      5|                        if(serial_ardu.available()>0){
  107|      5|                            char t = serial_ardu.read();
  108|      5|                            // std::cout << "t: "<<t<<std::endl;
  109|      5|                            if(t == ';'){
  110|      1|                                serial_ardu.flush();
  111|      1|                                break;
  112|      1|                            }
  113|      4|                            else{
  114|      4|                                bufor.push_back(t);
  115|      4|                            }
  116|      5|                        }
  117|      5|                    }
  118|      1|                    useful_F::myStaticData->myEventHandler.run("RS232")->addEvent(bufor);
  119|      1|
  120|      1|                }
  121|      1|#ifdef BT_TEST
  122|      1|                useful_F::go_while = false;
  123|      1|                return;
  124|      1|#endif
  125|      1|            }
  126|      4|
  127|      4|        }
  128|      4|    }
  129|      4|    iDOM_THREAD::stop_thread(threadName, useful_F::myStaticData);
  130|      0|}
  131|       |#endif // RS232_THREAD_H

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/test/iDom_TESTs-CMAKE/main.cpp:
    1|       |#include <iostream>
    2|       |#include <gtest/gtest.h>
    3|       |#include <gconv.h>
    4|       |#include <fstream>
    5|       |#include <sstream>
    6|       |#include <test_data.h>
    7|       |#include "../libs/useful/useful.h"
    8|       |#include "../src/SerialPi/serialpi.h"
    9|       |#include "../src/functions/functions.h"
   10|       |
   11|     10|#define log_file_cout f_log //std::cout   zmien f_log na std::cout  i bedzie wypisywac na
   12|       |std::string  _logfile = "/mnt/ramdisk/iDom_log_BT.log";
   13|       |
   14|       |Logger log_file_mutex(_logfile);
   15|       |
   16|       |
   17|       |std::string TEST_DATA::return_send_to_arduino = "-2:-2";
   18|       |std::string TEST_DATA::return_httpPost = "ok.\n";
   19|       |std::string TEST_DATA::return_httpPost_expect = "";
   20|       |std::string TEST_DATA::return_viber_msg = "";
   21|       |std::string TEST_DATA::serial_b = "NULL";
   22|       |std::string TEST_DATA::serial_sended = "NULL";
   23|       |std::string TEST_DATA::LCD_print = "NULL";
   24|       |int TEST_DATA::test_pin = 0;
   25|       |int TEST_DATA::runLinuxCommandReturn = 0;
   26|       |
   27|       |unsigned int Clock::m_BT_H = 0;
   28|       |unsigned int Clock::m_BT_M = 0;
   29|       |
   30|      7|void SerialPi_set_recv_msg(const std::string& m){
   31|      7|    TEST_DATA::serial_b = m;
   32|      7|}
   33|       |
   34|     10|void SerialPi_set_serial_sended(const std::string& m){
   35|     10|    TEST_DATA::serial_sended = m;
   36|     10|}
   37|     61|SerialPi::SerialPi(const std::string& a):m_serial_port(10){
   38|     61|    std::cout << "SerialPi() addres: " << a << std::endl;
   39|     61|}
   40|     61|SerialPi::~SerialPi(){
   41|     61|    std::cout << "~SerialPi()" << std::endl;
   42|     61|}
   43|       |
   44|     10|void SerialPi::print(const std::string& msg){
   45|     10|    std::cout << "SerialPi::print() msg: " << msg << std::endl;
   46|     10|    SerialPi_set_serial_sended(msg);
   47|     10|}
   48|       |
   49|       |
   50|      9|void SerialPi::begin(int serialSpeed){
   51|      9|    std::cout << "SerialPi::int() serialSpeed: " << serialSpeed << std::endl;
   52|      9|}
   53|       |
   54|      3|void SerialPi::flush(){
   55|      3|    std::cout << "SerialPi::flush()" << std::endl;
   56|      3|    TEST_DATA::serial_b.clear();
   57|      3|}
   58|       |
   59|     15|int SerialPi::available(){
   60|     15|    std::cout << "SerialPi::available() " << TEST_DATA::serial_b.size() << std::endl;
   61|     15|    return static_cast<int>(TEST_DATA::serial_b.size());
   62|     15|}
   63|       |
   64|     39|char SerialPi::read(){
   65|     39|    char r = TEST_DATA::serial_b.at(0);
   66|     39|    TEST_DATA::serial_b.erase(0,1);
   67|     39|    std::cout << "SerialPi::read(): "<<r<< std::endl;
   68|     39|    return r;
   69|     39|}
   70|       |
   71|     22|void digitalWrite(int pin, int mode){}
   72|       |
   73|       |void setReturnPinState(int i)
   74|      7|{
   75|      7|    TEST_DATA::test_pin = i;
   76|      7|}
   77|       |
   78|    198|viber_API::viber_API(){}
   79|    198|void viber_API::setAccessToken(const std::string& accessToken){}
   80|    198|void viber_API::setURL(const std::string& url){}
   81|    200|void viber_API::setAvatar(const std::string& avatar){}
   82|       |std::string viber_API::sendViberMSG(const std::string& msg,
   83|       |                                    const std::string& receiver,
   84|       |                                    const std::string& senderName,
   85|       |                                    const std::string& accessToken,
   86|     11|                                    const std::string& url){
   87|     11|
   88|     11|    std::cout << "sendViberMSG() "<< msg <<" to: "<< receiver << std::endl;
   89|     11|    TEST_DATA::return_viber_msg = msg;
   90|     11|    return"{\"message_status\":\"ok\"}";
   91|     11|}
   92|       |std::string viber_API::sendViberPicture(const std::string& msg,
   93|       |                                        const std::string& image,
   94|       |                                        const std::string& receiver,
   95|       |                                        const std::string& senderName,
   96|       |                                        const std::string& accessToken ,
   97|     31|                                        const std::string& url){
   98|     31|    std::cout << "sendViberPicture() "<< msg <<" to: "<< receiver << std::endl;
   99|     31|    TEST_DATA::return_viber_msg = msg;
  100|     31|    return"{\"message_status\":\"ok\"}";
  101|     31|}
  102|    198|FACEBOOK_API::FACEBOOK_API(){}
  103|       |std::string FACEBOOK_API::postTxtOnWall(const std::string& msg,
  104|      0|                                        const std::string& accessToken ){return "";}
  105|       |std::string FACEBOOK_API::postPhotoOnWall(const std::string& url,
  106|       |                                          const std::string& msg ,
  107|      2|                                          const std::string& accessToken ){return "";}
  108|    198|void FACEBOOK_API::setAccessToken(const std::string& token){}
  109|       |
  110|     34|void LCD_c::set_lcd_STATE(int i){}
  111|    174|void LCD_c::printString(bool clear, int col, int row, const std::string& str){
  112|    174|    std::cout << "LCD_c::printString() "<< str << std::endl;
  113|    174|    TEST_DATA::LCD_print = str;
  114|    174|}
  115|       |
  116|     15|std::string useful_F_libs::httpPost(const std::string& url, int timeoutSeconds){
  117|     15|
  118|     15|    std::cout << "url: "<< url << " return "<< TEST_DATA::return_httpPost << "|"<< std::endl;
  119|     15|    TEST_DATA::return_httpPost_expect = "httpPost";
  120|     15|    return TEST_DATA::return_httpPost;
  121|     15|}
  122|      4|std::string useful_F_libs::httpPost(const std::string& url){
  123|      4|    CURL *curl;
  124|      4|    CURLcode res;
  125|      4|    std::string readBuffer;
  126|      4|    curl = curl_easy_init();
  127|      4|
  128|      4|    if(curl) {
  129|      4|        curl_easy_setopt(curl, CURLOPT_TIMEOUT, 10);
  130|      4|        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
  131|      4|        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, useful_F_libs::WriteCallback);
  132|      4|        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);
  133|      4|        res = curl_easy_perform(curl);
  134|      4|        /* Check for errors */
  135|      4|        if(res != CURLE_OK)
  136|      0|            fprintf(stderr, "curl_easy_perform() failed: %s\n",
  137|      0|                    curl_easy_strerror(res));
  138|      4|
  139|      4|        /* always cleanup */
  140|      4|        curl_easy_cleanup(curl);
  141|      4|    }
  142|      4|    curl_global_cleanup();
  143|      4|
  144|      4|    return readBuffer;
  145|      4|}
  146|       |
  147|      7|int digitalRead(int pin){ return TEST_DATA::test_pin; }
  148|       |
  149|       |class test_433
  150|       |{
  151|       |public:
  152|       |    std::string config433 = "{ \"BUTTON\": { \"locker-main\": { \"OFF\": \"NULL\", \"ON\": \"NULL\", \"id\": \"01e7be\", \"name\": \"locker-main\", \"type\": \"BUTTON\" }, \"locker-2\": { \"OFF\": \"NULL\", \"ON\": \"NULL\", \"id\": \"123456789\", \"name\": \"locker-2\", \"type\": \"BUTTON\" } }, \"SWITCH\": { \"A\": { \"OFF\": \"10;TriState;0280aa;0;OFF\", \"ON\": \"10;TriState;0280aa;0;ON\", \"id\": \"1444\", \"name\": \"A\", \"on15sec\": \"null\", \"sunrise\": \"NULL\", \"sunset\": \"NULL\",\"lock\": \"null\", \"unlock\": \"null\", \"type\": \"SWITCH\" }, \"ALARM\": { \"OFF\": \"dummyOFF\", \"ON\": \"dummyON\", \"id\": \"1223\", \"name\": \"ALARM\", \"on15sec\": \"null\", \"sunrise\": \"NULL\", \"sunset\": \"NULL\",\"lock\": \"null\", \"unlock\": \"null\", \"type\": \"SWITCH\" }, \"B\": { \"OFF\": \"10;TriState;02822a;0;OFF\", \"ON\": \"10;TriState;02822a;0;ON\", \"id\": \"1445\", \"name\": \"B\", \"on15sec\": \"10;TriState;02822a;0;ON\", \"sunrise\": \"ON\", \"sunset\": \"OFF\", \"lock\": \"null\", \"unlock\": \"null\",\"type\": \"SWITCH\" }, \"C\": { \"OFF\": \"null\", \"ON\": \"null\", \"id\": \"1446\", \"name\": \"C\", \"on15sec\": \"null\", \"sunrise\": \"OFF\", \"sunset\": \"ON\", \"lock\": \"null\", \"unlock\": \"null\",\"type\": \"SWITCH\" }, \"listwa\": { \"OFF\": \"10;Kaku;0ad04d;15;OFF\", \"ON\": \"10;Kaku;0ad04d;15;ON\", \"id\": \"1450\", \"name\": \"listwa\", \"on15sec\": \"null\", \"sunrise\": \"NULL\", \"sunset\": \"NULL\",\"lock\": \"OFF\", \"unlock\": \"ON\", \"type\": \"SWITCH\" } }, \"WEATHER\": { \"first\": { \"OFF\": \"NULL\", \"ON\": \"NULL\", \"id\": \"0704\", \"name\": \"first\", \"on15sec\": \"null\", \"sunrise\": \"NULL\", \"sunset\": \"NULL\", \"type\": \"WEATHER\" } } }";
  153|       |    std::string config433_fake = "{ \"BUTTON\": { \"locker\": { \"OFF\": \"NULL\", \"ON\": \"NULL\", \"id\": \"01e7be\", \"name\": \"locker\",  \"type\": \"BUTTON\" } }, \"SWITCH\": { \"A\": { \"OFF\": \"10;TriState;0280aa;0;OFF\", \"ON\": \"10;TriState;0280aa;0;ON\", \"id\": \"1444\", \"name\": \"A\", \"on15sec\": \"null\", \"sunrise\": \"NULL\", \"sunset\": \"NULL\",\"lock\": \"null\", \"unlock\": \"null\", \"type\": \"SWITCH\" }, \"ALARM\": { \"OFF\": \"dummyOFF\", \"ON\": \"dummyON\", \"id\": \"1223\", \"name\": \"ALARM\", \"on15sec\": \"null\", \"sunrise\": \"NULL\", \"sunset\": \"NULL\",\"lock\": \"null\", \"unlock\": \"null\", \"type\": \"SWITCH\" }, \"B\": { \"OFF\": \"10;TriState;02822a;0;OFF\", \"ON\": \"10;TriState;02822a;0;ON\", \"id\": \"1445\", \"name\": \"B\", \"on15sec\": \"null\", \"sunrise\": \"NULL\", \"sunset\": \"NULL\", \"lock\": \"null\", \"unlock\": \"null\",\"type\": \"SWITCH\" }, \"C\": { \"OFF\": \"10;TriState;02828a;0;OFF\", \"ON\": \"10;TriState;02828a;0;ON\", \"id\": \"1446\", \"name\": \"C\", \"on15sec\": \"null\", \"sunrise\": \"NULL\", \"sunset\": \"NULL\",\"lock\": \"null\", \"unlock\": \"null\", \"type\": \"SWITCH\" }, \"listwa\": { \"OFF\": \"10;Kaku;0ad04d;15;OFF\", \"ON\": \"10;Kaku;0ad04d;15;ON\", \"id\": \"1450\", \"name\": \"listwa\", \"on15sec\": \"null\", \"sunrise\": \"NULL\", \"sunset\": \"NULL\",\"lock\": \"OFF\", \"unlock\": \"null\", \"type\": \"SWITCH\" } } } }";
  154|       |
  155|       |    void makeFile(const std::string& path)
  156|      1|    {
  157|      1|        std::ofstream o(path);
  158|      1|        o << config433 ;
  159|      1|    }
  160|       |    void makeFileFake(const std::string& path)
  161|      1|    {
  162|      1|        std::ofstream o(path);
  163|      1|        o << config433_fake ;
  164|      1|    }
  165|       |};
  166|       |
  167|       |int main(int argc, char **argv)
  168|      1|{
  169|      1|    test_433 t;
  170|      1|    t.makeFile("/mnt/ramdisk/433_eq_conf.json");
  171|      1|    t.makeFileFake("/mnt/ramdisk/433_eq_conf_fake.json");
  172|      1|
  173|      1|    std::fstream ofs;
  174|      1|    ofs.open(_logfile, std::ios::out | std::ios::trunc);
  175|      1|    ofs.close(); //Using microsoft incremental linker version 14
  176|      1|
  177|      1|    pthread_mutex_init(&Logger::mutex_log, NULL);
  178|      1|
  179|      1|    log_file_mutex.mutex_lock();
  180|      1|    log_file_cout << std::endl<< std::endl<<"============================================"
  181|      1|                  << std::endl<< std::endl<< std::endl<< INFO << "START BT "<< std::endl;
  182|      1|    log_file_mutex.mutex_unlock();
  183|      1|
  184|      1|    ::testing::InitGoogleTest( &argc, argv );
  185|      1|    //::testing::GTEST_FLAG(filter) = "functions_fixture.sleepThread";
  186|      1|    //::testing::GTEST_FLAG(filter) = "event_counter_fixture.getLast1minNumberEvent";
  187|      1|    //::testing::GTEST_FLAG(filter) = "command433MHz_Class_fixture.*)";
  188|      1|    auto ret = RUN_ALL_TESTS();
  189|      1|    pthread_mutex_destroy(&Logger::mutex_log);
  190|      1|
  191|      1|    const char * PROG_INFO = " Basic TEST iDomServer: " __DATE__ ", " __TIME__;
  192|      1|    std::cout << "wersja " <<PROG_INFO <<" "<< GIT_BRANCH <<" " << GIT_COMMIT_HASH << std::endl;
  193|      1|    return ret;
  194|      1|}

/mnt/e/PROGRAMOWANIE/malina/iDom_server_OOP/test/iDom_TESTs-CMAKE/wiringPi.h:
    1|     14|#define	LOW			 0
    2|      8|#define	HIGH	1
    3|       |int digitalRead (int pin) ;
    4|       |void digitalWrite (int pin, int value) ;

